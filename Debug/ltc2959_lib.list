
ltc2959_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ae8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08008bf8  08008bf8  00009bf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090c8  080090c8  0000b1e0  2**0
                  CONTENTS
  4 .ARM          00000008  080090c8  080090c8  0000a0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090d0  080090d0  0000b1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090d0  080090d0  0000a0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090d4  080090d4  0000a0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  080090d8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  200001e0  080092b8  0000b1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  080092b8  0000b49c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b99e  00000000  00000000  0000b209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022af  00000000  00000000  00016ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00018e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b8  00000000  00000000  000199a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b20  00000000  00000000  0001a260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8a8  00000000  00000000  00032d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087699  00000000  00000000  00042628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9cc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042e4  00000000  00000000  000c9d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000cdfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008be0 	.word	0x08008be0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008be0 	.word	0x08008be0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001096:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <MX_DMA_Init+0x38>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	4a0b      	ldr	r2, [pc, #44]	@ (80010c8 <MX_DMA_Init+0x38>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6153      	str	r3, [r2, #20]
 80010a2:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <MX_DMA_Init+0x38>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2010      	movs	r0, #16
 80010b4:	f000 fd6f 	bl	8001b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80010b8:	2010      	movs	r0, #16
 80010ba:	f000 fd88 	bl	8001bce <HAL_NVIC_EnableIRQ>

}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000

080010cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e0:	4b24      	ldr	r3, [pc, #144]	@ (8001174 <MX_GPIO_Init+0xa8>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a23      	ldr	r2, [pc, #140]	@ (8001174 <MX_GPIO_Init+0xa8>)
 80010e6:	f043 0310 	orr.w	r3, r3, #16
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b21      	ldr	r3, [pc, #132]	@ (8001174 <MX_GPIO_Init+0xa8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001174 <MX_GPIO_Init+0xa8>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001174 <MX_GPIO_Init+0xa8>)
 80010fe:	f043 0320 	orr.w	r3, r3, #32
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b1b      	ldr	r3, [pc, #108]	@ (8001174 <MX_GPIO_Init+0xa8>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0320 	and.w	r3, r3, #32
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <MX_GPIO_Init+0xa8>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a17      	ldr	r2, [pc, #92]	@ (8001174 <MX_GPIO_Init+0xa8>)
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <MX_GPIO_Init+0xa8>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001128:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <MX_GPIO_Init+0xa8>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a11      	ldr	r2, [pc, #68]	@ (8001174 <MX_GPIO_Init+0xa8>)
 800112e:	f043 0308 	orr.w	r3, r3, #8
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <MX_GPIO_Init+0xa8>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001146:	480c      	ldr	r0, [pc, #48]	@ (8001178 <MX_GPIO_Init+0xac>)
 8001148:	f001 f840 	bl	80021cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800114c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001152:	2301      	movs	r3, #1
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2302      	movs	r3, #2
 800115c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 0310 	add.w	r3, r7, #16
 8001162:	4619      	mov	r1, r3
 8001164:	4804      	ldr	r0, [pc, #16]	@ (8001178 <MX_GPIO_Init+0xac>)
 8001166:	f000 fead 	bl	8001ec4 <HAL_GPIO_Init>

}
 800116a:	bf00      	nop
 800116c:	3720      	adds	r7, #32
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000
 8001178:	40011000 	.word	0x40011000

0800117c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <MX_I2C1_Init+0x50>)
 8001182:	4a13      	ldr	r2, [pc, #76]	@ (80011d0 <MX_I2C1_Init+0x54>)
 8001184:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <MX_I2C1_Init+0x50>)
 8001188:	4a12      	ldr	r2, [pc, #72]	@ (80011d4 <MX_I2C1_Init+0x58>)
 800118a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800118c:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <MX_I2C1_Init+0x50>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <MX_I2C1_Init+0x50>)
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001198:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <MX_I2C1_Init+0x50>)
 800119a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800119e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <MX_I2C1_Init+0x50>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011a6:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <MX_I2C1_Init+0x50>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ac:	4b07      	ldr	r3, [pc, #28]	@ (80011cc <MX_I2C1_Init+0x50>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <MX_I2C1_Init+0x50>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b8:	4804      	ldr	r0, [pc, #16]	@ (80011cc <MX_I2C1_Init+0x50>)
 80011ba:	f001 f839 	bl	8002230 <HAL_I2C_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011c4:	f000 f9b9 	bl	800153a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200001fc 	.word	0x200001fc
 80011d0:	40005400 	.word	0x40005400
 80011d4:	00061a80 	.word	0x00061a80

080011d8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <MX_I2C2_Init+0x50>)
 80011de:	4a13      	ldr	r2, [pc, #76]	@ (800122c <MX_I2C2_Init+0x54>)
 80011e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80011e2:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <MX_I2C2_Init+0x50>)
 80011e4:	4a12      	ldr	r2, [pc, #72]	@ (8001230 <MX_I2C2_Init+0x58>)
 80011e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <MX_I2C2_Init+0x50>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001228 <MX_I2C2_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <MX_I2C2_Init+0x50>)
 80011f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001228 <MX_I2C2_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001202:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <MX_I2C2_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001208:	4b07      	ldr	r3, [pc, #28]	@ (8001228 <MX_I2C2_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <MX_I2C2_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001214:	4804      	ldr	r0, [pc, #16]	@ (8001228 <MX_I2C2_Init+0x50>)
 8001216:	f001 f80b 	bl	8002230 <HAL_I2C_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001220:	f000 f98b 	bl	800153a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000250 	.word	0x20000250
 800122c:	40005800 	.word	0x40005800
 8001230:	00061a80 	.word	0x00061a80

08001234 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	@ 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0318 	add.w	r3, r7, #24
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a3e      	ldr	r2, [pc, #248]	@ (8001348 <HAL_I2C_MspInit+0x114>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d14a      	bne.n	80012ea <HAL_I2C_MspInit+0xb6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001254:	4b3d      	ldr	r3, [pc, #244]	@ (800134c <HAL_I2C_MspInit+0x118>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a3c      	ldr	r2, [pc, #240]	@ (800134c <HAL_I2C_MspInit+0x118>)
 800125a:	f043 0308 	orr.w	r3, r3, #8
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b3a      	ldr	r3, [pc, #232]	@ (800134c <HAL_I2C_MspInit+0x118>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0308 	and.w	r3, r3, #8
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800126c:	23c0      	movs	r3, #192	@ 0xc0
 800126e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001270:	2312      	movs	r3, #18
 8001272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	f107 0318 	add.w	r3, r7, #24
 800127c:	4619      	mov	r1, r3
 800127e:	4834      	ldr	r0, [pc, #208]	@ (8001350 <HAL_I2C_MspInit+0x11c>)
 8001280:	f000 fe20 	bl	8001ec4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001284:	4b31      	ldr	r3, [pc, #196]	@ (800134c <HAL_I2C_MspInit+0x118>)
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	4a30      	ldr	r2, [pc, #192]	@ (800134c <HAL_I2C_MspInit+0x118>)
 800128a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800128e:	61d3      	str	r3, [r2, #28]
 8001290:	4b2e      	ldr	r3, [pc, #184]	@ (800134c <HAL_I2C_MspInit+0x118>)
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800129c:	4b2d      	ldr	r3, [pc, #180]	@ (8001354 <HAL_I2C_MspInit+0x120>)
 800129e:	4a2e      	ldr	r2, [pc, #184]	@ (8001358 <HAL_I2C_MspInit+0x124>)
 80012a0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001354 <HAL_I2C_MspInit+0x120>)
 80012a4:	2210      	movs	r2, #16
 80012a6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001354 <HAL_I2C_MspInit+0x120>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012ae:	4b29      	ldr	r3, [pc, #164]	@ (8001354 <HAL_I2C_MspInit+0x120>)
 80012b0:	2280      	movs	r2, #128	@ 0x80
 80012b2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012b4:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <HAL_I2C_MspInit+0x120>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ba:	4b26      	ldr	r3, [pc, #152]	@ (8001354 <HAL_I2C_MspInit+0x120>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80012c0:	4b24      	ldr	r3, [pc, #144]	@ (8001354 <HAL_I2C_MspInit+0x120>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012c6:	4b23      	ldr	r3, [pc, #140]	@ (8001354 <HAL_I2C_MspInit+0x120>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80012cc:	4821      	ldr	r0, [pc, #132]	@ (8001354 <HAL_I2C_MspInit+0x120>)
 80012ce:	f000 fc99 	bl	8001c04 <HAL_DMA_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 80012d8:	f000 f92f 	bl	800153a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a1d      	ldr	r2, [pc, #116]	@ (8001354 <HAL_I2C_MspInit+0x120>)
 80012e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001354 <HAL_I2C_MspInit+0x120>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80012e8:	e029      	b.n	800133e <HAL_I2C_MspInit+0x10a>
  else if(i2cHandle->Instance==I2C2)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a1b      	ldr	r2, [pc, #108]	@ (800135c <HAL_I2C_MspInit+0x128>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d124      	bne.n	800133e <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f4:	4b15      	ldr	r3, [pc, #84]	@ (800134c <HAL_I2C_MspInit+0x118>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a14      	ldr	r2, [pc, #80]	@ (800134c <HAL_I2C_MspInit+0x118>)
 80012fa:	f043 0308 	orr.w	r3, r3, #8
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <HAL_I2C_MspInit+0x118>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800130c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001312:	2312      	movs	r3, #18
 8001314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131a:	f107 0318 	add.w	r3, r7, #24
 800131e:	4619      	mov	r1, r3
 8001320:	480b      	ldr	r0, [pc, #44]	@ (8001350 <HAL_I2C_MspInit+0x11c>)
 8001322:	f000 fdcf 	bl	8001ec4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HAL_I2C_MspInit+0x118>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a08      	ldr	r2, [pc, #32]	@ (800134c <HAL_I2C_MspInit+0x118>)
 800132c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001330:	61d3      	str	r3, [r2, #28]
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_I2C_MspInit+0x118>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	@ 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40005400 	.word	0x40005400
 800134c:	40021000 	.word	0x40021000
 8001350:	40010c00 	.word	0x40010c00
 8001354:	200002a4 	.word	0x200002a4
 8001358:	4002006c 	.word	0x4002006c
 800135c:	40005800 	.word	0x40005800

08001360 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 1000);
 8001368:	1d39      	adds	r1, r7, #4
 800136a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800136e:	2201      	movs	r2, #1
 8001370:	4803      	ldr	r0, [pc, #12]	@ (8001380 <__io_putchar+0x20>)
 8001372:	f002 fd51 	bl	8003e18 <HAL_UART_Transmit>
  return ch;
 8001376:	687b      	ldr	r3, [r7, #4]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000304 	.word	0x20000304

08001384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001388:	f000 faa8 	bl	80018dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138c:	f000 f890 	bl	80014b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001390:	f7ff fe9c 	bl	80010cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001394:	f7ff fe7c 	bl	8001090 <MX_DMA_Init>
  MX_I2C2_Init();
 8001398:	f7ff ff1e 	bl	80011d8 <MX_I2C2_Init>
  MX_I2C1_Init();
 800139c:	f7ff feee 	bl	800117c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80013a0:	f000 fa02 	bl	80017a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("LTC2959 Begin\n\r");
 80013a4:	4833      	ldr	r0, [pc, #204]	@ (8001474 <main+0xf0>)
 80013a6:	f003 ffd9 	bl	800535c <iprintf>
  while(HAL_I2C_IsDeviceReady(&LTC2959_I2C_PORT, LTC2959_I2C_ADDR, 100, 1000) != HAL_OK);	// wait for it to come alive
 80013aa:	bf00      	nop
 80013ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013b0:	2264      	movs	r2, #100	@ 0x64
 80013b2:	21c6      	movs	r1, #198	@ 0xc6
 80013b4:	4830      	ldr	r0, [pc, #192]	@ (8001478 <main+0xf4>)
 80013b6:	f001 fbed 	bl	8002b94 <HAL_I2C_IsDeviceReady>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1f5      	bne.n	80013ac <main+0x28>
  LTC2959_Init(&ltc2959);
 80013c0:	482e      	ldr	r0, [pc, #184]	@ (800147c <main+0xf8>)
 80013c2:	f002 ffbe 	bl	8004342 <LTC2959_Init>
  HAL_Delay(1000);
 80013c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013ca:	f000 fae9 	bl	80019a0 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  tick = HAL_GetTick();
 80013ce:	f000 fadd 	bl	800198c <HAL_GetTick>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a2a      	ldr	r2, [pc, #168]	@ (8001480 <main+0xfc>)
 80013d6:	6013      	str	r3, [r2, #0]

	  if(tick - prev_tick >= blink_delay){
 80013d8:	4b29      	ldr	r3, [pc, #164]	@ (8001480 <main+0xfc>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b29      	ldr	r3, [pc, #164]	@ (8001484 <main+0x100>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	4a29      	ldr	r2, [pc, #164]	@ (8001488 <main+0x104>)
 80013e4:	8812      	ldrh	r2, [r2, #0]
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d308      	bcc.n	80013fc <main+0x78>
		  prev_tick = tick;
 80013ea:	4b25      	ldr	r3, [pc, #148]	@ (8001480 <main+0xfc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a25      	ldr	r2, [pc, #148]	@ (8001484 <main+0x100>)
 80013f0:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80013f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013f6:	4825      	ldr	r0, [pc, #148]	@ (800148c <main+0x108>)
 80013f8:	f000 ff00 	bl	80021fc <HAL_GPIO_TogglePin>
	  }
	  if(tick - prev_print_delay >= print_delay){
 80013fc:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <main+0xfc>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b23      	ldr	r3, [pc, #140]	@ (8001490 <main+0x10c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	1ad2      	subs	r2, r2, r3
 8001406:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <main+0x110>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	429a      	cmp	r2, r3
 800140c:	d3df      	bcc.n	80013ce <main+0x4a>
		  voltage = LTC2959_Get_Voltage();
 800140e:	f003 f80b 	bl	8004428 <LTC2959_Get_Voltage>
 8001412:	4603      	mov	r3, r0
 8001414:	4a20      	ldr	r2, [pc, #128]	@ (8001498 <main+0x114>)
 8001416:	6013      	str	r3, [r2, #0]
		  printf("LTC2959_Voltage = %.4f\n\r", voltage);
 8001418:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <main+0x114>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f803 	bl	8000428 <__aeabi_f2d>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	481d      	ldr	r0, [pc, #116]	@ (800149c <main+0x118>)
 8001428:	f003 ff98 	bl	800535c <iprintf>
		  current = LTC2959_Get_Current();
 800142c:	f003 f83a 	bl	80044a4 <LTC2959_Get_Current>
 8001430:	4603      	mov	r3, r0
 8001432:	4a1b      	ldr	r2, [pc, #108]	@ (80014a0 <main+0x11c>)
 8001434:	6013      	str	r3, [r2, #0]
		  printf("LTC2959_current = %.4f\n\r", current);
 8001436:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <main+0x11c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7fe fff4 	bl	8000428 <__aeabi_f2d>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4817      	ldr	r0, [pc, #92]	@ (80014a4 <main+0x120>)
 8001446:	f003 ff89 	bl	800535c <iprintf>
		  charge = LTC2959_Get_Acc_Charge();
 800144a:	f002 ffa5 	bl	8004398 <LTC2959_Get_Acc_Charge>
 800144e:	4603      	mov	r3, r0
 8001450:	4a15      	ldr	r2, [pc, #84]	@ (80014a8 <main+0x124>)
 8001452:	6013      	str	r3, [r2, #0]
		  printf("LTC2959_charge = %.4f\n\r\v", charge);
 8001454:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <main+0x124>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7fe ffe5 	bl	8000428 <__aeabi_f2d>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4812      	ldr	r0, [pc, #72]	@ (80014ac <main+0x128>)
 8001464:	f003 ff7a 	bl	800535c <iprintf>

		  prev_print_delay = tick;
 8001468:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <main+0xfc>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a08      	ldr	r2, [pc, #32]	@ (8001490 <main+0x10c>)
 800146e:	6013      	str	r3, [r2, #0]
	  tick = HAL_GetTick();
 8001470:	e7ad      	b.n	80013ce <main+0x4a>
 8001472:	bf00      	nop
 8001474:	08008bf8 	.word	0x08008bf8
 8001478:	20000250 	.word	0x20000250
 800147c:	20000000 	.word	0x20000000
 8001480:	200002e8 	.word	0x200002e8
 8001484:	200002ec 	.word	0x200002ec
 8001488:	20000008 	.word	0x20000008
 800148c:	40011000 	.word	0x40011000
 8001490:	200002f0 	.word	0x200002f0
 8001494:	20000004 	.word	0x20000004
 8001498:	200002f4 	.word	0x200002f4
 800149c:	08008c08 	.word	0x08008c08
 80014a0:	200002f8 	.word	0x200002f8
 80014a4:	08008c24 	.word	0x08008c24
 80014a8:	200002fc 	.word	0x200002fc
 80014ac:	08008c40 	.word	0x08008c40

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b090      	sub	sp, #64	@ 0x40
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0318 	add.w	r3, r7, #24
 80014ba:	2228      	movs	r2, #40	@ 0x28
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 ffdb 	bl	800547a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014d2:	2301      	movs	r3, #1
 80014d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e0:	2301      	movs	r3, #1
 80014e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e4:	2302      	movs	r3, #2
 80014e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014ee:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80014f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f4:	f107 0318 	add.w	r3, r7, #24
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 f82d 	bl	8003558 <HAL_RCC_OscConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001504:	f000 f819 	bl	800153a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001508:	230f      	movs	r3, #15
 800150a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150c:	2302      	movs	r3, #2
 800150e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001514:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001518:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2102      	movs	r1, #2
 8001522:	4618      	mov	r0, r3
 8001524:	f002 fa9a 	bl	8003a5c <HAL_RCC_ClockConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800152e:	f000 f804 	bl	800153a <Error_Handler>
  }
}
 8001532:	bf00      	nop
 8001534:	3740      	adds	r7, #64	@ 0x40
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153e:	b672      	cpsid	i
}
 8001540:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001542:	bf00      	nop
 8001544:	e7fd      	b.n	8001542 <Error_Handler+0x8>
	...

08001548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800154e:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <HAL_MspInit+0x5c>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	4a14      	ldr	r2, [pc, #80]	@ (80015a4 <HAL_MspInit+0x5c>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6193      	str	r3, [r2, #24]
 800155a:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_MspInit+0x5c>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <HAL_MspInit+0x5c>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	4a0e      	ldr	r2, [pc, #56]	@ (80015a4 <HAL_MspInit+0x5c>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001570:	61d3      	str	r3, [r2, #28]
 8001572:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <HAL_MspInit+0x5c>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800157e:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <HAL_MspInit+0x60>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	4a04      	ldr	r2, [pc, #16]	@ (80015a8 <HAL_MspInit+0x60>)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010000 	.word	0x40010000

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <NMI_Handler+0x4>

080015b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <MemManage_Handler+0x4>

080015c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fc:	f000 f9b4 	bl	8001968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001608:	4802      	ldr	r0, [pc, #8]	@ (8001614 <DMA1_Channel6_IRQHandler+0x10>)
 800160a:	f000 fb55 	bl	8001cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200002a4 	.word	0x200002a4

08001618 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return 1;
 800161c:	2301      	movs	r3, #1
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <_kill>:

int _kill(int pid, int sig)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001630:	f003 ff76 	bl	8005520 <__errno>
 8001634:	4603      	mov	r3, r0
 8001636:	2216      	movs	r2, #22
 8001638:	601a      	str	r2, [r3, #0]
  return -1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <_exit>:

void _exit (int status)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800164e:	f04f 31ff 	mov.w	r1, #4294967295
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ffe7 	bl	8001626 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <_exit+0x12>

0800165c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	e00a      	b.n	8001684 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800166e:	f3af 8000 	nop.w
 8001672:	4601      	mov	r1, r0
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	60ba      	str	r2, [r7, #8]
 800167a:	b2ca      	uxtb	r2, r1
 800167c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	429a      	cmp	r2, r3
 800168a:	dbf0      	blt.n	800166e <_read+0x12>
  }

  return len;
 800168c:	687b      	ldr	r3, [r7, #4]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	e009      	b.n	80016bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	60ba      	str	r2, [r7, #8]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fe55 	bl	8001360 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3301      	adds	r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	dbf1      	blt.n	80016a8 <_write+0x12>
  }
  return len;
 80016c4:	687b      	ldr	r3, [r7, #4]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <_close>:

int _close(int file)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016f4:	605a      	str	r2, [r3, #4]
  return 0;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <_isatty>:

int _isatty(int file)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001716:	b480      	push	{r7}
 8001718:	b085      	sub	sp, #20
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
	...

08001730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001738:	4a14      	ldr	r2, [pc, #80]	@ (800178c <_sbrk+0x5c>)
 800173a:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <_sbrk+0x60>)
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001744:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <_sbrk+0x64>)
 800174e:	4a12      	ldr	r2, [pc, #72]	@ (8001798 <_sbrk+0x68>)
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	429a      	cmp	r2, r3
 800175e:	d207      	bcs.n	8001770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001760:	f003 fede 	bl	8005520 <__errno>
 8001764:	4603      	mov	r3, r0
 8001766:	220c      	movs	r2, #12
 8001768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	e009      	b.n	8001784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001776:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	4a05      	ldr	r2, [pc, #20]	@ (8001794 <_sbrk+0x64>)
 8001780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001782:	68fb      	ldr	r3, [r7, #12]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20005000 	.word	0x20005000
 8001790:	00000400 	.word	0x00000400
 8001794:	20000300 	.word	0x20000300
 8001798:	200004a0 	.word	0x200004a0

0800179c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017ac:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <MX_USART2_UART_Init+0x4c>)
 80017ae:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <MX_USART2_UART_Init+0x50>)
 80017b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017b2:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <MX_USART2_UART_Init+0x4c>)
 80017b4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80017b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <MX_USART2_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <MX_USART2_UART_Init+0x4c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <MX_USART2_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80017cc:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <MX_USART2_UART_Init+0x4c>)
 80017ce:	2208      	movs	r2, #8
 80017d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d2:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <MX_USART2_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <MX_USART2_UART_Init+0x4c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017de:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <MX_USART2_UART_Init+0x4c>)
 80017e0:	f002 faca 	bl	8003d78 <HAL_UART_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017ea:	f7ff fea6 	bl	800153a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000304 	.word	0x20000304
 80017f8:	40004400 	.word	0x40004400

080017fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1b      	ldr	r2, [pc, #108]	@ (8001884 <HAL_UART_MspInit+0x88>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d12f      	bne.n	800187c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800181c:	4b1a      	ldr	r3, [pc, #104]	@ (8001888 <HAL_UART_MspInit+0x8c>)
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	4a19      	ldr	r2, [pc, #100]	@ (8001888 <HAL_UART_MspInit+0x8c>)
 8001822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001826:	61d3      	str	r3, [r2, #28]
 8001828:	4b17      	ldr	r3, [pc, #92]	@ (8001888 <HAL_UART_MspInit+0x8c>)
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001834:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <HAL_UART_MspInit+0x8c>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4a13      	ldr	r2, [pc, #76]	@ (8001888 <HAL_UART_MspInit+0x8c>)
 800183a:	f043 0304 	orr.w	r3, r3, #4
 800183e:	6193      	str	r3, [r2, #24]
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <HAL_UART_MspInit+0x8c>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800184c:	2304      	movs	r3, #4
 800184e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001854:	2303      	movs	r3, #3
 8001856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	4619      	mov	r1, r3
 800185e:	480b      	ldr	r0, [pc, #44]	@ (800188c <HAL_UART_MspInit+0x90>)
 8001860:	f000 fb30 	bl	8001ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001864:	2308      	movs	r3, #8
 8001866:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	4619      	mov	r1, r3
 8001876:	4805      	ldr	r0, [pc, #20]	@ (800188c <HAL_UART_MspInit+0x90>)
 8001878:	f000 fb24 	bl	8001ec4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40004400 	.word	0x40004400
 8001888:	40021000 	.word	0x40021000
 800188c:	40010800 	.word	0x40010800

08001890 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001890:	f7ff ff84 	bl	800179c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001894:	480b      	ldr	r0, [pc, #44]	@ (80018c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001896:	490c      	ldr	r1, [pc, #48]	@ (80018c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001898:	4a0c      	ldr	r2, [pc, #48]	@ (80018cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800189c:	e002      	b.n	80018a4 <LoopCopyDataInit>

0800189e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a2:	3304      	adds	r3, #4

080018a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a8:	d3f9      	bcc.n	800189e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018aa:	4a09      	ldr	r2, [pc, #36]	@ (80018d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018ac:	4c09      	ldr	r4, [pc, #36]	@ (80018d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b0:	e001      	b.n	80018b6 <LoopFillZerobss>

080018b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b4:	3204      	adds	r2, #4

080018b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b8:	d3fb      	bcc.n	80018b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ba:	f003 fe37 	bl	800552c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018be:	f7ff fd61 	bl	8001384 <main>
  bx lr
 80018c2:	4770      	bx	lr
  ldr r0, =_sdata
 80018c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80018cc:	080090d8 	.word	0x080090d8
  ldr r2, =_sbss
 80018d0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80018d4:	2000049c 	.word	0x2000049c

080018d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC1_2_IRQHandler>
	...

080018dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e0:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <HAL_Init+0x28>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a07      	ldr	r2, [pc, #28]	@ (8001904 <HAL_Init+0x28>)
 80018e6:	f043 0310 	orr.w	r3, r3, #16
 80018ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f000 f947 	bl	8001b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f2:	200f      	movs	r0, #15
 80018f4:	f000 f808 	bl	8001908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f8:	f7ff fe26 	bl	8001548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40022000 	.word	0x40022000

08001908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001910:	4b12      	ldr	r3, [pc, #72]	@ (800195c <HAL_InitTick+0x54>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <HAL_InitTick+0x58>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800191e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001922:	fbb2 f3f3 	udiv	r3, r2, r3
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f95f 	bl	8001bea <HAL_SYSTICK_Config>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e00e      	b.n	8001954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b0f      	cmp	r3, #15
 800193a:	d80a      	bhi.n	8001952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800193c:	2200      	movs	r2, #0
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f000 f927 	bl	8001b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001948:	4a06      	ldr	r2, [pc, #24]	@ (8001964 <HAL_InitTick+0x5c>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	e000      	b.n	8001954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	2000000c 	.word	0x2000000c
 8001960:	20000014 	.word	0x20000014
 8001964:	20000010 	.word	0x20000010

08001968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800196c:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <HAL_IncTick+0x1c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <HAL_IncTick+0x20>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a03      	ldr	r2, [pc, #12]	@ (8001988 <HAL_IncTick+0x20>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	20000014 	.word	0x20000014
 8001988:	2000034c 	.word	0x2000034c

0800198c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return uwTick;
 8001990:	4b02      	ldr	r3, [pc, #8]	@ (800199c <HAL_GetTick+0x10>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	2000034c 	.word	0x2000034c

080019a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a8:	f7ff fff0 	bl	800198c <HAL_GetTick>
 80019ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b8:	d005      	beq.n	80019c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ba:	4b0a      	ldr	r3, [pc, #40]	@ (80019e4 <HAL_Delay+0x44>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019c6:	bf00      	nop
 80019c8:	f7ff ffe0 	bl	800198c <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d8f7      	bhi.n	80019c8 <HAL_Delay+0x28>
  {
  }
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000014 	.word	0x20000014

080019e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a04:	4013      	ands	r3, r2
 8001a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a1a:	4a04      	ldr	r2, [pc, #16]	@ (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	60d3      	str	r3, [r2, #12]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a34:	4b04      	ldr	r3, [pc, #16]	@ (8001a48 <__NVIC_GetPriorityGrouping+0x18>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	f003 0307 	and.w	r3, r3, #7
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	db0b      	blt.n	8001a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	f003 021f 	and.w	r2, r3, #31
 8001a64:	4906      	ldr	r1, [pc, #24]	@ (8001a80 <__NVIC_EnableIRQ+0x34>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	095b      	lsrs	r3, r3, #5
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	db0a      	blt.n	8001aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	490c      	ldr	r1, [pc, #48]	@ (8001ad0 <__NVIC_SetPriority+0x4c>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aac:	e00a      	b.n	8001ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4908      	ldr	r1, [pc, #32]	@ (8001ad4 <__NVIC_SetPriority+0x50>)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	3b04      	subs	r3, #4
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	761a      	strb	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000e100 	.word	0xe000e100
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	@ 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	bf28      	it	cs
 8001af6:	2304      	movcs	r3, #4
 8001af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3304      	adds	r3, #4
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d902      	bls.n	8001b08 <NVIC_EncodePriority+0x30>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3b03      	subs	r3, #3
 8001b06:	e000      	b.n	8001b0a <NVIC_EncodePriority+0x32>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	4313      	orrs	r3, r2
         );
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	@ 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b4c:	d301      	bcc.n	8001b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00f      	b.n	8001b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b52:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <SysTick_Config+0x40>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5a:	210f      	movs	r1, #15
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f7ff ff90 	bl	8001a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <SysTick_Config+0x40>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6a:	4b04      	ldr	r3, [pc, #16]	@ (8001b7c <SysTick_Config+0x40>)
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	e000e010 	.word	0xe000e010

08001b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ff2d 	bl	80019e8 <__NVIC_SetPriorityGrouping>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba8:	f7ff ff42 	bl	8001a30 <__NVIC_GetPriorityGrouping>
 8001bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	6978      	ldr	r0, [r7, #20]
 8001bb4:	f7ff ff90 	bl	8001ad8 <NVIC_EncodePriority>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff5f 	bl	8001a84 <__NVIC_SetPriority>
}
 8001bc6:	bf00      	nop
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff35 	bl	8001a4c <__NVIC_EnableIRQ>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ffa2 	bl	8001b3c <SysTick_Config>
 8001bf8:	4603      	mov	r3, r0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e043      	b.n	8001ca2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b22      	ldr	r3, [pc, #136]	@ (8001cac <HAL_DMA_Init+0xa8>)
 8001c22:	4413      	add	r3, r2
 8001c24:	4a22      	ldr	r2, [pc, #136]	@ (8001cb0 <HAL_DMA_Init+0xac>)
 8001c26:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	009a      	lsls	r2, r3, #2
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a1f      	ldr	r2, [pc, #124]	@ (8001cb4 <HAL_DMA_Init+0xb0>)
 8001c36:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c4e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001c52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	bffdfff8 	.word	0xbffdfff8
 8001cb0:	cccccccd 	.word	0xcccccccd
 8001cb4:	40020000 	.word	0x40020000

08001cb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d04f      	beq.n	8001d80 <HAL_DMA_IRQHandler+0xc8>
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d04a      	beq.n	8001d80 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0320 	and.w	r3, r3, #32
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d107      	bne.n	8001d08 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0204 	bic.w	r2, r2, #4
 8001d06:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a66      	ldr	r2, [pc, #408]	@ (8001ea8 <HAL_DMA_IRQHandler+0x1f0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d029      	beq.n	8001d66 <HAL_DMA_IRQHandler+0xae>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a65      	ldr	r2, [pc, #404]	@ (8001eac <HAL_DMA_IRQHandler+0x1f4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d022      	beq.n	8001d62 <HAL_DMA_IRQHandler+0xaa>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a63      	ldr	r2, [pc, #396]	@ (8001eb0 <HAL_DMA_IRQHandler+0x1f8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d01a      	beq.n	8001d5c <HAL_DMA_IRQHandler+0xa4>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a62      	ldr	r2, [pc, #392]	@ (8001eb4 <HAL_DMA_IRQHandler+0x1fc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d012      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x9e>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a60      	ldr	r2, [pc, #384]	@ (8001eb8 <HAL_DMA_IRQHandler+0x200>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00a      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x98>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a5f      	ldr	r2, [pc, #380]	@ (8001ebc <HAL_DMA_IRQHandler+0x204>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d102      	bne.n	8001d4a <HAL_DMA_IRQHandler+0x92>
 8001d44:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d48:	e00e      	b.n	8001d68 <HAL_DMA_IRQHandler+0xb0>
 8001d4a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001d4e:	e00b      	b.n	8001d68 <HAL_DMA_IRQHandler+0xb0>
 8001d50:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001d54:	e008      	b.n	8001d68 <HAL_DMA_IRQHandler+0xb0>
 8001d56:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d5a:	e005      	b.n	8001d68 <HAL_DMA_IRQHandler+0xb0>
 8001d5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d60:	e002      	b.n	8001d68 <HAL_DMA_IRQHandler+0xb0>
 8001d62:	2340      	movs	r3, #64	@ 0x40
 8001d64:	e000      	b.n	8001d68 <HAL_DMA_IRQHandler+0xb0>
 8001d66:	2304      	movs	r3, #4
 8001d68:	4a55      	ldr	r2, [pc, #340]	@ (8001ec0 <HAL_DMA_IRQHandler+0x208>)
 8001d6a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 8094 	beq.w	8001e9e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d7e:	e08e      	b.n	8001e9e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	2202      	movs	r2, #2
 8001d86:	409a      	lsls	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d056      	beq.n	8001e3e <HAL_DMA_IRQHandler+0x186>
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d051      	beq.n	8001e3e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0320 	and.w	r3, r3, #32
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10b      	bne.n	8001dc0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 020a 	bic.w	r2, r2, #10
 8001db6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a38      	ldr	r2, [pc, #224]	@ (8001ea8 <HAL_DMA_IRQHandler+0x1f0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d029      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x166>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a37      	ldr	r2, [pc, #220]	@ (8001eac <HAL_DMA_IRQHandler+0x1f4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d022      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x162>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a35      	ldr	r2, [pc, #212]	@ (8001eb0 <HAL_DMA_IRQHandler+0x1f8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d01a      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x15c>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a34      	ldr	r2, [pc, #208]	@ (8001eb4 <HAL_DMA_IRQHandler+0x1fc>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d012      	beq.n	8001e0e <HAL_DMA_IRQHandler+0x156>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a32      	ldr	r2, [pc, #200]	@ (8001eb8 <HAL_DMA_IRQHandler+0x200>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00a      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x150>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a31      	ldr	r2, [pc, #196]	@ (8001ebc <HAL_DMA_IRQHandler+0x204>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d102      	bne.n	8001e02 <HAL_DMA_IRQHandler+0x14a>
 8001dfc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e00:	e00e      	b.n	8001e20 <HAL_DMA_IRQHandler+0x168>
 8001e02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e06:	e00b      	b.n	8001e20 <HAL_DMA_IRQHandler+0x168>
 8001e08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e0c:	e008      	b.n	8001e20 <HAL_DMA_IRQHandler+0x168>
 8001e0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e12:	e005      	b.n	8001e20 <HAL_DMA_IRQHandler+0x168>
 8001e14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e18:	e002      	b.n	8001e20 <HAL_DMA_IRQHandler+0x168>
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	e000      	b.n	8001e20 <HAL_DMA_IRQHandler+0x168>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	4a27      	ldr	r2, [pc, #156]	@ (8001ec0 <HAL_DMA_IRQHandler+0x208>)
 8001e22:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d034      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e3c:	e02f      	b.n	8001e9e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	2208      	movs	r2, #8
 8001e44:	409a      	lsls	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d028      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0x1e8>
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d023      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 020e 	bic.w	r2, r2, #14
 8001e66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e70:	2101      	movs	r1, #1
 8001e72:	fa01 f202 	lsl.w	r2, r1, r2
 8001e76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d004      	beq.n	8001ea0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	4798      	blx	r3
    }
  }
  return;
 8001e9e:	bf00      	nop
 8001ea0:	bf00      	nop
}
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40020008 	.word	0x40020008
 8001eac:	4002001c 	.word	0x4002001c
 8001eb0:	40020030 	.word	0x40020030
 8001eb4:	40020044 	.word	0x40020044
 8001eb8:	40020058 	.word	0x40020058
 8001ebc:	4002006c 	.word	0x4002006c
 8001ec0:	40020000 	.word	0x40020000

08001ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b08b      	sub	sp, #44	@ 0x2c
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed6:	e169      	b.n	80021ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	f040 8158 	bne.w	80021a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4a9a      	ldr	r2, [pc, #616]	@ (8002164 <HAL_GPIO_Init+0x2a0>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d05e      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f00:	4a98      	ldr	r2, [pc, #608]	@ (8002164 <HAL_GPIO_Init+0x2a0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d875      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f06:	4a98      	ldr	r2, [pc, #608]	@ (8002168 <HAL_GPIO_Init+0x2a4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d058      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f0c:	4a96      	ldr	r2, [pc, #600]	@ (8002168 <HAL_GPIO_Init+0x2a4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d86f      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f12:	4a96      	ldr	r2, [pc, #600]	@ (800216c <HAL_GPIO_Init+0x2a8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d052      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f18:	4a94      	ldr	r2, [pc, #592]	@ (800216c <HAL_GPIO_Init+0x2a8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d869      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f1e:	4a94      	ldr	r2, [pc, #592]	@ (8002170 <HAL_GPIO_Init+0x2ac>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d04c      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f24:	4a92      	ldr	r2, [pc, #584]	@ (8002170 <HAL_GPIO_Init+0x2ac>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d863      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f2a:	4a92      	ldr	r2, [pc, #584]	@ (8002174 <HAL_GPIO_Init+0x2b0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d046      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f30:	4a90      	ldr	r2, [pc, #576]	@ (8002174 <HAL_GPIO_Init+0x2b0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d85d      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f36:	2b12      	cmp	r3, #18
 8001f38:	d82a      	bhi.n	8001f90 <HAL_GPIO_Init+0xcc>
 8001f3a:	2b12      	cmp	r3, #18
 8001f3c:	d859      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f44 <HAL_GPIO_Init+0x80>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001fbf 	.word	0x08001fbf
 8001f48:	08001f99 	.word	0x08001f99
 8001f4c:	08001fab 	.word	0x08001fab
 8001f50:	08001fed 	.word	0x08001fed
 8001f54:	08001ff3 	.word	0x08001ff3
 8001f58:	08001ff3 	.word	0x08001ff3
 8001f5c:	08001ff3 	.word	0x08001ff3
 8001f60:	08001ff3 	.word	0x08001ff3
 8001f64:	08001ff3 	.word	0x08001ff3
 8001f68:	08001ff3 	.word	0x08001ff3
 8001f6c:	08001ff3 	.word	0x08001ff3
 8001f70:	08001ff3 	.word	0x08001ff3
 8001f74:	08001ff3 	.word	0x08001ff3
 8001f78:	08001ff3 	.word	0x08001ff3
 8001f7c:	08001ff3 	.word	0x08001ff3
 8001f80:	08001ff3 	.word	0x08001ff3
 8001f84:	08001ff3 	.word	0x08001ff3
 8001f88:	08001fa1 	.word	0x08001fa1
 8001f8c:	08001fb5 	.word	0x08001fb5
 8001f90:	4a79      	ldr	r2, [pc, #484]	@ (8002178 <HAL_GPIO_Init+0x2b4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f96:	e02c      	b.n	8001ff2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	623b      	str	r3, [r7, #32]
          break;
 8001f9e:	e029      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	623b      	str	r3, [r7, #32]
          break;
 8001fa8:	e024      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	3308      	adds	r3, #8
 8001fb0:	623b      	str	r3, [r7, #32]
          break;
 8001fb2:	e01f      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	330c      	adds	r3, #12
 8001fba:	623b      	str	r3, [r7, #32]
          break;
 8001fbc:	e01a      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d102      	bne.n	8001fcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	623b      	str	r3, [r7, #32]
          break;
 8001fca:	e013      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d105      	bne.n	8001fe0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd4:	2308      	movs	r3, #8
 8001fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	611a      	str	r2, [r3, #16]
          break;
 8001fde:	e009      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	615a      	str	r2, [r3, #20]
          break;
 8001fea:	e003      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fec:	2300      	movs	r3, #0
 8001fee:	623b      	str	r3, [r7, #32]
          break;
 8001ff0:	e000      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          break;
 8001ff2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2bff      	cmp	r3, #255	@ 0xff
 8001ff8:	d801      	bhi.n	8001ffe <HAL_GPIO_Init+0x13a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	e001      	b.n	8002002 <HAL_GPIO_Init+0x13e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2bff      	cmp	r3, #255	@ 0xff
 8002008:	d802      	bhi.n	8002010 <HAL_GPIO_Init+0x14c>
 800200a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	e002      	b.n	8002016 <HAL_GPIO_Init+0x152>
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	3b08      	subs	r3, #8
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	210f      	movs	r1, #15
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	401a      	ands	r2, r3
 8002028:	6a39      	ldr	r1, [r7, #32]
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	fa01 f303 	lsl.w	r3, r1, r3
 8002030:	431a      	orrs	r2, r3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 80b1 	beq.w	80021a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002044:	4b4d      	ldr	r3, [pc, #308]	@ (800217c <HAL_GPIO_Init+0x2b8>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	4a4c      	ldr	r2, [pc, #304]	@ (800217c <HAL_GPIO_Init+0x2b8>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6193      	str	r3, [r2, #24]
 8002050:	4b4a      	ldr	r3, [pc, #296]	@ (800217c <HAL_GPIO_Init+0x2b8>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800205c:	4a48      	ldr	r2, [pc, #288]	@ (8002180 <HAL_GPIO_Init+0x2bc>)
 800205e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	3302      	adds	r3, #2
 8002064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002068:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	220f      	movs	r2, #15
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4013      	ands	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a40      	ldr	r2, [pc, #256]	@ (8002184 <HAL_GPIO_Init+0x2c0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d013      	beq.n	80020b0 <HAL_GPIO_Init+0x1ec>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a3f      	ldr	r2, [pc, #252]	@ (8002188 <HAL_GPIO_Init+0x2c4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d00d      	beq.n	80020ac <HAL_GPIO_Init+0x1e8>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a3e      	ldr	r2, [pc, #248]	@ (800218c <HAL_GPIO_Init+0x2c8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d007      	beq.n	80020a8 <HAL_GPIO_Init+0x1e4>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a3d      	ldr	r2, [pc, #244]	@ (8002190 <HAL_GPIO_Init+0x2cc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d101      	bne.n	80020a4 <HAL_GPIO_Init+0x1e0>
 80020a0:	2303      	movs	r3, #3
 80020a2:	e006      	b.n	80020b2 <HAL_GPIO_Init+0x1ee>
 80020a4:	2304      	movs	r3, #4
 80020a6:	e004      	b.n	80020b2 <HAL_GPIO_Init+0x1ee>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e002      	b.n	80020b2 <HAL_GPIO_Init+0x1ee>
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <HAL_GPIO_Init+0x1ee>
 80020b0:	2300      	movs	r3, #0
 80020b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020b4:	f002 0203 	and.w	r2, r2, #3
 80020b8:	0092      	lsls	r2, r2, #2
 80020ba:	4093      	lsls	r3, r2
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020c2:	492f      	ldr	r1, [pc, #188]	@ (8002180 <HAL_GPIO_Init+0x2bc>)
 80020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c6:	089b      	lsrs	r3, r3, #2
 80020c8:	3302      	adds	r3, #2
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d006      	beq.n	80020ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	492c      	ldr	r1, [pc, #176]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	608b      	str	r3, [r1, #8]
 80020e8:	e006      	b.n	80020f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	4928      	ldr	r1, [pc, #160]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d006      	beq.n	8002112 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002104:	4b23      	ldr	r3, [pc, #140]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	4922      	ldr	r1, [pc, #136]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	60cb      	str	r3, [r1, #12]
 8002110:	e006      	b.n	8002120 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002112:	4b20      	ldr	r3, [pc, #128]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	43db      	mvns	r3, r3
 800211a:	491e      	ldr	r1, [pc, #120]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 800211c:	4013      	ands	r3, r2
 800211e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800212c:	4b19      	ldr	r3, [pc, #100]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	4918      	ldr	r1, [pc, #96]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
 8002138:	e006      	b.n	8002148 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800213a:	4b16      	ldr	r3, [pc, #88]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	43db      	mvns	r3, r3
 8002142:	4914      	ldr	r1, [pc, #80]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 8002144:	4013      	ands	r3, r2
 8002146:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d021      	beq.n	8002198 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002154:	4b0f      	ldr	r3, [pc, #60]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	490e      	ldr	r1, [pc, #56]	@ (8002194 <HAL_GPIO_Init+0x2d0>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	600b      	str	r3, [r1, #0]
 8002160:	e021      	b.n	80021a6 <HAL_GPIO_Init+0x2e2>
 8002162:	bf00      	nop
 8002164:	10320000 	.word	0x10320000
 8002168:	10310000 	.word	0x10310000
 800216c:	10220000 	.word	0x10220000
 8002170:	10210000 	.word	0x10210000
 8002174:	10120000 	.word	0x10120000
 8002178:	10110000 	.word	0x10110000
 800217c:	40021000 	.word	0x40021000
 8002180:	40010000 	.word	0x40010000
 8002184:	40010800 	.word	0x40010800
 8002188:	40010c00 	.word	0x40010c00
 800218c:	40011000 	.word	0x40011000
 8002190:	40011400 	.word	0x40011400
 8002194:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002198:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <HAL_GPIO_Init+0x304>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	43db      	mvns	r3, r3
 80021a0:	4909      	ldr	r1, [pc, #36]	@ (80021c8 <HAL_GPIO_Init+0x304>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	3301      	adds	r3, #1
 80021aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	fa22 f303 	lsr.w	r3, r2, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f47f ae8e 	bne.w	8001ed8 <HAL_GPIO_Init+0x14>
  }
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	372c      	adds	r7, #44	@ 0x2c
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	40010400 	.word	0x40010400

080021cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
 80021d8:	4613      	mov	r3, r2
 80021da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021dc:	787b      	ldrb	r3, [r7, #1]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021e8:	e003      	b.n	80021f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	041a      	lsls	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	611a      	str	r2, [r3, #16]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4013      	ands	r3, r2
 8002214:	041a      	lsls	r2, r3, #16
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	43d9      	mvns	r1, r3
 800221a:	887b      	ldrh	r3, [r7, #2]
 800221c:	400b      	ands	r3, r1
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	611a      	str	r2, [r3, #16]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
	...

08002230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e12b      	b.n	800249a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7fe ffec 	bl	8001234 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2224      	movs	r2, #36	@ 0x24
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0201 	bic.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002282:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002292:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002294:	f001 fd2a 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 8002298:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4a81      	ldr	r2, [pc, #516]	@ (80024a4 <HAL_I2C_Init+0x274>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d807      	bhi.n	80022b4 <HAL_I2C_Init+0x84>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4a80      	ldr	r2, [pc, #512]	@ (80024a8 <HAL_I2C_Init+0x278>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	bf94      	ite	ls
 80022ac:	2301      	movls	r3, #1
 80022ae:	2300      	movhi	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	e006      	b.n	80022c2 <HAL_I2C_Init+0x92>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4a7d      	ldr	r2, [pc, #500]	@ (80024ac <HAL_I2C_Init+0x27c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	bf94      	ite	ls
 80022bc:	2301      	movls	r3, #1
 80022be:	2300      	movhi	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e0e7      	b.n	800249a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4a78      	ldr	r2, [pc, #480]	@ (80024b0 <HAL_I2C_Init+0x280>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0c9b      	lsrs	r3, r3, #18
 80022d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4a6a      	ldr	r2, [pc, #424]	@ (80024a4 <HAL_I2C_Init+0x274>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d802      	bhi.n	8002304 <HAL_I2C_Init+0xd4>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	3301      	adds	r3, #1
 8002302:	e009      	b.n	8002318 <HAL_I2C_Init+0xe8>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	4a69      	ldr	r2, [pc, #420]	@ (80024b4 <HAL_I2C_Init+0x284>)
 8002310:	fba2 2303 	umull	r2, r3, r2, r3
 8002314:	099b      	lsrs	r3, r3, #6
 8002316:	3301      	adds	r3, #1
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	430b      	orrs	r3, r1
 800231e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800232a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	495c      	ldr	r1, [pc, #368]	@ (80024a4 <HAL_I2C_Init+0x274>)
 8002334:	428b      	cmp	r3, r1
 8002336:	d819      	bhi.n	800236c <HAL_I2C_Init+0x13c>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1e59      	subs	r1, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fbb1 f3f3 	udiv	r3, r1, r3
 8002346:	1c59      	adds	r1, r3, #1
 8002348:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800234c:	400b      	ands	r3, r1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_I2C_Init+0x138>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1e59      	subs	r1, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002360:	3301      	adds	r3, #1
 8002362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002366:	e051      	b.n	800240c <HAL_I2C_Init+0x1dc>
 8002368:	2304      	movs	r3, #4
 800236a:	e04f      	b.n	800240c <HAL_I2C_Init+0x1dc>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d111      	bne.n	8002398 <HAL_I2C_Init+0x168>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1e58      	subs	r0, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	440b      	add	r3, r1
 8002382:	fbb0 f3f3 	udiv	r3, r0, r3
 8002386:	3301      	adds	r3, #1
 8002388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800238c:	2b00      	cmp	r3, #0
 800238e:	bf0c      	ite	eq
 8002390:	2301      	moveq	r3, #1
 8002392:	2300      	movne	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	e012      	b.n	80023be <HAL_I2C_Init+0x18e>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1e58      	subs	r0, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	0099      	lsls	r1, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ae:	3301      	adds	r3, #1
 80023b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf0c      	ite	eq
 80023b8:	2301      	moveq	r3, #1
 80023ba:	2300      	movne	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_I2C_Init+0x196>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e022      	b.n	800240c <HAL_I2C_Init+0x1dc>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10e      	bne.n	80023ec <HAL_I2C_Init+0x1bc>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1e58      	subs	r0, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6859      	ldr	r1, [r3, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	440b      	add	r3, r1
 80023dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e0:	3301      	adds	r3, #1
 80023e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023ea:	e00f      	b.n	800240c <HAL_I2C_Init+0x1dc>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1e58      	subs	r0, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	0099      	lsls	r1, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002402:	3301      	adds	r3, #1
 8002404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002408:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	6809      	ldr	r1, [r1, #0]
 8002410:	4313      	orrs	r3, r2
 8002412:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69da      	ldr	r2, [r3, #28]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800243a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6911      	ldr	r1, [r2, #16]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68d2      	ldr	r2, [r2, #12]
 8002446:	4311      	orrs	r1, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	430b      	orrs	r3, r1
 800244e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	000186a0 	.word	0x000186a0
 80024a8:	001e847f 	.word	0x001e847f
 80024ac:	003d08ff 	.word	0x003d08ff
 80024b0:	431bde83 	.word	0x431bde83
 80024b4:	10624dd3 	.word	0x10624dd3

080024b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af02      	add	r7, sp, #8
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	4608      	mov	r0, r1
 80024c2:	4611      	mov	r1, r2
 80024c4:	461a      	mov	r2, r3
 80024c6:	4603      	mov	r3, r0
 80024c8:	817b      	strh	r3, [r7, #10]
 80024ca:	460b      	mov	r3, r1
 80024cc:	813b      	strh	r3, [r7, #8]
 80024ce:	4613      	mov	r3, r2
 80024d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024d2:	f7ff fa5b 	bl	800198c <HAL_GetTick>
 80024d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b20      	cmp	r3, #32
 80024e2:	f040 80d9 	bne.w	8002698 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	2319      	movs	r3, #25
 80024ec:	2201      	movs	r2, #1
 80024ee:	496d      	ldr	r1, [pc, #436]	@ (80026a4 <HAL_I2C_Mem_Write+0x1ec>)
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 fdfb 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024fc:	2302      	movs	r3, #2
 80024fe:	e0cc      	b.n	800269a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_I2C_Mem_Write+0x56>
 800250a:	2302      	movs	r3, #2
 800250c:	e0c5      	b.n	800269a <HAL_I2C_Mem_Write+0x1e2>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d007      	beq.n	8002534 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002542:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2221      	movs	r2, #33	@ 0x21
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2240      	movs	r2, #64	@ 0x40
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a3a      	ldr	r2, [r7, #32]
 800255e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002564:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4a4d      	ldr	r2, [pc, #308]	@ (80026a8 <HAL_I2C_Mem_Write+0x1f0>)
 8002574:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002576:	88f8      	ldrh	r0, [r7, #6]
 8002578:	893a      	ldrh	r2, [r7, #8]
 800257a:	8979      	ldrh	r1, [r7, #10]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	9301      	str	r3, [sp, #4]
 8002580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	4603      	mov	r3, r0
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fc32 	bl	8002df0 <I2C_RequestMemoryWrite>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d052      	beq.n	8002638 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e081      	b.n	800269a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 fec0 	bl	8003320 <I2C_WaitOnTXEFlagUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00d      	beq.n	80025c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d107      	bne.n	80025be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e06b      	b.n	800269a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	781a      	ldrb	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d11b      	bne.n	8002638 <HAL_I2C_Mem_Write+0x180>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002604:	2b00      	cmp	r3, #0
 8002606:	d017      	beq.n	8002638 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800262e:	b29b      	uxth	r3, r3
 8002630:	3b01      	subs	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1aa      	bne.n	8002596 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 feb3 	bl	80033b0 <I2C_WaitOnBTFFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00d      	beq.n	800266c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	2b04      	cmp	r3, #4
 8002656:	d107      	bne.n	8002668 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002666:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e016      	b.n	800269a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800267a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	e000      	b.n	800269a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002698:	2302      	movs	r3, #2
  }
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	00100002 	.word	0x00100002
 80026a8:	ffff0000 	.word	0xffff0000

080026ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08c      	sub	sp, #48	@ 0x30
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	4608      	mov	r0, r1
 80026b6:	4611      	mov	r1, r2
 80026b8:	461a      	mov	r2, r3
 80026ba:	4603      	mov	r3, r0
 80026bc:	817b      	strh	r3, [r7, #10]
 80026be:	460b      	mov	r3, r1
 80026c0:	813b      	strh	r3, [r7, #8]
 80026c2:	4613      	mov	r3, r2
 80026c4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026ca:	f7ff f95f 	bl	800198c <HAL_GetTick>
 80026ce:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b20      	cmp	r3, #32
 80026da:	f040 8250 	bne.w	8002b7e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	2319      	movs	r3, #25
 80026e4:	2201      	movs	r2, #1
 80026e6:	4982      	ldr	r1, [pc, #520]	@ (80028f0 <HAL_I2C_Mem_Read+0x244>)
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 fcff 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80026f4:	2302      	movs	r3, #2
 80026f6:	e243      	b.n	8002b80 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_I2C_Mem_Read+0x5a>
 8002702:	2302      	movs	r3, #2
 8002704:	e23c      	b.n	8002b80 <HAL_I2C_Mem_Read+0x4d4>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b01      	cmp	r3, #1
 800271a:	d007      	beq.n	800272c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800273a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2222      	movs	r2, #34	@ 0x22
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2240      	movs	r2, #64	@ 0x40
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002756:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800275c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4a62      	ldr	r2, [pc, #392]	@ (80028f4 <HAL_I2C_Mem_Read+0x248>)
 800276c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800276e:	88f8      	ldrh	r0, [r7, #6]
 8002770:	893a      	ldrh	r2, [r7, #8]
 8002772:	8979      	ldrh	r1, [r7, #10]
 8002774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	4603      	mov	r3, r0
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 fbcc 	bl	8002f1c <I2C_RequestMemoryRead>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e1f8      	b.n	8002b80 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002792:	2b00      	cmp	r3, #0
 8002794:	d113      	bne.n	80027be <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	e1cc      	b.n	8002b58 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d11e      	bne.n	8002804 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027d6:	b672      	cpsid	i
}
 80027d8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002800:	b662      	cpsie	i
}
 8002802:	e035      	b.n	8002870 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002808:	2b02      	cmp	r3, #2
 800280a:	d11e      	bne.n	800284a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800281a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800281c:	b672      	cpsid	i
}
 800281e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002844:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002846:	b662      	cpsie	i
}
 8002848:	e012      	b.n	8002870 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002858:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002870:	e172      	b.n	8002b58 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002876:	2b03      	cmp	r3, #3
 8002878:	f200 811f 	bhi.w	8002aba <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002880:	2b01      	cmp	r3, #1
 8002882:	d123      	bne.n	80028cc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002886:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 fdd9 	bl	8003440 <I2C_WaitOnRXNEFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e173      	b.n	8002b80 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028ca:	e145      	b.n	8002b58 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d152      	bne.n	800297a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028da:	2200      	movs	r2, #0
 80028dc:	4906      	ldr	r1, [pc, #24]	@ (80028f8 <HAL_I2C_Mem_Read+0x24c>)
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 fc04 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d008      	beq.n	80028fc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e148      	b.n	8002b80 <HAL_I2C_Mem_Read+0x4d4>
 80028ee:	bf00      	nop
 80028f0:	00100002 	.word	0x00100002
 80028f4:	ffff0000 	.word	0xffff0000
 80028f8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80028fc:	b672      	cpsid	i
}
 80028fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800290e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002942:	b662      	cpsie	i
}
 8002944:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002978:	e0ee      	b.n	8002b58 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002980:	2200      	movs	r2, #0
 8002982:	4981      	ldr	r1, [pc, #516]	@ (8002b88 <HAL_I2C_Mem_Read+0x4dc>)
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fbb1 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0f5      	b.n	8002b80 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80029a4:	b672      	cpsid	i
}
 80029a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691a      	ldr	r2, [r3, #16]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80029da:	4b6c      	ldr	r3, [pc, #432]	@ (8002b8c <HAL_I2C_Mem_Read+0x4e0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	08db      	lsrs	r3, r3, #3
 80029e0:	4a6b      	ldr	r2, [pc, #428]	@ (8002b90 <HAL_I2C_Mem_Read+0x4e4>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	0a1a      	lsrs	r2, r3, #8
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	00da      	lsls	r2, r3, #3
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d118      	bne.n	8002a32 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1a:	f043 0220 	orr.w	r2, r3, #32
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002a22:	b662      	cpsie	i
}
 8002a24:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0a6      	b.n	8002b80 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d1d9      	bne.n	80029f4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a82:	b662      	cpsie	i
}
 8002a84:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ab8:	e04e      	b.n	8002b58 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002abc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 fcbe 	bl	8003440 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e058      	b.n	8002b80 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aea:	3b01      	subs	r3, #1
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d124      	bne.n	8002b58 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d107      	bne.n	8002b26 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b24:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f47f ae88 	bne.w	8002872 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2220      	movs	r2, #32
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e000      	b.n	8002b80 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002b7e:	2302      	movs	r3, #2
  }
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3728      	adds	r7, #40	@ 0x28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	00010004 	.word	0x00010004
 8002b8c:	2000000c 	.word	0x2000000c
 8002b90:	14f8b589 	.word	0x14f8b589

08002b94 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08a      	sub	sp, #40	@ 0x28
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ba4:	f7fe fef2 	bl	800198c <HAL_GetTick>
 8002ba8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	f040 8111 	bne.w	8002dde <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2319      	movs	r3, #25
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	4988      	ldr	r1, [pc, #544]	@ (8002de8 <HAL_I2C_IsDeviceReady+0x254>)
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 fa90 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e104      	b.n	8002de0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_I2C_IsDeviceReady+0x50>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e0fd      	b.n	8002de0 <HAL_I2C_IsDeviceReady+0x24c>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d007      	beq.n	8002c0a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0201 	orr.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2224      	movs	r2, #36	@ 0x24
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4a70      	ldr	r2, [pc, #448]	@ (8002dec <HAL_I2C_IsDeviceReady+0x258>)
 8002c2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c3c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 fa4e 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00d      	beq.n	8002c72 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c64:	d103      	bne.n	8002c6e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c6c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e0b6      	b.n	8002de0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c72:	897b      	ldrh	r3, [r7, #10]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c80:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002c82:	f7fe fe83 	bl	800198c <HAL_GetTick>
 8002c86:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	bf0c      	ite	eq
 8002c96:	2301      	moveq	r3, #1
 8002c98:	2300      	movne	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cac:	bf0c      	ite	eq
 8002cae:	2301      	moveq	r3, #1
 8002cb0:	2300      	movne	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002cb6:	e025      	b.n	8002d04 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cb8:	f7fe fe68 	bl	800198c <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d302      	bcc.n	8002cce <HAL_I2C_IsDeviceReady+0x13a>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d103      	bne.n	8002cd6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	22a0      	movs	r2, #160	@ 0xa0
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	bf0c      	ite	eq
 8002ce4:	2301      	moveq	r3, #1
 8002ce6:	2300      	movne	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cfa:	bf0c      	ite	eq
 8002cfc:	2301      	moveq	r3, #1
 8002cfe:	2300      	movne	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d0e:	d005      	beq.n	8002d1c <HAL_I2C_IsDeviceReady+0x188>
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d102      	bne.n	8002d1c <HAL_I2C_IsDeviceReady+0x188>
 8002d16:	7dbb      	ldrb	r3, [r7, #22]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0cd      	beq.n	8002cb8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d129      	bne.n	8002d86 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d40:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d42:	2300      	movs	r3, #0
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	2319      	movs	r3, #25
 8002d5e:	2201      	movs	r2, #1
 8002d60:	4921      	ldr	r1, [pc, #132]	@ (8002de8 <HAL_I2C_IsDeviceReady+0x254>)
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f9c2 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e036      	b.n	8002de0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e02c      	b.n	8002de0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d94:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d9e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	2319      	movs	r3, #25
 8002da6:	2201      	movs	r2, #1
 8002da8:	490f      	ldr	r1, [pc, #60]	@ (8002de8 <HAL_I2C_IsDeviceReady+0x254>)
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f99e 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e012      	b.n	8002de0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	f4ff af32 	bcc.w	8002c2e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002dde:	2302      	movs	r3, #2
  }
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3720      	adds	r7, #32
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	00100002 	.word	0x00100002
 8002dec:	ffff0000 	.word	0xffff0000

08002df0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af02      	add	r7, sp, #8
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	4608      	mov	r0, r1
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4603      	mov	r3, r0
 8002e00:	817b      	strh	r3, [r7, #10]
 8002e02:	460b      	mov	r3, r1
 8002e04:	813b      	strh	r3, [r7, #8]
 8002e06:	4613      	mov	r3, r2
 8002e08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f960 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00d      	beq.n	8002e4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e40:	d103      	bne.n	8002e4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e48:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e05f      	b.n	8002f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e4e:	897b      	ldrh	r3, [r7, #10]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	6a3a      	ldr	r2, [r7, #32]
 8002e62:	492d      	ldr	r1, [pc, #180]	@ (8002f18 <I2C_RequestMemoryWrite+0x128>)
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f9bb 	bl	80031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e04c      	b.n	8002f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e8c:	6a39      	ldr	r1, [r7, #32]
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 fa46 	bl	8003320 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00d      	beq.n	8002eb6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d107      	bne.n	8002eb2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e02b      	b.n	8002f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d105      	bne.n	8002ec8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ebc:	893b      	ldrh	r3, [r7, #8]
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	611a      	str	r2, [r3, #16]
 8002ec6:	e021      	b.n	8002f0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ec8:	893b      	ldrh	r3, [r7, #8]
 8002eca:	0a1b      	lsrs	r3, r3, #8
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed8:	6a39      	ldr	r1, [r7, #32]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 fa20 	bl	8003320 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00d      	beq.n	8002f02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d107      	bne.n	8002efe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002efc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e005      	b.n	8002f0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f02:	893b      	ldrh	r3, [r7, #8]
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	00010002 	.word	0x00010002

08002f1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	4608      	mov	r0, r1
 8002f26:	4611      	mov	r1, r2
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	817b      	strh	r3, [r7, #10]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	813b      	strh	r3, [r7, #8]
 8002f32:	4613      	mov	r3, r2
 8002f34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f8c2 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00d      	beq.n	8002f8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f7c:	d103      	bne.n	8002f86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e0aa      	b.n	80030e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f8a:	897b      	ldrh	r3, [r7, #10]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	6a3a      	ldr	r2, [r7, #32]
 8002f9e:	4952      	ldr	r1, [pc, #328]	@ (80030e8 <I2C_RequestMemoryRead+0x1cc>)
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f91d 	bl	80031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e097      	b.n	80030e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc8:	6a39      	ldr	r1, [r7, #32]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f9a8 	bl	8003320 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00d      	beq.n	8002ff2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d107      	bne.n	8002fee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e076      	b.n	80030e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d105      	bne.n	8003004 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ff8:	893b      	ldrh	r3, [r7, #8]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	611a      	str	r2, [r3, #16]
 8003002:	e021      	b.n	8003048 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003004:	893b      	ldrh	r3, [r7, #8]
 8003006:	0a1b      	lsrs	r3, r3, #8
 8003008:	b29b      	uxth	r3, r3
 800300a:	b2da      	uxtb	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003014:	6a39      	ldr	r1, [r7, #32]
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f982 	bl	8003320 <I2C_WaitOnTXEFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00d      	beq.n	800303e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	2b04      	cmp	r3, #4
 8003028:	d107      	bne.n	800303a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003038:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e050      	b.n	80030e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800303e:	893b      	ldrh	r3, [r7, #8]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800304a:	6a39      	ldr	r1, [r7, #32]
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 f967 	bl	8003320 <I2C_WaitOnTXEFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00d      	beq.n	8003074 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	2b04      	cmp	r3, #4
 800305e:	d107      	bne.n	8003070 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800306e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e035      	b.n	80030e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003082:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	2200      	movs	r2, #0
 800308c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f82b 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00d      	beq.n	80030b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030aa:	d103      	bne.n	80030b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e013      	b.n	80030e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030b8:	897b      	ldrh	r3, [r7, #10]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ca:	6a3a      	ldr	r2, [r7, #32]
 80030cc:	4906      	ldr	r1, [pc, #24]	@ (80030e8 <I2C_RequestMemoryRead+0x1cc>)
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f886 	bl	80031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	00010002 	.word	0x00010002

080030ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	4613      	mov	r3, r2
 80030fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030fc:	e048      	b.n	8003190 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003104:	d044      	beq.n	8003190 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003106:	f7fe fc41 	bl	800198c <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d302      	bcc.n	800311c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d139      	bne.n	8003190 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	0c1b      	lsrs	r3, r3, #16
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d10d      	bne.n	8003142 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	43da      	mvns	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	4013      	ands	r3, r2
 8003132:	b29b      	uxth	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf0c      	ite	eq
 8003138:	2301      	moveq	r3, #1
 800313a:	2300      	movne	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	461a      	mov	r2, r3
 8003140:	e00c      	b.n	800315c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	43da      	mvns	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	4013      	ands	r3, r2
 800314e:	b29b      	uxth	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	429a      	cmp	r2, r3
 8003160:	d116      	bne.n	8003190 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317c:	f043 0220 	orr.w	r2, r3, #32
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e023      	b.n	80031d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	0c1b      	lsrs	r3, r3, #16
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d10d      	bne.n	80031b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	43da      	mvns	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	4013      	ands	r3, r2
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	e00c      	b.n	80031d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	43da      	mvns	r2, r3
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	4013      	ands	r3, r2
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d093      	beq.n	80030fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031ee:	e071      	b.n	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031fe:	d123      	bne.n	8003248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800320e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003218:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	f043 0204 	orr.w	r2, r3, #4
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e067      	b.n	8003318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324e:	d041      	beq.n	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003250:	f7fe fb9c 	bl	800198c <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	429a      	cmp	r2, r3
 800325e:	d302      	bcc.n	8003266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d136      	bne.n	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	0c1b      	lsrs	r3, r3, #16
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	d10c      	bne.n	800328a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	43da      	mvns	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4013      	ands	r3, r2
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	bf14      	ite	ne
 8003282:	2301      	movne	r3, #1
 8003284:	2300      	moveq	r3, #0
 8003286:	b2db      	uxtb	r3, r3
 8003288:	e00b      	b.n	80032a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	43da      	mvns	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	4013      	ands	r3, r2
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf14      	ite	ne
 800329c:	2301      	movne	r3, #1
 800329e:	2300      	moveq	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d016      	beq.n	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c0:	f043 0220 	orr.w	r2, r3, #32
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e021      	b.n	8003318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	0c1b      	lsrs	r3, r3, #16
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d10c      	bne.n	80032f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	43da      	mvns	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	4013      	ands	r3, r2
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bf14      	ite	ne
 80032f0:	2301      	movne	r3, #1
 80032f2:	2300      	moveq	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	e00b      	b.n	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	43da      	mvns	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	4013      	ands	r3, r2
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	bf14      	ite	ne
 800330a:	2301      	movne	r3, #1
 800330c:	2300      	moveq	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	f47f af6d 	bne.w	80031f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800332c:	e034      	b.n	8003398 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f8e3 	bl	80034fa <I2C_IsAcknowledgeFailed>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e034      	b.n	80033a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d028      	beq.n	8003398 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003346:	f7fe fb21 	bl	800198c <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	429a      	cmp	r2, r3
 8003354:	d302      	bcc.n	800335c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d11d      	bne.n	8003398 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003366:	2b80      	cmp	r3, #128	@ 0x80
 8003368:	d016      	beq.n	8003398 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e007      	b.n	80033a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a2:	2b80      	cmp	r3, #128	@ 0x80
 80033a4:	d1c3      	bne.n	800332e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033bc:	e034      	b.n	8003428 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 f89b 	bl	80034fa <I2C_IsAcknowledgeFailed>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e034      	b.n	8003438 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d028      	beq.n	8003428 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d6:	f7fe fad9 	bl	800198c <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d302      	bcc.n	80033ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d11d      	bne.n	8003428 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d016      	beq.n	8003428 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003414:	f043 0220 	orr.w	r2, r3, #32
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e007      	b.n	8003438 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b04      	cmp	r3, #4
 8003434:	d1c3      	bne.n	80033be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800344c:	e049      	b.n	80034e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b10      	cmp	r3, #16
 800345a:	d119      	bne.n	8003490 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0210 	mvn.w	r2, #16
 8003464:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e030      	b.n	80034f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003490:	f7fe fa7c 	bl	800198c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	429a      	cmp	r2, r3
 800349e:	d302      	bcc.n	80034a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d11d      	bne.n	80034e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b0:	2b40      	cmp	r3, #64	@ 0x40
 80034b2:	d016      	beq.n	80034e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	f043 0220 	orr.w	r2, r3, #32
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e007      	b.n	80034f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ec:	2b40      	cmp	r3, #64	@ 0x40
 80034ee:	d1ae      	bne.n	800344e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800350c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003510:	d11b      	bne.n	800354a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800351a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	f043 0204 	orr.w	r2, r3, #4
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr
	...

08003558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e272      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8087 	beq.w	8003686 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003578:	4b92      	ldr	r3, [pc, #584]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	2b04      	cmp	r3, #4
 8003582:	d00c      	beq.n	800359e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003584:	4b8f      	ldr	r3, [pc, #572]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 030c 	and.w	r3, r3, #12
 800358c:	2b08      	cmp	r3, #8
 800358e:	d112      	bne.n	80035b6 <HAL_RCC_OscConfig+0x5e>
 8003590:	4b8c      	ldr	r3, [pc, #560]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800359c:	d10b      	bne.n	80035b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359e:	4b89      	ldr	r3, [pc, #548]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d06c      	beq.n	8003684 <HAL_RCC_OscConfig+0x12c>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d168      	bne.n	8003684 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e24c      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035be:	d106      	bne.n	80035ce <HAL_RCC_OscConfig+0x76>
 80035c0:	4b80      	ldr	r3, [pc, #512]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a7f      	ldr	r2, [pc, #508]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	e02e      	b.n	800362c <HAL_RCC_OscConfig+0xd4>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x98>
 80035d6:	4b7b      	ldr	r3, [pc, #492]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a7a      	ldr	r2, [pc, #488]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	4b78      	ldr	r3, [pc, #480]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a77      	ldr	r2, [pc, #476]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e01d      	b.n	800362c <HAL_RCC_OscConfig+0xd4>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0xbc>
 80035fa:	4b72      	ldr	r3, [pc, #456]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a71      	ldr	r2, [pc, #452]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4b6f      	ldr	r3, [pc, #444]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a6e      	ldr	r2, [pc, #440]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0xd4>
 8003614:	4b6b      	ldr	r3, [pc, #428]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a6a      	ldr	r2, [pc, #424]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 800361a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4b68      	ldr	r3, [pc, #416]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a67      	ldr	r2, [pc, #412]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800362a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fe f9aa 	bl	800198c <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fe f9a6 	bl	800198c <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	@ 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e200      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364e:	4b5d      	ldr	r3, [pc, #372]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0xe4>
 800365a:	e014      	b.n	8003686 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fe f996 	bl	800198c <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003664:	f7fe f992 	bl	800198c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	@ 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e1ec      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003676:	4b53      	ldr	r3, [pc, #332]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x10c>
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d063      	beq.n	800375a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003692:	4b4c      	ldr	r3, [pc, #304]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00b      	beq.n	80036b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800369e:	4b49      	ldr	r3, [pc, #292]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d11c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x18c>
 80036aa:	4b46      	ldr	r3, [pc, #280]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d116      	bne.n	80036e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b6:	4b43      	ldr	r3, [pc, #268]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_RCC_OscConfig+0x176>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d001      	beq.n	80036ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e1c0      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ce:	4b3d      	ldr	r3, [pc, #244]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4939      	ldr	r1, [pc, #228]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e2:	e03a      	b.n	800375a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ec:	4b36      	ldr	r3, [pc, #216]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f2:	f7fe f94b 	bl	800198c <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fa:	f7fe f947 	bl	800198c <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e1a1      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370c:	4b2d      	ldr	r3, [pc, #180]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003718:	4b2a      	ldr	r3, [pc, #168]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4927      	ldr	r1, [pc, #156]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003728:	4313      	orrs	r3, r2
 800372a:	600b      	str	r3, [r1, #0]
 800372c:	e015      	b.n	800375a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800372e:	4b26      	ldr	r3, [pc, #152]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fe f92a 	bl	800198c <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800373c:	f7fe f926 	bl	800198c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e180      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374e:	4b1d      	ldr	r3, [pc, #116]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d03a      	beq.n	80037dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d019      	beq.n	80037a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800376e:	4b17      	ldr	r3, [pc, #92]	@ (80037cc <HAL_RCC_OscConfig+0x274>)
 8003770:	2201      	movs	r2, #1
 8003772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003774:	f7fe f90a 	bl	800198c <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800377c:	f7fe f906 	bl	800198c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e160      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378e:	4b0d      	ldr	r3, [pc, #52]	@ (80037c4 <HAL_RCC_OscConfig+0x26c>)
 8003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800379a:	2001      	movs	r0, #1
 800379c:	f000 face 	bl	8003d3c <RCC_Delay>
 80037a0:	e01c      	b.n	80037dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a2:	4b0a      	ldr	r3, [pc, #40]	@ (80037cc <HAL_RCC_OscConfig+0x274>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a8:	f7fe f8f0 	bl	800198c <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ae:	e00f      	b.n	80037d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b0:	f7fe f8ec 	bl	800198c <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d908      	bls.n	80037d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e146      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
 80037c2:	bf00      	nop
 80037c4:	40021000 	.word	0x40021000
 80037c8:	42420000 	.word	0x42420000
 80037cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d0:	4b92      	ldr	r3, [pc, #584]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80037d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1e9      	bne.n	80037b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80a6 	beq.w	8003936 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ea:	2300      	movs	r3, #0
 80037ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ee:	4b8b      	ldr	r3, [pc, #556]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10d      	bne.n	8003816 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037fa:	4b88      	ldr	r3, [pc, #544]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	4a87      	ldr	r2, [pc, #540]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003804:	61d3      	str	r3, [r2, #28]
 8003806:	4b85      	ldr	r3, [pc, #532]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003812:	2301      	movs	r3, #1
 8003814:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003816:	4b82      	ldr	r3, [pc, #520]	@ (8003a20 <HAL_RCC_OscConfig+0x4c8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d118      	bne.n	8003854 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003822:	4b7f      	ldr	r3, [pc, #508]	@ (8003a20 <HAL_RCC_OscConfig+0x4c8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a7e      	ldr	r2, [pc, #504]	@ (8003a20 <HAL_RCC_OscConfig+0x4c8>)
 8003828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800382c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382e:	f7fe f8ad 	bl	800198c <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003836:	f7fe f8a9 	bl	800198c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b64      	cmp	r3, #100	@ 0x64
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e103      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003848:	4b75      	ldr	r3, [pc, #468]	@ (8003a20 <HAL_RCC_OscConfig+0x4c8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d106      	bne.n	800386a <HAL_RCC_OscConfig+0x312>
 800385c:	4b6f      	ldr	r3, [pc, #444]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	4a6e      	ldr	r2, [pc, #440]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	6213      	str	r3, [r2, #32]
 8003868:	e02d      	b.n	80038c6 <HAL_RCC_OscConfig+0x36e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10c      	bne.n	800388c <HAL_RCC_OscConfig+0x334>
 8003872:	4b6a      	ldr	r3, [pc, #424]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	4a69      	ldr	r2, [pc, #420]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003878:	f023 0301 	bic.w	r3, r3, #1
 800387c:	6213      	str	r3, [r2, #32]
 800387e:	4b67      	ldr	r3, [pc, #412]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	4a66      	ldr	r2, [pc, #408]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003884:	f023 0304 	bic.w	r3, r3, #4
 8003888:	6213      	str	r3, [r2, #32]
 800388a:	e01c      	b.n	80038c6 <HAL_RCC_OscConfig+0x36e>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b05      	cmp	r3, #5
 8003892:	d10c      	bne.n	80038ae <HAL_RCC_OscConfig+0x356>
 8003894:	4b61      	ldr	r3, [pc, #388]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	4a60      	ldr	r2, [pc, #384]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 800389a:	f043 0304 	orr.w	r3, r3, #4
 800389e:	6213      	str	r3, [r2, #32]
 80038a0:	4b5e      	ldr	r3, [pc, #376]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	4a5d      	ldr	r2, [pc, #372]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	6213      	str	r3, [r2, #32]
 80038ac:	e00b      	b.n	80038c6 <HAL_RCC_OscConfig+0x36e>
 80038ae:	4b5b      	ldr	r3, [pc, #364]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	4a5a      	ldr	r2, [pc, #360]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	6213      	str	r3, [r2, #32]
 80038ba:	4b58      	ldr	r3, [pc, #352]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	4a57      	ldr	r2, [pc, #348]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038c0:	f023 0304 	bic.w	r3, r3, #4
 80038c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d015      	beq.n	80038fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ce:	f7fe f85d 	bl	800198c <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d4:	e00a      	b.n	80038ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d6:	f7fe f859 	bl	800198c <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e0b1      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ec:	4b4b      	ldr	r3, [pc, #300]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0ee      	beq.n	80038d6 <HAL_RCC_OscConfig+0x37e>
 80038f8:	e014      	b.n	8003924 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fa:	f7fe f847 	bl	800198c <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003900:	e00a      	b.n	8003918 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003902:	f7fe f843 	bl	800198c <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003910:	4293      	cmp	r3, r2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e09b      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003918:	4b40      	ldr	r3, [pc, #256]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1ee      	bne.n	8003902 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003924:	7dfb      	ldrb	r3, [r7, #23]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d105      	bne.n	8003936 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800392a:	4b3c      	ldr	r3, [pc, #240]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	4a3b      	ldr	r2, [pc, #236]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003930:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003934:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 8087 	beq.w	8003a4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003940:	4b36      	ldr	r3, [pc, #216]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 030c 	and.w	r3, r3, #12
 8003948:	2b08      	cmp	r3, #8
 800394a:	d061      	beq.n	8003a10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	2b02      	cmp	r3, #2
 8003952:	d146      	bne.n	80039e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003954:	4b33      	ldr	r3, [pc, #204]	@ (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395a:	f7fe f817 	bl	800198c <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003962:	f7fe f813 	bl	800198c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e06d      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003974:	4b29      	ldr	r3, [pc, #164]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f0      	bne.n	8003962 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003988:	d108      	bne.n	800399c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800398a:	4b24      	ldr	r3, [pc, #144]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	4921      	ldr	r1, [pc, #132]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003998:	4313      	orrs	r3, r2
 800399a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800399c:	4b1f      	ldr	r3, [pc, #124]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a19      	ldr	r1, [r3, #32]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ac:	430b      	orrs	r3, r1
 80039ae:	491b      	ldr	r1, [pc, #108]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ba:	f7fd ffe7 	bl	800198c <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c2:	f7fd ffe3 	bl	800198c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e03d      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039d4:	4b11      	ldr	r3, [pc, #68]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x46a>
 80039e0:	e035      	b.n	8003a4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e2:	4b10      	ldr	r3, [pc, #64]	@ (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fd ffd0 	bl	800198c <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fd ffcc 	bl	800198c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e026      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a02:	4b06      	ldr	r3, [pc, #24]	@ (8003a1c <HAL_RCC_OscConfig+0x4c4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x498>
 8003a0e:	e01e      	b.n	8003a4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d107      	bne.n	8003a28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e019      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40007000 	.word	0x40007000
 8003a24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a28:	4b0b      	ldr	r3, [pc, #44]	@ (8003a58 <HAL_RCC_OscConfig+0x500>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d106      	bne.n	8003a4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d001      	beq.n	8003a4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40021000 	.word	0x40021000

08003a5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0d0      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a70:	4b6a      	ldr	r3, [pc, #424]	@ (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d910      	bls.n	8003aa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7e:	4b67      	ldr	r3, [pc, #412]	@ (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 0207 	bic.w	r2, r3, #7
 8003a86:	4965      	ldr	r1, [pc, #404]	@ (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8e:	4b63      	ldr	r3, [pc, #396]	@ (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d001      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0b8      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d020      	beq.n	8003aee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab8:	4b59      	ldr	r3, [pc, #356]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4a58      	ldr	r2, [pc, #352]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003abe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ac2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0308 	and.w	r3, r3, #8
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ad0:	4b53      	ldr	r3, [pc, #332]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	4a52      	ldr	r2, [pc, #328]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003ada:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003adc:	4b50      	ldr	r3, [pc, #320]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	494d      	ldr	r1, [pc, #308]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d040      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d107      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b02:	4b47      	ldr	r3, [pc, #284]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d115      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e07f      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d107      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1a:	4b41      	ldr	r3, [pc, #260]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e073      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e06b      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b3a:	4b39      	ldr	r3, [pc, #228]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f023 0203 	bic.w	r2, r3, #3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	4936      	ldr	r1, [pc, #216]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b4c:	f7fd ff1e 	bl	800198c <HAL_GetTick>
 8003b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b52:	e00a      	b.n	8003b6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b54:	f7fd ff1a 	bl	800198c <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e053      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f003 020c 	and.w	r2, r3, #12
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d1eb      	bne.n	8003b54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b7c:	4b27      	ldr	r3, [pc, #156]	@ (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d210      	bcs.n	8003bac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8a:	4b24      	ldr	r3, [pc, #144]	@ (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f023 0207 	bic.w	r2, r3, #7
 8003b92:	4922      	ldr	r1, [pc, #136]	@ (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9a:	4b20      	ldr	r3, [pc, #128]	@ (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d001      	beq.n	8003bac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e032      	b.n	8003c12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb8:	4b19      	ldr	r3, [pc, #100]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4916      	ldr	r1, [pc, #88]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bd6:	4b12      	ldr	r3, [pc, #72]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	490e      	ldr	r1, [pc, #56]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bea:	f000 f821 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	091b      	lsrs	r3, r3, #4
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	490a      	ldr	r1, [pc, #40]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfc:	5ccb      	ldrb	r3, [r1, r3]
 8003bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003c02:	4a09      	ldr	r2, [pc, #36]	@ (8003c28 <HAL_RCC_ClockConfig+0x1cc>)
 8003c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c06:	4b09      	ldr	r3, [pc, #36]	@ (8003c2c <HAL_RCC_ClockConfig+0x1d0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fd fe7c 	bl	8001908 <HAL_InitTick>

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40022000 	.word	0x40022000
 8003c20:	40021000 	.word	0x40021000
 8003c24:	08008c6c 	.word	0x08008c6c
 8003c28:	2000000c 	.word	0x2000000c
 8003c2c:	20000010 	.word	0x20000010

08003c30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	2300      	movs	r3, #0
 8003c44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 030c 	and.w	r3, r3, #12
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d002      	beq.n	8003c60 <HAL_RCC_GetSysClockFreq+0x30>
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d003      	beq.n	8003c66 <HAL_RCC_GetSysClockFreq+0x36>
 8003c5e:	e027      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c60:	4b19      	ldr	r3, [pc, #100]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c62:	613b      	str	r3, [r7, #16]
      break;
 8003c64:	e027      	b.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	0c9b      	lsrs	r3, r3, #18
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	4a17      	ldr	r2, [pc, #92]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c70:	5cd3      	ldrb	r3, [r2, r3]
 8003c72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d010      	beq.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c7e:	4b11      	ldr	r3, [pc, #68]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	0c5b      	lsrs	r3, r3, #17
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	4a11      	ldr	r2, [pc, #68]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c8a:	5cd3      	ldrb	r3, [r2, r3]
 8003c8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a0d      	ldr	r2, [pc, #52]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c92:	fb03 f202 	mul.w	r2, r3, r2
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	e004      	b.n	8003caa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	613b      	str	r3, [r7, #16]
      break;
 8003cae:	e002      	b.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cb0:	4b05      	ldr	r3, [pc, #20]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cb2:	613b      	str	r3, [r7, #16]
      break;
 8003cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cb6:	693b      	ldr	r3, [r7, #16]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bc80      	pop	{r7}
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	007a1200 	.word	0x007a1200
 8003ccc:	08008c84 	.word	0x08008c84
 8003cd0:	08008c94 	.word	0x08008c94
 8003cd4:	003d0900 	.word	0x003d0900

08003cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cdc:	4b02      	ldr	r3, [pc, #8]	@ (8003ce8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr
 8003ce8:	2000000c 	.word	0x2000000c

08003cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cf0:	f7ff fff2 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b05      	ldr	r3, [pc, #20]	@ (8003d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	0a1b      	lsrs	r3, r3, #8
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4903      	ldr	r1, [pc, #12]	@ (8003d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	08008c7c 	.word	0x08008c7c

08003d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d18:	f7ff ffde 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	0adb      	lsrs	r3, r3, #11
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	4903      	ldr	r1, [pc, #12]	@ (8003d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d2a:	5ccb      	ldrb	r3, [r1, r3]
 8003d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40021000 	.word	0x40021000
 8003d38:	08008c7c 	.word	0x08008c7c

08003d3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d44:	4b0a      	ldr	r3, [pc, #40]	@ (8003d70 <RCC_Delay+0x34>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a0a      	ldr	r2, [pc, #40]	@ (8003d74 <RCC_Delay+0x38>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	0a5b      	lsrs	r3, r3, #9
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	fb02 f303 	mul.w	r3, r2, r3
 8003d56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d58:	bf00      	nop
  }
  while (Delay --);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1e5a      	subs	r2, r3, #1
 8003d5e:	60fa      	str	r2, [r7, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1f9      	bne.n	8003d58 <RCC_Delay+0x1c>
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr
 8003d70:	2000000c 	.word	0x2000000c
 8003d74:	10624dd3 	.word	0x10624dd3

08003d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e042      	b.n	8003e10 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fd fd2c 	bl	80017fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2224      	movs	r2, #36	@ 0x24
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f971 	bl	80040a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08a      	sub	sp, #40	@ 0x28
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	4613      	mov	r3, r2
 8003e26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d175      	bne.n	8003f24 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <HAL_UART_Transmit+0x2c>
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e06e      	b.n	8003f26 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2221      	movs	r2, #33	@ 0x21
 8003e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e56:	f7fd fd99 	bl	800198c <HAL_GetTick>
 8003e5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	88fa      	ldrh	r2, [r7, #6]
 8003e60:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	88fa      	ldrh	r2, [r7, #6]
 8003e66:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e70:	d108      	bne.n	8003e84 <HAL_UART_Transmit+0x6c>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d104      	bne.n	8003e84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	e003      	b.n	8003e8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e8c:	e02e      	b.n	8003eec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2200      	movs	r2, #0
 8003e96:	2180      	movs	r1, #128	@ 0x80
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f848 	bl	8003f2e <UART_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e03a      	b.n	8003f26 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10b      	bne.n	8003ece <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ec4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	3302      	adds	r3, #2
 8003eca:	61bb      	str	r3, [r7, #24]
 8003ecc:	e007      	b.n	8003ede <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	781a      	ldrb	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	3301      	adds	r3, #1
 8003edc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1cb      	bne.n	8003e8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2200      	movs	r2, #0
 8003efe:	2140      	movs	r1, #64	@ 0x40
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f814 	bl	8003f2e <UART_WaitOnFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e006      	b.n	8003f26 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	e000      	b.n	8003f26 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f24:	2302      	movs	r3, #2
  }
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3720      	adds	r7, #32
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b086      	sub	sp, #24
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	603b      	str	r3, [r7, #0]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f3e:	e03b      	b.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f46:	d037      	beq.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f48:	f7fd fd20 	bl	800198c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	6a3a      	ldr	r2, [r7, #32]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d302      	bcc.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x30>
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e03a      	b.n	8003fd8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d023      	beq.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b80      	cmp	r3, #128	@ 0x80
 8003f74:	d020      	beq.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b40      	cmp	r3, #64	@ 0x40
 8003f7a:	d01d      	beq.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d116      	bne.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f81d 	bl	8003fe0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2208      	movs	r2, #8
 8003faa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e00f      	b.n	8003fd8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d0b4      	beq.n	8003f40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b095      	sub	sp, #84	@ 0x54
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004008:	643a      	str	r2, [r7, #64]	@ 0x40
 800400a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800400e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e5      	bne.n	8003fe8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3314      	adds	r3, #20
 8004022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	61fb      	str	r3, [r7, #28]
   return(result);
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f023 0301 	bic.w	r3, r3, #1
 8004032:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3314      	adds	r3, #20
 800403a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800403c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800403e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e5      	bne.n	800401c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004054:	2b01      	cmp	r3, #1
 8004056:	d119      	bne.n	800408c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	e853 3f00 	ldrex	r3, [r3]
 8004066:	60bb      	str	r3, [r7, #8]
   return(result);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f023 0310 	bic.w	r3, r3, #16
 800406e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	330c      	adds	r3, #12
 8004076:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004078:	61ba      	str	r2, [r7, #24]
 800407a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	6979      	ldr	r1, [r7, #20]
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	e841 2300 	strex	r3, r2, [r1]
 8004084:	613b      	str	r3, [r7, #16]
   return(result);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e5      	bne.n	8004058 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800409a:	bf00      	nop
 800409c:	3754      	adds	r7, #84	@ 0x54
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr

080040a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80040de:	f023 030c 	bic.w	r3, r3, #12
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6812      	ldr	r2, [r2, #0]
 80040e6:	68b9      	ldr	r1, [r7, #8]
 80040e8:	430b      	orrs	r3, r1
 80040ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a2c      	ldr	r2, [pc, #176]	@ (80041b8 <UART_SetConfig+0x114>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d103      	bne.n	8004114 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800410c:	f7ff fe02 	bl	8003d14 <HAL_RCC_GetPCLK2Freq>
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	e002      	b.n	800411a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004114:	f7ff fdea 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 8004118:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	009a      	lsls	r2, r3, #2
 8004124:	441a      	add	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004130:	4a22      	ldr	r2, [pc, #136]	@ (80041bc <UART_SetConfig+0x118>)
 8004132:	fba2 2303 	umull	r2, r3, r2, r3
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	0119      	lsls	r1, r3, #4
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4613      	mov	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	009a      	lsls	r2, r3, #2
 8004144:	441a      	add	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004150:	4b1a      	ldr	r3, [pc, #104]	@ (80041bc <UART_SetConfig+0x118>)
 8004152:	fba3 0302 	umull	r0, r3, r3, r2
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	2064      	movs	r0, #100	@ 0x64
 800415a:	fb00 f303 	mul.w	r3, r0, r3
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	3332      	adds	r3, #50	@ 0x32
 8004164:	4a15      	ldr	r2, [pc, #84]	@ (80041bc <UART_SetConfig+0x118>)
 8004166:	fba2 2303 	umull	r2, r3, r2, r3
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004170:	4419      	add	r1, r3
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	009a      	lsls	r2, r3, #2
 800417c:	441a      	add	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	fbb2 f2f3 	udiv	r2, r2, r3
 8004188:	4b0c      	ldr	r3, [pc, #48]	@ (80041bc <UART_SetConfig+0x118>)
 800418a:	fba3 0302 	umull	r0, r3, r3, r2
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	2064      	movs	r0, #100	@ 0x64
 8004192:	fb00 f303 	mul.w	r3, r0, r3
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	3332      	adds	r3, #50	@ 0x32
 800419c:	4a07      	ldr	r2, [pc, #28]	@ (80041bc <UART_SetConfig+0x118>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	f003 020f 	and.w	r2, r3, #15
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	440a      	add	r2, r1
 80041ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041b0:	bf00      	nop
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40013800 	.word	0x40013800
 80041bc:	51eb851f 	.word	0x51eb851f

080041c0 <Write_Reg>:
 * @param  reg    The register address to write to.
 * @param  value  The value to write to the register.
 *
 * @retval HAL_StatusTypeDef  Returns HAL_OK on success, or HAL_ERROR if the write operation fails.
 */
static HAL_StatusTypeDef Write_Reg(uint8_t reg, uint8_t value) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af04      	add	r7, sp, #16
 80041c6:	4603      	mov	r3, r0
 80041c8:	460a      	mov	r2, r1
 80041ca:	71fb      	strb	r3, [r7, #7]
 80041cc:	4613      	mov	r3, r2
 80041ce:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[1] = {value}, status;
 80041d0:	79bb      	ldrb	r3, [r7, #6]
 80041d2:	733b      	strb	r3, [r7, #12]

	status = HAL_I2C_Mem_Write(&LTC2959_I2C_PORT, LTC2959_I2C_ADDR, reg, 1, &buf[0], 1, 100);
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	2364      	movs	r3, #100	@ 0x64
 80041da:	9302      	str	r3, [sp, #8]
 80041dc:	2301      	movs	r3, #1
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	f107 030c 	add.w	r3, r7, #12
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	2301      	movs	r3, #1
 80041e8:	21c6      	movs	r1, #198	@ 0xc6
 80041ea:	4805      	ldr	r0, [pc, #20]	@ (8004200 <Write_Reg+0x40>)
 80041ec:	f7fe f964 	bl	80024b8 <HAL_I2C_Mem_Write>
 80041f0:	4603      	mov	r3, r0
 80041f2:	73fb      	strb	r3, [r7, #15]
	return status;
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20000250 	.word	0x20000250

08004204 <Read_Reg>:
 *
 * @param  reg  The register address to read from.
 *
 * @retval uint8_t  Returns the value read from the register.
 */
static uint8_t Read_Reg(uint8_t reg){
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af04      	add	r7, sp, #16
 800420a:	4603      	mov	r3, r0
 800420c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	HAL_I2C_Mem_Read(&LTC2959_I2C_PORT, LTC2959_I2C_ADDR, reg, 1, &value, 1, 100);
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	b29a      	uxth	r2, r3
 8004212:	2364      	movs	r3, #100	@ 0x64
 8004214:	9302      	str	r3, [sp, #8]
 8004216:	2301      	movs	r3, #1
 8004218:	9301      	str	r3, [sp, #4]
 800421a:	f107 030f 	add.w	r3, r7, #15
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	2301      	movs	r3, #1
 8004222:	21c6      	movs	r1, #198	@ 0xc6
 8004224:	4803      	ldr	r0, [pc, #12]	@ (8004234 <Read_Reg+0x30>)
 8004226:	f7fe fa41 	bl	80026ac <HAL_I2C_Mem_Read>
	return value;
 800422a:	7bfb      	ldrb	r3, [r7, #15]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20000250 	.word	0x20000250

08004238 <Set_ADC_Mode>:
 * This function writes the specified ADC mode to the ADC control register.
 *
 * @param  mode  This parameter can be a value of @ref ADC_MODE.
 * Specifies the ADC mode to be set.
 */
static HAL_StatusTypeDef Set_ADC_Mode(uint8_t mode){
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	4603      	mov	r3, r0
 8004240:	71fb      	strb	r3, [r7, #7]
    uint8_t value = Read_Reg(REG_ADC_CONTROL);
 8004242:	2001      	movs	r0, #1
 8004244:	f7ff ffde 	bl	8004204 <Read_Reg>
 8004248:	4603      	mov	r3, r0
 800424a:	73fb      	strb	r3, [r7, #15]
    MODIFY_REG(value, CTRL_ADC_MODE_MASK, mode);
 800424c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004250:	f003 031f 	and.w	r3, r3, #31
 8004254:	b25a      	sxtb	r2, r3
 8004256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425a:	4313      	orrs	r3, r2
 800425c:	b25b      	sxtb	r3, r3
 800425e:	73fb      	strb	r3, [r7, #15]
    return Write_Reg(REG_ADC_CONTROL, value);
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	4619      	mov	r1, r3
 8004264:	2001      	movs	r0, #1
 8004266:	f7ff ffab 	bl	80041c0 <Write_Reg>
 800426a:	4603      	mov	r3, r0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <Set_GPIO_Configure>:
 * This function configures the GPIO pin to the specified mode.
 *
 * @param  config  This parameter can be a value of @ref GPIO_CONFIG.
 * Specifies the GPIO mode to be set.
 */
static HAL_StatusTypeDef Set_GPIO_Configure(uint8_t config) {
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	71fb      	strb	r3, [r7, #7]
    uint8_t value = Read_Reg(REG_ADC_CONTROL);
 800427e:	2001      	movs	r0, #1
 8004280:	f7ff ffc0 	bl	8004204 <Read_Reg>
 8004284:	4603      	mov	r3, r0
 8004286:	73fb      	strb	r3, [r7, #15]
    MODIFY_REG(value, CTRL_GPIO_CONFIG_MASK, config);
 8004288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800428c:	f023 0318 	bic.w	r3, r3, #24
 8004290:	b25a      	sxtb	r2, r3
 8004292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004296:	4313      	orrs	r3, r2
 8004298:	b25b      	sxtb	r3, r3
 800429a:	73fb      	strb	r3, [r7, #15]
    return Write_Reg(REG_ADC_CONTROL, value);
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	4619      	mov	r1, r3
 80042a0:	2001      	movs	r0, #1
 80042a2:	f7ff ff8d 	bl	80041c0 <Write_Reg>
 80042a6:	4603      	mov	r3, r0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <Set_Voltage_Input>:
 * VDD and SENSEN based on the input parameter.
 *
 * @param  input  This parameter can be a value of @ref VOLTAGE_INPUT.
 * Specifies the voltage input pin (VDD or SENSEN).
 */
static HAL_StatusTypeDef Set_Voltage_Input(uint8_t input) {
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	71fb      	strb	r3, [r7, #7]
    uint8_t value = Read_Reg(REG_ADC_CONTROL);
 80042ba:	2001      	movs	r0, #1
 80042bc:	f7ff ffa2 	bl	8004204 <Read_Reg>
 80042c0:	4603      	mov	r3, r0
 80042c2:	73fb      	strb	r3, [r7, #15]
    MODIFY_REG(value, CTRL_CONFIG_VOLTAGE_INPUT_MASK, input);
 80042c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042c8:	f023 0304 	bic.w	r3, r3, #4
 80042cc:	b25a      	sxtb	r2, r3
 80042ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	b25b      	sxtb	r3, r3
 80042d6:	73fb      	strb	r3, [r7, #15]
    return Write_Reg(REG_ADC_CONTROL, value);
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	4619      	mov	r1, r3
 80042dc:	2001      	movs	r0, #1
 80042de:	f7ff ff6f 	bl	80041c0 <Write_Reg>
 80042e2:	4603      	mov	r3, r0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <Set_Coulomb_Counter_Deadband>:
 * This function sets the deadband for the Coulomb Counter.
 *
 * @param  deadband  This parameter can be a value of @ref COULOMB_COUNTER_DEADBAND.
 * Specifies the deadband value for the Coulomb Counter.
 */
static HAL_StatusTypeDef Set_Coulomb_Counter_Deadband(uint8_t deadband){
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	71fb      	strb	r3, [r7, #7]
	uint8_t value = Read_Reg(REG_COULOMB_COUNTER_CONTROL);
 80042f6:	2002      	movs	r0, #2
 80042f8:	f7ff ff84 	bl	8004204 <Read_Reg>
 80042fc:	4603      	mov	r3, r0
 80042fe:	73fb      	strb	r3, [r7, #15]
    // Set the deadband
	MODIFY_REG(value, CC_CONFIG_DEADBAND_MASK, deadband);
 8004300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004308:	b25a      	sxtb	r2, r3
 800430a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430e:	4313      	orrs	r3, r2
 8004310:	b25b      	sxtb	r3, r3
 8004312:	73fb      	strb	r3, [r7, #15]
	// Ensure reserved bits are set to their default values
	MODIFY_REG(value, CC_CONFIG_RESERVED_54_MASK, CC_CONFIG_RESERVED_54_DEFAULT);
 8004314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004318:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800431c:	b25b      	sxtb	r3, r3
 800431e:	f043 0310 	orr.w	r3, r3, #16
 8004322:	b25b      	sxtb	r3, r3
 8004324:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG(value, CC_CONFIG_RESERVED_20_MASK, CC_CONFIG_RESERVED_20_DEFAULT);
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	f023 0307 	bic.w	r3, r3, #7
 800432c:	73fb      	strb	r3, [r7, #15]
	return Write_Reg(REG_COULOMB_COUNTER_CONTROL, value);
 800432e:	7bfb      	ldrb	r3, [r7, #15]
 8004330:	4619      	mov	r1, r3
 8004332:	2002      	movs	r0, #2
 8004334:	f7ff ff44 	bl	80041c0 <Write_Reg>
 8004338:	4603      	mov	r3, r0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <LTC2959_Init>:
 * structure provided.
 *
 * @param  config_t  Pointer to a structure of type @ref LTC2959_Config_t containing
 * the initialization parameters for the LTC2959.
 */
void LTC2959_Init(LTC2959_Config_t *config_t){
 8004342:	b580      	push	{r7, lr}
 8004344:	b082      	sub	sp, #8
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
#ifndef _DEBUG
	Set_ADC_Mode(config_t->ADC_mode);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff ff72 	bl	8004238 <Set_ADC_Mode>
	HAL_Delay(10);
 8004354:	200a      	movs	r0, #10
 8004356:	f7fd fb23 	bl	80019a0 <HAL_Delay>
	Set_GPIO_Configure(config_t->GPIO_config);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	785b      	ldrb	r3, [r3, #1]
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff ff88 	bl	8004274 <Set_GPIO_Configure>
	HAL_Delay(10);
 8004364:	200a      	movs	r0, #10
 8004366:	f7fd fb1b 	bl	80019a0 <HAL_Delay>
	Set_Voltage_Input(config_t->voltage_input);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	789b      	ldrb	r3, [r3, #2]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff ff9e 	bl	80042b0 <Set_Voltage_Input>
	HAL_Delay(10);
 8004374:	200a      	movs	r0, #10
 8004376:	f7fd fb13 	bl	80019a0 <HAL_Delay>
	Set_Coulomb_Counter_Deadband(config_t->CC_deadband);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	78db      	ldrb	r3, [r3, #3]
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff ffb4 	bl	80042ec <Set_Coulomb_Counter_Deadband>
	HAL_Delay(10);
 8004384:	200a      	movs	r0, #10
 8004386:	f7fd fb0b 	bl	80019a0 <HAL_Delay>
	status = Set_Coulomb_Counter_Deadband(config_t->CC_deadband);
	printf("Set_Coulomb_Counter_Deadband = %d\n\r", status);
	HAL_Delay(10);
#endif

}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	0000      	movs	r0, r0
 8004394:	0000      	movs	r0, r0
	...

08004398 <LTC2959_Get_Acc_Charge>:
 * This function reads the accumulated charge register of the LTC2959 and
 * returns the total accumulated charge in mAh (milli-Amp Hour).
 *
 * @return Total accumulated charge in mAh.
 */
float LTC2959_Get_Acc_Charge(){
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
	uint8_t buf[4];
	uint32_t charge_raw;
	float total_charge_mAh;

	// Read the MSB and LSB of the voltage register
	buf[0] = Read_Reg(REG_ACCUMULATED_CHARGE_MSB);
 800439e:	2003      	movs	r0, #3
 80043a0:	f7ff ff30 	bl	8004204 <Read_Reg>
 80043a4:	4603      	mov	r3, r0
 80043a6:	713b      	strb	r3, [r7, #4]
	buf[1] = Read_Reg(REG_ACCUMULATED_CHARGE_23_16);
 80043a8:	2004      	movs	r0, #4
 80043aa:	f7ff ff2b 	bl	8004204 <Read_Reg>
 80043ae:	4603      	mov	r3, r0
 80043b0:	717b      	strb	r3, [r7, #5]
	buf[2] = Read_Reg(REG_ACCUMULATED_CHARGE_15_8);
 80043b2:	2005      	movs	r0, #5
 80043b4:	f7ff ff26 	bl	8004204 <Read_Reg>
 80043b8:	4603      	mov	r3, r0
 80043ba:	71bb      	strb	r3, [r7, #6]
	buf[3] = Read_Reg(REG_ACCUMULATED_CHARGE_LSB);
 80043bc:	2006      	movs	r0, #6
 80043be:	f7ff ff21 	bl	8004204 <Read_Reg>
 80043c2:	4603      	mov	r3, r0
 80043c4:	71fb      	strb	r3, [r7, #7]

	charge_raw = 	((uint32_t)buf[0] << 24) |
 80043c6:	793b      	ldrb	r3, [r7, #4]
 80043c8:	061a      	lsls	r2, r3, #24
					((uint32_t)buf[1] << 16) |
 80043ca:	797b      	ldrb	r3, [r7, #5]
 80043cc:	041b      	lsls	r3, r3, #16
	charge_raw = 	((uint32_t)buf[0] << 24) |
 80043ce:	431a      	orrs	r2, r3
					((uint32_t)buf[2] << 8)	 |
 80043d0:	79bb      	ldrb	r3, [r7, #6]
 80043d2:	021b      	lsls	r3, r3, #8
					((uint32_t)buf[1] << 16) |
 80043d4:	4313      	orrs	r3, r2
					(uint32_t)buf[3];
 80043d6:	79fa      	ldrb	r2, [r7, #7]
	charge_raw = 	((uint32_t)buf[0] << 24) |
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]

	total_charge_mAh = ((float)charge_raw - ACR_MID_SCALE) * QLSB ;
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f7fc fc79 	bl	8000cd4 <__aeabi_ui2f>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f04f 419e 	mov.w	r1, #1325400064	@ 0x4f000000
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fc fbc1 	bl	8000b70 <__aeabi_fsub>
 80043ee:	4603      	mov	r3, r0
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fc f819 	bl	8000428 <__aeabi_f2d>
 80043f6:	a30a      	add	r3, pc, #40	@ (adr r3, 8004420 <LTC2959_Get_Acc_Charge+0x88>)
 80043f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fc:	f7fc f86c 	bl	80004d8 <__aeabi_dmul>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4610      	mov	r0, r2
 8004406:	4619      	mov	r1, r3
 8004408:	f7fc fb5e 	bl	8000ac8 <__aeabi_d2f>
 800440c:	4603      	mov	r3, r0
 800440e:	60bb      	str	r3, [r7, #8]

	return total_charge_mAh;
 8004410:	68bb      	ldr	r3, [r7, #8]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	f3af 8000 	nop.w
 8004420:	ce06de97 	.word	0xce06de97
 8004424:	3f557b7c 	.word	0x3f557b7c

08004428 <LTC2959_Get_Voltage>:
 *
 * This function reads the voltage register and returns the voltage value in volts.
 * VDD or SENSEN (depending on the ADC control settings).
 * @return Voltage in volts.
 */
float LTC2959_Get_Voltage(){
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
	uint8_t buf[2];
	uint16_t value;
	float voltage;

	// Read the MSB and LSB of the voltage register
	buf[0] = Read_Reg(REG_VOLTAGE_MSB);
 800442e:	200f      	movs	r0, #15
 8004430:	f7ff fee8 	bl	8004204 <Read_Reg>
 8004434:	4603      	mov	r3, r0
 8004436:	713b      	strb	r3, [r7, #4]
	buf[1] = Read_Reg(REG_VOLTAGE_LSB);
 8004438:	2010      	movs	r0, #16
 800443a:	f7ff fee3 	bl	8004204 <Read_Reg>
 800443e:	4603      	mov	r3, r0
 8004440:	717b      	strb	r3, [r7, #5]
	value = (buf[0] << 8) | buf[1];
 8004442:	793b      	ldrb	r3, [r7, #4]
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	b21a      	sxth	r2, r3
 8004448:	797b      	ldrb	r3, [r7, #5]
 800444a:	b21b      	sxth	r3, r3
 800444c:	4313      	orrs	r3, r2
 800444e:	b21b      	sxth	r3, r3
 8004450:	81fb      	strh	r3, [r7, #14]
	voltage = 62.6 * ((float)value / 65536.0);
 8004452:	89fb      	ldrh	r3, [r7, #14]
 8004454:	4618      	mov	r0, r3
 8004456:	f7fc fc3d 	bl	8000cd4 <__aeabi_ui2f>
 800445a:	4603      	mov	r3, r0
 800445c:	4618      	mov	r0, r3
 800445e:	f7fb ffe3 	bl	8000428 <__aeabi_f2d>
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	4b0e      	ldr	r3, [pc, #56]	@ (80044a0 <LTC2959_Get_Voltage+0x78>)
 8004468:	f7fc f960 	bl	800072c <__aeabi_ddiv>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4610      	mov	r0, r2
 8004472:	4619      	mov	r1, r3
 8004474:	a308      	add	r3, pc, #32	@ (adr r3, 8004498 <LTC2959_Get_Voltage+0x70>)
 8004476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447a:	f7fc f82d 	bl	80004d8 <__aeabi_dmul>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4610      	mov	r0, r2
 8004484:	4619      	mov	r1, r3
 8004486:	f7fc fb1f 	bl	8000ac8 <__aeabi_d2f>
 800448a:	4603      	mov	r3, r0
 800448c:	60bb      	str	r3, [r7, #8]

	return voltage;
 800448e:	68bb      	ldr	r3, [r7, #8]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	cccccccd 	.word	0xcccccccd
 800449c:	404f4ccc 	.word	0x404f4ccc
 80044a0:	40f00000 	.word	0x40f00000

080044a4 <LTC2959_Get_Current>:
 * This function reads the current register and calculates the
 * current using the sense resistor value.
 *
 * @return Current in amperes.
 */
float LTC2959_Get_Current(){
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
	uint8_t buf[2];
	int16_t value;
	float current;

	// Read the MSB and LSB of the current register
	buf[0] = Read_Reg(REG_CURRENT_MSB);
 80044aa:	2019      	movs	r0, #25
 80044ac:	f7ff feaa 	bl	8004204 <Read_Reg>
 80044b0:	4603      	mov	r3, r0
 80044b2:	713b      	strb	r3, [r7, #4]
	buf[1] = Read_Reg(REG_CURRENT_LSB);
 80044b4:	201a      	movs	r0, #26
 80044b6:	f7ff fea5 	bl	8004204 <Read_Reg>
 80044ba:	4603      	mov	r3, r0
 80044bc:	717b      	strb	r3, [r7, #5]

	// Combine MSB and LSB into 16-bit signed value
	value = (int16_t)((buf[0] << 8) | buf[1]);
 80044be:	793b      	ldrb	r3, [r7, #4]
 80044c0:	021b      	lsls	r3, r3, #8
 80044c2:	b21a      	sxth	r2, r3
 80044c4:	797b      	ldrb	r3, [r7, #5]
 80044c6:	b21b      	sxth	r3, r3
 80044c8:	4313      	orrs	r3, r2
 80044ca:	81fb      	strh	r3, [r7, #14]

	// Calculate the current
	current = ((97.5f / USER_RSENSE)
			* (value / 32768.0f)
 80044cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fc fc03 	bl	8000cdc <__aeabi_i2f>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f04f 418e 	mov.w	r1, #1191182336	@ 0x47000000
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fc fd05 	bl	8000eec <__aeabi_fdiv>
 80044e2:	4603      	mov	r3, r0
	current = ((97.5f / USER_RSENSE)
 80044e4:	4905      	ldr	r1, [pc, #20]	@ (80044fc <LTC2959_Get_Current+0x58>)
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fc fc4c 	bl	8000d84 <__aeabi_fmul>
 80044ec:	4603      	mov	r3, r0
 80044ee:	60bb      	str	r3, [r7, #8]
			* RSENSE_CALIBRATION_FACTOR);

	return current;
 80044f0:	68bb      	ldr	r3, [r7, #8]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	409c0000 	.word	0x409c0000

08004500 <__cvt>:
 8004500:	2b00      	cmp	r3, #0
 8004502:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004506:	461d      	mov	r5, r3
 8004508:	bfbb      	ittet	lt
 800450a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800450e:	461d      	movlt	r5, r3
 8004510:	2300      	movge	r3, #0
 8004512:	232d      	movlt	r3, #45	@ 0x2d
 8004514:	b088      	sub	sp, #32
 8004516:	4614      	mov	r4, r2
 8004518:	bfb8      	it	lt
 800451a:	4614      	movlt	r4, r2
 800451c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800451e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004520:	7013      	strb	r3, [r2, #0]
 8004522:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004524:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004528:	f023 0820 	bic.w	r8, r3, #32
 800452c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004530:	d005      	beq.n	800453e <__cvt+0x3e>
 8004532:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004536:	d100      	bne.n	800453a <__cvt+0x3a>
 8004538:	3601      	adds	r6, #1
 800453a:	2302      	movs	r3, #2
 800453c:	e000      	b.n	8004540 <__cvt+0x40>
 800453e:	2303      	movs	r3, #3
 8004540:	aa07      	add	r2, sp, #28
 8004542:	9204      	str	r2, [sp, #16]
 8004544:	aa06      	add	r2, sp, #24
 8004546:	e9cd a202 	strd	sl, r2, [sp, #8]
 800454a:	e9cd 3600 	strd	r3, r6, [sp]
 800454e:	4622      	mov	r2, r4
 8004550:	462b      	mov	r3, r5
 8004552:	f001 f8bd 	bl	80056d0 <_dtoa_r>
 8004556:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800455a:	4607      	mov	r7, r0
 800455c:	d119      	bne.n	8004592 <__cvt+0x92>
 800455e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004560:	07db      	lsls	r3, r3, #31
 8004562:	d50e      	bpl.n	8004582 <__cvt+0x82>
 8004564:	eb00 0906 	add.w	r9, r0, r6
 8004568:	2200      	movs	r2, #0
 800456a:	2300      	movs	r3, #0
 800456c:	4620      	mov	r0, r4
 800456e:	4629      	mov	r1, r5
 8004570:	f7fc fa1a 	bl	80009a8 <__aeabi_dcmpeq>
 8004574:	b108      	cbz	r0, 800457a <__cvt+0x7a>
 8004576:	f8cd 901c 	str.w	r9, [sp, #28]
 800457a:	2230      	movs	r2, #48	@ 0x30
 800457c:	9b07      	ldr	r3, [sp, #28]
 800457e:	454b      	cmp	r3, r9
 8004580:	d31e      	bcc.n	80045c0 <__cvt+0xc0>
 8004582:	4638      	mov	r0, r7
 8004584:	9b07      	ldr	r3, [sp, #28]
 8004586:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004588:	1bdb      	subs	r3, r3, r7
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	b008      	add	sp, #32
 800458e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004592:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004596:	eb00 0906 	add.w	r9, r0, r6
 800459a:	d1e5      	bne.n	8004568 <__cvt+0x68>
 800459c:	7803      	ldrb	r3, [r0, #0]
 800459e:	2b30      	cmp	r3, #48	@ 0x30
 80045a0:	d10a      	bne.n	80045b8 <__cvt+0xb8>
 80045a2:	2200      	movs	r2, #0
 80045a4:	2300      	movs	r3, #0
 80045a6:	4620      	mov	r0, r4
 80045a8:	4629      	mov	r1, r5
 80045aa:	f7fc f9fd 	bl	80009a8 <__aeabi_dcmpeq>
 80045ae:	b918      	cbnz	r0, 80045b8 <__cvt+0xb8>
 80045b0:	f1c6 0601 	rsb	r6, r6, #1
 80045b4:	f8ca 6000 	str.w	r6, [sl]
 80045b8:	f8da 3000 	ldr.w	r3, [sl]
 80045bc:	4499      	add	r9, r3
 80045be:	e7d3      	b.n	8004568 <__cvt+0x68>
 80045c0:	1c59      	adds	r1, r3, #1
 80045c2:	9107      	str	r1, [sp, #28]
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	e7d9      	b.n	800457c <__cvt+0x7c>

080045c8 <__exponent>:
 80045c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045ca:	2900      	cmp	r1, #0
 80045cc:	bfb6      	itet	lt
 80045ce:	232d      	movlt	r3, #45	@ 0x2d
 80045d0:	232b      	movge	r3, #43	@ 0x2b
 80045d2:	4249      	neglt	r1, r1
 80045d4:	2909      	cmp	r1, #9
 80045d6:	7002      	strb	r2, [r0, #0]
 80045d8:	7043      	strb	r3, [r0, #1]
 80045da:	dd29      	ble.n	8004630 <__exponent+0x68>
 80045dc:	f10d 0307 	add.w	r3, sp, #7
 80045e0:	461d      	mov	r5, r3
 80045e2:	270a      	movs	r7, #10
 80045e4:	fbb1 f6f7 	udiv	r6, r1, r7
 80045e8:	461a      	mov	r2, r3
 80045ea:	fb07 1416 	mls	r4, r7, r6, r1
 80045ee:	3430      	adds	r4, #48	@ 0x30
 80045f0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80045f4:	460c      	mov	r4, r1
 80045f6:	2c63      	cmp	r4, #99	@ 0x63
 80045f8:	4631      	mov	r1, r6
 80045fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80045fe:	dcf1      	bgt.n	80045e4 <__exponent+0x1c>
 8004600:	3130      	adds	r1, #48	@ 0x30
 8004602:	1e94      	subs	r4, r2, #2
 8004604:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004608:	4623      	mov	r3, r4
 800460a:	1c41      	adds	r1, r0, #1
 800460c:	42ab      	cmp	r3, r5
 800460e:	d30a      	bcc.n	8004626 <__exponent+0x5e>
 8004610:	f10d 0309 	add.w	r3, sp, #9
 8004614:	1a9b      	subs	r3, r3, r2
 8004616:	42ac      	cmp	r4, r5
 8004618:	bf88      	it	hi
 800461a:	2300      	movhi	r3, #0
 800461c:	3302      	adds	r3, #2
 800461e:	4403      	add	r3, r0
 8004620:	1a18      	subs	r0, r3, r0
 8004622:	b003      	add	sp, #12
 8004624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004626:	f813 6b01 	ldrb.w	r6, [r3], #1
 800462a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800462e:	e7ed      	b.n	800460c <__exponent+0x44>
 8004630:	2330      	movs	r3, #48	@ 0x30
 8004632:	3130      	adds	r1, #48	@ 0x30
 8004634:	7083      	strb	r3, [r0, #2]
 8004636:	70c1      	strb	r1, [r0, #3]
 8004638:	1d03      	adds	r3, r0, #4
 800463a:	e7f1      	b.n	8004620 <__exponent+0x58>

0800463c <_printf_float>:
 800463c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004640:	b091      	sub	sp, #68	@ 0x44
 8004642:	460c      	mov	r4, r1
 8004644:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004648:	4616      	mov	r6, r2
 800464a:	461f      	mov	r7, r3
 800464c:	4605      	mov	r5, r0
 800464e:	f000 ff1d 	bl	800548c <_localeconv_r>
 8004652:	6803      	ldr	r3, [r0, #0]
 8004654:	4618      	mov	r0, r3
 8004656:	9308      	str	r3, [sp, #32]
 8004658:	f7fb fd7a 	bl	8000150 <strlen>
 800465c:	2300      	movs	r3, #0
 800465e:	930e      	str	r3, [sp, #56]	@ 0x38
 8004660:	f8d8 3000 	ldr.w	r3, [r8]
 8004664:	9009      	str	r0, [sp, #36]	@ 0x24
 8004666:	3307      	adds	r3, #7
 8004668:	f023 0307 	bic.w	r3, r3, #7
 800466c:	f103 0208 	add.w	r2, r3, #8
 8004670:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004674:	f8d4 b000 	ldr.w	fp, [r4]
 8004678:	f8c8 2000 	str.w	r2, [r8]
 800467c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004680:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004684:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004686:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800468a:	f04f 32ff 	mov.w	r2, #4294967295
 800468e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004692:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004696:	4b9c      	ldr	r3, [pc, #624]	@ (8004908 <_printf_float+0x2cc>)
 8004698:	f7fc f9b8 	bl	8000a0c <__aeabi_dcmpun>
 800469c:	bb70      	cbnz	r0, 80046fc <_printf_float+0xc0>
 800469e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80046a2:	f04f 32ff 	mov.w	r2, #4294967295
 80046a6:	4b98      	ldr	r3, [pc, #608]	@ (8004908 <_printf_float+0x2cc>)
 80046a8:	f7fc f992 	bl	80009d0 <__aeabi_dcmple>
 80046ac:	bb30      	cbnz	r0, 80046fc <_printf_float+0xc0>
 80046ae:	2200      	movs	r2, #0
 80046b0:	2300      	movs	r3, #0
 80046b2:	4640      	mov	r0, r8
 80046b4:	4649      	mov	r1, r9
 80046b6:	f7fc f981 	bl	80009bc <__aeabi_dcmplt>
 80046ba:	b110      	cbz	r0, 80046c2 <_printf_float+0x86>
 80046bc:	232d      	movs	r3, #45	@ 0x2d
 80046be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046c2:	4a92      	ldr	r2, [pc, #584]	@ (800490c <_printf_float+0x2d0>)
 80046c4:	4b92      	ldr	r3, [pc, #584]	@ (8004910 <_printf_float+0x2d4>)
 80046c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80046ca:	bf94      	ite	ls
 80046cc:	4690      	movls	r8, r2
 80046ce:	4698      	movhi	r8, r3
 80046d0:	2303      	movs	r3, #3
 80046d2:	f04f 0900 	mov.w	r9, #0
 80046d6:	6123      	str	r3, [r4, #16]
 80046d8:	f02b 0304 	bic.w	r3, fp, #4
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	4633      	mov	r3, r6
 80046e0:	4621      	mov	r1, r4
 80046e2:	4628      	mov	r0, r5
 80046e4:	9700      	str	r7, [sp, #0]
 80046e6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80046e8:	f000 f9d4 	bl	8004a94 <_printf_common>
 80046ec:	3001      	adds	r0, #1
 80046ee:	f040 8090 	bne.w	8004812 <_printf_float+0x1d6>
 80046f2:	f04f 30ff 	mov.w	r0, #4294967295
 80046f6:	b011      	add	sp, #68	@ 0x44
 80046f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fc:	4642      	mov	r2, r8
 80046fe:	464b      	mov	r3, r9
 8004700:	4640      	mov	r0, r8
 8004702:	4649      	mov	r1, r9
 8004704:	f7fc f982 	bl	8000a0c <__aeabi_dcmpun>
 8004708:	b148      	cbz	r0, 800471e <_printf_float+0xe2>
 800470a:	464b      	mov	r3, r9
 800470c:	2b00      	cmp	r3, #0
 800470e:	bfb8      	it	lt
 8004710:	232d      	movlt	r3, #45	@ 0x2d
 8004712:	4a80      	ldr	r2, [pc, #512]	@ (8004914 <_printf_float+0x2d8>)
 8004714:	bfb8      	it	lt
 8004716:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800471a:	4b7f      	ldr	r3, [pc, #508]	@ (8004918 <_printf_float+0x2dc>)
 800471c:	e7d3      	b.n	80046c6 <_printf_float+0x8a>
 800471e:	6863      	ldr	r3, [r4, #4]
 8004720:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	d13f      	bne.n	80047a8 <_printf_float+0x16c>
 8004728:	2306      	movs	r3, #6
 800472a:	6063      	str	r3, [r4, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004732:	6023      	str	r3, [r4, #0]
 8004734:	9206      	str	r2, [sp, #24]
 8004736:	aa0e      	add	r2, sp, #56	@ 0x38
 8004738:	e9cd a204 	strd	sl, r2, [sp, #16]
 800473c:	aa0d      	add	r2, sp, #52	@ 0x34
 800473e:	9203      	str	r2, [sp, #12]
 8004740:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004744:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004748:	6863      	ldr	r3, [r4, #4]
 800474a:	4642      	mov	r2, r8
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	4628      	mov	r0, r5
 8004750:	464b      	mov	r3, r9
 8004752:	910a      	str	r1, [sp, #40]	@ 0x28
 8004754:	f7ff fed4 	bl	8004500 <__cvt>
 8004758:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800475a:	4680      	mov	r8, r0
 800475c:	2947      	cmp	r1, #71	@ 0x47
 800475e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004760:	d128      	bne.n	80047b4 <_printf_float+0x178>
 8004762:	1cc8      	adds	r0, r1, #3
 8004764:	db02      	blt.n	800476c <_printf_float+0x130>
 8004766:	6863      	ldr	r3, [r4, #4]
 8004768:	4299      	cmp	r1, r3
 800476a:	dd40      	ble.n	80047ee <_printf_float+0x1b2>
 800476c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004770:	fa5f fa8a 	uxtb.w	sl, sl
 8004774:	4652      	mov	r2, sl
 8004776:	3901      	subs	r1, #1
 8004778:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800477c:	910d      	str	r1, [sp, #52]	@ 0x34
 800477e:	f7ff ff23 	bl	80045c8 <__exponent>
 8004782:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004784:	4681      	mov	r9, r0
 8004786:	1813      	adds	r3, r2, r0
 8004788:	2a01      	cmp	r2, #1
 800478a:	6123      	str	r3, [r4, #16]
 800478c:	dc02      	bgt.n	8004794 <_printf_float+0x158>
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	07d2      	lsls	r2, r2, #31
 8004792:	d501      	bpl.n	8004798 <_printf_float+0x15c>
 8004794:	3301      	adds	r3, #1
 8004796:	6123      	str	r3, [r4, #16]
 8004798:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800479c:	2b00      	cmp	r3, #0
 800479e:	d09e      	beq.n	80046de <_printf_float+0xa2>
 80047a0:	232d      	movs	r3, #45	@ 0x2d
 80047a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047a6:	e79a      	b.n	80046de <_printf_float+0xa2>
 80047a8:	2947      	cmp	r1, #71	@ 0x47
 80047aa:	d1bf      	bne.n	800472c <_printf_float+0xf0>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1bd      	bne.n	800472c <_printf_float+0xf0>
 80047b0:	2301      	movs	r3, #1
 80047b2:	e7ba      	b.n	800472a <_printf_float+0xee>
 80047b4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80047b8:	d9dc      	bls.n	8004774 <_printf_float+0x138>
 80047ba:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80047be:	d118      	bne.n	80047f2 <_printf_float+0x1b6>
 80047c0:	2900      	cmp	r1, #0
 80047c2:	6863      	ldr	r3, [r4, #4]
 80047c4:	dd0b      	ble.n	80047de <_printf_float+0x1a2>
 80047c6:	6121      	str	r1, [r4, #16]
 80047c8:	b913      	cbnz	r3, 80047d0 <_printf_float+0x194>
 80047ca:	6822      	ldr	r2, [r4, #0]
 80047cc:	07d0      	lsls	r0, r2, #31
 80047ce:	d502      	bpl.n	80047d6 <_printf_float+0x19a>
 80047d0:	3301      	adds	r3, #1
 80047d2:	440b      	add	r3, r1
 80047d4:	6123      	str	r3, [r4, #16]
 80047d6:	f04f 0900 	mov.w	r9, #0
 80047da:	65a1      	str	r1, [r4, #88]	@ 0x58
 80047dc:	e7dc      	b.n	8004798 <_printf_float+0x15c>
 80047de:	b913      	cbnz	r3, 80047e6 <_printf_float+0x1aa>
 80047e0:	6822      	ldr	r2, [r4, #0]
 80047e2:	07d2      	lsls	r2, r2, #31
 80047e4:	d501      	bpl.n	80047ea <_printf_float+0x1ae>
 80047e6:	3302      	adds	r3, #2
 80047e8:	e7f4      	b.n	80047d4 <_printf_float+0x198>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e7f2      	b.n	80047d4 <_printf_float+0x198>
 80047ee:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80047f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80047f4:	4299      	cmp	r1, r3
 80047f6:	db05      	blt.n	8004804 <_printf_float+0x1c8>
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	6121      	str	r1, [r4, #16]
 80047fc:	07d8      	lsls	r0, r3, #31
 80047fe:	d5ea      	bpl.n	80047d6 <_printf_float+0x19a>
 8004800:	1c4b      	adds	r3, r1, #1
 8004802:	e7e7      	b.n	80047d4 <_printf_float+0x198>
 8004804:	2900      	cmp	r1, #0
 8004806:	bfcc      	ite	gt
 8004808:	2201      	movgt	r2, #1
 800480a:	f1c1 0202 	rsble	r2, r1, #2
 800480e:	4413      	add	r3, r2
 8004810:	e7e0      	b.n	80047d4 <_printf_float+0x198>
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	055a      	lsls	r2, r3, #21
 8004816:	d407      	bmi.n	8004828 <_printf_float+0x1ec>
 8004818:	6923      	ldr	r3, [r4, #16]
 800481a:	4642      	mov	r2, r8
 800481c:	4631      	mov	r1, r6
 800481e:	4628      	mov	r0, r5
 8004820:	47b8      	blx	r7
 8004822:	3001      	adds	r0, #1
 8004824:	d12b      	bne.n	800487e <_printf_float+0x242>
 8004826:	e764      	b.n	80046f2 <_printf_float+0xb6>
 8004828:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800482c:	f240 80dc 	bls.w	80049e8 <_printf_float+0x3ac>
 8004830:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004834:	2200      	movs	r2, #0
 8004836:	2300      	movs	r3, #0
 8004838:	f7fc f8b6 	bl	80009a8 <__aeabi_dcmpeq>
 800483c:	2800      	cmp	r0, #0
 800483e:	d033      	beq.n	80048a8 <_printf_float+0x26c>
 8004840:	2301      	movs	r3, #1
 8004842:	4631      	mov	r1, r6
 8004844:	4628      	mov	r0, r5
 8004846:	4a35      	ldr	r2, [pc, #212]	@ (800491c <_printf_float+0x2e0>)
 8004848:	47b8      	blx	r7
 800484a:	3001      	adds	r0, #1
 800484c:	f43f af51 	beq.w	80046f2 <_printf_float+0xb6>
 8004850:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004854:	4543      	cmp	r3, r8
 8004856:	db02      	blt.n	800485e <_printf_float+0x222>
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	07d8      	lsls	r0, r3, #31
 800485c:	d50f      	bpl.n	800487e <_printf_float+0x242>
 800485e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004862:	4631      	mov	r1, r6
 8004864:	4628      	mov	r0, r5
 8004866:	47b8      	blx	r7
 8004868:	3001      	adds	r0, #1
 800486a:	f43f af42 	beq.w	80046f2 <_printf_float+0xb6>
 800486e:	f04f 0900 	mov.w	r9, #0
 8004872:	f108 38ff 	add.w	r8, r8, #4294967295
 8004876:	f104 0a1a 	add.w	sl, r4, #26
 800487a:	45c8      	cmp	r8, r9
 800487c:	dc09      	bgt.n	8004892 <_printf_float+0x256>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	079b      	lsls	r3, r3, #30
 8004882:	f100 8102 	bmi.w	8004a8a <_printf_float+0x44e>
 8004886:	68e0      	ldr	r0, [r4, #12]
 8004888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800488a:	4298      	cmp	r0, r3
 800488c:	bfb8      	it	lt
 800488e:	4618      	movlt	r0, r3
 8004890:	e731      	b.n	80046f6 <_printf_float+0xba>
 8004892:	2301      	movs	r3, #1
 8004894:	4652      	mov	r2, sl
 8004896:	4631      	mov	r1, r6
 8004898:	4628      	mov	r0, r5
 800489a:	47b8      	blx	r7
 800489c:	3001      	adds	r0, #1
 800489e:	f43f af28 	beq.w	80046f2 <_printf_float+0xb6>
 80048a2:	f109 0901 	add.w	r9, r9, #1
 80048a6:	e7e8      	b.n	800487a <_printf_float+0x23e>
 80048a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	dc38      	bgt.n	8004920 <_printf_float+0x2e4>
 80048ae:	2301      	movs	r3, #1
 80048b0:	4631      	mov	r1, r6
 80048b2:	4628      	mov	r0, r5
 80048b4:	4a19      	ldr	r2, [pc, #100]	@ (800491c <_printf_float+0x2e0>)
 80048b6:	47b8      	blx	r7
 80048b8:	3001      	adds	r0, #1
 80048ba:	f43f af1a 	beq.w	80046f2 <_printf_float+0xb6>
 80048be:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80048c2:	ea59 0303 	orrs.w	r3, r9, r3
 80048c6:	d102      	bne.n	80048ce <_printf_float+0x292>
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	07d9      	lsls	r1, r3, #31
 80048cc:	d5d7      	bpl.n	800487e <_printf_float+0x242>
 80048ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80048d2:	4631      	mov	r1, r6
 80048d4:	4628      	mov	r0, r5
 80048d6:	47b8      	blx	r7
 80048d8:	3001      	adds	r0, #1
 80048da:	f43f af0a 	beq.w	80046f2 <_printf_float+0xb6>
 80048de:	f04f 0a00 	mov.w	sl, #0
 80048e2:	f104 0b1a 	add.w	fp, r4, #26
 80048e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048e8:	425b      	negs	r3, r3
 80048ea:	4553      	cmp	r3, sl
 80048ec:	dc01      	bgt.n	80048f2 <_printf_float+0x2b6>
 80048ee:	464b      	mov	r3, r9
 80048f0:	e793      	b.n	800481a <_printf_float+0x1de>
 80048f2:	2301      	movs	r3, #1
 80048f4:	465a      	mov	r2, fp
 80048f6:	4631      	mov	r1, r6
 80048f8:	4628      	mov	r0, r5
 80048fa:	47b8      	blx	r7
 80048fc:	3001      	adds	r0, #1
 80048fe:	f43f aef8 	beq.w	80046f2 <_printf_float+0xb6>
 8004902:	f10a 0a01 	add.w	sl, sl, #1
 8004906:	e7ee      	b.n	80048e6 <_printf_float+0x2aa>
 8004908:	7fefffff 	.word	0x7fefffff
 800490c:	08008c96 	.word	0x08008c96
 8004910:	08008c9a 	.word	0x08008c9a
 8004914:	08008c9e 	.word	0x08008c9e
 8004918:	08008ca2 	.word	0x08008ca2
 800491c:	08008ca6 	.word	0x08008ca6
 8004920:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004922:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004926:	4553      	cmp	r3, sl
 8004928:	bfa8      	it	ge
 800492a:	4653      	movge	r3, sl
 800492c:	2b00      	cmp	r3, #0
 800492e:	4699      	mov	r9, r3
 8004930:	dc36      	bgt.n	80049a0 <_printf_float+0x364>
 8004932:	f04f 0b00 	mov.w	fp, #0
 8004936:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800493a:	f104 021a 	add.w	r2, r4, #26
 800493e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004940:	930a      	str	r3, [sp, #40]	@ 0x28
 8004942:	eba3 0309 	sub.w	r3, r3, r9
 8004946:	455b      	cmp	r3, fp
 8004948:	dc31      	bgt.n	80049ae <_printf_float+0x372>
 800494a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800494c:	459a      	cmp	sl, r3
 800494e:	dc3a      	bgt.n	80049c6 <_printf_float+0x38a>
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	07da      	lsls	r2, r3, #31
 8004954:	d437      	bmi.n	80049c6 <_printf_float+0x38a>
 8004956:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004958:	ebaa 0903 	sub.w	r9, sl, r3
 800495c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800495e:	ebaa 0303 	sub.w	r3, sl, r3
 8004962:	4599      	cmp	r9, r3
 8004964:	bfa8      	it	ge
 8004966:	4699      	movge	r9, r3
 8004968:	f1b9 0f00 	cmp.w	r9, #0
 800496c:	dc33      	bgt.n	80049d6 <_printf_float+0x39a>
 800496e:	f04f 0800 	mov.w	r8, #0
 8004972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004976:	f104 0b1a 	add.w	fp, r4, #26
 800497a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800497c:	ebaa 0303 	sub.w	r3, sl, r3
 8004980:	eba3 0309 	sub.w	r3, r3, r9
 8004984:	4543      	cmp	r3, r8
 8004986:	f77f af7a 	ble.w	800487e <_printf_float+0x242>
 800498a:	2301      	movs	r3, #1
 800498c:	465a      	mov	r2, fp
 800498e:	4631      	mov	r1, r6
 8004990:	4628      	mov	r0, r5
 8004992:	47b8      	blx	r7
 8004994:	3001      	adds	r0, #1
 8004996:	f43f aeac 	beq.w	80046f2 <_printf_float+0xb6>
 800499a:	f108 0801 	add.w	r8, r8, #1
 800499e:	e7ec      	b.n	800497a <_printf_float+0x33e>
 80049a0:	4642      	mov	r2, r8
 80049a2:	4631      	mov	r1, r6
 80049a4:	4628      	mov	r0, r5
 80049a6:	47b8      	blx	r7
 80049a8:	3001      	adds	r0, #1
 80049aa:	d1c2      	bne.n	8004932 <_printf_float+0x2f6>
 80049ac:	e6a1      	b.n	80046f2 <_printf_float+0xb6>
 80049ae:	2301      	movs	r3, #1
 80049b0:	4631      	mov	r1, r6
 80049b2:	4628      	mov	r0, r5
 80049b4:	920a      	str	r2, [sp, #40]	@ 0x28
 80049b6:	47b8      	blx	r7
 80049b8:	3001      	adds	r0, #1
 80049ba:	f43f ae9a 	beq.w	80046f2 <_printf_float+0xb6>
 80049be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80049c0:	f10b 0b01 	add.w	fp, fp, #1
 80049c4:	e7bb      	b.n	800493e <_printf_float+0x302>
 80049c6:	4631      	mov	r1, r6
 80049c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80049cc:	4628      	mov	r0, r5
 80049ce:	47b8      	blx	r7
 80049d0:	3001      	adds	r0, #1
 80049d2:	d1c0      	bne.n	8004956 <_printf_float+0x31a>
 80049d4:	e68d      	b.n	80046f2 <_printf_float+0xb6>
 80049d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80049d8:	464b      	mov	r3, r9
 80049da:	4631      	mov	r1, r6
 80049dc:	4628      	mov	r0, r5
 80049de:	4442      	add	r2, r8
 80049e0:	47b8      	blx	r7
 80049e2:	3001      	adds	r0, #1
 80049e4:	d1c3      	bne.n	800496e <_printf_float+0x332>
 80049e6:	e684      	b.n	80046f2 <_printf_float+0xb6>
 80049e8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80049ec:	f1ba 0f01 	cmp.w	sl, #1
 80049f0:	dc01      	bgt.n	80049f6 <_printf_float+0x3ba>
 80049f2:	07db      	lsls	r3, r3, #31
 80049f4:	d536      	bpl.n	8004a64 <_printf_float+0x428>
 80049f6:	2301      	movs	r3, #1
 80049f8:	4642      	mov	r2, r8
 80049fa:	4631      	mov	r1, r6
 80049fc:	4628      	mov	r0, r5
 80049fe:	47b8      	blx	r7
 8004a00:	3001      	adds	r0, #1
 8004a02:	f43f ae76 	beq.w	80046f2 <_printf_float+0xb6>
 8004a06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a0a:	4631      	mov	r1, r6
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	47b8      	blx	r7
 8004a10:	3001      	adds	r0, #1
 8004a12:	f43f ae6e 	beq.w	80046f2 <_printf_float+0xb6>
 8004a16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a22:	f7fb ffc1 	bl	80009a8 <__aeabi_dcmpeq>
 8004a26:	b9c0      	cbnz	r0, 8004a5a <_printf_float+0x41e>
 8004a28:	4653      	mov	r3, sl
 8004a2a:	f108 0201 	add.w	r2, r8, #1
 8004a2e:	4631      	mov	r1, r6
 8004a30:	4628      	mov	r0, r5
 8004a32:	47b8      	blx	r7
 8004a34:	3001      	adds	r0, #1
 8004a36:	d10c      	bne.n	8004a52 <_printf_float+0x416>
 8004a38:	e65b      	b.n	80046f2 <_printf_float+0xb6>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	465a      	mov	r2, fp
 8004a3e:	4631      	mov	r1, r6
 8004a40:	4628      	mov	r0, r5
 8004a42:	47b8      	blx	r7
 8004a44:	3001      	adds	r0, #1
 8004a46:	f43f ae54 	beq.w	80046f2 <_printf_float+0xb6>
 8004a4a:	f108 0801 	add.w	r8, r8, #1
 8004a4e:	45d0      	cmp	r8, sl
 8004a50:	dbf3      	blt.n	8004a3a <_printf_float+0x3fe>
 8004a52:	464b      	mov	r3, r9
 8004a54:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004a58:	e6e0      	b.n	800481c <_printf_float+0x1e0>
 8004a5a:	f04f 0800 	mov.w	r8, #0
 8004a5e:	f104 0b1a 	add.w	fp, r4, #26
 8004a62:	e7f4      	b.n	8004a4e <_printf_float+0x412>
 8004a64:	2301      	movs	r3, #1
 8004a66:	4642      	mov	r2, r8
 8004a68:	e7e1      	b.n	8004a2e <_printf_float+0x3f2>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	464a      	mov	r2, r9
 8004a6e:	4631      	mov	r1, r6
 8004a70:	4628      	mov	r0, r5
 8004a72:	47b8      	blx	r7
 8004a74:	3001      	adds	r0, #1
 8004a76:	f43f ae3c 	beq.w	80046f2 <_printf_float+0xb6>
 8004a7a:	f108 0801 	add.w	r8, r8, #1
 8004a7e:	68e3      	ldr	r3, [r4, #12]
 8004a80:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004a82:	1a5b      	subs	r3, r3, r1
 8004a84:	4543      	cmp	r3, r8
 8004a86:	dcf0      	bgt.n	8004a6a <_printf_float+0x42e>
 8004a88:	e6fd      	b.n	8004886 <_printf_float+0x24a>
 8004a8a:	f04f 0800 	mov.w	r8, #0
 8004a8e:	f104 0919 	add.w	r9, r4, #25
 8004a92:	e7f4      	b.n	8004a7e <_printf_float+0x442>

08004a94 <_printf_common>:
 8004a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a98:	4616      	mov	r6, r2
 8004a9a:	4698      	mov	r8, r3
 8004a9c:	688a      	ldr	r2, [r1, #8]
 8004a9e:	690b      	ldr	r3, [r1, #16]
 8004aa0:	4607      	mov	r7, r0
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	bfb8      	it	lt
 8004aa6:	4613      	movlt	r3, r2
 8004aa8:	6033      	str	r3, [r6, #0]
 8004aaa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004aae:	460c      	mov	r4, r1
 8004ab0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ab4:	b10a      	cbz	r2, 8004aba <_printf_common+0x26>
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	6033      	str	r3, [r6, #0]
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	0699      	lsls	r1, r3, #26
 8004abe:	bf42      	ittt	mi
 8004ac0:	6833      	ldrmi	r3, [r6, #0]
 8004ac2:	3302      	addmi	r3, #2
 8004ac4:	6033      	strmi	r3, [r6, #0]
 8004ac6:	6825      	ldr	r5, [r4, #0]
 8004ac8:	f015 0506 	ands.w	r5, r5, #6
 8004acc:	d106      	bne.n	8004adc <_printf_common+0x48>
 8004ace:	f104 0a19 	add.w	sl, r4, #25
 8004ad2:	68e3      	ldr	r3, [r4, #12]
 8004ad4:	6832      	ldr	r2, [r6, #0]
 8004ad6:	1a9b      	subs	r3, r3, r2
 8004ad8:	42ab      	cmp	r3, r5
 8004ada:	dc2b      	bgt.n	8004b34 <_printf_common+0xa0>
 8004adc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ae0:	6822      	ldr	r2, [r4, #0]
 8004ae2:	3b00      	subs	r3, #0
 8004ae4:	bf18      	it	ne
 8004ae6:	2301      	movne	r3, #1
 8004ae8:	0692      	lsls	r2, r2, #26
 8004aea:	d430      	bmi.n	8004b4e <_printf_common+0xba>
 8004aec:	4641      	mov	r1, r8
 8004aee:	4638      	mov	r0, r7
 8004af0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004af4:	47c8      	blx	r9
 8004af6:	3001      	adds	r0, #1
 8004af8:	d023      	beq.n	8004b42 <_printf_common+0xae>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	6922      	ldr	r2, [r4, #16]
 8004afe:	f003 0306 	and.w	r3, r3, #6
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	bf14      	ite	ne
 8004b06:	2500      	movne	r5, #0
 8004b08:	6833      	ldreq	r3, [r6, #0]
 8004b0a:	f04f 0600 	mov.w	r6, #0
 8004b0e:	bf08      	it	eq
 8004b10:	68e5      	ldreq	r5, [r4, #12]
 8004b12:	f104 041a 	add.w	r4, r4, #26
 8004b16:	bf08      	it	eq
 8004b18:	1aed      	subeq	r5, r5, r3
 8004b1a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004b1e:	bf08      	it	eq
 8004b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b24:	4293      	cmp	r3, r2
 8004b26:	bfc4      	itt	gt
 8004b28:	1a9b      	subgt	r3, r3, r2
 8004b2a:	18ed      	addgt	r5, r5, r3
 8004b2c:	42b5      	cmp	r5, r6
 8004b2e:	d11a      	bne.n	8004b66 <_printf_common+0xd2>
 8004b30:	2000      	movs	r0, #0
 8004b32:	e008      	b.n	8004b46 <_printf_common+0xb2>
 8004b34:	2301      	movs	r3, #1
 8004b36:	4652      	mov	r2, sl
 8004b38:	4641      	mov	r1, r8
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	47c8      	blx	r9
 8004b3e:	3001      	adds	r0, #1
 8004b40:	d103      	bne.n	8004b4a <_printf_common+0xb6>
 8004b42:	f04f 30ff 	mov.w	r0, #4294967295
 8004b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b4a:	3501      	adds	r5, #1
 8004b4c:	e7c1      	b.n	8004ad2 <_printf_common+0x3e>
 8004b4e:	2030      	movs	r0, #48	@ 0x30
 8004b50:	18e1      	adds	r1, r4, r3
 8004b52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b5c:	4422      	add	r2, r4
 8004b5e:	3302      	adds	r3, #2
 8004b60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b64:	e7c2      	b.n	8004aec <_printf_common+0x58>
 8004b66:	2301      	movs	r3, #1
 8004b68:	4622      	mov	r2, r4
 8004b6a:	4641      	mov	r1, r8
 8004b6c:	4638      	mov	r0, r7
 8004b6e:	47c8      	blx	r9
 8004b70:	3001      	adds	r0, #1
 8004b72:	d0e6      	beq.n	8004b42 <_printf_common+0xae>
 8004b74:	3601      	adds	r6, #1
 8004b76:	e7d9      	b.n	8004b2c <_printf_common+0x98>

08004b78 <_printf_i>:
 8004b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b7c:	7e0f      	ldrb	r7, [r1, #24]
 8004b7e:	4691      	mov	r9, r2
 8004b80:	2f78      	cmp	r7, #120	@ 0x78
 8004b82:	4680      	mov	r8, r0
 8004b84:	460c      	mov	r4, r1
 8004b86:	469a      	mov	sl, r3
 8004b88:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b8e:	d807      	bhi.n	8004ba0 <_printf_i+0x28>
 8004b90:	2f62      	cmp	r7, #98	@ 0x62
 8004b92:	d80a      	bhi.n	8004baa <_printf_i+0x32>
 8004b94:	2f00      	cmp	r7, #0
 8004b96:	f000 80d3 	beq.w	8004d40 <_printf_i+0x1c8>
 8004b9a:	2f58      	cmp	r7, #88	@ 0x58
 8004b9c:	f000 80ba 	beq.w	8004d14 <_printf_i+0x19c>
 8004ba0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ba4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ba8:	e03a      	b.n	8004c20 <_printf_i+0xa8>
 8004baa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bae:	2b15      	cmp	r3, #21
 8004bb0:	d8f6      	bhi.n	8004ba0 <_printf_i+0x28>
 8004bb2:	a101      	add	r1, pc, #4	@ (adr r1, 8004bb8 <_printf_i+0x40>)
 8004bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bb8:	08004c11 	.word	0x08004c11
 8004bbc:	08004c25 	.word	0x08004c25
 8004bc0:	08004ba1 	.word	0x08004ba1
 8004bc4:	08004ba1 	.word	0x08004ba1
 8004bc8:	08004ba1 	.word	0x08004ba1
 8004bcc:	08004ba1 	.word	0x08004ba1
 8004bd0:	08004c25 	.word	0x08004c25
 8004bd4:	08004ba1 	.word	0x08004ba1
 8004bd8:	08004ba1 	.word	0x08004ba1
 8004bdc:	08004ba1 	.word	0x08004ba1
 8004be0:	08004ba1 	.word	0x08004ba1
 8004be4:	08004d27 	.word	0x08004d27
 8004be8:	08004c4f 	.word	0x08004c4f
 8004bec:	08004ce1 	.word	0x08004ce1
 8004bf0:	08004ba1 	.word	0x08004ba1
 8004bf4:	08004ba1 	.word	0x08004ba1
 8004bf8:	08004d49 	.word	0x08004d49
 8004bfc:	08004ba1 	.word	0x08004ba1
 8004c00:	08004c4f 	.word	0x08004c4f
 8004c04:	08004ba1 	.word	0x08004ba1
 8004c08:	08004ba1 	.word	0x08004ba1
 8004c0c:	08004ce9 	.word	0x08004ce9
 8004c10:	6833      	ldr	r3, [r6, #0]
 8004c12:	1d1a      	adds	r2, r3, #4
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6032      	str	r2, [r6, #0]
 8004c18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c20:	2301      	movs	r3, #1
 8004c22:	e09e      	b.n	8004d62 <_printf_i+0x1ea>
 8004c24:	6833      	ldr	r3, [r6, #0]
 8004c26:	6820      	ldr	r0, [r4, #0]
 8004c28:	1d19      	adds	r1, r3, #4
 8004c2a:	6031      	str	r1, [r6, #0]
 8004c2c:	0606      	lsls	r6, r0, #24
 8004c2e:	d501      	bpl.n	8004c34 <_printf_i+0xbc>
 8004c30:	681d      	ldr	r5, [r3, #0]
 8004c32:	e003      	b.n	8004c3c <_printf_i+0xc4>
 8004c34:	0645      	lsls	r5, r0, #25
 8004c36:	d5fb      	bpl.n	8004c30 <_printf_i+0xb8>
 8004c38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c3c:	2d00      	cmp	r5, #0
 8004c3e:	da03      	bge.n	8004c48 <_printf_i+0xd0>
 8004c40:	232d      	movs	r3, #45	@ 0x2d
 8004c42:	426d      	negs	r5, r5
 8004c44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c48:	230a      	movs	r3, #10
 8004c4a:	4859      	ldr	r0, [pc, #356]	@ (8004db0 <_printf_i+0x238>)
 8004c4c:	e011      	b.n	8004c72 <_printf_i+0xfa>
 8004c4e:	6821      	ldr	r1, [r4, #0]
 8004c50:	6833      	ldr	r3, [r6, #0]
 8004c52:	0608      	lsls	r0, r1, #24
 8004c54:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c58:	d402      	bmi.n	8004c60 <_printf_i+0xe8>
 8004c5a:	0649      	lsls	r1, r1, #25
 8004c5c:	bf48      	it	mi
 8004c5e:	b2ad      	uxthmi	r5, r5
 8004c60:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c62:	6033      	str	r3, [r6, #0]
 8004c64:	bf14      	ite	ne
 8004c66:	230a      	movne	r3, #10
 8004c68:	2308      	moveq	r3, #8
 8004c6a:	4851      	ldr	r0, [pc, #324]	@ (8004db0 <_printf_i+0x238>)
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c72:	6866      	ldr	r6, [r4, #4]
 8004c74:	2e00      	cmp	r6, #0
 8004c76:	bfa8      	it	ge
 8004c78:	6821      	ldrge	r1, [r4, #0]
 8004c7a:	60a6      	str	r6, [r4, #8]
 8004c7c:	bfa4      	itt	ge
 8004c7e:	f021 0104 	bicge.w	r1, r1, #4
 8004c82:	6021      	strge	r1, [r4, #0]
 8004c84:	b90d      	cbnz	r5, 8004c8a <_printf_i+0x112>
 8004c86:	2e00      	cmp	r6, #0
 8004c88:	d04b      	beq.n	8004d22 <_printf_i+0x1aa>
 8004c8a:	4616      	mov	r6, r2
 8004c8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c90:	fb03 5711 	mls	r7, r3, r1, r5
 8004c94:	5dc7      	ldrb	r7, [r0, r7]
 8004c96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c9a:	462f      	mov	r7, r5
 8004c9c:	42bb      	cmp	r3, r7
 8004c9e:	460d      	mov	r5, r1
 8004ca0:	d9f4      	bls.n	8004c8c <_printf_i+0x114>
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d10b      	bne.n	8004cbe <_printf_i+0x146>
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	07df      	lsls	r7, r3, #31
 8004caa:	d508      	bpl.n	8004cbe <_printf_i+0x146>
 8004cac:	6923      	ldr	r3, [r4, #16]
 8004cae:	6861      	ldr	r1, [r4, #4]
 8004cb0:	4299      	cmp	r1, r3
 8004cb2:	bfde      	ittt	le
 8004cb4:	2330      	movle	r3, #48	@ 0x30
 8004cb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cbe:	1b92      	subs	r2, r2, r6
 8004cc0:	6122      	str	r2, [r4, #16]
 8004cc2:	464b      	mov	r3, r9
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	4640      	mov	r0, r8
 8004cc8:	f8cd a000 	str.w	sl, [sp]
 8004ccc:	aa03      	add	r2, sp, #12
 8004cce:	f7ff fee1 	bl	8004a94 <_printf_common>
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	d14a      	bne.n	8004d6c <_printf_i+0x1f4>
 8004cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cda:	b004      	add	sp, #16
 8004cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	f043 0320 	orr.w	r3, r3, #32
 8004ce6:	6023      	str	r3, [r4, #0]
 8004ce8:	2778      	movs	r7, #120	@ 0x78
 8004cea:	4832      	ldr	r0, [pc, #200]	@ (8004db4 <_printf_i+0x23c>)
 8004cec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	6831      	ldr	r1, [r6, #0]
 8004cf4:	061f      	lsls	r7, r3, #24
 8004cf6:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cfa:	d402      	bmi.n	8004d02 <_printf_i+0x18a>
 8004cfc:	065f      	lsls	r7, r3, #25
 8004cfe:	bf48      	it	mi
 8004d00:	b2ad      	uxthmi	r5, r5
 8004d02:	6031      	str	r1, [r6, #0]
 8004d04:	07d9      	lsls	r1, r3, #31
 8004d06:	bf44      	itt	mi
 8004d08:	f043 0320 	orrmi.w	r3, r3, #32
 8004d0c:	6023      	strmi	r3, [r4, #0]
 8004d0e:	b11d      	cbz	r5, 8004d18 <_printf_i+0x1a0>
 8004d10:	2310      	movs	r3, #16
 8004d12:	e7ab      	b.n	8004c6c <_printf_i+0xf4>
 8004d14:	4826      	ldr	r0, [pc, #152]	@ (8004db0 <_printf_i+0x238>)
 8004d16:	e7e9      	b.n	8004cec <_printf_i+0x174>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	f023 0320 	bic.w	r3, r3, #32
 8004d1e:	6023      	str	r3, [r4, #0]
 8004d20:	e7f6      	b.n	8004d10 <_printf_i+0x198>
 8004d22:	4616      	mov	r6, r2
 8004d24:	e7bd      	b.n	8004ca2 <_printf_i+0x12a>
 8004d26:	6833      	ldr	r3, [r6, #0]
 8004d28:	6825      	ldr	r5, [r4, #0]
 8004d2a:	1d18      	adds	r0, r3, #4
 8004d2c:	6961      	ldr	r1, [r4, #20]
 8004d2e:	6030      	str	r0, [r6, #0]
 8004d30:	062e      	lsls	r6, r5, #24
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	d501      	bpl.n	8004d3a <_printf_i+0x1c2>
 8004d36:	6019      	str	r1, [r3, #0]
 8004d38:	e002      	b.n	8004d40 <_printf_i+0x1c8>
 8004d3a:	0668      	lsls	r0, r5, #25
 8004d3c:	d5fb      	bpl.n	8004d36 <_printf_i+0x1be>
 8004d3e:	8019      	strh	r1, [r3, #0]
 8004d40:	2300      	movs	r3, #0
 8004d42:	4616      	mov	r6, r2
 8004d44:	6123      	str	r3, [r4, #16]
 8004d46:	e7bc      	b.n	8004cc2 <_printf_i+0x14a>
 8004d48:	6833      	ldr	r3, [r6, #0]
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	1d1a      	adds	r2, r3, #4
 8004d4e:	6032      	str	r2, [r6, #0]
 8004d50:	681e      	ldr	r6, [r3, #0]
 8004d52:	6862      	ldr	r2, [r4, #4]
 8004d54:	4630      	mov	r0, r6
 8004d56:	f000 fc10 	bl	800557a <memchr>
 8004d5a:	b108      	cbz	r0, 8004d60 <_printf_i+0x1e8>
 8004d5c:	1b80      	subs	r0, r0, r6
 8004d5e:	6060      	str	r0, [r4, #4]
 8004d60:	6863      	ldr	r3, [r4, #4]
 8004d62:	6123      	str	r3, [r4, #16]
 8004d64:	2300      	movs	r3, #0
 8004d66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d6a:	e7aa      	b.n	8004cc2 <_printf_i+0x14a>
 8004d6c:	4632      	mov	r2, r6
 8004d6e:	4649      	mov	r1, r9
 8004d70:	4640      	mov	r0, r8
 8004d72:	6923      	ldr	r3, [r4, #16]
 8004d74:	47d0      	blx	sl
 8004d76:	3001      	adds	r0, #1
 8004d78:	d0ad      	beq.n	8004cd6 <_printf_i+0x15e>
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	079b      	lsls	r3, r3, #30
 8004d7e:	d413      	bmi.n	8004da8 <_printf_i+0x230>
 8004d80:	68e0      	ldr	r0, [r4, #12]
 8004d82:	9b03      	ldr	r3, [sp, #12]
 8004d84:	4298      	cmp	r0, r3
 8004d86:	bfb8      	it	lt
 8004d88:	4618      	movlt	r0, r3
 8004d8a:	e7a6      	b.n	8004cda <_printf_i+0x162>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	4632      	mov	r2, r6
 8004d90:	4649      	mov	r1, r9
 8004d92:	4640      	mov	r0, r8
 8004d94:	47d0      	blx	sl
 8004d96:	3001      	adds	r0, #1
 8004d98:	d09d      	beq.n	8004cd6 <_printf_i+0x15e>
 8004d9a:	3501      	adds	r5, #1
 8004d9c:	68e3      	ldr	r3, [r4, #12]
 8004d9e:	9903      	ldr	r1, [sp, #12]
 8004da0:	1a5b      	subs	r3, r3, r1
 8004da2:	42ab      	cmp	r3, r5
 8004da4:	dcf2      	bgt.n	8004d8c <_printf_i+0x214>
 8004da6:	e7eb      	b.n	8004d80 <_printf_i+0x208>
 8004da8:	2500      	movs	r5, #0
 8004daa:	f104 0619 	add.w	r6, r4, #25
 8004dae:	e7f5      	b.n	8004d9c <_printf_i+0x224>
 8004db0:	08008ca8 	.word	0x08008ca8
 8004db4:	08008cb9 	.word	0x08008cb9

08004db8 <_scanf_float>:
 8004db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dbc:	b087      	sub	sp, #28
 8004dbe:	9303      	str	r3, [sp, #12]
 8004dc0:	688b      	ldr	r3, [r1, #8]
 8004dc2:	4617      	mov	r7, r2
 8004dc4:	1e5a      	subs	r2, r3, #1
 8004dc6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004dca:	bf82      	ittt	hi
 8004dcc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004dd0:	eb03 0b05 	addhi.w	fp, r3, r5
 8004dd4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004dd8:	460a      	mov	r2, r1
 8004dda:	f04f 0500 	mov.w	r5, #0
 8004dde:	bf88      	it	hi
 8004de0:	608b      	strhi	r3, [r1, #8]
 8004de2:	680b      	ldr	r3, [r1, #0]
 8004de4:	4680      	mov	r8, r0
 8004de6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004dea:	f842 3b1c 	str.w	r3, [r2], #28
 8004dee:	460c      	mov	r4, r1
 8004df0:	bf98      	it	ls
 8004df2:	f04f 0b00 	movls.w	fp, #0
 8004df6:	4616      	mov	r6, r2
 8004df8:	46aa      	mov	sl, r5
 8004dfa:	46a9      	mov	r9, r5
 8004dfc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004e00:	9201      	str	r2, [sp, #4]
 8004e02:	9502      	str	r5, [sp, #8]
 8004e04:	68a2      	ldr	r2, [r4, #8]
 8004e06:	b152      	cbz	r2, 8004e1e <_scanf_float+0x66>
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b4e      	cmp	r3, #78	@ 0x4e
 8004e0e:	d865      	bhi.n	8004edc <_scanf_float+0x124>
 8004e10:	2b40      	cmp	r3, #64	@ 0x40
 8004e12:	d83d      	bhi.n	8004e90 <_scanf_float+0xd8>
 8004e14:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004e18:	b2c8      	uxtb	r0, r1
 8004e1a:	280e      	cmp	r0, #14
 8004e1c:	d93b      	bls.n	8004e96 <_scanf_float+0xde>
 8004e1e:	f1b9 0f00 	cmp.w	r9, #0
 8004e22:	d003      	beq.n	8004e2c <_scanf_float+0x74>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e2a:	6023      	str	r3, [r4, #0]
 8004e2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e30:	f1ba 0f01 	cmp.w	sl, #1
 8004e34:	f200 8118 	bhi.w	8005068 <_scanf_float+0x2b0>
 8004e38:	9b01      	ldr	r3, [sp, #4]
 8004e3a:	429e      	cmp	r6, r3
 8004e3c:	f200 8109 	bhi.w	8005052 <_scanf_float+0x29a>
 8004e40:	2001      	movs	r0, #1
 8004e42:	b007      	add	sp, #28
 8004e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e48:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004e4c:	2a0d      	cmp	r2, #13
 8004e4e:	d8e6      	bhi.n	8004e1e <_scanf_float+0x66>
 8004e50:	a101      	add	r1, pc, #4	@ (adr r1, 8004e58 <_scanf_float+0xa0>)
 8004e52:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004e56:	bf00      	nop
 8004e58:	08004f9f 	.word	0x08004f9f
 8004e5c:	08004e1f 	.word	0x08004e1f
 8004e60:	08004e1f 	.word	0x08004e1f
 8004e64:	08004e1f 	.word	0x08004e1f
 8004e68:	08004fff 	.word	0x08004fff
 8004e6c:	08004fd7 	.word	0x08004fd7
 8004e70:	08004e1f 	.word	0x08004e1f
 8004e74:	08004e1f 	.word	0x08004e1f
 8004e78:	08004fad 	.word	0x08004fad
 8004e7c:	08004e1f 	.word	0x08004e1f
 8004e80:	08004e1f 	.word	0x08004e1f
 8004e84:	08004e1f 	.word	0x08004e1f
 8004e88:	08004e1f 	.word	0x08004e1f
 8004e8c:	08004f65 	.word	0x08004f65
 8004e90:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004e94:	e7da      	b.n	8004e4c <_scanf_float+0x94>
 8004e96:	290e      	cmp	r1, #14
 8004e98:	d8c1      	bhi.n	8004e1e <_scanf_float+0x66>
 8004e9a:	a001      	add	r0, pc, #4	@ (adr r0, 8004ea0 <_scanf_float+0xe8>)
 8004e9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004ea0:	08004f55 	.word	0x08004f55
 8004ea4:	08004e1f 	.word	0x08004e1f
 8004ea8:	08004f55 	.word	0x08004f55
 8004eac:	08004feb 	.word	0x08004feb
 8004eb0:	08004e1f 	.word	0x08004e1f
 8004eb4:	08004efd 	.word	0x08004efd
 8004eb8:	08004f3b 	.word	0x08004f3b
 8004ebc:	08004f3b 	.word	0x08004f3b
 8004ec0:	08004f3b 	.word	0x08004f3b
 8004ec4:	08004f3b 	.word	0x08004f3b
 8004ec8:	08004f3b 	.word	0x08004f3b
 8004ecc:	08004f3b 	.word	0x08004f3b
 8004ed0:	08004f3b 	.word	0x08004f3b
 8004ed4:	08004f3b 	.word	0x08004f3b
 8004ed8:	08004f3b 	.word	0x08004f3b
 8004edc:	2b6e      	cmp	r3, #110	@ 0x6e
 8004ede:	d809      	bhi.n	8004ef4 <_scanf_float+0x13c>
 8004ee0:	2b60      	cmp	r3, #96	@ 0x60
 8004ee2:	d8b1      	bhi.n	8004e48 <_scanf_float+0x90>
 8004ee4:	2b54      	cmp	r3, #84	@ 0x54
 8004ee6:	d07b      	beq.n	8004fe0 <_scanf_float+0x228>
 8004ee8:	2b59      	cmp	r3, #89	@ 0x59
 8004eea:	d198      	bne.n	8004e1e <_scanf_float+0x66>
 8004eec:	2d07      	cmp	r5, #7
 8004eee:	d196      	bne.n	8004e1e <_scanf_float+0x66>
 8004ef0:	2508      	movs	r5, #8
 8004ef2:	e02c      	b.n	8004f4e <_scanf_float+0x196>
 8004ef4:	2b74      	cmp	r3, #116	@ 0x74
 8004ef6:	d073      	beq.n	8004fe0 <_scanf_float+0x228>
 8004ef8:	2b79      	cmp	r3, #121	@ 0x79
 8004efa:	e7f6      	b.n	8004eea <_scanf_float+0x132>
 8004efc:	6821      	ldr	r1, [r4, #0]
 8004efe:	05c8      	lsls	r0, r1, #23
 8004f00:	d51b      	bpl.n	8004f3a <_scanf_float+0x182>
 8004f02:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004f06:	6021      	str	r1, [r4, #0]
 8004f08:	f109 0901 	add.w	r9, r9, #1
 8004f0c:	f1bb 0f00 	cmp.w	fp, #0
 8004f10:	d003      	beq.n	8004f1a <_scanf_float+0x162>
 8004f12:	3201      	adds	r2, #1
 8004f14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004f18:	60a2      	str	r2, [r4, #8]
 8004f1a:	68a3      	ldr	r3, [r4, #8]
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	60a3      	str	r3, [r4, #8]
 8004f20:	6923      	ldr	r3, [r4, #16]
 8004f22:	3301      	adds	r3, #1
 8004f24:	6123      	str	r3, [r4, #16]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	607b      	str	r3, [r7, #4]
 8004f2e:	f340 8087 	ble.w	8005040 <_scanf_float+0x288>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	3301      	adds	r3, #1
 8004f36:	603b      	str	r3, [r7, #0]
 8004f38:	e764      	b.n	8004e04 <_scanf_float+0x4c>
 8004f3a:	eb1a 0105 	adds.w	r1, sl, r5
 8004f3e:	f47f af6e 	bne.w	8004e1e <_scanf_float+0x66>
 8004f42:	460d      	mov	r5, r1
 8004f44:	468a      	mov	sl, r1
 8004f46:	6822      	ldr	r2, [r4, #0]
 8004f48:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004f4c:	6022      	str	r2, [r4, #0]
 8004f4e:	f806 3b01 	strb.w	r3, [r6], #1
 8004f52:	e7e2      	b.n	8004f1a <_scanf_float+0x162>
 8004f54:	6822      	ldr	r2, [r4, #0]
 8004f56:	0610      	lsls	r0, r2, #24
 8004f58:	f57f af61 	bpl.w	8004e1e <_scanf_float+0x66>
 8004f5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f60:	6022      	str	r2, [r4, #0]
 8004f62:	e7f4      	b.n	8004f4e <_scanf_float+0x196>
 8004f64:	f1ba 0f00 	cmp.w	sl, #0
 8004f68:	d10e      	bne.n	8004f88 <_scanf_float+0x1d0>
 8004f6a:	f1b9 0f00 	cmp.w	r9, #0
 8004f6e:	d10e      	bne.n	8004f8e <_scanf_float+0x1d6>
 8004f70:	6822      	ldr	r2, [r4, #0]
 8004f72:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004f76:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004f7a:	d108      	bne.n	8004f8e <_scanf_float+0x1d6>
 8004f7c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004f80:	f04f 0a01 	mov.w	sl, #1
 8004f84:	6022      	str	r2, [r4, #0]
 8004f86:	e7e2      	b.n	8004f4e <_scanf_float+0x196>
 8004f88:	f1ba 0f02 	cmp.w	sl, #2
 8004f8c:	d055      	beq.n	800503a <_scanf_float+0x282>
 8004f8e:	2d01      	cmp	r5, #1
 8004f90:	d002      	beq.n	8004f98 <_scanf_float+0x1e0>
 8004f92:	2d04      	cmp	r5, #4
 8004f94:	f47f af43 	bne.w	8004e1e <_scanf_float+0x66>
 8004f98:	3501      	adds	r5, #1
 8004f9a:	b2ed      	uxtb	r5, r5
 8004f9c:	e7d7      	b.n	8004f4e <_scanf_float+0x196>
 8004f9e:	f1ba 0f01 	cmp.w	sl, #1
 8004fa2:	f47f af3c 	bne.w	8004e1e <_scanf_float+0x66>
 8004fa6:	f04f 0a02 	mov.w	sl, #2
 8004faa:	e7d0      	b.n	8004f4e <_scanf_float+0x196>
 8004fac:	b97d      	cbnz	r5, 8004fce <_scanf_float+0x216>
 8004fae:	f1b9 0f00 	cmp.w	r9, #0
 8004fb2:	f47f af37 	bne.w	8004e24 <_scanf_float+0x6c>
 8004fb6:	6822      	ldr	r2, [r4, #0]
 8004fb8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004fbc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004fc0:	f040 8103 	bne.w	80051ca <_scanf_float+0x412>
 8004fc4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004fc8:	2501      	movs	r5, #1
 8004fca:	6022      	str	r2, [r4, #0]
 8004fcc:	e7bf      	b.n	8004f4e <_scanf_float+0x196>
 8004fce:	2d03      	cmp	r5, #3
 8004fd0:	d0e2      	beq.n	8004f98 <_scanf_float+0x1e0>
 8004fd2:	2d05      	cmp	r5, #5
 8004fd4:	e7de      	b.n	8004f94 <_scanf_float+0x1dc>
 8004fd6:	2d02      	cmp	r5, #2
 8004fd8:	f47f af21 	bne.w	8004e1e <_scanf_float+0x66>
 8004fdc:	2503      	movs	r5, #3
 8004fde:	e7b6      	b.n	8004f4e <_scanf_float+0x196>
 8004fe0:	2d06      	cmp	r5, #6
 8004fe2:	f47f af1c 	bne.w	8004e1e <_scanf_float+0x66>
 8004fe6:	2507      	movs	r5, #7
 8004fe8:	e7b1      	b.n	8004f4e <_scanf_float+0x196>
 8004fea:	6822      	ldr	r2, [r4, #0]
 8004fec:	0591      	lsls	r1, r2, #22
 8004fee:	f57f af16 	bpl.w	8004e1e <_scanf_float+0x66>
 8004ff2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004ff6:	6022      	str	r2, [r4, #0]
 8004ff8:	f8cd 9008 	str.w	r9, [sp, #8]
 8004ffc:	e7a7      	b.n	8004f4e <_scanf_float+0x196>
 8004ffe:	6822      	ldr	r2, [r4, #0]
 8005000:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005004:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005008:	d006      	beq.n	8005018 <_scanf_float+0x260>
 800500a:	0550      	lsls	r0, r2, #21
 800500c:	f57f af07 	bpl.w	8004e1e <_scanf_float+0x66>
 8005010:	f1b9 0f00 	cmp.w	r9, #0
 8005014:	f000 80d9 	beq.w	80051ca <_scanf_float+0x412>
 8005018:	0591      	lsls	r1, r2, #22
 800501a:	bf58      	it	pl
 800501c:	9902      	ldrpl	r1, [sp, #8]
 800501e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005022:	bf58      	it	pl
 8005024:	eba9 0101 	subpl.w	r1, r9, r1
 8005028:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800502c:	f04f 0900 	mov.w	r9, #0
 8005030:	bf58      	it	pl
 8005032:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005036:	6022      	str	r2, [r4, #0]
 8005038:	e789      	b.n	8004f4e <_scanf_float+0x196>
 800503a:	f04f 0a03 	mov.w	sl, #3
 800503e:	e786      	b.n	8004f4e <_scanf_float+0x196>
 8005040:	4639      	mov	r1, r7
 8005042:	4640      	mov	r0, r8
 8005044:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005048:	4798      	blx	r3
 800504a:	2800      	cmp	r0, #0
 800504c:	f43f aeda 	beq.w	8004e04 <_scanf_float+0x4c>
 8005050:	e6e5      	b.n	8004e1e <_scanf_float+0x66>
 8005052:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005056:	463a      	mov	r2, r7
 8005058:	4640      	mov	r0, r8
 800505a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800505e:	4798      	blx	r3
 8005060:	6923      	ldr	r3, [r4, #16]
 8005062:	3b01      	subs	r3, #1
 8005064:	6123      	str	r3, [r4, #16]
 8005066:	e6e7      	b.n	8004e38 <_scanf_float+0x80>
 8005068:	1e6b      	subs	r3, r5, #1
 800506a:	2b06      	cmp	r3, #6
 800506c:	d824      	bhi.n	80050b8 <_scanf_float+0x300>
 800506e:	2d02      	cmp	r5, #2
 8005070:	d836      	bhi.n	80050e0 <_scanf_float+0x328>
 8005072:	9b01      	ldr	r3, [sp, #4]
 8005074:	429e      	cmp	r6, r3
 8005076:	f67f aee3 	bls.w	8004e40 <_scanf_float+0x88>
 800507a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800507e:	463a      	mov	r2, r7
 8005080:	4640      	mov	r0, r8
 8005082:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005086:	4798      	blx	r3
 8005088:	6923      	ldr	r3, [r4, #16]
 800508a:	3b01      	subs	r3, #1
 800508c:	6123      	str	r3, [r4, #16]
 800508e:	e7f0      	b.n	8005072 <_scanf_float+0x2ba>
 8005090:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005094:	463a      	mov	r2, r7
 8005096:	4640      	mov	r0, r8
 8005098:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800509c:	4798      	blx	r3
 800509e:	6923      	ldr	r3, [r4, #16]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	6123      	str	r3, [r4, #16]
 80050a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050a8:	fa5f fa8a 	uxtb.w	sl, sl
 80050ac:	f1ba 0f02 	cmp.w	sl, #2
 80050b0:	d1ee      	bne.n	8005090 <_scanf_float+0x2d8>
 80050b2:	3d03      	subs	r5, #3
 80050b4:	b2ed      	uxtb	r5, r5
 80050b6:	1b76      	subs	r6, r6, r5
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	05da      	lsls	r2, r3, #23
 80050bc:	d530      	bpl.n	8005120 <_scanf_float+0x368>
 80050be:	055b      	lsls	r3, r3, #21
 80050c0:	d511      	bpl.n	80050e6 <_scanf_float+0x32e>
 80050c2:	9b01      	ldr	r3, [sp, #4]
 80050c4:	429e      	cmp	r6, r3
 80050c6:	f67f aebb 	bls.w	8004e40 <_scanf_float+0x88>
 80050ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80050ce:	463a      	mov	r2, r7
 80050d0:	4640      	mov	r0, r8
 80050d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80050d6:	4798      	blx	r3
 80050d8:	6923      	ldr	r3, [r4, #16]
 80050da:	3b01      	subs	r3, #1
 80050dc:	6123      	str	r3, [r4, #16]
 80050de:	e7f0      	b.n	80050c2 <_scanf_float+0x30a>
 80050e0:	46aa      	mov	sl, r5
 80050e2:	46b3      	mov	fp, r6
 80050e4:	e7de      	b.n	80050a4 <_scanf_float+0x2ec>
 80050e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80050ea:	6923      	ldr	r3, [r4, #16]
 80050ec:	2965      	cmp	r1, #101	@ 0x65
 80050ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80050f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80050f6:	6123      	str	r3, [r4, #16]
 80050f8:	d00c      	beq.n	8005114 <_scanf_float+0x35c>
 80050fa:	2945      	cmp	r1, #69	@ 0x45
 80050fc:	d00a      	beq.n	8005114 <_scanf_float+0x35c>
 80050fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005102:	463a      	mov	r2, r7
 8005104:	4640      	mov	r0, r8
 8005106:	4798      	blx	r3
 8005108:	6923      	ldr	r3, [r4, #16]
 800510a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800510e:	3b01      	subs	r3, #1
 8005110:	1eb5      	subs	r5, r6, #2
 8005112:	6123      	str	r3, [r4, #16]
 8005114:	463a      	mov	r2, r7
 8005116:	4640      	mov	r0, r8
 8005118:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800511c:	4798      	blx	r3
 800511e:	462e      	mov	r6, r5
 8005120:	6822      	ldr	r2, [r4, #0]
 8005122:	f012 0210 	ands.w	r2, r2, #16
 8005126:	d001      	beq.n	800512c <_scanf_float+0x374>
 8005128:	2000      	movs	r0, #0
 800512a:	e68a      	b.n	8004e42 <_scanf_float+0x8a>
 800512c:	7032      	strb	r2, [r6, #0]
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005138:	d11c      	bne.n	8005174 <_scanf_float+0x3bc>
 800513a:	9b02      	ldr	r3, [sp, #8]
 800513c:	454b      	cmp	r3, r9
 800513e:	eba3 0209 	sub.w	r2, r3, r9
 8005142:	d123      	bne.n	800518c <_scanf_float+0x3d4>
 8005144:	2200      	movs	r2, #0
 8005146:	4640      	mov	r0, r8
 8005148:	9901      	ldr	r1, [sp, #4]
 800514a:	f002 fc29 	bl	80079a0 <_strtod_r>
 800514e:	9b03      	ldr	r3, [sp, #12]
 8005150:	6825      	ldr	r5, [r4, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f015 0f02 	tst.w	r5, #2
 8005158:	4606      	mov	r6, r0
 800515a:	460f      	mov	r7, r1
 800515c:	f103 0204 	add.w	r2, r3, #4
 8005160:	d01f      	beq.n	80051a2 <_scanf_float+0x3ea>
 8005162:	9903      	ldr	r1, [sp, #12]
 8005164:	600a      	str	r2, [r1, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	e9c3 6700 	strd	r6, r7, [r3]
 800516c:	68e3      	ldr	r3, [r4, #12]
 800516e:	3301      	adds	r3, #1
 8005170:	60e3      	str	r3, [r4, #12]
 8005172:	e7d9      	b.n	8005128 <_scanf_float+0x370>
 8005174:	9b04      	ldr	r3, [sp, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0e4      	beq.n	8005144 <_scanf_float+0x38c>
 800517a:	9905      	ldr	r1, [sp, #20]
 800517c:	230a      	movs	r3, #10
 800517e:	4640      	mov	r0, r8
 8005180:	3101      	adds	r1, #1
 8005182:	f002 fc8d 	bl	8007aa0 <_strtol_r>
 8005186:	9b04      	ldr	r3, [sp, #16]
 8005188:	9e05      	ldr	r6, [sp, #20]
 800518a:	1ac2      	subs	r2, r0, r3
 800518c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005190:	429e      	cmp	r6, r3
 8005192:	bf28      	it	cs
 8005194:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005198:	4630      	mov	r0, r6
 800519a:	490d      	ldr	r1, [pc, #52]	@ (80051d0 <_scanf_float+0x418>)
 800519c:	f000 f8f0 	bl	8005380 <siprintf>
 80051a0:	e7d0      	b.n	8005144 <_scanf_float+0x38c>
 80051a2:	076d      	lsls	r5, r5, #29
 80051a4:	d4dd      	bmi.n	8005162 <_scanf_float+0x3aa>
 80051a6:	9d03      	ldr	r5, [sp, #12]
 80051a8:	602a      	str	r2, [r5, #0]
 80051aa:	681d      	ldr	r5, [r3, #0]
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	f7fb fc2c 	bl	8000a0c <__aeabi_dcmpun>
 80051b4:	b120      	cbz	r0, 80051c0 <_scanf_float+0x408>
 80051b6:	4807      	ldr	r0, [pc, #28]	@ (80051d4 <_scanf_float+0x41c>)
 80051b8:	f000 f9fc 	bl	80055b4 <nanf>
 80051bc:	6028      	str	r0, [r5, #0]
 80051be:	e7d5      	b.n	800516c <_scanf_float+0x3b4>
 80051c0:	4630      	mov	r0, r6
 80051c2:	4639      	mov	r1, r7
 80051c4:	f7fb fc80 	bl	8000ac8 <__aeabi_d2f>
 80051c8:	e7f8      	b.n	80051bc <_scanf_float+0x404>
 80051ca:	f04f 0900 	mov.w	r9, #0
 80051ce:	e62d      	b.n	8004e2c <_scanf_float+0x74>
 80051d0:	08008cca 	.word	0x08008cca
 80051d4:	08009065 	.word	0x08009065

080051d8 <std>:
 80051d8:	2300      	movs	r3, #0
 80051da:	b510      	push	{r4, lr}
 80051dc:	4604      	mov	r4, r0
 80051de:	e9c0 3300 	strd	r3, r3, [r0]
 80051e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051e6:	6083      	str	r3, [r0, #8]
 80051e8:	8181      	strh	r1, [r0, #12]
 80051ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80051ec:	81c2      	strh	r2, [r0, #14]
 80051ee:	6183      	str	r3, [r0, #24]
 80051f0:	4619      	mov	r1, r3
 80051f2:	2208      	movs	r2, #8
 80051f4:	305c      	adds	r0, #92	@ 0x5c
 80051f6:	f000 f940 	bl	800547a <memset>
 80051fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005230 <std+0x58>)
 80051fc:	6224      	str	r4, [r4, #32]
 80051fe:	6263      	str	r3, [r4, #36]	@ 0x24
 8005200:	4b0c      	ldr	r3, [pc, #48]	@ (8005234 <std+0x5c>)
 8005202:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005204:	4b0c      	ldr	r3, [pc, #48]	@ (8005238 <std+0x60>)
 8005206:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005208:	4b0c      	ldr	r3, [pc, #48]	@ (800523c <std+0x64>)
 800520a:	6323      	str	r3, [r4, #48]	@ 0x30
 800520c:	4b0c      	ldr	r3, [pc, #48]	@ (8005240 <std+0x68>)
 800520e:	429c      	cmp	r4, r3
 8005210:	d006      	beq.n	8005220 <std+0x48>
 8005212:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005216:	4294      	cmp	r4, r2
 8005218:	d002      	beq.n	8005220 <std+0x48>
 800521a:	33d0      	adds	r3, #208	@ 0xd0
 800521c:	429c      	cmp	r4, r3
 800521e:	d105      	bne.n	800522c <std+0x54>
 8005220:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005228:	f000 b9a4 	b.w	8005574 <__retarget_lock_init_recursive>
 800522c:	bd10      	pop	{r4, pc}
 800522e:	bf00      	nop
 8005230:	080053c1 	.word	0x080053c1
 8005234:	080053e3 	.word	0x080053e3
 8005238:	0800541b 	.word	0x0800541b
 800523c:	0800543f 	.word	0x0800543f
 8005240:	20000350 	.word	0x20000350

08005244 <stdio_exit_handler>:
 8005244:	4a02      	ldr	r2, [pc, #8]	@ (8005250 <stdio_exit_handler+0xc>)
 8005246:	4903      	ldr	r1, [pc, #12]	@ (8005254 <stdio_exit_handler+0x10>)
 8005248:	4803      	ldr	r0, [pc, #12]	@ (8005258 <stdio_exit_handler+0x14>)
 800524a:	f000 b869 	b.w	8005320 <_fwalk_sglue>
 800524e:	bf00      	nop
 8005250:	20000018 	.word	0x20000018
 8005254:	080080d5 	.word	0x080080d5
 8005258:	20000028 	.word	0x20000028

0800525c <cleanup_stdio>:
 800525c:	6841      	ldr	r1, [r0, #4]
 800525e:	4b0c      	ldr	r3, [pc, #48]	@ (8005290 <cleanup_stdio+0x34>)
 8005260:	b510      	push	{r4, lr}
 8005262:	4299      	cmp	r1, r3
 8005264:	4604      	mov	r4, r0
 8005266:	d001      	beq.n	800526c <cleanup_stdio+0x10>
 8005268:	f002 ff34 	bl	80080d4 <_fflush_r>
 800526c:	68a1      	ldr	r1, [r4, #8]
 800526e:	4b09      	ldr	r3, [pc, #36]	@ (8005294 <cleanup_stdio+0x38>)
 8005270:	4299      	cmp	r1, r3
 8005272:	d002      	beq.n	800527a <cleanup_stdio+0x1e>
 8005274:	4620      	mov	r0, r4
 8005276:	f002 ff2d 	bl	80080d4 <_fflush_r>
 800527a:	68e1      	ldr	r1, [r4, #12]
 800527c:	4b06      	ldr	r3, [pc, #24]	@ (8005298 <cleanup_stdio+0x3c>)
 800527e:	4299      	cmp	r1, r3
 8005280:	d004      	beq.n	800528c <cleanup_stdio+0x30>
 8005282:	4620      	mov	r0, r4
 8005284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005288:	f002 bf24 	b.w	80080d4 <_fflush_r>
 800528c:	bd10      	pop	{r4, pc}
 800528e:	bf00      	nop
 8005290:	20000350 	.word	0x20000350
 8005294:	200003b8 	.word	0x200003b8
 8005298:	20000420 	.word	0x20000420

0800529c <global_stdio_init.part.0>:
 800529c:	b510      	push	{r4, lr}
 800529e:	4b0b      	ldr	r3, [pc, #44]	@ (80052cc <global_stdio_init.part.0+0x30>)
 80052a0:	4c0b      	ldr	r4, [pc, #44]	@ (80052d0 <global_stdio_init.part.0+0x34>)
 80052a2:	4a0c      	ldr	r2, [pc, #48]	@ (80052d4 <global_stdio_init.part.0+0x38>)
 80052a4:	4620      	mov	r0, r4
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	2104      	movs	r1, #4
 80052aa:	2200      	movs	r2, #0
 80052ac:	f7ff ff94 	bl	80051d8 <std>
 80052b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80052b4:	2201      	movs	r2, #1
 80052b6:	2109      	movs	r1, #9
 80052b8:	f7ff ff8e 	bl	80051d8 <std>
 80052bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052c0:	2202      	movs	r2, #2
 80052c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052c6:	2112      	movs	r1, #18
 80052c8:	f7ff bf86 	b.w	80051d8 <std>
 80052cc:	20000488 	.word	0x20000488
 80052d0:	20000350 	.word	0x20000350
 80052d4:	08005245 	.word	0x08005245

080052d8 <__sfp_lock_acquire>:
 80052d8:	4801      	ldr	r0, [pc, #4]	@ (80052e0 <__sfp_lock_acquire+0x8>)
 80052da:	f000 b94c 	b.w	8005576 <__retarget_lock_acquire_recursive>
 80052de:	bf00      	nop
 80052e0:	20000491 	.word	0x20000491

080052e4 <__sfp_lock_release>:
 80052e4:	4801      	ldr	r0, [pc, #4]	@ (80052ec <__sfp_lock_release+0x8>)
 80052e6:	f000 b947 	b.w	8005578 <__retarget_lock_release_recursive>
 80052ea:	bf00      	nop
 80052ec:	20000491 	.word	0x20000491

080052f0 <__sinit>:
 80052f0:	b510      	push	{r4, lr}
 80052f2:	4604      	mov	r4, r0
 80052f4:	f7ff fff0 	bl	80052d8 <__sfp_lock_acquire>
 80052f8:	6a23      	ldr	r3, [r4, #32]
 80052fa:	b11b      	cbz	r3, 8005304 <__sinit+0x14>
 80052fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005300:	f7ff bff0 	b.w	80052e4 <__sfp_lock_release>
 8005304:	4b04      	ldr	r3, [pc, #16]	@ (8005318 <__sinit+0x28>)
 8005306:	6223      	str	r3, [r4, #32]
 8005308:	4b04      	ldr	r3, [pc, #16]	@ (800531c <__sinit+0x2c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1f5      	bne.n	80052fc <__sinit+0xc>
 8005310:	f7ff ffc4 	bl	800529c <global_stdio_init.part.0>
 8005314:	e7f2      	b.n	80052fc <__sinit+0xc>
 8005316:	bf00      	nop
 8005318:	0800525d 	.word	0x0800525d
 800531c:	20000488 	.word	0x20000488

08005320 <_fwalk_sglue>:
 8005320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005324:	4607      	mov	r7, r0
 8005326:	4688      	mov	r8, r1
 8005328:	4614      	mov	r4, r2
 800532a:	2600      	movs	r6, #0
 800532c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005330:	f1b9 0901 	subs.w	r9, r9, #1
 8005334:	d505      	bpl.n	8005342 <_fwalk_sglue+0x22>
 8005336:	6824      	ldr	r4, [r4, #0]
 8005338:	2c00      	cmp	r4, #0
 800533a:	d1f7      	bne.n	800532c <_fwalk_sglue+0xc>
 800533c:	4630      	mov	r0, r6
 800533e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005342:	89ab      	ldrh	r3, [r5, #12]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d907      	bls.n	8005358 <_fwalk_sglue+0x38>
 8005348:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800534c:	3301      	adds	r3, #1
 800534e:	d003      	beq.n	8005358 <_fwalk_sglue+0x38>
 8005350:	4629      	mov	r1, r5
 8005352:	4638      	mov	r0, r7
 8005354:	47c0      	blx	r8
 8005356:	4306      	orrs	r6, r0
 8005358:	3568      	adds	r5, #104	@ 0x68
 800535a:	e7e9      	b.n	8005330 <_fwalk_sglue+0x10>

0800535c <iprintf>:
 800535c:	b40f      	push	{r0, r1, r2, r3}
 800535e:	b507      	push	{r0, r1, r2, lr}
 8005360:	4906      	ldr	r1, [pc, #24]	@ (800537c <iprintf+0x20>)
 8005362:	ab04      	add	r3, sp, #16
 8005364:	6808      	ldr	r0, [r1, #0]
 8005366:	f853 2b04 	ldr.w	r2, [r3], #4
 800536a:	6881      	ldr	r1, [r0, #8]
 800536c:	9301      	str	r3, [sp, #4]
 800536e:	f002 fd19 	bl	8007da4 <_vfiprintf_r>
 8005372:	b003      	add	sp, #12
 8005374:	f85d eb04 	ldr.w	lr, [sp], #4
 8005378:	b004      	add	sp, #16
 800537a:	4770      	bx	lr
 800537c:	20000024 	.word	0x20000024

08005380 <siprintf>:
 8005380:	b40e      	push	{r1, r2, r3}
 8005382:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005386:	b500      	push	{lr}
 8005388:	b09c      	sub	sp, #112	@ 0x70
 800538a:	ab1d      	add	r3, sp, #116	@ 0x74
 800538c:	9002      	str	r0, [sp, #8]
 800538e:	9006      	str	r0, [sp, #24]
 8005390:	9107      	str	r1, [sp, #28]
 8005392:	9104      	str	r1, [sp, #16]
 8005394:	4808      	ldr	r0, [pc, #32]	@ (80053b8 <siprintf+0x38>)
 8005396:	4909      	ldr	r1, [pc, #36]	@ (80053bc <siprintf+0x3c>)
 8005398:	f853 2b04 	ldr.w	r2, [r3], #4
 800539c:	9105      	str	r1, [sp, #20]
 800539e:	6800      	ldr	r0, [r0, #0]
 80053a0:	a902      	add	r1, sp, #8
 80053a2:	9301      	str	r3, [sp, #4]
 80053a4:	f002 fbda 	bl	8007b5c <_svfiprintf_r>
 80053a8:	2200      	movs	r2, #0
 80053aa:	9b02      	ldr	r3, [sp, #8]
 80053ac:	701a      	strb	r2, [r3, #0]
 80053ae:	b01c      	add	sp, #112	@ 0x70
 80053b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80053b4:	b003      	add	sp, #12
 80053b6:	4770      	bx	lr
 80053b8:	20000024 	.word	0x20000024
 80053bc:	ffff0208 	.word	0xffff0208

080053c0 <__sread>:
 80053c0:	b510      	push	{r4, lr}
 80053c2:	460c      	mov	r4, r1
 80053c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c8:	f000 f886 	bl	80054d8 <_read_r>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	bfab      	itete	ge
 80053d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053d2:	89a3      	ldrhlt	r3, [r4, #12]
 80053d4:	181b      	addge	r3, r3, r0
 80053d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053da:	bfac      	ite	ge
 80053dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053de:	81a3      	strhlt	r3, [r4, #12]
 80053e0:	bd10      	pop	{r4, pc}

080053e2 <__swrite>:
 80053e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e6:	461f      	mov	r7, r3
 80053e8:	898b      	ldrh	r3, [r1, #12]
 80053ea:	4605      	mov	r5, r0
 80053ec:	05db      	lsls	r3, r3, #23
 80053ee:	460c      	mov	r4, r1
 80053f0:	4616      	mov	r6, r2
 80053f2:	d505      	bpl.n	8005400 <__swrite+0x1e>
 80053f4:	2302      	movs	r3, #2
 80053f6:	2200      	movs	r2, #0
 80053f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053fc:	f000 f85a 	bl	80054b4 <_lseek_r>
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	4632      	mov	r2, r6
 8005404:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005408:	81a3      	strh	r3, [r4, #12]
 800540a:	4628      	mov	r0, r5
 800540c:	463b      	mov	r3, r7
 800540e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005416:	f000 b871 	b.w	80054fc <_write_r>

0800541a <__sseek>:
 800541a:	b510      	push	{r4, lr}
 800541c:	460c      	mov	r4, r1
 800541e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005422:	f000 f847 	bl	80054b4 <_lseek_r>
 8005426:	1c43      	adds	r3, r0, #1
 8005428:	89a3      	ldrh	r3, [r4, #12]
 800542a:	bf15      	itete	ne
 800542c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800542e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005432:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005436:	81a3      	strheq	r3, [r4, #12]
 8005438:	bf18      	it	ne
 800543a:	81a3      	strhne	r3, [r4, #12]
 800543c:	bd10      	pop	{r4, pc}

0800543e <__sclose>:
 800543e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005442:	f000 b827 	b.w	8005494 <_close_r>

08005446 <memmove>:
 8005446:	4288      	cmp	r0, r1
 8005448:	b510      	push	{r4, lr}
 800544a:	eb01 0402 	add.w	r4, r1, r2
 800544e:	d902      	bls.n	8005456 <memmove+0x10>
 8005450:	4284      	cmp	r4, r0
 8005452:	4623      	mov	r3, r4
 8005454:	d807      	bhi.n	8005466 <memmove+0x20>
 8005456:	1e43      	subs	r3, r0, #1
 8005458:	42a1      	cmp	r1, r4
 800545a:	d008      	beq.n	800546e <memmove+0x28>
 800545c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005460:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005464:	e7f8      	b.n	8005458 <memmove+0x12>
 8005466:	4601      	mov	r1, r0
 8005468:	4402      	add	r2, r0
 800546a:	428a      	cmp	r2, r1
 800546c:	d100      	bne.n	8005470 <memmove+0x2a>
 800546e:	bd10      	pop	{r4, pc}
 8005470:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005474:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005478:	e7f7      	b.n	800546a <memmove+0x24>

0800547a <memset>:
 800547a:	4603      	mov	r3, r0
 800547c:	4402      	add	r2, r0
 800547e:	4293      	cmp	r3, r2
 8005480:	d100      	bne.n	8005484 <memset+0xa>
 8005482:	4770      	bx	lr
 8005484:	f803 1b01 	strb.w	r1, [r3], #1
 8005488:	e7f9      	b.n	800547e <memset+0x4>
	...

0800548c <_localeconv_r>:
 800548c:	4800      	ldr	r0, [pc, #0]	@ (8005490 <_localeconv_r+0x4>)
 800548e:	4770      	bx	lr
 8005490:	20000164 	.word	0x20000164

08005494 <_close_r>:
 8005494:	b538      	push	{r3, r4, r5, lr}
 8005496:	2300      	movs	r3, #0
 8005498:	4d05      	ldr	r5, [pc, #20]	@ (80054b0 <_close_r+0x1c>)
 800549a:	4604      	mov	r4, r0
 800549c:	4608      	mov	r0, r1
 800549e:	602b      	str	r3, [r5, #0]
 80054a0:	f7fc f915 	bl	80016ce <_close>
 80054a4:	1c43      	adds	r3, r0, #1
 80054a6:	d102      	bne.n	80054ae <_close_r+0x1a>
 80054a8:	682b      	ldr	r3, [r5, #0]
 80054aa:	b103      	cbz	r3, 80054ae <_close_r+0x1a>
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	bd38      	pop	{r3, r4, r5, pc}
 80054b0:	2000048c 	.word	0x2000048c

080054b4 <_lseek_r>:
 80054b4:	b538      	push	{r3, r4, r5, lr}
 80054b6:	4604      	mov	r4, r0
 80054b8:	4608      	mov	r0, r1
 80054ba:	4611      	mov	r1, r2
 80054bc:	2200      	movs	r2, #0
 80054be:	4d05      	ldr	r5, [pc, #20]	@ (80054d4 <_lseek_r+0x20>)
 80054c0:	602a      	str	r2, [r5, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f7fc f927 	bl	8001716 <_lseek>
 80054c8:	1c43      	adds	r3, r0, #1
 80054ca:	d102      	bne.n	80054d2 <_lseek_r+0x1e>
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	b103      	cbz	r3, 80054d2 <_lseek_r+0x1e>
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	bd38      	pop	{r3, r4, r5, pc}
 80054d4:	2000048c 	.word	0x2000048c

080054d8 <_read_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4604      	mov	r4, r0
 80054dc:	4608      	mov	r0, r1
 80054de:	4611      	mov	r1, r2
 80054e0:	2200      	movs	r2, #0
 80054e2:	4d05      	ldr	r5, [pc, #20]	@ (80054f8 <_read_r+0x20>)
 80054e4:	602a      	str	r2, [r5, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	f7fc f8b8 	bl	800165c <_read>
 80054ec:	1c43      	adds	r3, r0, #1
 80054ee:	d102      	bne.n	80054f6 <_read_r+0x1e>
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	b103      	cbz	r3, 80054f6 <_read_r+0x1e>
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	bd38      	pop	{r3, r4, r5, pc}
 80054f8:	2000048c 	.word	0x2000048c

080054fc <_write_r>:
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	4604      	mov	r4, r0
 8005500:	4608      	mov	r0, r1
 8005502:	4611      	mov	r1, r2
 8005504:	2200      	movs	r2, #0
 8005506:	4d05      	ldr	r5, [pc, #20]	@ (800551c <_write_r+0x20>)
 8005508:	602a      	str	r2, [r5, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	f7fc f8c3 	bl	8001696 <_write>
 8005510:	1c43      	adds	r3, r0, #1
 8005512:	d102      	bne.n	800551a <_write_r+0x1e>
 8005514:	682b      	ldr	r3, [r5, #0]
 8005516:	b103      	cbz	r3, 800551a <_write_r+0x1e>
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	bd38      	pop	{r3, r4, r5, pc}
 800551c:	2000048c 	.word	0x2000048c

08005520 <__errno>:
 8005520:	4b01      	ldr	r3, [pc, #4]	@ (8005528 <__errno+0x8>)
 8005522:	6818      	ldr	r0, [r3, #0]
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	20000024 	.word	0x20000024

0800552c <__libc_init_array>:
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	2600      	movs	r6, #0
 8005530:	4d0c      	ldr	r5, [pc, #48]	@ (8005564 <__libc_init_array+0x38>)
 8005532:	4c0d      	ldr	r4, [pc, #52]	@ (8005568 <__libc_init_array+0x3c>)
 8005534:	1b64      	subs	r4, r4, r5
 8005536:	10a4      	asrs	r4, r4, #2
 8005538:	42a6      	cmp	r6, r4
 800553a:	d109      	bne.n	8005550 <__libc_init_array+0x24>
 800553c:	f003 fb50 	bl	8008be0 <_init>
 8005540:	2600      	movs	r6, #0
 8005542:	4d0a      	ldr	r5, [pc, #40]	@ (800556c <__libc_init_array+0x40>)
 8005544:	4c0a      	ldr	r4, [pc, #40]	@ (8005570 <__libc_init_array+0x44>)
 8005546:	1b64      	subs	r4, r4, r5
 8005548:	10a4      	asrs	r4, r4, #2
 800554a:	42a6      	cmp	r6, r4
 800554c:	d105      	bne.n	800555a <__libc_init_array+0x2e>
 800554e:	bd70      	pop	{r4, r5, r6, pc}
 8005550:	f855 3b04 	ldr.w	r3, [r5], #4
 8005554:	4798      	blx	r3
 8005556:	3601      	adds	r6, #1
 8005558:	e7ee      	b.n	8005538 <__libc_init_array+0xc>
 800555a:	f855 3b04 	ldr.w	r3, [r5], #4
 800555e:	4798      	blx	r3
 8005560:	3601      	adds	r6, #1
 8005562:	e7f2      	b.n	800554a <__libc_init_array+0x1e>
 8005564:	080090d0 	.word	0x080090d0
 8005568:	080090d0 	.word	0x080090d0
 800556c:	080090d0 	.word	0x080090d0
 8005570:	080090d4 	.word	0x080090d4

08005574 <__retarget_lock_init_recursive>:
 8005574:	4770      	bx	lr

08005576 <__retarget_lock_acquire_recursive>:
 8005576:	4770      	bx	lr

08005578 <__retarget_lock_release_recursive>:
 8005578:	4770      	bx	lr

0800557a <memchr>:
 800557a:	4603      	mov	r3, r0
 800557c:	b510      	push	{r4, lr}
 800557e:	b2c9      	uxtb	r1, r1
 8005580:	4402      	add	r2, r0
 8005582:	4293      	cmp	r3, r2
 8005584:	4618      	mov	r0, r3
 8005586:	d101      	bne.n	800558c <memchr+0x12>
 8005588:	2000      	movs	r0, #0
 800558a:	e003      	b.n	8005594 <memchr+0x1a>
 800558c:	7804      	ldrb	r4, [r0, #0]
 800558e:	3301      	adds	r3, #1
 8005590:	428c      	cmp	r4, r1
 8005592:	d1f6      	bne.n	8005582 <memchr+0x8>
 8005594:	bd10      	pop	{r4, pc}

08005596 <memcpy>:
 8005596:	440a      	add	r2, r1
 8005598:	4291      	cmp	r1, r2
 800559a:	f100 33ff 	add.w	r3, r0, #4294967295
 800559e:	d100      	bne.n	80055a2 <memcpy+0xc>
 80055a0:	4770      	bx	lr
 80055a2:	b510      	push	{r4, lr}
 80055a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055a8:	4291      	cmp	r1, r2
 80055aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ae:	d1f9      	bne.n	80055a4 <memcpy+0xe>
 80055b0:	bd10      	pop	{r4, pc}
	...

080055b4 <nanf>:
 80055b4:	4800      	ldr	r0, [pc, #0]	@ (80055b8 <nanf+0x4>)
 80055b6:	4770      	bx	lr
 80055b8:	7fc00000 	.word	0x7fc00000

080055bc <quorem>:
 80055bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c0:	6903      	ldr	r3, [r0, #16]
 80055c2:	690c      	ldr	r4, [r1, #16]
 80055c4:	4607      	mov	r7, r0
 80055c6:	42a3      	cmp	r3, r4
 80055c8:	db7e      	blt.n	80056c8 <quorem+0x10c>
 80055ca:	3c01      	subs	r4, #1
 80055cc:	00a3      	lsls	r3, r4, #2
 80055ce:	f100 0514 	add.w	r5, r0, #20
 80055d2:	f101 0814 	add.w	r8, r1, #20
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055dc:	9301      	str	r3, [sp, #4]
 80055de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055e6:	3301      	adds	r3, #1
 80055e8:	429a      	cmp	r2, r3
 80055ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80055ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055f2:	d32e      	bcc.n	8005652 <quorem+0x96>
 80055f4:	f04f 0a00 	mov.w	sl, #0
 80055f8:	46c4      	mov	ip, r8
 80055fa:	46ae      	mov	lr, r5
 80055fc:	46d3      	mov	fp, sl
 80055fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005602:	b298      	uxth	r0, r3
 8005604:	fb06 a000 	mla	r0, r6, r0, sl
 8005608:	0c1b      	lsrs	r3, r3, #16
 800560a:	0c02      	lsrs	r2, r0, #16
 800560c:	fb06 2303 	mla	r3, r6, r3, r2
 8005610:	f8de 2000 	ldr.w	r2, [lr]
 8005614:	b280      	uxth	r0, r0
 8005616:	b292      	uxth	r2, r2
 8005618:	1a12      	subs	r2, r2, r0
 800561a:	445a      	add	r2, fp
 800561c:	f8de 0000 	ldr.w	r0, [lr]
 8005620:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005624:	b29b      	uxth	r3, r3
 8005626:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800562a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800562e:	b292      	uxth	r2, r2
 8005630:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005634:	45e1      	cmp	r9, ip
 8005636:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800563a:	f84e 2b04 	str.w	r2, [lr], #4
 800563e:	d2de      	bcs.n	80055fe <quorem+0x42>
 8005640:	9b00      	ldr	r3, [sp, #0]
 8005642:	58eb      	ldr	r3, [r5, r3]
 8005644:	b92b      	cbnz	r3, 8005652 <quorem+0x96>
 8005646:	9b01      	ldr	r3, [sp, #4]
 8005648:	3b04      	subs	r3, #4
 800564a:	429d      	cmp	r5, r3
 800564c:	461a      	mov	r2, r3
 800564e:	d32f      	bcc.n	80056b0 <quorem+0xf4>
 8005650:	613c      	str	r4, [r7, #16]
 8005652:	4638      	mov	r0, r7
 8005654:	f001 f9c4 	bl	80069e0 <__mcmp>
 8005658:	2800      	cmp	r0, #0
 800565a:	db25      	blt.n	80056a8 <quorem+0xec>
 800565c:	4629      	mov	r1, r5
 800565e:	2000      	movs	r0, #0
 8005660:	f858 2b04 	ldr.w	r2, [r8], #4
 8005664:	f8d1 c000 	ldr.w	ip, [r1]
 8005668:	fa1f fe82 	uxth.w	lr, r2
 800566c:	fa1f f38c 	uxth.w	r3, ip
 8005670:	eba3 030e 	sub.w	r3, r3, lr
 8005674:	4403      	add	r3, r0
 8005676:	0c12      	lsrs	r2, r2, #16
 8005678:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800567c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005680:	b29b      	uxth	r3, r3
 8005682:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005686:	45c1      	cmp	r9, r8
 8005688:	ea4f 4022 	mov.w	r0, r2, asr #16
 800568c:	f841 3b04 	str.w	r3, [r1], #4
 8005690:	d2e6      	bcs.n	8005660 <quorem+0xa4>
 8005692:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005696:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800569a:	b922      	cbnz	r2, 80056a6 <quorem+0xea>
 800569c:	3b04      	subs	r3, #4
 800569e:	429d      	cmp	r5, r3
 80056a0:	461a      	mov	r2, r3
 80056a2:	d30b      	bcc.n	80056bc <quorem+0x100>
 80056a4:	613c      	str	r4, [r7, #16]
 80056a6:	3601      	adds	r6, #1
 80056a8:	4630      	mov	r0, r6
 80056aa:	b003      	add	sp, #12
 80056ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	3b04      	subs	r3, #4
 80056b4:	2a00      	cmp	r2, #0
 80056b6:	d1cb      	bne.n	8005650 <quorem+0x94>
 80056b8:	3c01      	subs	r4, #1
 80056ba:	e7c6      	b.n	800564a <quorem+0x8e>
 80056bc:	6812      	ldr	r2, [r2, #0]
 80056be:	3b04      	subs	r3, #4
 80056c0:	2a00      	cmp	r2, #0
 80056c2:	d1ef      	bne.n	80056a4 <quorem+0xe8>
 80056c4:	3c01      	subs	r4, #1
 80056c6:	e7ea      	b.n	800569e <quorem+0xe2>
 80056c8:	2000      	movs	r0, #0
 80056ca:	e7ee      	b.n	80056aa <quorem+0xee>
 80056cc:	0000      	movs	r0, r0
	...

080056d0 <_dtoa_r>:
 80056d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d4:	4614      	mov	r4, r2
 80056d6:	461d      	mov	r5, r3
 80056d8:	69c7      	ldr	r7, [r0, #28]
 80056da:	b097      	sub	sp, #92	@ 0x5c
 80056dc:	4683      	mov	fp, r0
 80056de:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80056e2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80056e4:	b97f      	cbnz	r7, 8005706 <_dtoa_r+0x36>
 80056e6:	2010      	movs	r0, #16
 80056e8:	f000 fe02 	bl	80062f0 <malloc>
 80056ec:	4602      	mov	r2, r0
 80056ee:	f8cb 001c 	str.w	r0, [fp, #28]
 80056f2:	b920      	cbnz	r0, 80056fe <_dtoa_r+0x2e>
 80056f4:	21ef      	movs	r1, #239	@ 0xef
 80056f6:	4ba8      	ldr	r3, [pc, #672]	@ (8005998 <_dtoa_r+0x2c8>)
 80056f8:	48a8      	ldr	r0, [pc, #672]	@ (800599c <_dtoa_r+0x2cc>)
 80056fa:	f002 fdcf 	bl	800829c <__assert_func>
 80056fe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005702:	6007      	str	r7, [r0, #0]
 8005704:	60c7      	str	r7, [r0, #12]
 8005706:	f8db 301c 	ldr.w	r3, [fp, #28]
 800570a:	6819      	ldr	r1, [r3, #0]
 800570c:	b159      	cbz	r1, 8005726 <_dtoa_r+0x56>
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	2301      	movs	r3, #1
 8005712:	4093      	lsls	r3, r2
 8005714:	604a      	str	r2, [r1, #4]
 8005716:	608b      	str	r3, [r1, #8]
 8005718:	4658      	mov	r0, fp
 800571a:	f000 fedf 	bl	80064dc <_Bfree>
 800571e:	2200      	movs	r2, #0
 8005720:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	1e2b      	subs	r3, r5, #0
 8005728:	bfaf      	iteee	ge
 800572a:	2300      	movge	r3, #0
 800572c:	2201      	movlt	r2, #1
 800572e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005732:	9303      	strlt	r3, [sp, #12]
 8005734:	bfa8      	it	ge
 8005736:	6033      	strge	r3, [r6, #0]
 8005738:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800573c:	4b98      	ldr	r3, [pc, #608]	@ (80059a0 <_dtoa_r+0x2d0>)
 800573e:	bfb8      	it	lt
 8005740:	6032      	strlt	r2, [r6, #0]
 8005742:	ea33 0308 	bics.w	r3, r3, r8
 8005746:	d112      	bne.n	800576e <_dtoa_r+0x9e>
 8005748:	f242 730f 	movw	r3, #9999	@ 0x270f
 800574c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005754:	4323      	orrs	r3, r4
 8005756:	f000 8550 	beq.w	80061fa <_dtoa_r+0xb2a>
 800575a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800575c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80059a4 <_dtoa_r+0x2d4>
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 8552 	beq.w	800620a <_dtoa_r+0xb3a>
 8005766:	f10a 0303 	add.w	r3, sl, #3
 800576a:	f000 bd4c 	b.w	8006206 <_dtoa_r+0xb36>
 800576e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005772:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005776:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800577a:	2200      	movs	r2, #0
 800577c:	2300      	movs	r3, #0
 800577e:	f7fb f913 	bl	80009a8 <__aeabi_dcmpeq>
 8005782:	4607      	mov	r7, r0
 8005784:	b158      	cbz	r0, 800579e <_dtoa_r+0xce>
 8005786:	2301      	movs	r3, #1
 8005788:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800578e:	b113      	cbz	r3, 8005796 <_dtoa_r+0xc6>
 8005790:	4b85      	ldr	r3, [pc, #532]	@ (80059a8 <_dtoa_r+0x2d8>)
 8005792:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80059ac <_dtoa_r+0x2dc>
 800579a:	f000 bd36 	b.w	800620a <_dtoa_r+0xb3a>
 800579e:	ab14      	add	r3, sp, #80	@ 0x50
 80057a0:	9301      	str	r3, [sp, #4]
 80057a2:	ab15      	add	r3, sp, #84	@ 0x54
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	4658      	mov	r0, fp
 80057a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80057ac:	f001 fa30 	bl	8006c10 <__d2b>
 80057b0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80057b4:	4681      	mov	r9, r0
 80057b6:	2e00      	cmp	r6, #0
 80057b8:	d077      	beq.n	80058aa <_dtoa_r+0x1da>
 80057ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057c0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80057c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057c8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80057cc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80057d0:	9712      	str	r7, [sp, #72]	@ 0x48
 80057d2:	4619      	mov	r1, r3
 80057d4:	2200      	movs	r2, #0
 80057d6:	4b76      	ldr	r3, [pc, #472]	@ (80059b0 <_dtoa_r+0x2e0>)
 80057d8:	f7fa fcc6 	bl	8000168 <__aeabi_dsub>
 80057dc:	a368      	add	r3, pc, #416	@ (adr r3, 8005980 <_dtoa_r+0x2b0>)
 80057de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e2:	f7fa fe79 	bl	80004d8 <__aeabi_dmul>
 80057e6:	a368      	add	r3, pc, #416	@ (adr r3, 8005988 <_dtoa_r+0x2b8>)
 80057e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ec:	f7fa fcbe 	bl	800016c <__adddf3>
 80057f0:	4604      	mov	r4, r0
 80057f2:	4630      	mov	r0, r6
 80057f4:	460d      	mov	r5, r1
 80057f6:	f7fa fe05 	bl	8000404 <__aeabi_i2d>
 80057fa:	a365      	add	r3, pc, #404	@ (adr r3, 8005990 <_dtoa_r+0x2c0>)
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	f7fa fe6a 	bl	80004d8 <__aeabi_dmul>
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	4620      	mov	r0, r4
 800580a:	4629      	mov	r1, r5
 800580c:	f7fa fcae 	bl	800016c <__adddf3>
 8005810:	4604      	mov	r4, r0
 8005812:	460d      	mov	r5, r1
 8005814:	f7fb f910 	bl	8000a38 <__aeabi_d2iz>
 8005818:	2200      	movs	r2, #0
 800581a:	4607      	mov	r7, r0
 800581c:	2300      	movs	r3, #0
 800581e:	4620      	mov	r0, r4
 8005820:	4629      	mov	r1, r5
 8005822:	f7fb f8cb 	bl	80009bc <__aeabi_dcmplt>
 8005826:	b140      	cbz	r0, 800583a <_dtoa_r+0x16a>
 8005828:	4638      	mov	r0, r7
 800582a:	f7fa fdeb 	bl	8000404 <__aeabi_i2d>
 800582e:	4622      	mov	r2, r4
 8005830:	462b      	mov	r3, r5
 8005832:	f7fb f8b9 	bl	80009a8 <__aeabi_dcmpeq>
 8005836:	b900      	cbnz	r0, 800583a <_dtoa_r+0x16a>
 8005838:	3f01      	subs	r7, #1
 800583a:	2f16      	cmp	r7, #22
 800583c:	d853      	bhi.n	80058e6 <_dtoa_r+0x216>
 800583e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005842:	4b5c      	ldr	r3, [pc, #368]	@ (80059b4 <_dtoa_r+0x2e4>)
 8005844:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	f7fb f8b6 	bl	80009bc <__aeabi_dcmplt>
 8005850:	2800      	cmp	r0, #0
 8005852:	d04a      	beq.n	80058ea <_dtoa_r+0x21a>
 8005854:	2300      	movs	r3, #0
 8005856:	3f01      	subs	r7, #1
 8005858:	930f      	str	r3, [sp, #60]	@ 0x3c
 800585a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800585c:	1b9b      	subs	r3, r3, r6
 800585e:	1e5a      	subs	r2, r3, #1
 8005860:	bf46      	itte	mi
 8005862:	f1c3 0801 	rsbmi	r8, r3, #1
 8005866:	2300      	movmi	r3, #0
 8005868:	f04f 0800 	movpl.w	r8, #0
 800586c:	9209      	str	r2, [sp, #36]	@ 0x24
 800586e:	bf48      	it	mi
 8005870:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005872:	2f00      	cmp	r7, #0
 8005874:	db3b      	blt.n	80058ee <_dtoa_r+0x21e>
 8005876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005878:	970e      	str	r7, [sp, #56]	@ 0x38
 800587a:	443b      	add	r3, r7
 800587c:	9309      	str	r3, [sp, #36]	@ 0x24
 800587e:	2300      	movs	r3, #0
 8005880:	930a      	str	r3, [sp, #40]	@ 0x28
 8005882:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005884:	2b09      	cmp	r3, #9
 8005886:	d866      	bhi.n	8005956 <_dtoa_r+0x286>
 8005888:	2b05      	cmp	r3, #5
 800588a:	bfc4      	itt	gt
 800588c:	3b04      	subgt	r3, #4
 800588e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005890:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005892:	bfc8      	it	gt
 8005894:	2400      	movgt	r4, #0
 8005896:	f1a3 0302 	sub.w	r3, r3, #2
 800589a:	bfd8      	it	le
 800589c:	2401      	movle	r4, #1
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d864      	bhi.n	800596c <_dtoa_r+0x29c>
 80058a2:	e8df f003 	tbb	[pc, r3]
 80058a6:	382b      	.short	0x382b
 80058a8:	5636      	.short	0x5636
 80058aa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80058ae:	441e      	add	r6, r3
 80058b0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	bfc1      	itttt	gt
 80058b8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80058bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80058c0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80058c4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80058c8:	bfd6      	itet	le
 80058ca:	f1c3 0320 	rsble	r3, r3, #32
 80058ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80058d2:	fa04 f003 	lslle.w	r0, r4, r3
 80058d6:	f7fa fd85 	bl	80003e4 <__aeabi_ui2d>
 80058da:	2201      	movs	r2, #1
 80058dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80058e0:	3e01      	subs	r6, #1
 80058e2:	9212      	str	r2, [sp, #72]	@ 0x48
 80058e4:	e775      	b.n	80057d2 <_dtoa_r+0x102>
 80058e6:	2301      	movs	r3, #1
 80058e8:	e7b6      	b.n	8005858 <_dtoa_r+0x188>
 80058ea:	900f      	str	r0, [sp, #60]	@ 0x3c
 80058ec:	e7b5      	b.n	800585a <_dtoa_r+0x18a>
 80058ee:	427b      	negs	r3, r7
 80058f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80058f2:	2300      	movs	r3, #0
 80058f4:	eba8 0807 	sub.w	r8, r8, r7
 80058f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80058fa:	e7c2      	b.n	8005882 <_dtoa_r+0x1b2>
 80058fc:	2300      	movs	r3, #0
 80058fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005900:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005902:	2b00      	cmp	r3, #0
 8005904:	dc35      	bgt.n	8005972 <_dtoa_r+0x2a2>
 8005906:	2301      	movs	r3, #1
 8005908:	461a      	mov	r2, r3
 800590a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800590e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005910:	e00b      	b.n	800592a <_dtoa_r+0x25a>
 8005912:	2301      	movs	r3, #1
 8005914:	e7f3      	b.n	80058fe <_dtoa_r+0x22e>
 8005916:	2300      	movs	r3, #0
 8005918:	930b      	str	r3, [sp, #44]	@ 0x2c
 800591a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800591c:	18fb      	adds	r3, r7, r3
 800591e:	9308      	str	r3, [sp, #32]
 8005920:	3301      	adds	r3, #1
 8005922:	2b01      	cmp	r3, #1
 8005924:	9307      	str	r3, [sp, #28]
 8005926:	bfb8      	it	lt
 8005928:	2301      	movlt	r3, #1
 800592a:	2100      	movs	r1, #0
 800592c:	2204      	movs	r2, #4
 800592e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005932:	f102 0514 	add.w	r5, r2, #20
 8005936:	429d      	cmp	r5, r3
 8005938:	d91f      	bls.n	800597a <_dtoa_r+0x2aa>
 800593a:	6041      	str	r1, [r0, #4]
 800593c:	4658      	mov	r0, fp
 800593e:	f000 fd8d 	bl	800645c <_Balloc>
 8005942:	4682      	mov	sl, r0
 8005944:	2800      	cmp	r0, #0
 8005946:	d139      	bne.n	80059bc <_dtoa_r+0x2ec>
 8005948:	4602      	mov	r2, r0
 800594a:	f240 11af 	movw	r1, #431	@ 0x1af
 800594e:	4b1a      	ldr	r3, [pc, #104]	@ (80059b8 <_dtoa_r+0x2e8>)
 8005950:	e6d2      	b.n	80056f8 <_dtoa_r+0x28>
 8005952:	2301      	movs	r3, #1
 8005954:	e7e0      	b.n	8005918 <_dtoa_r+0x248>
 8005956:	2401      	movs	r4, #1
 8005958:	2300      	movs	r3, #0
 800595a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800595c:	9320      	str	r3, [sp, #128]	@ 0x80
 800595e:	f04f 33ff 	mov.w	r3, #4294967295
 8005962:	2200      	movs	r2, #0
 8005964:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005968:	2312      	movs	r3, #18
 800596a:	e7d0      	b.n	800590e <_dtoa_r+0x23e>
 800596c:	2301      	movs	r3, #1
 800596e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005970:	e7f5      	b.n	800595e <_dtoa_r+0x28e>
 8005972:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005974:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005978:	e7d7      	b.n	800592a <_dtoa_r+0x25a>
 800597a:	3101      	adds	r1, #1
 800597c:	0052      	lsls	r2, r2, #1
 800597e:	e7d8      	b.n	8005932 <_dtoa_r+0x262>
 8005980:	636f4361 	.word	0x636f4361
 8005984:	3fd287a7 	.word	0x3fd287a7
 8005988:	8b60c8b3 	.word	0x8b60c8b3
 800598c:	3fc68a28 	.word	0x3fc68a28
 8005990:	509f79fb 	.word	0x509f79fb
 8005994:	3fd34413 	.word	0x3fd34413
 8005998:	08008cdc 	.word	0x08008cdc
 800599c:	08008cf3 	.word	0x08008cf3
 80059a0:	7ff00000 	.word	0x7ff00000
 80059a4:	08008cd8 	.word	0x08008cd8
 80059a8:	08008ca7 	.word	0x08008ca7
 80059ac:	08008ca6 	.word	0x08008ca6
 80059b0:	3ff80000 	.word	0x3ff80000
 80059b4:	08008df0 	.word	0x08008df0
 80059b8:	08008d4b 	.word	0x08008d4b
 80059bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80059c0:	6018      	str	r0, [r3, #0]
 80059c2:	9b07      	ldr	r3, [sp, #28]
 80059c4:	2b0e      	cmp	r3, #14
 80059c6:	f200 80a4 	bhi.w	8005b12 <_dtoa_r+0x442>
 80059ca:	2c00      	cmp	r4, #0
 80059cc:	f000 80a1 	beq.w	8005b12 <_dtoa_r+0x442>
 80059d0:	2f00      	cmp	r7, #0
 80059d2:	dd33      	ble.n	8005a3c <_dtoa_r+0x36c>
 80059d4:	4b86      	ldr	r3, [pc, #536]	@ (8005bf0 <_dtoa_r+0x520>)
 80059d6:	f007 020f 	and.w	r2, r7, #15
 80059da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059de:	05f8      	lsls	r0, r7, #23
 80059e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80059e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80059ec:	d516      	bpl.n	8005a1c <_dtoa_r+0x34c>
 80059ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059f2:	4b80      	ldr	r3, [pc, #512]	@ (8005bf4 <_dtoa_r+0x524>)
 80059f4:	2603      	movs	r6, #3
 80059f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059fa:	f7fa fe97 	bl	800072c <__aeabi_ddiv>
 80059fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a02:	f004 040f 	and.w	r4, r4, #15
 8005a06:	4d7b      	ldr	r5, [pc, #492]	@ (8005bf4 <_dtoa_r+0x524>)
 8005a08:	b954      	cbnz	r4, 8005a20 <_dtoa_r+0x350>
 8005a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a12:	f7fa fe8b 	bl	800072c <__aeabi_ddiv>
 8005a16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a1a:	e028      	b.n	8005a6e <_dtoa_r+0x39e>
 8005a1c:	2602      	movs	r6, #2
 8005a1e:	e7f2      	b.n	8005a06 <_dtoa_r+0x336>
 8005a20:	07e1      	lsls	r1, r4, #31
 8005a22:	d508      	bpl.n	8005a36 <_dtoa_r+0x366>
 8005a24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a2c:	f7fa fd54 	bl	80004d8 <__aeabi_dmul>
 8005a30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a34:	3601      	adds	r6, #1
 8005a36:	1064      	asrs	r4, r4, #1
 8005a38:	3508      	adds	r5, #8
 8005a3a:	e7e5      	b.n	8005a08 <_dtoa_r+0x338>
 8005a3c:	f000 80d2 	beq.w	8005be4 <_dtoa_r+0x514>
 8005a40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a44:	427c      	negs	r4, r7
 8005a46:	4b6a      	ldr	r3, [pc, #424]	@ (8005bf0 <_dtoa_r+0x520>)
 8005a48:	f004 020f 	and.w	r2, r4, #15
 8005a4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	f7fa fd40 	bl	80004d8 <__aeabi_dmul>
 8005a58:	2602      	movs	r6, #2
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a60:	4d64      	ldr	r5, [pc, #400]	@ (8005bf4 <_dtoa_r+0x524>)
 8005a62:	1124      	asrs	r4, r4, #4
 8005a64:	2c00      	cmp	r4, #0
 8005a66:	f040 80b2 	bne.w	8005bce <_dtoa_r+0x4fe>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1d3      	bne.n	8005a16 <_dtoa_r+0x346>
 8005a6e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 80b7 	beq.w	8005be8 <_dtoa_r+0x518>
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	4629      	mov	r1, r5
 8005a80:	4b5d      	ldr	r3, [pc, #372]	@ (8005bf8 <_dtoa_r+0x528>)
 8005a82:	f7fa ff9b 	bl	80009bc <__aeabi_dcmplt>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	f000 80ae 	beq.w	8005be8 <_dtoa_r+0x518>
 8005a8c:	9b07      	ldr	r3, [sp, #28]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 80aa 	beq.w	8005be8 <_dtoa_r+0x518>
 8005a94:	9b08      	ldr	r3, [sp, #32]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	dd37      	ble.n	8005b0a <_dtoa_r+0x43a>
 8005a9a:	1e7b      	subs	r3, r7, #1
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	9304      	str	r3, [sp, #16]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	4b55      	ldr	r3, [pc, #340]	@ (8005bfc <_dtoa_r+0x52c>)
 8005aa6:	f7fa fd17 	bl	80004d8 <__aeabi_dmul>
 8005aaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005aae:	9c08      	ldr	r4, [sp, #32]
 8005ab0:	3601      	adds	r6, #1
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	f7fa fca6 	bl	8000404 <__aeabi_i2d>
 8005ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005abc:	f7fa fd0c 	bl	80004d8 <__aeabi_dmul>
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	4b4f      	ldr	r3, [pc, #316]	@ (8005c00 <_dtoa_r+0x530>)
 8005ac4:	f7fa fb52 	bl	800016c <__adddf3>
 8005ac8:	4605      	mov	r5, r0
 8005aca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005ace:	2c00      	cmp	r4, #0
 8005ad0:	f040 809a 	bne.w	8005c08 <_dtoa_r+0x538>
 8005ad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	4b4a      	ldr	r3, [pc, #296]	@ (8005c04 <_dtoa_r+0x534>)
 8005adc:	f7fa fb44 	bl	8000168 <__aeabi_dsub>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ae8:	462a      	mov	r2, r5
 8005aea:	4633      	mov	r3, r6
 8005aec:	f7fa ff84 	bl	80009f8 <__aeabi_dcmpgt>
 8005af0:	2800      	cmp	r0, #0
 8005af2:	f040 828e 	bne.w	8006012 <_dtoa_r+0x942>
 8005af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005afa:	462a      	mov	r2, r5
 8005afc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005b00:	f7fa ff5c 	bl	80009bc <__aeabi_dcmplt>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	f040 8127 	bne.w	8005d58 <_dtoa_r+0x688>
 8005b0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005b0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005b12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f2c0 8163 	blt.w	8005de0 <_dtoa_r+0x710>
 8005b1a:	2f0e      	cmp	r7, #14
 8005b1c:	f300 8160 	bgt.w	8005de0 <_dtoa_r+0x710>
 8005b20:	4b33      	ldr	r3, [pc, #204]	@ (8005bf0 <_dtoa_r+0x520>)
 8005b22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b2a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005b2e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	da03      	bge.n	8005b3c <_dtoa_r+0x46c>
 8005b34:	9b07      	ldr	r3, [sp, #28]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f340 8100 	ble.w	8005d3c <_dtoa_r+0x66c>
 8005b3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b40:	4656      	mov	r6, sl
 8005b42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b46:	4620      	mov	r0, r4
 8005b48:	4629      	mov	r1, r5
 8005b4a:	f7fa fdef 	bl	800072c <__aeabi_ddiv>
 8005b4e:	f7fa ff73 	bl	8000a38 <__aeabi_d2iz>
 8005b52:	4680      	mov	r8, r0
 8005b54:	f7fa fc56 	bl	8000404 <__aeabi_i2d>
 8005b58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b5c:	f7fa fcbc 	bl	80004d8 <__aeabi_dmul>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4620      	mov	r0, r4
 8005b66:	4629      	mov	r1, r5
 8005b68:	f7fa fafe 	bl	8000168 <__aeabi_dsub>
 8005b6c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005b70:	9d07      	ldr	r5, [sp, #28]
 8005b72:	f806 4b01 	strb.w	r4, [r6], #1
 8005b76:	eba6 040a 	sub.w	r4, r6, sl
 8005b7a:	42a5      	cmp	r5, r4
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	f040 8116 	bne.w	8005db0 <_dtoa_r+0x6e0>
 8005b84:	f7fa faf2 	bl	800016c <__adddf3>
 8005b88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b8c:	4604      	mov	r4, r0
 8005b8e:	460d      	mov	r5, r1
 8005b90:	f7fa ff32 	bl	80009f8 <__aeabi_dcmpgt>
 8005b94:	2800      	cmp	r0, #0
 8005b96:	f040 80f8 	bne.w	8005d8a <_dtoa_r+0x6ba>
 8005b9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	f7fa ff01 	bl	80009a8 <__aeabi_dcmpeq>
 8005ba6:	b118      	cbz	r0, 8005bb0 <_dtoa_r+0x4e0>
 8005ba8:	f018 0f01 	tst.w	r8, #1
 8005bac:	f040 80ed 	bne.w	8005d8a <_dtoa_r+0x6ba>
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	4658      	mov	r0, fp
 8005bb4:	f000 fc92 	bl	80064dc <_Bfree>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	7033      	strb	r3, [r6, #0]
 8005bbc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005bbe:	3701      	adds	r7, #1
 8005bc0:	601f      	str	r7, [r3, #0]
 8005bc2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 8320 	beq.w	800620a <_dtoa_r+0xb3a>
 8005bca:	601e      	str	r6, [r3, #0]
 8005bcc:	e31d      	b.n	800620a <_dtoa_r+0xb3a>
 8005bce:	07e2      	lsls	r2, r4, #31
 8005bd0:	d505      	bpl.n	8005bde <_dtoa_r+0x50e>
 8005bd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005bd6:	f7fa fc7f 	bl	80004d8 <__aeabi_dmul>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	3601      	adds	r6, #1
 8005bde:	1064      	asrs	r4, r4, #1
 8005be0:	3508      	adds	r5, #8
 8005be2:	e73f      	b.n	8005a64 <_dtoa_r+0x394>
 8005be4:	2602      	movs	r6, #2
 8005be6:	e742      	b.n	8005a6e <_dtoa_r+0x39e>
 8005be8:	9c07      	ldr	r4, [sp, #28]
 8005bea:	9704      	str	r7, [sp, #16]
 8005bec:	e761      	b.n	8005ab2 <_dtoa_r+0x3e2>
 8005bee:	bf00      	nop
 8005bf0:	08008df0 	.word	0x08008df0
 8005bf4:	08008dc8 	.word	0x08008dc8
 8005bf8:	3ff00000 	.word	0x3ff00000
 8005bfc:	40240000 	.word	0x40240000
 8005c00:	401c0000 	.word	0x401c0000
 8005c04:	40140000 	.word	0x40140000
 8005c08:	4b70      	ldr	r3, [pc, #448]	@ (8005dcc <_dtoa_r+0x6fc>)
 8005c0a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c14:	4454      	add	r4, sl
 8005c16:	2900      	cmp	r1, #0
 8005c18:	d045      	beq.n	8005ca6 <_dtoa_r+0x5d6>
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	496c      	ldr	r1, [pc, #432]	@ (8005dd0 <_dtoa_r+0x700>)
 8005c1e:	f7fa fd85 	bl	800072c <__aeabi_ddiv>
 8005c22:	4633      	mov	r3, r6
 8005c24:	462a      	mov	r2, r5
 8005c26:	f7fa fa9f 	bl	8000168 <__aeabi_dsub>
 8005c2a:	4656      	mov	r6, sl
 8005c2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c34:	f7fa ff00 	bl	8000a38 <__aeabi_d2iz>
 8005c38:	4605      	mov	r5, r0
 8005c3a:	f7fa fbe3 	bl	8000404 <__aeabi_i2d>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	460b      	mov	r3, r1
 8005c42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c46:	f7fa fa8f 	bl	8000168 <__aeabi_dsub>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	3530      	adds	r5, #48	@ 0x30
 8005c50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c58:	f806 5b01 	strb.w	r5, [r6], #1
 8005c5c:	f7fa feae 	bl	80009bc <__aeabi_dcmplt>
 8005c60:	2800      	cmp	r0, #0
 8005c62:	d163      	bne.n	8005d2c <_dtoa_r+0x65c>
 8005c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c68:	2000      	movs	r0, #0
 8005c6a:	495a      	ldr	r1, [pc, #360]	@ (8005dd4 <_dtoa_r+0x704>)
 8005c6c:	f7fa fa7c 	bl	8000168 <__aeabi_dsub>
 8005c70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c74:	f7fa fea2 	bl	80009bc <__aeabi_dcmplt>
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	f040 8087 	bne.w	8005d8c <_dtoa_r+0x6bc>
 8005c7e:	42a6      	cmp	r6, r4
 8005c80:	f43f af43 	beq.w	8005b0a <_dtoa_r+0x43a>
 8005c84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c88:	2200      	movs	r2, #0
 8005c8a:	4b53      	ldr	r3, [pc, #332]	@ (8005dd8 <_dtoa_r+0x708>)
 8005c8c:	f7fa fc24 	bl	80004d8 <__aeabi_dmul>
 8005c90:	2200      	movs	r2, #0
 8005c92:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c9a:	4b4f      	ldr	r3, [pc, #316]	@ (8005dd8 <_dtoa_r+0x708>)
 8005c9c:	f7fa fc1c 	bl	80004d8 <__aeabi_dmul>
 8005ca0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ca4:	e7c4      	b.n	8005c30 <_dtoa_r+0x560>
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	4628      	mov	r0, r5
 8005caa:	f7fa fc15 	bl	80004d8 <__aeabi_dmul>
 8005cae:	4656      	mov	r6, sl
 8005cb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005cb4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005cb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cba:	f7fa febd 	bl	8000a38 <__aeabi_d2iz>
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	f7fa fba0 	bl	8000404 <__aeabi_i2d>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ccc:	f7fa fa4c 	bl	8000168 <__aeabi_dsub>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	3530      	adds	r5, #48	@ 0x30
 8005cd6:	f806 5b01 	strb.w	r5, [r6], #1
 8005cda:	42a6      	cmp	r6, r4
 8005cdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ce0:	f04f 0200 	mov.w	r2, #0
 8005ce4:	d124      	bne.n	8005d30 <_dtoa_r+0x660>
 8005ce6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005cea:	4b39      	ldr	r3, [pc, #228]	@ (8005dd0 <_dtoa_r+0x700>)
 8005cec:	f7fa fa3e 	bl	800016c <__adddf3>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cf8:	f7fa fe7e 	bl	80009f8 <__aeabi_dcmpgt>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	d145      	bne.n	8005d8c <_dtoa_r+0x6bc>
 8005d00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d04:	2000      	movs	r0, #0
 8005d06:	4932      	ldr	r1, [pc, #200]	@ (8005dd0 <_dtoa_r+0x700>)
 8005d08:	f7fa fa2e 	bl	8000168 <__aeabi_dsub>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d14:	f7fa fe52 	bl	80009bc <__aeabi_dcmplt>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	f43f aef6 	beq.w	8005b0a <_dtoa_r+0x43a>
 8005d1e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005d20:	1e73      	subs	r3, r6, #1
 8005d22:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005d24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005d28:	2b30      	cmp	r3, #48	@ 0x30
 8005d2a:	d0f8      	beq.n	8005d1e <_dtoa_r+0x64e>
 8005d2c:	9f04      	ldr	r7, [sp, #16]
 8005d2e:	e73f      	b.n	8005bb0 <_dtoa_r+0x4e0>
 8005d30:	4b29      	ldr	r3, [pc, #164]	@ (8005dd8 <_dtoa_r+0x708>)
 8005d32:	f7fa fbd1 	bl	80004d8 <__aeabi_dmul>
 8005d36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d3a:	e7bc      	b.n	8005cb6 <_dtoa_r+0x5e6>
 8005d3c:	d10c      	bne.n	8005d58 <_dtoa_r+0x688>
 8005d3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d42:	2200      	movs	r2, #0
 8005d44:	4b25      	ldr	r3, [pc, #148]	@ (8005ddc <_dtoa_r+0x70c>)
 8005d46:	f7fa fbc7 	bl	80004d8 <__aeabi_dmul>
 8005d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d4e:	f7fa fe49 	bl	80009e4 <__aeabi_dcmpge>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	f000 815b 	beq.w	800600e <_dtoa_r+0x93e>
 8005d58:	2400      	movs	r4, #0
 8005d5a:	4625      	mov	r5, r4
 8005d5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d5e:	4656      	mov	r6, sl
 8005d60:	43db      	mvns	r3, r3
 8005d62:	9304      	str	r3, [sp, #16]
 8005d64:	2700      	movs	r7, #0
 8005d66:	4621      	mov	r1, r4
 8005d68:	4658      	mov	r0, fp
 8005d6a:	f000 fbb7 	bl	80064dc <_Bfree>
 8005d6e:	2d00      	cmp	r5, #0
 8005d70:	d0dc      	beq.n	8005d2c <_dtoa_r+0x65c>
 8005d72:	b12f      	cbz	r7, 8005d80 <_dtoa_r+0x6b0>
 8005d74:	42af      	cmp	r7, r5
 8005d76:	d003      	beq.n	8005d80 <_dtoa_r+0x6b0>
 8005d78:	4639      	mov	r1, r7
 8005d7a:	4658      	mov	r0, fp
 8005d7c:	f000 fbae 	bl	80064dc <_Bfree>
 8005d80:	4629      	mov	r1, r5
 8005d82:	4658      	mov	r0, fp
 8005d84:	f000 fbaa 	bl	80064dc <_Bfree>
 8005d88:	e7d0      	b.n	8005d2c <_dtoa_r+0x65c>
 8005d8a:	9704      	str	r7, [sp, #16]
 8005d8c:	4633      	mov	r3, r6
 8005d8e:	461e      	mov	r6, r3
 8005d90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d94:	2a39      	cmp	r2, #57	@ 0x39
 8005d96:	d107      	bne.n	8005da8 <_dtoa_r+0x6d8>
 8005d98:	459a      	cmp	sl, r3
 8005d9a:	d1f8      	bne.n	8005d8e <_dtoa_r+0x6be>
 8005d9c:	9a04      	ldr	r2, [sp, #16]
 8005d9e:	3201      	adds	r2, #1
 8005da0:	9204      	str	r2, [sp, #16]
 8005da2:	2230      	movs	r2, #48	@ 0x30
 8005da4:	f88a 2000 	strb.w	r2, [sl]
 8005da8:	781a      	ldrb	r2, [r3, #0]
 8005daa:	3201      	adds	r2, #1
 8005dac:	701a      	strb	r2, [r3, #0]
 8005dae:	e7bd      	b.n	8005d2c <_dtoa_r+0x65c>
 8005db0:	2200      	movs	r2, #0
 8005db2:	4b09      	ldr	r3, [pc, #36]	@ (8005dd8 <_dtoa_r+0x708>)
 8005db4:	f7fa fb90 	bl	80004d8 <__aeabi_dmul>
 8005db8:	2200      	movs	r2, #0
 8005dba:	2300      	movs	r3, #0
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	460d      	mov	r5, r1
 8005dc0:	f7fa fdf2 	bl	80009a8 <__aeabi_dcmpeq>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	f43f aebc 	beq.w	8005b42 <_dtoa_r+0x472>
 8005dca:	e6f1      	b.n	8005bb0 <_dtoa_r+0x4e0>
 8005dcc:	08008df0 	.word	0x08008df0
 8005dd0:	3fe00000 	.word	0x3fe00000
 8005dd4:	3ff00000 	.word	0x3ff00000
 8005dd8:	40240000 	.word	0x40240000
 8005ddc:	40140000 	.word	0x40140000
 8005de0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005de2:	2a00      	cmp	r2, #0
 8005de4:	f000 80db 	beq.w	8005f9e <_dtoa_r+0x8ce>
 8005de8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005dea:	2a01      	cmp	r2, #1
 8005dec:	f300 80bf 	bgt.w	8005f6e <_dtoa_r+0x89e>
 8005df0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005df2:	2a00      	cmp	r2, #0
 8005df4:	f000 80b7 	beq.w	8005f66 <_dtoa_r+0x896>
 8005df8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005dfc:	4646      	mov	r6, r8
 8005dfe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005e00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e02:	2101      	movs	r1, #1
 8005e04:	441a      	add	r2, r3
 8005e06:	4658      	mov	r0, fp
 8005e08:	4498      	add	r8, r3
 8005e0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e0c:	f000 fc64 	bl	80066d8 <__i2b>
 8005e10:	4605      	mov	r5, r0
 8005e12:	b15e      	cbz	r6, 8005e2c <_dtoa_r+0x75c>
 8005e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	dd08      	ble.n	8005e2c <_dtoa_r+0x75c>
 8005e1a:	42b3      	cmp	r3, r6
 8005e1c:	bfa8      	it	ge
 8005e1e:	4633      	movge	r3, r6
 8005e20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e22:	eba8 0803 	sub.w	r8, r8, r3
 8005e26:	1af6      	subs	r6, r6, r3
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e2e:	b1f3      	cbz	r3, 8005e6e <_dtoa_r+0x79e>
 8005e30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 80b7 	beq.w	8005fa6 <_dtoa_r+0x8d6>
 8005e38:	b18c      	cbz	r4, 8005e5e <_dtoa_r+0x78e>
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	4658      	mov	r0, fp
 8005e40:	f000 fd08 	bl	8006854 <__pow5mult>
 8005e44:	464a      	mov	r2, r9
 8005e46:	4601      	mov	r1, r0
 8005e48:	4605      	mov	r5, r0
 8005e4a:	4658      	mov	r0, fp
 8005e4c:	f000 fc5a 	bl	8006704 <__multiply>
 8005e50:	4649      	mov	r1, r9
 8005e52:	9004      	str	r0, [sp, #16]
 8005e54:	4658      	mov	r0, fp
 8005e56:	f000 fb41 	bl	80064dc <_Bfree>
 8005e5a:	9b04      	ldr	r3, [sp, #16]
 8005e5c:	4699      	mov	r9, r3
 8005e5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e60:	1b1a      	subs	r2, r3, r4
 8005e62:	d004      	beq.n	8005e6e <_dtoa_r+0x79e>
 8005e64:	4649      	mov	r1, r9
 8005e66:	4658      	mov	r0, fp
 8005e68:	f000 fcf4 	bl	8006854 <__pow5mult>
 8005e6c:	4681      	mov	r9, r0
 8005e6e:	2101      	movs	r1, #1
 8005e70:	4658      	mov	r0, fp
 8005e72:	f000 fc31 	bl	80066d8 <__i2b>
 8005e76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e78:	4604      	mov	r4, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 81c9 	beq.w	8006212 <_dtoa_r+0xb42>
 8005e80:	461a      	mov	r2, r3
 8005e82:	4601      	mov	r1, r0
 8005e84:	4658      	mov	r0, fp
 8005e86:	f000 fce5 	bl	8006854 <__pow5mult>
 8005e8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	f300 808f 	bgt.w	8005fb2 <_dtoa_r+0x8e2>
 8005e94:	9b02      	ldr	r3, [sp, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f040 8087 	bne.w	8005faa <_dtoa_r+0x8da>
 8005e9c:	9b03      	ldr	r3, [sp, #12]
 8005e9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f040 8083 	bne.w	8005fae <_dtoa_r+0x8de>
 8005ea8:	9b03      	ldr	r3, [sp, #12]
 8005eaa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005eae:	0d1b      	lsrs	r3, r3, #20
 8005eb0:	051b      	lsls	r3, r3, #20
 8005eb2:	b12b      	cbz	r3, 8005ec0 <_dtoa_r+0x7f0>
 8005eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eb6:	f108 0801 	add.w	r8, r8, #1
 8005eba:	3301      	adds	r3, #1
 8005ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 81aa 	beq.w	800621e <_dtoa_r+0xb4e>
 8005eca:	6923      	ldr	r3, [r4, #16]
 8005ecc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ed0:	6918      	ldr	r0, [r3, #16]
 8005ed2:	f000 fbb5 	bl	8006640 <__hi0bits>
 8005ed6:	f1c0 0020 	rsb	r0, r0, #32
 8005eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005edc:	4418      	add	r0, r3
 8005ede:	f010 001f 	ands.w	r0, r0, #31
 8005ee2:	d071      	beq.n	8005fc8 <_dtoa_r+0x8f8>
 8005ee4:	f1c0 0320 	rsb	r3, r0, #32
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	dd65      	ble.n	8005fb8 <_dtoa_r+0x8e8>
 8005eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eee:	f1c0 001c 	rsb	r0, r0, #28
 8005ef2:	4403      	add	r3, r0
 8005ef4:	4480      	add	r8, r0
 8005ef6:	4406      	add	r6, r0
 8005ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005efa:	f1b8 0f00 	cmp.w	r8, #0
 8005efe:	dd05      	ble.n	8005f0c <_dtoa_r+0x83c>
 8005f00:	4649      	mov	r1, r9
 8005f02:	4642      	mov	r2, r8
 8005f04:	4658      	mov	r0, fp
 8005f06:	f000 fcff 	bl	8006908 <__lshift>
 8005f0a:	4681      	mov	r9, r0
 8005f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	dd05      	ble.n	8005f1e <_dtoa_r+0x84e>
 8005f12:	4621      	mov	r1, r4
 8005f14:	461a      	mov	r2, r3
 8005f16:	4658      	mov	r0, fp
 8005f18:	f000 fcf6 	bl	8006908 <__lshift>
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d053      	beq.n	8005fcc <_dtoa_r+0x8fc>
 8005f24:	4621      	mov	r1, r4
 8005f26:	4648      	mov	r0, r9
 8005f28:	f000 fd5a 	bl	80069e0 <__mcmp>
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	da4d      	bge.n	8005fcc <_dtoa_r+0x8fc>
 8005f30:	1e7b      	subs	r3, r7, #1
 8005f32:	4649      	mov	r1, r9
 8005f34:	9304      	str	r3, [sp, #16]
 8005f36:	220a      	movs	r2, #10
 8005f38:	2300      	movs	r3, #0
 8005f3a:	4658      	mov	r0, fp
 8005f3c:	f000 faf0 	bl	8006520 <__multadd>
 8005f40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f42:	4681      	mov	r9, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 816c 	beq.w	8006222 <_dtoa_r+0xb52>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	220a      	movs	r2, #10
 8005f50:	4658      	mov	r0, fp
 8005f52:	f000 fae5 	bl	8006520 <__multadd>
 8005f56:	9b08      	ldr	r3, [sp, #32]
 8005f58:	4605      	mov	r5, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	dc61      	bgt.n	8006022 <_dtoa_r+0x952>
 8005f5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	dc3b      	bgt.n	8005fdc <_dtoa_r+0x90c>
 8005f64:	e05d      	b.n	8006022 <_dtoa_r+0x952>
 8005f66:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f68:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f6c:	e746      	b.n	8005dfc <_dtoa_r+0x72c>
 8005f6e:	9b07      	ldr	r3, [sp, #28]
 8005f70:	1e5c      	subs	r4, r3, #1
 8005f72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f74:	42a3      	cmp	r3, r4
 8005f76:	bfbf      	itttt	lt
 8005f78:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005f7a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005f7c:	1ae3      	sublt	r3, r4, r3
 8005f7e:	18d2      	addlt	r2, r2, r3
 8005f80:	bfa8      	it	ge
 8005f82:	1b1c      	subge	r4, r3, r4
 8005f84:	9b07      	ldr	r3, [sp, #28]
 8005f86:	bfbe      	ittt	lt
 8005f88:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005f8a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005f8c:	2400      	movlt	r4, #0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	bfb5      	itete	lt
 8005f92:	eba8 0603 	sublt.w	r6, r8, r3
 8005f96:	4646      	movge	r6, r8
 8005f98:	2300      	movlt	r3, #0
 8005f9a:	9b07      	ldrge	r3, [sp, #28]
 8005f9c:	e730      	b.n	8005e00 <_dtoa_r+0x730>
 8005f9e:	4646      	mov	r6, r8
 8005fa0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005fa2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005fa4:	e735      	b.n	8005e12 <_dtoa_r+0x742>
 8005fa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fa8:	e75c      	b.n	8005e64 <_dtoa_r+0x794>
 8005faa:	2300      	movs	r3, #0
 8005fac:	e788      	b.n	8005ec0 <_dtoa_r+0x7f0>
 8005fae:	9b02      	ldr	r3, [sp, #8]
 8005fb0:	e786      	b.n	8005ec0 <_dtoa_r+0x7f0>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fb6:	e788      	b.n	8005eca <_dtoa_r+0x7fa>
 8005fb8:	d09f      	beq.n	8005efa <_dtoa_r+0x82a>
 8005fba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fbc:	331c      	adds	r3, #28
 8005fbe:	441a      	add	r2, r3
 8005fc0:	4498      	add	r8, r3
 8005fc2:	441e      	add	r6, r3
 8005fc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fc6:	e798      	b.n	8005efa <_dtoa_r+0x82a>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	e7f6      	b.n	8005fba <_dtoa_r+0x8ea>
 8005fcc:	9b07      	ldr	r3, [sp, #28]
 8005fce:	9704      	str	r7, [sp, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	dc20      	bgt.n	8006016 <_dtoa_r+0x946>
 8005fd4:	9308      	str	r3, [sp, #32]
 8005fd6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	dd1e      	ble.n	800601a <_dtoa_r+0x94a>
 8005fdc:	9b08      	ldr	r3, [sp, #32]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f47f aebc 	bne.w	8005d5c <_dtoa_r+0x68c>
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	2205      	movs	r2, #5
 8005fe8:	4658      	mov	r0, fp
 8005fea:	f000 fa99 	bl	8006520 <__multadd>
 8005fee:	4601      	mov	r1, r0
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	4648      	mov	r0, r9
 8005ff4:	f000 fcf4 	bl	80069e0 <__mcmp>
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	f77f aeaf 	ble.w	8005d5c <_dtoa_r+0x68c>
 8005ffe:	2331      	movs	r3, #49	@ 0x31
 8006000:	4656      	mov	r6, sl
 8006002:	f806 3b01 	strb.w	r3, [r6], #1
 8006006:	9b04      	ldr	r3, [sp, #16]
 8006008:	3301      	adds	r3, #1
 800600a:	9304      	str	r3, [sp, #16]
 800600c:	e6aa      	b.n	8005d64 <_dtoa_r+0x694>
 800600e:	9c07      	ldr	r4, [sp, #28]
 8006010:	9704      	str	r7, [sp, #16]
 8006012:	4625      	mov	r5, r4
 8006014:	e7f3      	b.n	8005ffe <_dtoa_r+0x92e>
 8006016:	9b07      	ldr	r3, [sp, #28]
 8006018:	9308      	str	r3, [sp, #32]
 800601a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 8104 	beq.w	800622a <_dtoa_r+0xb5a>
 8006022:	2e00      	cmp	r6, #0
 8006024:	dd05      	ble.n	8006032 <_dtoa_r+0x962>
 8006026:	4629      	mov	r1, r5
 8006028:	4632      	mov	r2, r6
 800602a:	4658      	mov	r0, fp
 800602c:	f000 fc6c 	bl	8006908 <__lshift>
 8006030:	4605      	mov	r5, r0
 8006032:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006034:	2b00      	cmp	r3, #0
 8006036:	d05a      	beq.n	80060ee <_dtoa_r+0xa1e>
 8006038:	4658      	mov	r0, fp
 800603a:	6869      	ldr	r1, [r5, #4]
 800603c:	f000 fa0e 	bl	800645c <_Balloc>
 8006040:	4606      	mov	r6, r0
 8006042:	b928      	cbnz	r0, 8006050 <_dtoa_r+0x980>
 8006044:	4602      	mov	r2, r0
 8006046:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800604a:	4b83      	ldr	r3, [pc, #524]	@ (8006258 <_dtoa_r+0xb88>)
 800604c:	f7ff bb54 	b.w	80056f8 <_dtoa_r+0x28>
 8006050:	692a      	ldr	r2, [r5, #16]
 8006052:	f105 010c 	add.w	r1, r5, #12
 8006056:	3202      	adds	r2, #2
 8006058:	0092      	lsls	r2, r2, #2
 800605a:	300c      	adds	r0, #12
 800605c:	f7ff fa9b 	bl	8005596 <memcpy>
 8006060:	2201      	movs	r2, #1
 8006062:	4631      	mov	r1, r6
 8006064:	4658      	mov	r0, fp
 8006066:	f000 fc4f 	bl	8006908 <__lshift>
 800606a:	462f      	mov	r7, r5
 800606c:	4605      	mov	r5, r0
 800606e:	f10a 0301 	add.w	r3, sl, #1
 8006072:	9307      	str	r3, [sp, #28]
 8006074:	9b08      	ldr	r3, [sp, #32]
 8006076:	4453      	add	r3, sl
 8006078:	930b      	str	r3, [sp, #44]	@ 0x2c
 800607a:	9b02      	ldr	r3, [sp, #8]
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	930a      	str	r3, [sp, #40]	@ 0x28
 8006082:	9b07      	ldr	r3, [sp, #28]
 8006084:	4621      	mov	r1, r4
 8006086:	3b01      	subs	r3, #1
 8006088:	4648      	mov	r0, r9
 800608a:	9302      	str	r3, [sp, #8]
 800608c:	f7ff fa96 	bl	80055bc <quorem>
 8006090:	4639      	mov	r1, r7
 8006092:	9008      	str	r0, [sp, #32]
 8006094:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006098:	4648      	mov	r0, r9
 800609a:	f000 fca1 	bl	80069e0 <__mcmp>
 800609e:	462a      	mov	r2, r5
 80060a0:	9009      	str	r0, [sp, #36]	@ 0x24
 80060a2:	4621      	mov	r1, r4
 80060a4:	4658      	mov	r0, fp
 80060a6:	f000 fcb7 	bl	8006a18 <__mdiff>
 80060aa:	68c2      	ldr	r2, [r0, #12]
 80060ac:	4606      	mov	r6, r0
 80060ae:	bb02      	cbnz	r2, 80060f2 <_dtoa_r+0xa22>
 80060b0:	4601      	mov	r1, r0
 80060b2:	4648      	mov	r0, r9
 80060b4:	f000 fc94 	bl	80069e0 <__mcmp>
 80060b8:	4602      	mov	r2, r0
 80060ba:	4631      	mov	r1, r6
 80060bc:	4658      	mov	r0, fp
 80060be:	920c      	str	r2, [sp, #48]	@ 0x30
 80060c0:	f000 fa0c 	bl	80064dc <_Bfree>
 80060c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80060c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80060c8:	9e07      	ldr	r6, [sp, #28]
 80060ca:	ea43 0102 	orr.w	r1, r3, r2
 80060ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060d0:	4319      	orrs	r1, r3
 80060d2:	d110      	bne.n	80060f6 <_dtoa_r+0xa26>
 80060d4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060d8:	d029      	beq.n	800612e <_dtoa_r+0xa5e>
 80060da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060dc:	2b00      	cmp	r3, #0
 80060de:	dd02      	ble.n	80060e6 <_dtoa_r+0xa16>
 80060e0:	9b08      	ldr	r3, [sp, #32]
 80060e2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80060e6:	9b02      	ldr	r3, [sp, #8]
 80060e8:	f883 8000 	strb.w	r8, [r3]
 80060ec:	e63b      	b.n	8005d66 <_dtoa_r+0x696>
 80060ee:	4628      	mov	r0, r5
 80060f0:	e7bb      	b.n	800606a <_dtoa_r+0x99a>
 80060f2:	2201      	movs	r2, #1
 80060f4:	e7e1      	b.n	80060ba <_dtoa_r+0x9ea>
 80060f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	db04      	blt.n	8006106 <_dtoa_r+0xa36>
 80060fc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80060fe:	430b      	orrs	r3, r1
 8006100:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006102:	430b      	orrs	r3, r1
 8006104:	d120      	bne.n	8006148 <_dtoa_r+0xa78>
 8006106:	2a00      	cmp	r2, #0
 8006108:	dded      	ble.n	80060e6 <_dtoa_r+0xa16>
 800610a:	4649      	mov	r1, r9
 800610c:	2201      	movs	r2, #1
 800610e:	4658      	mov	r0, fp
 8006110:	f000 fbfa 	bl	8006908 <__lshift>
 8006114:	4621      	mov	r1, r4
 8006116:	4681      	mov	r9, r0
 8006118:	f000 fc62 	bl	80069e0 <__mcmp>
 800611c:	2800      	cmp	r0, #0
 800611e:	dc03      	bgt.n	8006128 <_dtoa_r+0xa58>
 8006120:	d1e1      	bne.n	80060e6 <_dtoa_r+0xa16>
 8006122:	f018 0f01 	tst.w	r8, #1
 8006126:	d0de      	beq.n	80060e6 <_dtoa_r+0xa16>
 8006128:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800612c:	d1d8      	bne.n	80060e0 <_dtoa_r+0xa10>
 800612e:	2339      	movs	r3, #57	@ 0x39
 8006130:	9a02      	ldr	r2, [sp, #8]
 8006132:	7013      	strb	r3, [r2, #0]
 8006134:	4633      	mov	r3, r6
 8006136:	461e      	mov	r6, r3
 8006138:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800613c:	3b01      	subs	r3, #1
 800613e:	2a39      	cmp	r2, #57	@ 0x39
 8006140:	d052      	beq.n	80061e8 <_dtoa_r+0xb18>
 8006142:	3201      	adds	r2, #1
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	e60e      	b.n	8005d66 <_dtoa_r+0x696>
 8006148:	2a00      	cmp	r2, #0
 800614a:	dd07      	ble.n	800615c <_dtoa_r+0xa8c>
 800614c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006150:	d0ed      	beq.n	800612e <_dtoa_r+0xa5e>
 8006152:	9a02      	ldr	r2, [sp, #8]
 8006154:	f108 0301 	add.w	r3, r8, #1
 8006158:	7013      	strb	r3, [r2, #0]
 800615a:	e604      	b.n	8005d66 <_dtoa_r+0x696>
 800615c:	9b07      	ldr	r3, [sp, #28]
 800615e:	9a07      	ldr	r2, [sp, #28]
 8006160:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006164:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006166:	4293      	cmp	r3, r2
 8006168:	d028      	beq.n	80061bc <_dtoa_r+0xaec>
 800616a:	4649      	mov	r1, r9
 800616c:	2300      	movs	r3, #0
 800616e:	220a      	movs	r2, #10
 8006170:	4658      	mov	r0, fp
 8006172:	f000 f9d5 	bl	8006520 <__multadd>
 8006176:	42af      	cmp	r7, r5
 8006178:	4681      	mov	r9, r0
 800617a:	f04f 0300 	mov.w	r3, #0
 800617e:	f04f 020a 	mov.w	r2, #10
 8006182:	4639      	mov	r1, r7
 8006184:	4658      	mov	r0, fp
 8006186:	d107      	bne.n	8006198 <_dtoa_r+0xac8>
 8006188:	f000 f9ca 	bl	8006520 <__multadd>
 800618c:	4607      	mov	r7, r0
 800618e:	4605      	mov	r5, r0
 8006190:	9b07      	ldr	r3, [sp, #28]
 8006192:	3301      	adds	r3, #1
 8006194:	9307      	str	r3, [sp, #28]
 8006196:	e774      	b.n	8006082 <_dtoa_r+0x9b2>
 8006198:	f000 f9c2 	bl	8006520 <__multadd>
 800619c:	4629      	mov	r1, r5
 800619e:	4607      	mov	r7, r0
 80061a0:	2300      	movs	r3, #0
 80061a2:	220a      	movs	r2, #10
 80061a4:	4658      	mov	r0, fp
 80061a6:	f000 f9bb 	bl	8006520 <__multadd>
 80061aa:	4605      	mov	r5, r0
 80061ac:	e7f0      	b.n	8006190 <_dtoa_r+0xac0>
 80061ae:	9b08      	ldr	r3, [sp, #32]
 80061b0:	2700      	movs	r7, #0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	bfcc      	ite	gt
 80061b6:	461e      	movgt	r6, r3
 80061b8:	2601      	movle	r6, #1
 80061ba:	4456      	add	r6, sl
 80061bc:	4649      	mov	r1, r9
 80061be:	2201      	movs	r2, #1
 80061c0:	4658      	mov	r0, fp
 80061c2:	f000 fba1 	bl	8006908 <__lshift>
 80061c6:	4621      	mov	r1, r4
 80061c8:	4681      	mov	r9, r0
 80061ca:	f000 fc09 	bl	80069e0 <__mcmp>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	dcb0      	bgt.n	8006134 <_dtoa_r+0xa64>
 80061d2:	d102      	bne.n	80061da <_dtoa_r+0xb0a>
 80061d4:	f018 0f01 	tst.w	r8, #1
 80061d8:	d1ac      	bne.n	8006134 <_dtoa_r+0xa64>
 80061da:	4633      	mov	r3, r6
 80061dc:	461e      	mov	r6, r3
 80061de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061e2:	2a30      	cmp	r2, #48	@ 0x30
 80061e4:	d0fa      	beq.n	80061dc <_dtoa_r+0xb0c>
 80061e6:	e5be      	b.n	8005d66 <_dtoa_r+0x696>
 80061e8:	459a      	cmp	sl, r3
 80061ea:	d1a4      	bne.n	8006136 <_dtoa_r+0xa66>
 80061ec:	9b04      	ldr	r3, [sp, #16]
 80061ee:	3301      	adds	r3, #1
 80061f0:	9304      	str	r3, [sp, #16]
 80061f2:	2331      	movs	r3, #49	@ 0x31
 80061f4:	f88a 3000 	strb.w	r3, [sl]
 80061f8:	e5b5      	b.n	8005d66 <_dtoa_r+0x696>
 80061fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80061fc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800625c <_dtoa_r+0xb8c>
 8006200:	b11b      	cbz	r3, 800620a <_dtoa_r+0xb3a>
 8006202:	f10a 0308 	add.w	r3, sl, #8
 8006206:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	4650      	mov	r0, sl
 800620c:	b017      	add	sp, #92	@ 0x5c
 800620e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006212:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006214:	2b01      	cmp	r3, #1
 8006216:	f77f ae3d 	ble.w	8005e94 <_dtoa_r+0x7c4>
 800621a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800621c:	930a      	str	r3, [sp, #40]	@ 0x28
 800621e:	2001      	movs	r0, #1
 8006220:	e65b      	b.n	8005eda <_dtoa_r+0x80a>
 8006222:	9b08      	ldr	r3, [sp, #32]
 8006224:	2b00      	cmp	r3, #0
 8006226:	f77f aed6 	ble.w	8005fd6 <_dtoa_r+0x906>
 800622a:	4656      	mov	r6, sl
 800622c:	4621      	mov	r1, r4
 800622e:	4648      	mov	r0, r9
 8006230:	f7ff f9c4 	bl	80055bc <quorem>
 8006234:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006238:	9b08      	ldr	r3, [sp, #32]
 800623a:	f806 8b01 	strb.w	r8, [r6], #1
 800623e:	eba6 020a 	sub.w	r2, r6, sl
 8006242:	4293      	cmp	r3, r2
 8006244:	ddb3      	ble.n	80061ae <_dtoa_r+0xade>
 8006246:	4649      	mov	r1, r9
 8006248:	2300      	movs	r3, #0
 800624a:	220a      	movs	r2, #10
 800624c:	4658      	mov	r0, fp
 800624e:	f000 f967 	bl	8006520 <__multadd>
 8006252:	4681      	mov	r9, r0
 8006254:	e7ea      	b.n	800622c <_dtoa_r+0xb5c>
 8006256:	bf00      	nop
 8006258:	08008d4b 	.word	0x08008d4b
 800625c:	08008ccf 	.word	0x08008ccf

08006260 <_free_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	4605      	mov	r5, r0
 8006264:	2900      	cmp	r1, #0
 8006266:	d040      	beq.n	80062ea <_free_r+0x8a>
 8006268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800626c:	1f0c      	subs	r4, r1, #4
 800626e:	2b00      	cmp	r3, #0
 8006270:	bfb8      	it	lt
 8006272:	18e4      	addlt	r4, r4, r3
 8006274:	f000 f8e6 	bl	8006444 <__malloc_lock>
 8006278:	4a1c      	ldr	r2, [pc, #112]	@ (80062ec <_free_r+0x8c>)
 800627a:	6813      	ldr	r3, [r2, #0]
 800627c:	b933      	cbnz	r3, 800628c <_free_r+0x2c>
 800627e:	6063      	str	r3, [r4, #4]
 8006280:	6014      	str	r4, [r2, #0]
 8006282:	4628      	mov	r0, r5
 8006284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006288:	f000 b8e2 	b.w	8006450 <__malloc_unlock>
 800628c:	42a3      	cmp	r3, r4
 800628e:	d908      	bls.n	80062a2 <_free_r+0x42>
 8006290:	6820      	ldr	r0, [r4, #0]
 8006292:	1821      	adds	r1, r4, r0
 8006294:	428b      	cmp	r3, r1
 8006296:	bf01      	itttt	eq
 8006298:	6819      	ldreq	r1, [r3, #0]
 800629a:	685b      	ldreq	r3, [r3, #4]
 800629c:	1809      	addeq	r1, r1, r0
 800629e:	6021      	streq	r1, [r4, #0]
 80062a0:	e7ed      	b.n	800627e <_free_r+0x1e>
 80062a2:	461a      	mov	r2, r3
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	b10b      	cbz	r3, 80062ac <_free_r+0x4c>
 80062a8:	42a3      	cmp	r3, r4
 80062aa:	d9fa      	bls.n	80062a2 <_free_r+0x42>
 80062ac:	6811      	ldr	r1, [r2, #0]
 80062ae:	1850      	adds	r0, r2, r1
 80062b0:	42a0      	cmp	r0, r4
 80062b2:	d10b      	bne.n	80062cc <_free_r+0x6c>
 80062b4:	6820      	ldr	r0, [r4, #0]
 80062b6:	4401      	add	r1, r0
 80062b8:	1850      	adds	r0, r2, r1
 80062ba:	4283      	cmp	r3, r0
 80062bc:	6011      	str	r1, [r2, #0]
 80062be:	d1e0      	bne.n	8006282 <_free_r+0x22>
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	4408      	add	r0, r1
 80062c6:	6010      	str	r0, [r2, #0]
 80062c8:	6053      	str	r3, [r2, #4]
 80062ca:	e7da      	b.n	8006282 <_free_r+0x22>
 80062cc:	d902      	bls.n	80062d4 <_free_r+0x74>
 80062ce:	230c      	movs	r3, #12
 80062d0:	602b      	str	r3, [r5, #0]
 80062d2:	e7d6      	b.n	8006282 <_free_r+0x22>
 80062d4:	6820      	ldr	r0, [r4, #0]
 80062d6:	1821      	adds	r1, r4, r0
 80062d8:	428b      	cmp	r3, r1
 80062da:	bf01      	itttt	eq
 80062dc:	6819      	ldreq	r1, [r3, #0]
 80062de:	685b      	ldreq	r3, [r3, #4]
 80062e0:	1809      	addeq	r1, r1, r0
 80062e2:	6021      	streq	r1, [r4, #0]
 80062e4:	6063      	str	r3, [r4, #4]
 80062e6:	6054      	str	r4, [r2, #4]
 80062e8:	e7cb      	b.n	8006282 <_free_r+0x22>
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	20000498 	.word	0x20000498

080062f0 <malloc>:
 80062f0:	4b02      	ldr	r3, [pc, #8]	@ (80062fc <malloc+0xc>)
 80062f2:	4601      	mov	r1, r0
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	f000 b825 	b.w	8006344 <_malloc_r>
 80062fa:	bf00      	nop
 80062fc:	20000024 	.word	0x20000024

08006300 <sbrk_aligned>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	4e0f      	ldr	r6, [pc, #60]	@ (8006340 <sbrk_aligned+0x40>)
 8006304:	460c      	mov	r4, r1
 8006306:	6831      	ldr	r1, [r6, #0]
 8006308:	4605      	mov	r5, r0
 800630a:	b911      	cbnz	r1, 8006312 <sbrk_aligned+0x12>
 800630c:	f001 ffb0 	bl	8008270 <_sbrk_r>
 8006310:	6030      	str	r0, [r6, #0]
 8006312:	4621      	mov	r1, r4
 8006314:	4628      	mov	r0, r5
 8006316:	f001 ffab 	bl	8008270 <_sbrk_r>
 800631a:	1c43      	adds	r3, r0, #1
 800631c:	d103      	bne.n	8006326 <sbrk_aligned+0x26>
 800631e:	f04f 34ff 	mov.w	r4, #4294967295
 8006322:	4620      	mov	r0, r4
 8006324:	bd70      	pop	{r4, r5, r6, pc}
 8006326:	1cc4      	adds	r4, r0, #3
 8006328:	f024 0403 	bic.w	r4, r4, #3
 800632c:	42a0      	cmp	r0, r4
 800632e:	d0f8      	beq.n	8006322 <sbrk_aligned+0x22>
 8006330:	1a21      	subs	r1, r4, r0
 8006332:	4628      	mov	r0, r5
 8006334:	f001 ff9c 	bl	8008270 <_sbrk_r>
 8006338:	3001      	adds	r0, #1
 800633a:	d1f2      	bne.n	8006322 <sbrk_aligned+0x22>
 800633c:	e7ef      	b.n	800631e <sbrk_aligned+0x1e>
 800633e:	bf00      	nop
 8006340:	20000494 	.word	0x20000494

08006344 <_malloc_r>:
 8006344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006348:	1ccd      	adds	r5, r1, #3
 800634a:	f025 0503 	bic.w	r5, r5, #3
 800634e:	3508      	adds	r5, #8
 8006350:	2d0c      	cmp	r5, #12
 8006352:	bf38      	it	cc
 8006354:	250c      	movcc	r5, #12
 8006356:	2d00      	cmp	r5, #0
 8006358:	4606      	mov	r6, r0
 800635a:	db01      	blt.n	8006360 <_malloc_r+0x1c>
 800635c:	42a9      	cmp	r1, r5
 800635e:	d904      	bls.n	800636a <_malloc_r+0x26>
 8006360:	230c      	movs	r3, #12
 8006362:	6033      	str	r3, [r6, #0]
 8006364:	2000      	movs	r0, #0
 8006366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800636a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006440 <_malloc_r+0xfc>
 800636e:	f000 f869 	bl	8006444 <__malloc_lock>
 8006372:	f8d8 3000 	ldr.w	r3, [r8]
 8006376:	461c      	mov	r4, r3
 8006378:	bb44      	cbnz	r4, 80063cc <_malloc_r+0x88>
 800637a:	4629      	mov	r1, r5
 800637c:	4630      	mov	r0, r6
 800637e:	f7ff ffbf 	bl	8006300 <sbrk_aligned>
 8006382:	1c43      	adds	r3, r0, #1
 8006384:	4604      	mov	r4, r0
 8006386:	d158      	bne.n	800643a <_malloc_r+0xf6>
 8006388:	f8d8 4000 	ldr.w	r4, [r8]
 800638c:	4627      	mov	r7, r4
 800638e:	2f00      	cmp	r7, #0
 8006390:	d143      	bne.n	800641a <_malloc_r+0xd6>
 8006392:	2c00      	cmp	r4, #0
 8006394:	d04b      	beq.n	800642e <_malloc_r+0xea>
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	4639      	mov	r1, r7
 800639a:	4630      	mov	r0, r6
 800639c:	eb04 0903 	add.w	r9, r4, r3
 80063a0:	f001 ff66 	bl	8008270 <_sbrk_r>
 80063a4:	4581      	cmp	r9, r0
 80063a6:	d142      	bne.n	800642e <_malloc_r+0xea>
 80063a8:	6821      	ldr	r1, [r4, #0]
 80063aa:	4630      	mov	r0, r6
 80063ac:	1a6d      	subs	r5, r5, r1
 80063ae:	4629      	mov	r1, r5
 80063b0:	f7ff ffa6 	bl	8006300 <sbrk_aligned>
 80063b4:	3001      	adds	r0, #1
 80063b6:	d03a      	beq.n	800642e <_malloc_r+0xea>
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	442b      	add	r3, r5
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	f8d8 3000 	ldr.w	r3, [r8]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	bb62      	cbnz	r2, 8006420 <_malloc_r+0xdc>
 80063c6:	f8c8 7000 	str.w	r7, [r8]
 80063ca:	e00f      	b.n	80063ec <_malloc_r+0xa8>
 80063cc:	6822      	ldr	r2, [r4, #0]
 80063ce:	1b52      	subs	r2, r2, r5
 80063d0:	d420      	bmi.n	8006414 <_malloc_r+0xd0>
 80063d2:	2a0b      	cmp	r2, #11
 80063d4:	d917      	bls.n	8006406 <_malloc_r+0xc2>
 80063d6:	1961      	adds	r1, r4, r5
 80063d8:	42a3      	cmp	r3, r4
 80063da:	6025      	str	r5, [r4, #0]
 80063dc:	bf18      	it	ne
 80063de:	6059      	strne	r1, [r3, #4]
 80063e0:	6863      	ldr	r3, [r4, #4]
 80063e2:	bf08      	it	eq
 80063e4:	f8c8 1000 	streq.w	r1, [r8]
 80063e8:	5162      	str	r2, [r4, r5]
 80063ea:	604b      	str	r3, [r1, #4]
 80063ec:	4630      	mov	r0, r6
 80063ee:	f000 f82f 	bl	8006450 <__malloc_unlock>
 80063f2:	f104 000b 	add.w	r0, r4, #11
 80063f6:	1d23      	adds	r3, r4, #4
 80063f8:	f020 0007 	bic.w	r0, r0, #7
 80063fc:	1ac2      	subs	r2, r0, r3
 80063fe:	bf1c      	itt	ne
 8006400:	1a1b      	subne	r3, r3, r0
 8006402:	50a3      	strne	r3, [r4, r2]
 8006404:	e7af      	b.n	8006366 <_malloc_r+0x22>
 8006406:	6862      	ldr	r2, [r4, #4]
 8006408:	42a3      	cmp	r3, r4
 800640a:	bf0c      	ite	eq
 800640c:	f8c8 2000 	streq.w	r2, [r8]
 8006410:	605a      	strne	r2, [r3, #4]
 8006412:	e7eb      	b.n	80063ec <_malloc_r+0xa8>
 8006414:	4623      	mov	r3, r4
 8006416:	6864      	ldr	r4, [r4, #4]
 8006418:	e7ae      	b.n	8006378 <_malloc_r+0x34>
 800641a:	463c      	mov	r4, r7
 800641c:	687f      	ldr	r7, [r7, #4]
 800641e:	e7b6      	b.n	800638e <_malloc_r+0x4a>
 8006420:	461a      	mov	r2, r3
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	42a3      	cmp	r3, r4
 8006426:	d1fb      	bne.n	8006420 <_malloc_r+0xdc>
 8006428:	2300      	movs	r3, #0
 800642a:	6053      	str	r3, [r2, #4]
 800642c:	e7de      	b.n	80063ec <_malloc_r+0xa8>
 800642e:	230c      	movs	r3, #12
 8006430:	4630      	mov	r0, r6
 8006432:	6033      	str	r3, [r6, #0]
 8006434:	f000 f80c 	bl	8006450 <__malloc_unlock>
 8006438:	e794      	b.n	8006364 <_malloc_r+0x20>
 800643a:	6005      	str	r5, [r0, #0]
 800643c:	e7d6      	b.n	80063ec <_malloc_r+0xa8>
 800643e:	bf00      	nop
 8006440:	20000498 	.word	0x20000498

08006444 <__malloc_lock>:
 8006444:	4801      	ldr	r0, [pc, #4]	@ (800644c <__malloc_lock+0x8>)
 8006446:	f7ff b896 	b.w	8005576 <__retarget_lock_acquire_recursive>
 800644a:	bf00      	nop
 800644c:	20000490 	.word	0x20000490

08006450 <__malloc_unlock>:
 8006450:	4801      	ldr	r0, [pc, #4]	@ (8006458 <__malloc_unlock+0x8>)
 8006452:	f7ff b891 	b.w	8005578 <__retarget_lock_release_recursive>
 8006456:	bf00      	nop
 8006458:	20000490 	.word	0x20000490

0800645c <_Balloc>:
 800645c:	b570      	push	{r4, r5, r6, lr}
 800645e:	69c6      	ldr	r6, [r0, #28]
 8006460:	4604      	mov	r4, r0
 8006462:	460d      	mov	r5, r1
 8006464:	b976      	cbnz	r6, 8006484 <_Balloc+0x28>
 8006466:	2010      	movs	r0, #16
 8006468:	f7ff ff42 	bl	80062f0 <malloc>
 800646c:	4602      	mov	r2, r0
 800646e:	61e0      	str	r0, [r4, #28]
 8006470:	b920      	cbnz	r0, 800647c <_Balloc+0x20>
 8006472:	216b      	movs	r1, #107	@ 0x6b
 8006474:	4b17      	ldr	r3, [pc, #92]	@ (80064d4 <_Balloc+0x78>)
 8006476:	4818      	ldr	r0, [pc, #96]	@ (80064d8 <_Balloc+0x7c>)
 8006478:	f001 ff10 	bl	800829c <__assert_func>
 800647c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006480:	6006      	str	r6, [r0, #0]
 8006482:	60c6      	str	r6, [r0, #12]
 8006484:	69e6      	ldr	r6, [r4, #28]
 8006486:	68f3      	ldr	r3, [r6, #12]
 8006488:	b183      	cbz	r3, 80064ac <_Balloc+0x50>
 800648a:	69e3      	ldr	r3, [r4, #28]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006492:	b9b8      	cbnz	r0, 80064c4 <_Balloc+0x68>
 8006494:	2101      	movs	r1, #1
 8006496:	fa01 f605 	lsl.w	r6, r1, r5
 800649a:	1d72      	adds	r2, r6, #5
 800649c:	4620      	mov	r0, r4
 800649e:	0092      	lsls	r2, r2, #2
 80064a0:	f001 ff1a 	bl	80082d8 <_calloc_r>
 80064a4:	b160      	cbz	r0, 80064c0 <_Balloc+0x64>
 80064a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064aa:	e00e      	b.n	80064ca <_Balloc+0x6e>
 80064ac:	2221      	movs	r2, #33	@ 0x21
 80064ae:	2104      	movs	r1, #4
 80064b0:	4620      	mov	r0, r4
 80064b2:	f001 ff11 	bl	80082d8 <_calloc_r>
 80064b6:	69e3      	ldr	r3, [r4, #28]
 80064b8:	60f0      	str	r0, [r6, #12]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e4      	bne.n	800648a <_Balloc+0x2e>
 80064c0:	2000      	movs	r0, #0
 80064c2:	bd70      	pop	{r4, r5, r6, pc}
 80064c4:	6802      	ldr	r2, [r0, #0]
 80064c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064ca:	2300      	movs	r3, #0
 80064cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064d0:	e7f7      	b.n	80064c2 <_Balloc+0x66>
 80064d2:	bf00      	nop
 80064d4:	08008cdc 	.word	0x08008cdc
 80064d8:	08008d5c 	.word	0x08008d5c

080064dc <_Bfree>:
 80064dc:	b570      	push	{r4, r5, r6, lr}
 80064de:	69c6      	ldr	r6, [r0, #28]
 80064e0:	4605      	mov	r5, r0
 80064e2:	460c      	mov	r4, r1
 80064e4:	b976      	cbnz	r6, 8006504 <_Bfree+0x28>
 80064e6:	2010      	movs	r0, #16
 80064e8:	f7ff ff02 	bl	80062f0 <malloc>
 80064ec:	4602      	mov	r2, r0
 80064ee:	61e8      	str	r0, [r5, #28]
 80064f0:	b920      	cbnz	r0, 80064fc <_Bfree+0x20>
 80064f2:	218f      	movs	r1, #143	@ 0x8f
 80064f4:	4b08      	ldr	r3, [pc, #32]	@ (8006518 <_Bfree+0x3c>)
 80064f6:	4809      	ldr	r0, [pc, #36]	@ (800651c <_Bfree+0x40>)
 80064f8:	f001 fed0 	bl	800829c <__assert_func>
 80064fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006500:	6006      	str	r6, [r0, #0]
 8006502:	60c6      	str	r6, [r0, #12]
 8006504:	b13c      	cbz	r4, 8006516 <_Bfree+0x3a>
 8006506:	69eb      	ldr	r3, [r5, #28]
 8006508:	6862      	ldr	r2, [r4, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006510:	6021      	str	r1, [r4, #0]
 8006512:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006516:	bd70      	pop	{r4, r5, r6, pc}
 8006518:	08008cdc 	.word	0x08008cdc
 800651c:	08008d5c 	.word	0x08008d5c

08006520 <__multadd>:
 8006520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006524:	4607      	mov	r7, r0
 8006526:	460c      	mov	r4, r1
 8006528:	461e      	mov	r6, r3
 800652a:	2000      	movs	r0, #0
 800652c:	690d      	ldr	r5, [r1, #16]
 800652e:	f101 0c14 	add.w	ip, r1, #20
 8006532:	f8dc 3000 	ldr.w	r3, [ip]
 8006536:	3001      	adds	r0, #1
 8006538:	b299      	uxth	r1, r3
 800653a:	fb02 6101 	mla	r1, r2, r1, r6
 800653e:	0c1e      	lsrs	r6, r3, #16
 8006540:	0c0b      	lsrs	r3, r1, #16
 8006542:	fb02 3306 	mla	r3, r2, r6, r3
 8006546:	b289      	uxth	r1, r1
 8006548:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800654c:	4285      	cmp	r5, r0
 800654e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006552:	f84c 1b04 	str.w	r1, [ip], #4
 8006556:	dcec      	bgt.n	8006532 <__multadd+0x12>
 8006558:	b30e      	cbz	r6, 800659e <__multadd+0x7e>
 800655a:	68a3      	ldr	r3, [r4, #8]
 800655c:	42ab      	cmp	r3, r5
 800655e:	dc19      	bgt.n	8006594 <__multadd+0x74>
 8006560:	6861      	ldr	r1, [r4, #4]
 8006562:	4638      	mov	r0, r7
 8006564:	3101      	adds	r1, #1
 8006566:	f7ff ff79 	bl	800645c <_Balloc>
 800656a:	4680      	mov	r8, r0
 800656c:	b928      	cbnz	r0, 800657a <__multadd+0x5a>
 800656e:	4602      	mov	r2, r0
 8006570:	21ba      	movs	r1, #186	@ 0xba
 8006572:	4b0c      	ldr	r3, [pc, #48]	@ (80065a4 <__multadd+0x84>)
 8006574:	480c      	ldr	r0, [pc, #48]	@ (80065a8 <__multadd+0x88>)
 8006576:	f001 fe91 	bl	800829c <__assert_func>
 800657a:	6922      	ldr	r2, [r4, #16]
 800657c:	f104 010c 	add.w	r1, r4, #12
 8006580:	3202      	adds	r2, #2
 8006582:	0092      	lsls	r2, r2, #2
 8006584:	300c      	adds	r0, #12
 8006586:	f7ff f806 	bl	8005596 <memcpy>
 800658a:	4621      	mov	r1, r4
 800658c:	4638      	mov	r0, r7
 800658e:	f7ff ffa5 	bl	80064dc <_Bfree>
 8006592:	4644      	mov	r4, r8
 8006594:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006598:	3501      	adds	r5, #1
 800659a:	615e      	str	r6, [r3, #20]
 800659c:	6125      	str	r5, [r4, #16]
 800659e:	4620      	mov	r0, r4
 80065a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065a4:	08008d4b 	.word	0x08008d4b
 80065a8:	08008d5c 	.word	0x08008d5c

080065ac <__s2b>:
 80065ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065b0:	4615      	mov	r5, r2
 80065b2:	2209      	movs	r2, #9
 80065b4:	461f      	mov	r7, r3
 80065b6:	3308      	adds	r3, #8
 80065b8:	460c      	mov	r4, r1
 80065ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80065be:	4606      	mov	r6, r0
 80065c0:	2201      	movs	r2, #1
 80065c2:	2100      	movs	r1, #0
 80065c4:	429a      	cmp	r2, r3
 80065c6:	db09      	blt.n	80065dc <__s2b+0x30>
 80065c8:	4630      	mov	r0, r6
 80065ca:	f7ff ff47 	bl	800645c <_Balloc>
 80065ce:	b940      	cbnz	r0, 80065e2 <__s2b+0x36>
 80065d0:	4602      	mov	r2, r0
 80065d2:	21d3      	movs	r1, #211	@ 0xd3
 80065d4:	4b18      	ldr	r3, [pc, #96]	@ (8006638 <__s2b+0x8c>)
 80065d6:	4819      	ldr	r0, [pc, #100]	@ (800663c <__s2b+0x90>)
 80065d8:	f001 fe60 	bl	800829c <__assert_func>
 80065dc:	0052      	lsls	r2, r2, #1
 80065de:	3101      	adds	r1, #1
 80065e0:	e7f0      	b.n	80065c4 <__s2b+0x18>
 80065e2:	9b08      	ldr	r3, [sp, #32]
 80065e4:	2d09      	cmp	r5, #9
 80065e6:	6143      	str	r3, [r0, #20]
 80065e8:	f04f 0301 	mov.w	r3, #1
 80065ec:	6103      	str	r3, [r0, #16]
 80065ee:	dd16      	ble.n	800661e <__s2b+0x72>
 80065f0:	f104 0909 	add.w	r9, r4, #9
 80065f4:	46c8      	mov	r8, r9
 80065f6:	442c      	add	r4, r5
 80065f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80065fc:	4601      	mov	r1, r0
 80065fe:	220a      	movs	r2, #10
 8006600:	4630      	mov	r0, r6
 8006602:	3b30      	subs	r3, #48	@ 0x30
 8006604:	f7ff ff8c 	bl	8006520 <__multadd>
 8006608:	45a0      	cmp	r8, r4
 800660a:	d1f5      	bne.n	80065f8 <__s2b+0x4c>
 800660c:	f1a5 0408 	sub.w	r4, r5, #8
 8006610:	444c      	add	r4, r9
 8006612:	1b2d      	subs	r5, r5, r4
 8006614:	1963      	adds	r3, r4, r5
 8006616:	42bb      	cmp	r3, r7
 8006618:	db04      	blt.n	8006624 <__s2b+0x78>
 800661a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800661e:	2509      	movs	r5, #9
 8006620:	340a      	adds	r4, #10
 8006622:	e7f6      	b.n	8006612 <__s2b+0x66>
 8006624:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006628:	4601      	mov	r1, r0
 800662a:	220a      	movs	r2, #10
 800662c:	4630      	mov	r0, r6
 800662e:	3b30      	subs	r3, #48	@ 0x30
 8006630:	f7ff ff76 	bl	8006520 <__multadd>
 8006634:	e7ee      	b.n	8006614 <__s2b+0x68>
 8006636:	bf00      	nop
 8006638:	08008d4b 	.word	0x08008d4b
 800663c:	08008d5c 	.word	0x08008d5c

08006640 <__hi0bits>:
 8006640:	4603      	mov	r3, r0
 8006642:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006646:	bf3a      	itte	cc
 8006648:	0403      	lslcc	r3, r0, #16
 800664a:	2010      	movcc	r0, #16
 800664c:	2000      	movcs	r0, #0
 800664e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006652:	bf3c      	itt	cc
 8006654:	021b      	lslcc	r3, r3, #8
 8006656:	3008      	addcc	r0, #8
 8006658:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800665c:	bf3c      	itt	cc
 800665e:	011b      	lslcc	r3, r3, #4
 8006660:	3004      	addcc	r0, #4
 8006662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006666:	bf3c      	itt	cc
 8006668:	009b      	lslcc	r3, r3, #2
 800666a:	3002      	addcc	r0, #2
 800666c:	2b00      	cmp	r3, #0
 800666e:	db05      	blt.n	800667c <__hi0bits+0x3c>
 8006670:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006674:	f100 0001 	add.w	r0, r0, #1
 8006678:	bf08      	it	eq
 800667a:	2020      	moveq	r0, #32
 800667c:	4770      	bx	lr

0800667e <__lo0bits>:
 800667e:	6803      	ldr	r3, [r0, #0]
 8006680:	4602      	mov	r2, r0
 8006682:	f013 0007 	ands.w	r0, r3, #7
 8006686:	d00b      	beq.n	80066a0 <__lo0bits+0x22>
 8006688:	07d9      	lsls	r1, r3, #31
 800668a:	d421      	bmi.n	80066d0 <__lo0bits+0x52>
 800668c:	0798      	lsls	r0, r3, #30
 800668e:	bf49      	itett	mi
 8006690:	085b      	lsrmi	r3, r3, #1
 8006692:	089b      	lsrpl	r3, r3, #2
 8006694:	2001      	movmi	r0, #1
 8006696:	6013      	strmi	r3, [r2, #0]
 8006698:	bf5c      	itt	pl
 800669a:	2002      	movpl	r0, #2
 800669c:	6013      	strpl	r3, [r2, #0]
 800669e:	4770      	bx	lr
 80066a0:	b299      	uxth	r1, r3
 80066a2:	b909      	cbnz	r1, 80066a8 <__lo0bits+0x2a>
 80066a4:	2010      	movs	r0, #16
 80066a6:	0c1b      	lsrs	r3, r3, #16
 80066a8:	b2d9      	uxtb	r1, r3
 80066aa:	b909      	cbnz	r1, 80066b0 <__lo0bits+0x32>
 80066ac:	3008      	adds	r0, #8
 80066ae:	0a1b      	lsrs	r3, r3, #8
 80066b0:	0719      	lsls	r1, r3, #28
 80066b2:	bf04      	itt	eq
 80066b4:	091b      	lsreq	r3, r3, #4
 80066b6:	3004      	addeq	r0, #4
 80066b8:	0799      	lsls	r1, r3, #30
 80066ba:	bf04      	itt	eq
 80066bc:	089b      	lsreq	r3, r3, #2
 80066be:	3002      	addeq	r0, #2
 80066c0:	07d9      	lsls	r1, r3, #31
 80066c2:	d403      	bmi.n	80066cc <__lo0bits+0x4e>
 80066c4:	085b      	lsrs	r3, r3, #1
 80066c6:	f100 0001 	add.w	r0, r0, #1
 80066ca:	d003      	beq.n	80066d4 <__lo0bits+0x56>
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	4770      	bx	lr
 80066d0:	2000      	movs	r0, #0
 80066d2:	4770      	bx	lr
 80066d4:	2020      	movs	r0, #32
 80066d6:	4770      	bx	lr

080066d8 <__i2b>:
 80066d8:	b510      	push	{r4, lr}
 80066da:	460c      	mov	r4, r1
 80066dc:	2101      	movs	r1, #1
 80066de:	f7ff febd 	bl	800645c <_Balloc>
 80066e2:	4602      	mov	r2, r0
 80066e4:	b928      	cbnz	r0, 80066f2 <__i2b+0x1a>
 80066e6:	f240 1145 	movw	r1, #325	@ 0x145
 80066ea:	4b04      	ldr	r3, [pc, #16]	@ (80066fc <__i2b+0x24>)
 80066ec:	4804      	ldr	r0, [pc, #16]	@ (8006700 <__i2b+0x28>)
 80066ee:	f001 fdd5 	bl	800829c <__assert_func>
 80066f2:	2301      	movs	r3, #1
 80066f4:	6144      	str	r4, [r0, #20]
 80066f6:	6103      	str	r3, [r0, #16]
 80066f8:	bd10      	pop	{r4, pc}
 80066fa:	bf00      	nop
 80066fc:	08008d4b 	.word	0x08008d4b
 8006700:	08008d5c 	.word	0x08008d5c

08006704 <__multiply>:
 8006704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006708:	4614      	mov	r4, r2
 800670a:	690a      	ldr	r2, [r1, #16]
 800670c:	6923      	ldr	r3, [r4, #16]
 800670e:	460f      	mov	r7, r1
 8006710:	429a      	cmp	r2, r3
 8006712:	bfa2      	ittt	ge
 8006714:	4623      	movge	r3, r4
 8006716:	460c      	movge	r4, r1
 8006718:	461f      	movge	r7, r3
 800671a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800671e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006722:	68a3      	ldr	r3, [r4, #8]
 8006724:	6861      	ldr	r1, [r4, #4]
 8006726:	eb0a 0609 	add.w	r6, sl, r9
 800672a:	42b3      	cmp	r3, r6
 800672c:	b085      	sub	sp, #20
 800672e:	bfb8      	it	lt
 8006730:	3101      	addlt	r1, #1
 8006732:	f7ff fe93 	bl	800645c <_Balloc>
 8006736:	b930      	cbnz	r0, 8006746 <__multiply+0x42>
 8006738:	4602      	mov	r2, r0
 800673a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800673e:	4b43      	ldr	r3, [pc, #268]	@ (800684c <__multiply+0x148>)
 8006740:	4843      	ldr	r0, [pc, #268]	@ (8006850 <__multiply+0x14c>)
 8006742:	f001 fdab 	bl	800829c <__assert_func>
 8006746:	f100 0514 	add.w	r5, r0, #20
 800674a:	462b      	mov	r3, r5
 800674c:	2200      	movs	r2, #0
 800674e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006752:	4543      	cmp	r3, r8
 8006754:	d321      	bcc.n	800679a <__multiply+0x96>
 8006756:	f107 0114 	add.w	r1, r7, #20
 800675a:	f104 0214 	add.w	r2, r4, #20
 800675e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006762:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006766:	9302      	str	r3, [sp, #8]
 8006768:	1b13      	subs	r3, r2, r4
 800676a:	3b15      	subs	r3, #21
 800676c:	f023 0303 	bic.w	r3, r3, #3
 8006770:	3304      	adds	r3, #4
 8006772:	f104 0715 	add.w	r7, r4, #21
 8006776:	42ba      	cmp	r2, r7
 8006778:	bf38      	it	cc
 800677a:	2304      	movcc	r3, #4
 800677c:	9301      	str	r3, [sp, #4]
 800677e:	9b02      	ldr	r3, [sp, #8]
 8006780:	9103      	str	r1, [sp, #12]
 8006782:	428b      	cmp	r3, r1
 8006784:	d80c      	bhi.n	80067a0 <__multiply+0x9c>
 8006786:	2e00      	cmp	r6, #0
 8006788:	dd03      	ble.n	8006792 <__multiply+0x8e>
 800678a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800678e:	2b00      	cmp	r3, #0
 8006790:	d05a      	beq.n	8006848 <__multiply+0x144>
 8006792:	6106      	str	r6, [r0, #16]
 8006794:	b005      	add	sp, #20
 8006796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800679a:	f843 2b04 	str.w	r2, [r3], #4
 800679e:	e7d8      	b.n	8006752 <__multiply+0x4e>
 80067a0:	f8b1 a000 	ldrh.w	sl, [r1]
 80067a4:	f1ba 0f00 	cmp.w	sl, #0
 80067a8:	d023      	beq.n	80067f2 <__multiply+0xee>
 80067aa:	46a9      	mov	r9, r5
 80067ac:	f04f 0c00 	mov.w	ip, #0
 80067b0:	f104 0e14 	add.w	lr, r4, #20
 80067b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80067b8:	f8d9 3000 	ldr.w	r3, [r9]
 80067bc:	fa1f fb87 	uxth.w	fp, r7
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	fb0a 330b 	mla	r3, sl, fp, r3
 80067c6:	4463      	add	r3, ip
 80067c8:	f8d9 c000 	ldr.w	ip, [r9]
 80067cc:	0c3f      	lsrs	r7, r7, #16
 80067ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80067d2:	fb0a c707 	mla	r7, sl, r7, ip
 80067d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80067da:	b29b      	uxth	r3, r3
 80067dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80067e0:	4572      	cmp	r2, lr
 80067e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80067e6:	f849 3b04 	str.w	r3, [r9], #4
 80067ea:	d8e3      	bhi.n	80067b4 <__multiply+0xb0>
 80067ec:	9b01      	ldr	r3, [sp, #4]
 80067ee:	f845 c003 	str.w	ip, [r5, r3]
 80067f2:	9b03      	ldr	r3, [sp, #12]
 80067f4:	3104      	adds	r1, #4
 80067f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80067fa:	f1b9 0f00 	cmp.w	r9, #0
 80067fe:	d021      	beq.n	8006844 <__multiply+0x140>
 8006800:	46ae      	mov	lr, r5
 8006802:	f04f 0a00 	mov.w	sl, #0
 8006806:	682b      	ldr	r3, [r5, #0]
 8006808:	f104 0c14 	add.w	ip, r4, #20
 800680c:	f8bc b000 	ldrh.w	fp, [ip]
 8006810:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006814:	b29b      	uxth	r3, r3
 8006816:	fb09 770b 	mla	r7, r9, fp, r7
 800681a:	4457      	add	r7, sl
 800681c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006820:	f84e 3b04 	str.w	r3, [lr], #4
 8006824:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006828:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800682c:	f8be 3000 	ldrh.w	r3, [lr]
 8006830:	4562      	cmp	r2, ip
 8006832:	fb09 330a 	mla	r3, r9, sl, r3
 8006836:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800683a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800683e:	d8e5      	bhi.n	800680c <__multiply+0x108>
 8006840:	9f01      	ldr	r7, [sp, #4]
 8006842:	51eb      	str	r3, [r5, r7]
 8006844:	3504      	adds	r5, #4
 8006846:	e79a      	b.n	800677e <__multiply+0x7a>
 8006848:	3e01      	subs	r6, #1
 800684a:	e79c      	b.n	8006786 <__multiply+0x82>
 800684c:	08008d4b 	.word	0x08008d4b
 8006850:	08008d5c 	.word	0x08008d5c

08006854 <__pow5mult>:
 8006854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006858:	4615      	mov	r5, r2
 800685a:	f012 0203 	ands.w	r2, r2, #3
 800685e:	4607      	mov	r7, r0
 8006860:	460e      	mov	r6, r1
 8006862:	d007      	beq.n	8006874 <__pow5mult+0x20>
 8006864:	4c25      	ldr	r4, [pc, #148]	@ (80068fc <__pow5mult+0xa8>)
 8006866:	3a01      	subs	r2, #1
 8006868:	2300      	movs	r3, #0
 800686a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800686e:	f7ff fe57 	bl	8006520 <__multadd>
 8006872:	4606      	mov	r6, r0
 8006874:	10ad      	asrs	r5, r5, #2
 8006876:	d03d      	beq.n	80068f4 <__pow5mult+0xa0>
 8006878:	69fc      	ldr	r4, [r7, #28]
 800687a:	b97c      	cbnz	r4, 800689c <__pow5mult+0x48>
 800687c:	2010      	movs	r0, #16
 800687e:	f7ff fd37 	bl	80062f0 <malloc>
 8006882:	4602      	mov	r2, r0
 8006884:	61f8      	str	r0, [r7, #28]
 8006886:	b928      	cbnz	r0, 8006894 <__pow5mult+0x40>
 8006888:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800688c:	4b1c      	ldr	r3, [pc, #112]	@ (8006900 <__pow5mult+0xac>)
 800688e:	481d      	ldr	r0, [pc, #116]	@ (8006904 <__pow5mult+0xb0>)
 8006890:	f001 fd04 	bl	800829c <__assert_func>
 8006894:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006898:	6004      	str	r4, [r0, #0]
 800689a:	60c4      	str	r4, [r0, #12]
 800689c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80068a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068a4:	b94c      	cbnz	r4, 80068ba <__pow5mult+0x66>
 80068a6:	f240 2171 	movw	r1, #625	@ 0x271
 80068aa:	4638      	mov	r0, r7
 80068ac:	f7ff ff14 	bl	80066d8 <__i2b>
 80068b0:	2300      	movs	r3, #0
 80068b2:	4604      	mov	r4, r0
 80068b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80068b8:	6003      	str	r3, [r0, #0]
 80068ba:	f04f 0900 	mov.w	r9, #0
 80068be:	07eb      	lsls	r3, r5, #31
 80068c0:	d50a      	bpl.n	80068d8 <__pow5mult+0x84>
 80068c2:	4631      	mov	r1, r6
 80068c4:	4622      	mov	r2, r4
 80068c6:	4638      	mov	r0, r7
 80068c8:	f7ff ff1c 	bl	8006704 <__multiply>
 80068cc:	4680      	mov	r8, r0
 80068ce:	4631      	mov	r1, r6
 80068d0:	4638      	mov	r0, r7
 80068d2:	f7ff fe03 	bl	80064dc <_Bfree>
 80068d6:	4646      	mov	r6, r8
 80068d8:	106d      	asrs	r5, r5, #1
 80068da:	d00b      	beq.n	80068f4 <__pow5mult+0xa0>
 80068dc:	6820      	ldr	r0, [r4, #0]
 80068de:	b938      	cbnz	r0, 80068f0 <__pow5mult+0x9c>
 80068e0:	4622      	mov	r2, r4
 80068e2:	4621      	mov	r1, r4
 80068e4:	4638      	mov	r0, r7
 80068e6:	f7ff ff0d 	bl	8006704 <__multiply>
 80068ea:	6020      	str	r0, [r4, #0]
 80068ec:	f8c0 9000 	str.w	r9, [r0]
 80068f0:	4604      	mov	r4, r0
 80068f2:	e7e4      	b.n	80068be <__pow5mult+0x6a>
 80068f4:	4630      	mov	r0, r6
 80068f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068fa:	bf00      	nop
 80068fc:	08008db8 	.word	0x08008db8
 8006900:	08008cdc 	.word	0x08008cdc
 8006904:	08008d5c 	.word	0x08008d5c

08006908 <__lshift>:
 8006908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800690c:	460c      	mov	r4, r1
 800690e:	4607      	mov	r7, r0
 8006910:	4691      	mov	r9, r2
 8006912:	6923      	ldr	r3, [r4, #16]
 8006914:	6849      	ldr	r1, [r1, #4]
 8006916:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800691a:	68a3      	ldr	r3, [r4, #8]
 800691c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006920:	f108 0601 	add.w	r6, r8, #1
 8006924:	42b3      	cmp	r3, r6
 8006926:	db0b      	blt.n	8006940 <__lshift+0x38>
 8006928:	4638      	mov	r0, r7
 800692a:	f7ff fd97 	bl	800645c <_Balloc>
 800692e:	4605      	mov	r5, r0
 8006930:	b948      	cbnz	r0, 8006946 <__lshift+0x3e>
 8006932:	4602      	mov	r2, r0
 8006934:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006938:	4b27      	ldr	r3, [pc, #156]	@ (80069d8 <__lshift+0xd0>)
 800693a:	4828      	ldr	r0, [pc, #160]	@ (80069dc <__lshift+0xd4>)
 800693c:	f001 fcae 	bl	800829c <__assert_func>
 8006940:	3101      	adds	r1, #1
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	e7ee      	b.n	8006924 <__lshift+0x1c>
 8006946:	2300      	movs	r3, #0
 8006948:	f100 0114 	add.w	r1, r0, #20
 800694c:	f100 0210 	add.w	r2, r0, #16
 8006950:	4618      	mov	r0, r3
 8006952:	4553      	cmp	r3, sl
 8006954:	db33      	blt.n	80069be <__lshift+0xb6>
 8006956:	6920      	ldr	r0, [r4, #16]
 8006958:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800695c:	f104 0314 	add.w	r3, r4, #20
 8006960:	f019 091f 	ands.w	r9, r9, #31
 8006964:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006968:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800696c:	d02b      	beq.n	80069c6 <__lshift+0xbe>
 800696e:	468a      	mov	sl, r1
 8006970:	2200      	movs	r2, #0
 8006972:	f1c9 0e20 	rsb	lr, r9, #32
 8006976:	6818      	ldr	r0, [r3, #0]
 8006978:	fa00 f009 	lsl.w	r0, r0, r9
 800697c:	4310      	orrs	r0, r2
 800697e:	f84a 0b04 	str.w	r0, [sl], #4
 8006982:	f853 2b04 	ldr.w	r2, [r3], #4
 8006986:	459c      	cmp	ip, r3
 8006988:	fa22 f20e 	lsr.w	r2, r2, lr
 800698c:	d8f3      	bhi.n	8006976 <__lshift+0x6e>
 800698e:	ebac 0304 	sub.w	r3, ip, r4
 8006992:	3b15      	subs	r3, #21
 8006994:	f023 0303 	bic.w	r3, r3, #3
 8006998:	3304      	adds	r3, #4
 800699a:	f104 0015 	add.w	r0, r4, #21
 800699e:	4584      	cmp	ip, r0
 80069a0:	bf38      	it	cc
 80069a2:	2304      	movcc	r3, #4
 80069a4:	50ca      	str	r2, [r1, r3]
 80069a6:	b10a      	cbz	r2, 80069ac <__lshift+0xa4>
 80069a8:	f108 0602 	add.w	r6, r8, #2
 80069ac:	3e01      	subs	r6, #1
 80069ae:	4638      	mov	r0, r7
 80069b0:	4621      	mov	r1, r4
 80069b2:	612e      	str	r6, [r5, #16]
 80069b4:	f7ff fd92 	bl	80064dc <_Bfree>
 80069b8:	4628      	mov	r0, r5
 80069ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069be:	f842 0f04 	str.w	r0, [r2, #4]!
 80069c2:	3301      	adds	r3, #1
 80069c4:	e7c5      	b.n	8006952 <__lshift+0x4a>
 80069c6:	3904      	subs	r1, #4
 80069c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80069cc:	459c      	cmp	ip, r3
 80069ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80069d2:	d8f9      	bhi.n	80069c8 <__lshift+0xc0>
 80069d4:	e7ea      	b.n	80069ac <__lshift+0xa4>
 80069d6:	bf00      	nop
 80069d8:	08008d4b 	.word	0x08008d4b
 80069dc:	08008d5c 	.word	0x08008d5c

080069e0 <__mcmp>:
 80069e0:	4603      	mov	r3, r0
 80069e2:	690a      	ldr	r2, [r1, #16]
 80069e4:	6900      	ldr	r0, [r0, #16]
 80069e6:	b530      	push	{r4, r5, lr}
 80069e8:	1a80      	subs	r0, r0, r2
 80069ea:	d10e      	bne.n	8006a0a <__mcmp+0x2a>
 80069ec:	3314      	adds	r3, #20
 80069ee:	3114      	adds	r1, #20
 80069f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80069f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80069f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a00:	4295      	cmp	r5, r2
 8006a02:	d003      	beq.n	8006a0c <__mcmp+0x2c>
 8006a04:	d205      	bcs.n	8006a12 <__mcmp+0x32>
 8006a06:	f04f 30ff 	mov.w	r0, #4294967295
 8006a0a:	bd30      	pop	{r4, r5, pc}
 8006a0c:	42a3      	cmp	r3, r4
 8006a0e:	d3f3      	bcc.n	80069f8 <__mcmp+0x18>
 8006a10:	e7fb      	b.n	8006a0a <__mcmp+0x2a>
 8006a12:	2001      	movs	r0, #1
 8006a14:	e7f9      	b.n	8006a0a <__mcmp+0x2a>
	...

08006a18 <__mdiff>:
 8006a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1c:	4689      	mov	r9, r1
 8006a1e:	4606      	mov	r6, r0
 8006a20:	4611      	mov	r1, r2
 8006a22:	4648      	mov	r0, r9
 8006a24:	4614      	mov	r4, r2
 8006a26:	f7ff ffdb 	bl	80069e0 <__mcmp>
 8006a2a:	1e05      	subs	r5, r0, #0
 8006a2c:	d112      	bne.n	8006a54 <__mdiff+0x3c>
 8006a2e:	4629      	mov	r1, r5
 8006a30:	4630      	mov	r0, r6
 8006a32:	f7ff fd13 	bl	800645c <_Balloc>
 8006a36:	4602      	mov	r2, r0
 8006a38:	b928      	cbnz	r0, 8006a46 <__mdiff+0x2e>
 8006a3a:	f240 2137 	movw	r1, #567	@ 0x237
 8006a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8006b38 <__mdiff+0x120>)
 8006a40:	483e      	ldr	r0, [pc, #248]	@ (8006b3c <__mdiff+0x124>)
 8006a42:	f001 fc2b 	bl	800829c <__assert_func>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	b003      	add	sp, #12
 8006a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a54:	bfbc      	itt	lt
 8006a56:	464b      	movlt	r3, r9
 8006a58:	46a1      	movlt	r9, r4
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006a60:	bfba      	itte	lt
 8006a62:	461c      	movlt	r4, r3
 8006a64:	2501      	movlt	r5, #1
 8006a66:	2500      	movge	r5, #0
 8006a68:	f7ff fcf8 	bl	800645c <_Balloc>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	b918      	cbnz	r0, 8006a78 <__mdiff+0x60>
 8006a70:	f240 2145 	movw	r1, #581	@ 0x245
 8006a74:	4b30      	ldr	r3, [pc, #192]	@ (8006b38 <__mdiff+0x120>)
 8006a76:	e7e3      	b.n	8006a40 <__mdiff+0x28>
 8006a78:	f100 0b14 	add.w	fp, r0, #20
 8006a7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a80:	f109 0310 	add.w	r3, r9, #16
 8006a84:	60c5      	str	r5, [r0, #12]
 8006a86:	f04f 0c00 	mov.w	ip, #0
 8006a8a:	f109 0514 	add.w	r5, r9, #20
 8006a8e:	46d9      	mov	r9, fp
 8006a90:	6926      	ldr	r6, [r4, #16]
 8006a92:	f104 0e14 	add.w	lr, r4, #20
 8006a96:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006a9a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	9b01      	ldr	r3, [sp, #4]
 8006aa2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006aa6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006aaa:	b281      	uxth	r1, r0
 8006aac:	9301      	str	r3, [sp, #4]
 8006aae:	fa1f f38a 	uxth.w	r3, sl
 8006ab2:	1a5b      	subs	r3, r3, r1
 8006ab4:	0c00      	lsrs	r0, r0, #16
 8006ab6:	4463      	add	r3, ip
 8006ab8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006abc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006ac6:	4576      	cmp	r6, lr
 8006ac8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006acc:	f849 3b04 	str.w	r3, [r9], #4
 8006ad0:	d8e6      	bhi.n	8006aa0 <__mdiff+0x88>
 8006ad2:	1b33      	subs	r3, r6, r4
 8006ad4:	3b15      	subs	r3, #21
 8006ad6:	f023 0303 	bic.w	r3, r3, #3
 8006ada:	3415      	adds	r4, #21
 8006adc:	3304      	adds	r3, #4
 8006ade:	42a6      	cmp	r6, r4
 8006ae0:	bf38      	it	cc
 8006ae2:	2304      	movcc	r3, #4
 8006ae4:	441d      	add	r5, r3
 8006ae6:	445b      	add	r3, fp
 8006ae8:	461e      	mov	r6, r3
 8006aea:	462c      	mov	r4, r5
 8006aec:	4544      	cmp	r4, r8
 8006aee:	d30e      	bcc.n	8006b0e <__mdiff+0xf6>
 8006af0:	f108 0103 	add.w	r1, r8, #3
 8006af4:	1b49      	subs	r1, r1, r5
 8006af6:	f021 0103 	bic.w	r1, r1, #3
 8006afa:	3d03      	subs	r5, #3
 8006afc:	45a8      	cmp	r8, r5
 8006afe:	bf38      	it	cc
 8006b00:	2100      	movcc	r1, #0
 8006b02:	440b      	add	r3, r1
 8006b04:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b08:	b199      	cbz	r1, 8006b32 <__mdiff+0x11a>
 8006b0a:	6117      	str	r7, [r2, #16]
 8006b0c:	e79e      	b.n	8006a4c <__mdiff+0x34>
 8006b0e:	46e6      	mov	lr, ip
 8006b10:	f854 1b04 	ldr.w	r1, [r4], #4
 8006b14:	fa1f fc81 	uxth.w	ip, r1
 8006b18:	44f4      	add	ip, lr
 8006b1a:	0c08      	lsrs	r0, r1, #16
 8006b1c:	4471      	add	r1, lr
 8006b1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006b22:	b289      	uxth	r1, r1
 8006b24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006b28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b2c:	f846 1b04 	str.w	r1, [r6], #4
 8006b30:	e7dc      	b.n	8006aec <__mdiff+0xd4>
 8006b32:	3f01      	subs	r7, #1
 8006b34:	e7e6      	b.n	8006b04 <__mdiff+0xec>
 8006b36:	bf00      	nop
 8006b38:	08008d4b 	.word	0x08008d4b
 8006b3c:	08008d5c 	.word	0x08008d5c

08006b40 <__ulp>:
 8006b40:	4b0e      	ldr	r3, [pc, #56]	@ (8006b7c <__ulp+0x3c>)
 8006b42:	400b      	ands	r3, r1
 8006b44:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	dc08      	bgt.n	8006b5e <__ulp+0x1e>
 8006b4c:	425b      	negs	r3, r3
 8006b4e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006b52:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006b56:	da04      	bge.n	8006b62 <__ulp+0x22>
 8006b58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006b5c:	4113      	asrs	r3, r2
 8006b5e:	2200      	movs	r2, #0
 8006b60:	e008      	b.n	8006b74 <__ulp+0x34>
 8006b62:	f1a2 0314 	sub.w	r3, r2, #20
 8006b66:	2b1e      	cmp	r3, #30
 8006b68:	bfd6      	itet	le
 8006b6a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006b6e:	2201      	movgt	r2, #1
 8006b70:	40da      	lsrle	r2, r3
 8006b72:	2300      	movs	r3, #0
 8006b74:	4619      	mov	r1, r3
 8006b76:	4610      	mov	r0, r2
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	7ff00000 	.word	0x7ff00000

08006b80 <__b2d>:
 8006b80:	6902      	ldr	r2, [r0, #16]
 8006b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b84:	f100 0614 	add.w	r6, r0, #20
 8006b88:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006b8c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006b90:	4f1e      	ldr	r7, [pc, #120]	@ (8006c0c <__b2d+0x8c>)
 8006b92:	4620      	mov	r0, r4
 8006b94:	f7ff fd54 	bl	8006640 <__hi0bits>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	f1c0 0020 	rsb	r0, r0, #32
 8006b9e:	2b0a      	cmp	r3, #10
 8006ba0:	f1a2 0504 	sub.w	r5, r2, #4
 8006ba4:	6008      	str	r0, [r1, #0]
 8006ba6:	dc12      	bgt.n	8006bce <__b2d+0x4e>
 8006ba8:	42ae      	cmp	r6, r5
 8006baa:	bf2c      	ite	cs
 8006bac:	2200      	movcs	r2, #0
 8006bae:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006bb2:	f1c3 0c0b 	rsb	ip, r3, #11
 8006bb6:	3315      	adds	r3, #21
 8006bb8:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006bbc:	fa04 f303 	lsl.w	r3, r4, r3
 8006bc0:	fa22 f20c 	lsr.w	r2, r2, ip
 8006bc4:	ea4e 0107 	orr.w	r1, lr, r7
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	4610      	mov	r0, r2
 8006bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bce:	42ae      	cmp	r6, r5
 8006bd0:	bf36      	itet	cc
 8006bd2:	f1a2 0508 	subcc.w	r5, r2, #8
 8006bd6:	2200      	movcs	r2, #0
 8006bd8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006bdc:	3b0b      	subs	r3, #11
 8006bde:	d012      	beq.n	8006c06 <__b2d+0x86>
 8006be0:	f1c3 0720 	rsb	r7, r3, #32
 8006be4:	fa22 f107 	lsr.w	r1, r2, r7
 8006be8:	409c      	lsls	r4, r3
 8006bea:	430c      	orrs	r4, r1
 8006bec:	42b5      	cmp	r5, r6
 8006bee:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006bf2:	bf94      	ite	ls
 8006bf4:	2400      	movls	r4, #0
 8006bf6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006bfa:	409a      	lsls	r2, r3
 8006bfc:	40fc      	lsrs	r4, r7
 8006bfe:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006c02:	4322      	orrs	r2, r4
 8006c04:	e7e1      	b.n	8006bca <__b2d+0x4a>
 8006c06:	ea44 0107 	orr.w	r1, r4, r7
 8006c0a:	e7de      	b.n	8006bca <__b2d+0x4a>
 8006c0c:	3ff00000 	.word	0x3ff00000

08006c10 <__d2b>:
 8006c10:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006c14:	2101      	movs	r1, #1
 8006c16:	4690      	mov	r8, r2
 8006c18:	4699      	mov	r9, r3
 8006c1a:	9e08      	ldr	r6, [sp, #32]
 8006c1c:	f7ff fc1e 	bl	800645c <_Balloc>
 8006c20:	4604      	mov	r4, r0
 8006c22:	b930      	cbnz	r0, 8006c32 <__d2b+0x22>
 8006c24:	4602      	mov	r2, r0
 8006c26:	f240 310f 	movw	r1, #783	@ 0x30f
 8006c2a:	4b23      	ldr	r3, [pc, #140]	@ (8006cb8 <__d2b+0xa8>)
 8006c2c:	4823      	ldr	r0, [pc, #140]	@ (8006cbc <__d2b+0xac>)
 8006c2e:	f001 fb35 	bl	800829c <__assert_func>
 8006c32:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006c36:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c3a:	b10d      	cbz	r5, 8006c40 <__d2b+0x30>
 8006c3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c40:	9301      	str	r3, [sp, #4]
 8006c42:	f1b8 0300 	subs.w	r3, r8, #0
 8006c46:	d024      	beq.n	8006c92 <__d2b+0x82>
 8006c48:	4668      	mov	r0, sp
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	f7ff fd17 	bl	800667e <__lo0bits>
 8006c50:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006c54:	b1d8      	cbz	r0, 8006c8e <__d2b+0x7e>
 8006c56:	f1c0 0320 	rsb	r3, r0, #32
 8006c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5e:	430b      	orrs	r3, r1
 8006c60:	40c2      	lsrs	r2, r0
 8006c62:	6163      	str	r3, [r4, #20]
 8006c64:	9201      	str	r2, [sp, #4]
 8006c66:	9b01      	ldr	r3, [sp, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	bf0c      	ite	eq
 8006c6c:	2201      	moveq	r2, #1
 8006c6e:	2202      	movne	r2, #2
 8006c70:	61a3      	str	r3, [r4, #24]
 8006c72:	6122      	str	r2, [r4, #16]
 8006c74:	b1ad      	cbz	r5, 8006ca2 <__d2b+0x92>
 8006c76:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006c7a:	4405      	add	r5, r0
 8006c7c:	6035      	str	r5, [r6, #0]
 8006c7e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006c82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c84:	6018      	str	r0, [r3, #0]
 8006c86:	4620      	mov	r0, r4
 8006c88:	b002      	add	sp, #8
 8006c8a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006c8e:	6161      	str	r1, [r4, #20]
 8006c90:	e7e9      	b.n	8006c66 <__d2b+0x56>
 8006c92:	a801      	add	r0, sp, #4
 8006c94:	f7ff fcf3 	bl	800667e <__lo0bits>
 8006c98:	9b01      	ldr	r3, [sp, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	6163      	str	r3, [r4, #20]
 8006c9e:	3020      	adds	r0, #32
 8006ca0:	e7e7      	b.n	8006c72 <__d2b+0x62>
 8006ca2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006ca6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006caa:	6030      	str	r0, [r6, #0]
 8006cac:	6918      	ldr	r0, [r3, #16]
 8006cae:	f7ff fcc7 	bl	8006640 <__hi0bits>
 8006cb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006cb6:	e7e4      	b.n	8006c82 <__d2b+0x72>
 8006cb8:	08008d4b 	.word	0x08008d4b
 8006cbc:	08008d5c 	.word	0x08008d5c

08006cc0 <__ratio>:
 8006cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc4:	b085      	sub	sp, #20
 8006cc6:	e9cd 1000 	strd	r1, r0, [sp]
 8006cca:	a902      	add	r1, sp, #8
 8006ccc:	f7ff ff58 	bl	8006b80 <__b2d>
 8006cd0:	468b      	mov	fp, r1
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	460f      	mov	r7, r1
 8006cd6:	9800      	ldr	r0, [sp, #0]
 8006cd8:	a903      	add	r1, sp, #12
 8006cda:	f7ff ff51 	bl	8006b80 <__b2d>
 8006cde:	460d      	mov	r5, r1
 8006ce0:	9b01      	ldr	r3, [sp, #4]
 8006ce2:	4689      	mov	r9, r1
 8006ce4:	6919      	ldr	r1, [r3, #16]
 8006ce6:	9b00      	ldr	r3, [sp, #0]
 8006ce8:	4604      	mov	r4, r0
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	4630      	mov	r0, r6
 8006cee:	1ac9      	subs	r1, r1, r3
 8006cf0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	bfcd      	iteet	gt
 8006cfe:	463a      	movgt	r2, r7
 8006d00:	462a      	movle	r2, r5
 8006d02:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006d06:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006d0a:	bfd8      	it	le
 8006d0c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006d10:	464b      	mov	r3, r9
 8006d12:	4622      	mov	r2, r4
 8006d14:	4659      	mov	r1, fp
 8006d16:	f7f9 fd09 	bl	800072c <__aeabi_ddiv>
 8006d1a:	b005      	add	sp, #20
 8006d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d20 <__copybits>:
 8006d20:	3901      	subs	r1, #1
 8006d22:	b570      	push	{r4, r5, r6, lr}
 8006d24:	1149      	asrs	r1, r1, #5
 8006d26:	6914      	ldr	r4, [r2, #16]
 8006d28:	3101      	adds	r1, #1
 8006d2a:	f102 0314 	add.w	r3, r2, #20
 8006d2e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006d32:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006d36:	1f05      	subs	r5, r0, #4
 8006d38:	42a3      	cmp	r3, r4
 8006d3a:	d30c      	bcc.n	8006d56 <__copybits+0x36>
 8006d3c:	1aa3      	subs	r3, r4, r2
 8006d3e:	3b11      	subs	r3, #17
 8006d40:	f023 0303 	bic.w	r3, r3, #3
 8006d44:	3211      	adds	r2, #17
 8006d46:	42a2      	cmp	r2, r4
 8006d48:	bf88      	it	hi
 8006d4a:	2300      	movhi	r3, #0
 8006d4c:	4418      	add	r0, r3
 8006d4e:	2300      	movs	r3, #0
 8006d50:	4288      	cmp	r0, r1
 8006d52:	d305      	bcc.n	8006d60 <__copybits+0x40>
 8006d54:	bd70      	pop	{r4, r5, r6, pc}
 8006d56:	f853 6b04 	ldr.w	r6, [r3], #4
 8006d5a:	f845 6f04 	str.w	r6, [r5, #4]!
 8006d5e:	e7eb      	b.n	8006d38 <__copybits+0x18>
 8006d60:	f840 3b04 	str.w	r3, [r0], #4
 8006d64:	e7f4      	b.n	8006d50 <__copybits+0x30>

08006d66 <__any_on>:
 8006d66:	f100 0214 	add.w	r2, r0, #20
 8006d6a:	6900      	ldr	r0, [r0, #16]
 8006d6c:	114b      	asrs	r3, r1, #5
 8006d6e:	4298      	cmp	r0, r3
 8006d70:	b510      	push	{r4, lr}
 8006d72:	db11      	blt.n	8006d98 <__any_on+0x32>
 8006d74:	dd0a      	ble.n	8006d8c <__any_on+0x26>
 8006d76:	f011 011f 	ands.w	r1, r1, #31
 8006d7a:	d007      	beq.n	8006d8c <__any_on+0x26>
 8006d7c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006d80:	fa24 f001 	lsr.w	r0, r4, r1
 8006d84:	fa00 f101 	lsl.w	r1, r0, r1
 8006d88:	428c      	cmp	r4, r1
 8006d8a:	d10b      	bne.n	8006da4 <__any_on+0x3e>
 8006d8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d803      	bhi.n	8006d9c <__any_on+0x36>
 8006d94:	2000      	movs	r0, #0
 8006d96:	bd10      	pop	{r4, pc}
 8006d98:	4603      	mov	r3, r0
 8006d9a:	e7f7      	b.n	8006d8c <__any_on+0x26>
 8006d9c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006da0:	2900      	cmp	r1, #0
 8006da2:	d0f5      	beq.n	8006d90 <__any_on+0x2a>
 8006da4:	2001      	movs	r0, #1
 8006da6:	e7f6      	b.n	8006d96 <__any_on+0x30>

08006da8 <sulp>:
 8006da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dac:	460f      	mov	r7, r1
 8006dae:	4690      	mov	r8, r2
 8006db0:	f7ff fec6 	bl	8006b40 <__ulp>
 8006db4:	4604      	mov	r4, r0
 8006db6:	460d      	mov	r5, r1
 8006db8:	f1b8 0f00 	cmp.w	r8, #0
 8006dbc:	d011      	beq.n	8006de2 <sulp+0x3a>
 8006dbe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006dc2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	dd0b      	ble.n	8006de2 <sulp+0x3a>
 8006dca:	2400      	movs	r4, #0
 8006dcc:	051b      	lsls	r3, r3, #20
 8006dce:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006dd2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006dd6:	4622      	mov	r2, r4
 8006dd8:	462b      	mov	r3, r5
 8006dda:	f7f9 fb7d 	bl	80004d8 <__aeabi_dmul>
 8006dde:	4604      	mov	r4, r0
 8006de0:	460d      	mov	r5, r1
 8006de2:	4620      	mov	r0, r4
 8006de4:	4629      	mov	r1, r5
 8006de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dea:	0000      	movs	r0, r0
 8006dec:	0000      	movs	r0, r0
	...

08006df0 <_strtod_l>:
 8006df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df4:	b09f      	sub	sp, #124	@ 0x7c
 8006df6:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006df8:	2200      	movs	r2, #0
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	921a      	str	r2, [sp, #104]	@ 0x68
 8006dfe:	f04f 0a00 	mov.w	sl, #0
 8006e02:	f04f 0b00 	mov.w	fp, #0
 8006e06:	460a      	mov	r2, r1
 8006e08:	9005      	str	r0, [sp, #20]
 8006e0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e0c:	7811      	ldrb	r1, [r2, #0]
 8006e0e:	292b      	cmp	r1, #43	@ 0x2b
 8006e10:	d048      	beq.n	8006ea4 <_strtod_l+0xb4>
 8006e12:	d836      	bhi.n	8006e82 <_strtod_l+0x92>
 8006e14:	290d      	cmp	r1, #13
 8006e16:	d830      	bhi.n	8006e7a <_strtod_l+0x8a>
 8006e18:	2908      	cmp	r1, #8
 8006e1a:	d830      	bhi.n	8006e7e <_strtod_l+0x8e>
 8006e1c:	2900      	cmp	r1, #0
 8006e1e:	d039      	beq.n	8006e94 <_strtod_l+0xa4>
 8006e20:	2200      	movs	r2, #0
 8006e22:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006e24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006e26:	782a      	ldrb	r2, [r5, #0]
 8006e28:	2a30      	cmp	r2, #48	@ 0x30
 8006e2a:	f040 80b1 	bne.w	8006f90 <_strtod_l+0x1a0>
 8006e2e:	786a      	ldrb	r2, [r5, #1]
 8006e30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006e34:	2a58      	cmp	r2, #88	@ 0x58
 8006e36:	d16c      	bne.n	8006f12 <_strtod_l+0x122>
 8006e38:	9302      	str	r3, [sp, #8]
 8006e3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e3c:	4a8e      	ldr	r2, [pc, #568]	@ (8007078 <_strtod_l+0x288>)
 8006e3e:	9301      	str	r3, [sp, #4]
 8006e40:	ab1a      	add	r3, sp, #104	@ 0x68
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	9805      	ldr	r0, [sp, #20]
 8006e46:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006e48:	a919      	add	r1, sp, #100	@ 0x64
 8006e4a:	f001 fac1 	bl	80083d0 <__gethex>
 8006e4e:	f010 060f 	ands.w	r6, r0, #15
 8006e52:	4604      	mov	r4, r0
 8006e54:	d005      	beq.n	8006e62 <_strtod_l+0x72>
 8006e56:	2e06      	cmp	r6, #6
 8006e58:	d126      	bne.n	8006ea8 <_strtod_l+0xb8>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	3501      	adds	r5, #1
 8006e5e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006e60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f040 8584 	bne.w	8007972 <_strtod_l+0xb82>
 8006e6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e6c:	b1bb      	cbz	r3, 8006e9e <_strtod_l+0xae>
 8006e6e:	4650      	mov	r0, sl
 8006e70:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006e74:	b01f      	add	sp, #124	@ 0x7c
 8006e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e7a:	2920      	cmp	r1, #32
 8006e7c:	d1d0      	bne.n	8006e20 <_strtod_l+0x30>
 8006e7e:	3201      	adds	r2, #1
 8006e80:	e7c3      	b.n	8006e0a <_strtod_l+0x1a>
 8006e82:	292d      	cmp	r1, #45	@ 0x2d
 8006e84:	d1cc      	bne.n	8006e20 <_strtod_l+0x30>
 8006e86:	2101      	movs	r1, #1
 8006e88:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006e8a:	1c51      	adds	r1, r2, #1
 8006e8c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006e8e:	7852      	ldrb	r2, [r2, #1]
 8006e90:	2a00      	cmp	r2, #0
 8006e92:	d1c7      	bne.n	8006e24 <_strtod_l+0x34>
 8006e94:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e96:	9419      	str	r4, [sp, #100]	@ 0x64
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f040 8568 	bne.w	800796e <_strtod_l+0xb7e>
 8006e9e:	4650      	mov	r0, sl
 8006ea0:	4659      	mov	r1, fp
 8006ea2:	e7e7      	b.n	8006e74 <_strtod_l+0x84>
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	e7ef      	b.n	8006e88 <_strtod_l+0x98>
 8006ea8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006eaa:	b13a      	cbz	r2, 8006ebc <_strtod_l+0xcc>
 8006eac:	2135      	movs	r1, #53	@ 0x35
 8006eae:	a81c      	add	r0, sp, #112	@ 0x70
 8006eb0:	f7ff ff36 	bl	8006d20 <__copybits>
 8006eb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006eb6:	9805      	ldr	r0, [sp, #20]
 8006eb8:	f7ff fb10 	bl	80064dc <_Bfree>
 8006ebc:	3e01      	subs	r6, #1
 8006ebe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006ec0:	2e04      	cmp	r6, #4
 8006ec2:	d806      	bhi.n	8006ed2 <_strtod_l+0xe2>
 8006ec4:	e8df f006 	tbb	[pc, r6]
 8006ec8:	201d0314 	.word	0x201d0314
 8006ecc:	14          	.byte	0x14
 8006ecd:	00          	.byte	0x00
 8006ece:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006ed2:	05e1      	lsls	r1, r4, #23
 8006ed4:	bf48      	it	mi
 8006ed6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006eda:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006ede:	0d1b      	lsrs	r3, r3, #20
 8006ee0:	051b      	lsls	r3, r3, #20
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1bd      	bne.n	8006e62 <_strtod_l+0x72>
 8006ee6:	f7fe fb1b 	bl	8005520 <__errno>
 8006eea:	2322      	movs	r3, #34	@ 0x22
 8006eec:	6003      	str	r3, [r0, #0]
 8006eee:	e7b8      	b.n	8006e62 <_strtod_l+0x72>
 8006ef0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006ef4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006ef8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006efc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006f00:	e7e7      	b.n	8006ed2 <_strtod_l+0xe2>
 8006f02:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800707c <_strtod_l+0x28c>
 8006f06:	e7e4      	b.n	8006ed2 <_strtod_l+0xe2>
 8006f08:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006f0c:	f04f 3aff 	mov.w	sl, #4294967295
 8006f10:	e7df      	b.n	8006ed2 <_strtod_l+0xe2>
 8006f12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f18:	785b      	ldrb	r3, [r3, #1]
 8006f1a:	2b30      	cmp	r3, #48	@ 0x30
 8006f1c:	d0f9      	beq.n	8006f12 <_strtod_l+0x122>
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d09f      	beq.n	8006e62 <_strtod_l+0x72>
 8006f22:	2301      	movs	r3, #1
 8006f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f28:	220a      	movs	r2, #10
 8006f2a:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	461f      	mov	r7, r3
 8006f30:	9308      	str	r3, [sp, #32]
 8006f32:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f34:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006f36:	7805      	ldrb	r5, [r0, #0]
 8006f38:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006f3c:	b2d9      	uxtb	r1, r3
 8006f3e:	2909      	cmp	r1, #9
 8006f40:	d928      	bls.n	8006f94 <_strtod_l+0x1a4>
 8006f42:	2201      	movs	r2, #1
 8006f44:	494e      	ldr	r1, [pc, #312]	@ (8007080 <_strtod_l+0x290>)
 8006f46:	f001 f981 	bl	800824c <strncmp>
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	d032      	beq.n	8006fb4 <_strtod_l+0x1c4>
 8006f4e:	2000      	movs	r0, #0
 8006f50:	462a      	mov	r2, r5
 8006f52:	4681      	mov	r9, r0
 8006f54:	463d      	mov	r5, r7
 8006f56:	4603      	mov	r3, r0
 8006f58:	2a65      	cmp	r2, #101	@ 0x65
 8006f5a:	d001      	beq.n	8006f60 <_strtod_l+0x170>
 8006f5c:	2a45      	cmp	r2, #69	@ 0x45
 8006f5e:	d114      	bne.n	8006f8a <_strtod_l+0x19a>
 8006f60:	b91d      	cbnz	r5, 8006f6a <_strtod_l+0x17a>
 8006f62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f64:	4302      	orrs	r2, r0
 8006f66:	d095      	beq.n	8006e94 <_strtod_l+0xa4>
 8006f68:	2500      	movs	r5, #0
 8006f6a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006f6c:	1c62      	adds	r2, r4, #1
 8006f6e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f70:	7862      	ldrb	r2, [r4, #1]
 8006f72:	2a2b      	cmp	r2, #43	@ 0x2b
 8006f74:	d077      	beq.n	8007066 <_strtod_l+0x276>
 8006f76:	2a2d      	cmp	r2, #45	@ 0x2d
 8006f78:	d07b      	beq.n	8007072 <_strtod_l+0x282>
 8006f7a:	f04f 0c00 	mov.w	ip, #0
 8006f7e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006f82:	2909      	cmp	r1, #9
 8006f84:	f240 8082 	bls.w	800708c <_strtod_l+0x29c>
 8006f88:	9419      	str	r4, [sp, #100]	@ 0x64
 8006f8a:	f04f 0800 	mov.w	r8, #0
 8006f8e:	e0a2      	b.n	80070d6 <_strtod_l+0x2e6>
 8006f90:	2300      	movs	r3, #0
 8006f92:	e7c7      	b.n	8006f24 <_strtod_l+0x134>
 8006f94:	2f08      	cmp	r7, #8
 8006f96:	bfd5      	itete	le
 8006f98:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006f9a:	9908      	ldrgt	r1, [sp, #32]
 8006f9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006fa0:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006fa4:	f100 0001 	add.w	r0, r0, #1
 8006fa8:	bfd4      	ite	le
 8006faa:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006fac:	9308      	strgt	r3, [sp, #32]
 8006fae:	3701      	adds	r7, #1
 8006fb0:	9019      	str	r0, [sp, #100]	@ 0x64
 8006fb2:	e7bf      	b.n	8006f34 <_strtod_l+0x144>
 8006fb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	9219      	str	r2, [sp, #100]	@ 0x64
 8006fba:	785a      	ldrb	r2, [r3, #1]
 8006fbc:	b37f      	cbz	r7, 800701e <_strtod_l+0x22e>
 8006fbe:	4681      	mov	r9, r0
 8006fc0:	463d      	mov	r5, r7
 8006fc2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006fc6:	2b09      	cmp	r3, #9
 8006fc8:	d912      	bls.n	8006ff0 <_strtod_l+0x200>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e7c4      	b.n	8006f58 <_strtod_l+0x168>
 8006fce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	1c5a      	adds	r2, r3, #1
 8006fd4:	9219      	str	r2, [sp, #100]	@ 0x64
 8006fd6:	785a      	ldrb	r2, [r3, #1]
 8006fd8:	2a30      	cmp	r2, #48	@ 0x30
 8006fda:	d0f8      	beq.n	8006fce <_strtod_l+0x1de>
 8006fdc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006fe0:	2b08      	cmp	r3, #8
 8006fe2:	f200 84cb 	bhi.w	800797c <_strtod_l+0xb8c>
 8006fe6:	4681      	mov	r9, r0
 8006fe8:	2000      	movs	r0, #0
 8006fea:	4605      	mov	r5, r0
 8006fec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006fee:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ff0:	3a30      	subs	r2, #48	@ 0x30
 8006ff2:	f100 0301 	add.w	r3, r0, #1
 8006ff6:	d02a      	beq.n	800704e <_strtod_l+0x25e>
 8006ff8:	4499      	add	r9, r3
 8006ffa:	210a      	movs	r1, #10
 8006ffc:	462b      	mov	r3, r5
 8006ffe:	eb00 0c05 	add.w	ip, r0, r5
 8007002:	4563      	cmp	r3, ip
 8007004:	d10d      	bne.n	8007022 <_strtod_l+0x232>
 8007006:	1c69      	adds	r1, r5, #1
 8007008:	4401      	add	r1, r0
 800700a:	4428      	add	r0, r5
 800700c:	2808      	cmp	r0, #8
 800700e:	dc16      	bgt.n	800703e <_strtod_l+0x24e>
 8007010:	230a      	movs	r3, #10
 8007012:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007014:	fb03 2300 	mla	r3, r3, r0, r2
 8007018:	930a      	str	r3, [sp, #40]	@ 0x28
 800701a:	2300      	movs	r3, #0
 800701c:	e018      	b.n	8007050 <_strtod_l+0x260>
 800701e:	4638      	mov	r0, r7
 8007020:	e7da      	b.n	8006fd8 <_strtod_l+0x1e8>
 8007022:	2b08      	cmp	r3, #8
 8007024:	f103 0301 	add.w	r3, r3, #1
 8007028:	dc03      	bgt.n	8007032 <_strtod_l+0x242>
 800702a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800702c:	434e      	muls	r6, r1
 800702e:	960a      	str	r6, [sp, #40]	@ 0x28
 8007030:	e7e7      	b.n	8007002 <_strtod_l+0x212>
 8007032:	2b10      	cmp	r3, #16
 8007034:	bfde      	ittt	le
 8007036:	9e08      	ldrle	r6, [sp, #32]
 8007038:	434e      	mulle	r6, r1
 800703a:	9608      	strle	r6, [sp, #32]
 800703c:	e7e1      	b.n	8007002 <_strtod_l+0x212>
 800703e:	280f      	cmp	r0, #15
 8007040:	dceb      	bgt.n	800701a <_strtod_l+0x22a>
 8007042:	230a      	movs	r3, #10
 8007044:	9808      	ldr	r0, [sp, #32]
 8007046:	fb03 2300 	mla	r3, r3, r0, r2
 800704a:	9308      	str	r3, [sp, #32]
 800704c:	e7e5      	b.n	800701a <_strtod_l+0x22a>
 800704e:	4629      	mov	r1, r5
 8007050:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007052:	460d      	mov	r5, r1
 8007054:	1c50      	adds	r0, r2, #1
 8007056:	9019      	str	r0, [sp, #100]	@ 0x64
 8007058:	7852      	ldrb	r2, [r2, #1]
 800705a:	4618      	mov	r0, r3
 800705c:	e7b1      	b.n	8006fc2 <_strtod_l+0x1d2>
 800705e:	f04f 0900 	mov.w	r9, #0
 8007062:	2301      	movs	r3, #1
 8007064:	e77d      	b.n	8006f62 <_strtod_l+0x172>
 8007066:	f04f 0c00 	mov.w	ip, #0
 800706a:	1ca2      	adds	r2, r4, #2
 800706c:	9219      	str	r2, [sp, #100]	@ 0x64
 800706e:	78a2      	ldrb	r2, [r4, #2]
 8007070:	e785      	b.n	8006f7e <_strtod_l+0x18e>
 8007072:	f04f 0c01 	mov.w	ip, #1
 8007076:	e7f8      	b.n	800706a <_strtod_l+0x27a>
 8007078:	08008ed0 	.word	0x08008ed0
 800707c:	7ff00000 	.word	0x7ff00000
 8007080:	08008eb8 	.word	0x08008eb8
 8007084:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007086:	1c51      	adds	r1, r2, #1
 8007088:	9119      	str	r1, [sp, #100]	@ 0x64
 800708a:	7852      	ldrb	r2, [r2, #1]
 800708c:	2a30      	cmp	r2, #48	@ 0x30
 800708e:	d0f9      	beq.n	8007084 <_strtod_l+0x294>
 8007090:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007094:	2908      	cmp	r1, #8
 8007096:	f63f af78 	bhi.w	8006f8a <_strtod_l+0x19a>
 800709a:	f04f 080a 	mov.w	r8, #10
 800709e:	3a30      	subs	r2, #48	@ 0x30
 80070a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80070a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80070a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80070a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80070a8:	1c56      	adds	r6, r2, #1
 80070aa:	9619      	str	r6, [sp, #100]	@ 0x64
 80070ac:	7852      	ldrb	r2, [r2, #1]
 80070ae:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80070b2:	f1be 0f09 	cmp.w	lr, #9
 80070b6:	d939      	bls.n	800712c <_strtod_l+0x33c>
 80070b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80070ba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80070be:	1a76      	subs	r6, r6, r1
 80070c0:	2e08      	cmp	r6, #8
 80070c2:	dc03      	bgt.n	80070cc <_strtod_l+0x2dc>
 80070c4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80070c6:	4588      	cmp	r8, r1
 80070c8:	bfa8      	it	ge
 80070ca:	4688      	movge	r8, r1
 80070cc:	f1bc 0f00 	cmp.w	ip, #0
 80070d0:	d001      	beq.n	80070d6 <_strtod_l+0x2e6>
 80070d2:	f1c8 0800 	rsb	r8, r8, #0
 80070d6:	2d00      	cmp	r5, #0
 80070d8:	d14e      	bne.n	8007178 <_strtod_l+0x388>
 80070da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80070dc:	4308      	orrs	r0, r1
 80070de:	f47f aec0 	bne.w	8006e62 <_strtod_l+0x72>
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f47f aed6 	bne.w	8006e94 <_strtod_l+0xa4>
 80070e8:	2a69      	cmp	r2, #105	@ 0x69
 80070ea:	d028      	beq.n	800713e <_strtod_l+0x34e>
 80070ec:	dc25      	bgt.n	800713a <_strtod_l+0x34a>
 80070ee:	2a49      	cmp	r2, #73	@ 0x49
 80070f0:	d025      	beq.n	800713e <_strtod_l+0x34e>
 80070f2:	2a4e      	cmp	r2, #78	@ 0x4e
 80070f4:	f47f aece 	bne.w	8006e94 <_strtod_l+0xa4>
 80070f8:	499a      	ldr	r1, [pc, #616]	@ (8007364 <_strtod_l+0x574>)
 80070fa:	a819      	add	r0, sp, #100	@ 0x64
 80070fc:	f001 fb8a 	bl	8008814 <__match>
 8007100:	2800      	cmp	r0, #0
 8007102:	f43f aec7 	beq.w	8006e94 <_strtod_l+0xa4>
 8007106:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	2b28      	cmp	r3, #40	@ 0x28
 800710c:	d12e      	bne.n	800716c <_strtod_l+0x37c>
 800710e:	4996      	ldr	r1, [pc, #600]	@ (8007368 <_strtod_l+0x578>)
 8007110:	aa1c      	add	r2, sp, #112	@ 0x70
 8007112:	a819      	add	r0, sp, #100	@ 0x64
 8007114:	f001 fb92 	bl	800883c <__hexnan>
 8007118:	2805      	cmp	r0, #5
 800711a:	d127      	bne.n	800716c <_strtod_l+0x37c>
 800711c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800711e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007122:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007126:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800712a:	e69a      	b.n	8006e62 <_strtod_l+0x72>
 800712c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800712e:	fb08 2101 	mla	r1, r8, r1, r2
 8007132:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007136:	920e      	str	r2, [sp, #56]	@ 0x38
 8007138:	e7b5      	b.n	80070a6 <_strtod_l+0x2b6>
 800713a:	2a6e      	cmp	r2, #110	@ 0x6e
 800713c:	e7da      	b.n	80070f4 <_strtod_l+0x304>
 800713e:	498b      	ldr	r1, [pc, #556]	@ (800736c <_strtod_l+0x57c>)
 8007140:	a819      	add	r0, sp, #100	@ 0x64
 8007142:	f001 fb67 	bl	8008814 <__match>
 8007146:	2800      	cmp	r0, #0
 8007148:	f43f aea4 	beq.w	8006e94 <_strtod_l+0xa4>
 800714c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800714e:	4988      	ldr	r1, [pc, #544]	@ (8007370 <_strtod_l+0x580>)
 8007150:	3b01      	subs	r3, #1
 8007152:	a819      	add	r0, sp, #100	@ 0x64
 8007154:	9319      	str	r3, [sp, #100]	@ 0x64
 8007156:	f001 fb5d 	bl	8008814 <__match>
 800715a:	b910      	cbnz	r0, 8007162 <_strtod_l+0x372>
 800715c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800715e:	3301      	adds	r3, #1
 8007160:	9319      	str	r3, [sp, #100]	@ 0x64
 8007162:	f04f 0a00 	mov.w	sl, #0
 8007166:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8007374 <_strtod_l+0x584>
 800716a:	e67a      	b.n	8006e62 <_strtod_l+0x72>
 800716c:	4882      	ldr	r0, [pc, #520]	@ (8007378 <_strtod_l+0x588>)
 800716e:	f001 f88f 	bl	8008290 <nan>
 8007172:	4682      	mov	sl, r0
 8007174:	468b      	mov	fp, r1
 8007176:	e674      	b.n	8006e62 <_strtod_l+0x72>
 8007178:	eba8 0309 	sub.w	r3, r8, r9
 800717c:	2f00      	cmp	r7, #0
 800717e:	bf08      	it	eq
 8007180:	462f      	moveq	r7, r5
 8007182:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007184:	2d10      	cmp	r5, #16
 8007186:	462c      	mov	r4, r5
 8007188:	9309      	str	r3, [sp, #36]	@ 0x24
 800718a:	bfa8      	it	ge
 800718c:	2410      	movge	r4, #16
 800718e:	f7f9 f929 	bl	80003e4 <__aeabi_ui2d>
 8007192:	2d09      	cmp	r5, #9
 8007194:	4682      	mov	sl, r0
 8007196:	468b      	mov	fp, r1
 8007198:	dc11      	bgt.n	80071be <_strtod_l+0x3ce>
 800719a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800719c:	2b00      	cmp	r3, #0
 800719e:	f43f ae60 	beq.w	8006e62 <_strtod_l+0x72>
 80071a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071a4:	dd76      	ble.n	8007294 <_strtod_l+0x4a4>
 80071a6:	2b16      	cmp	r3, #22
 80071a8:	dc5d      	bgt.n	8007266 <_strtod_l+0x476>
 80071aa:	4974      	ldr	r1, [pc, #464]	@ (800737c <_strtod_l+0x58c>)
 80071ac:	4652      	mov	r2, sl
 80071ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071b2:	465b      	mov	r3, fp
 80071b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071b8:	f7f9 f98e 	bl	80004d8 <__aeabi_dmul>
 80071bc:	e7d9      	b.n	8007172 <_strtod_l+0x382>
 80071be:	4b6f      	ldr	r3, [pc, #444]	@ (800737c <_strtod_l+0x58c>)
 80071c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80071c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80071c8:	f7f9 f986 	bl	80004d8 <__aeabi_dmul>
 80071cc:	4682      	mov	sl, r0
 80071ce:	9808      	ldr	r0, [sp, #32]
 80071d0:	468b      	mov	fp, r1
 80071d2:	f7f9 f907 	bl	80003e4 <__aeabi_ui2d>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	4650      	mov	r0, sl
 80071dc:	4659      	mov	r1, fp
 80071de:	f7f8 ffc5 	bl	800016c <__adddf3>
 80071e2:	2d0f      	cmp	r5, #15
 80071e4:	4682      	mov	sl, r0
 80071e6:	468b      	mov	fp, r1
 80071e8:	ddd7      	ble.n	800719a <_strtod_l+0x3aa>
 80071ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ec:	1b2c      	subs	r4, r5, r4
 80071ee:	441c      	add	r4, r3
 80071f0:	2c00      	cmp	r4, #0
 80071f2:	f340 8096 	ble.w	8007322 <_strtod_l+0x532>
 80071f6:	f014 030f 	ands.w	r3, r4, #15
 80071fa:	d00a      	beq.n	8007212 <_strtod_l+0x422>
 80071fc:	495f      	ldr	r1, [pc, #380]	@ (800737c <_strtod_l+0x58c>)
 80071fe:	4652      	mov	r2, sl
 8007200:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007204:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007208:	465b      	mov	r3, fp
 800720a:	f7f9 f965 	bl	80004d8 <__aeabi_dmul>
 800720e:	4682      	mov	sl, r0
 8007210:	468b      	mov	fp, r1
 8007212:	f034 040f 	bics.w	r4, r4, #15
 8007216:	d073      	beq.n	8007300 <_strtod_l+0x510>
 8007218:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800721c:	dd48      	ble.n	80072b0 <_strtod_l+0x4c0>
 800721e:	2400      	movs	r4, #0
 8007220:	46a0      	mov	r8, r4
 8007222:	46a1      	mov	r9, r4
 8007224:	940a      	str	r4, [sp, #40]	@ 0x28
 8007226:	2322      	movs	r3, #34	@ 0x22
 8007228:	f04f 0a00 	mov.w	sl, #0
 800722c:	9a05      	ldr	r2, [sp, #20]
 800722e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8007374 <_strtod_l+0x584>
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007236:	2b00      	cmp	r3, #0
 8007238:	f43f ae13 	beq.w	8006e62 <_strtod_l+0x72>
 800723c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800723e:	9805      	ldr	r0, [sp, #20]
 8007240:	f7ff f94c 	bl	80064dc <_Bfree>
 8007244:	4649      	mov	r1, r9
 8007246:	9805      	ldr	r0, [sp, #20]
 8007248:	f7ff f948 	bl	80064dc <_Bfree>
 800724c:	4641      	mov	r1, r8
 800724e:	9805      	ldr	r0, [sp, #20]
 8007250:	f7ff f944 	bl	80064dc <_Bfree>
 8007254:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007256:	9805      	ldr	r0, [sp, #20]
 8007258:	f7ff f940 	bl	80064dc <_Bfree>
 800725c:	4621      	mov	r1, r4
 800725e:	9805      	ldr	r0, [sp, #20]
 8007260:	f7ff f93c 	bl	80064dc <_Bfree>
 8007264:	e5fd      	b.n	8006e62 <_strtod_l+0x72>
 8007266:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007268:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800726c:	4293      	cmp	r3, r2
 800726e:	dbbc      	blt.n	80071ea <_strtod_l+0x3fa>
 8007270:	4c42      	ldr	r4, [pc, #264]	@ (800737c <_strtod_l+0x58c>)
 8007272:	f1c5 050f 	rsb	r5, r5, #15
 8007276:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800727a:	4652      	mov	r2, sl
 800727c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007280:	465b      	mov	r3, fp
 8007282:	f7f9 f929 	bl	80004d8 <__aeabi_dmul>
 8007286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007288:	1b5d      	subs	r5, r3, r5
 800728a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800728e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007292:	e791      	b.n	80071b8 <_strtod_l+0x3c8>
 8007294:	3316      	adds	r3, #22
 8007296:	dba8      	blt.n	80071ea <_strtod_l+0x3fa>
 8007298:	4b38      	ldr	r3, [pc, #224]	@ (800737c <_strtod_l+0x58c>)
 800729a:	eba9 0808 	sub.w	r8, r9, r8
 800729e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80072a2:	4650      	mov	r0, sl
 80072a4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80072a8:	4659      	mov	r1, fp
 80072aa:	f7f9 fa3f 	bl	800072c <__aeabi_ddiv>
 80072ae:	e760      	b.n	8007172 <_strtod_l+0x382>
 80072b0:	4b33      	ldr	r3, [pc, #204]	@ (8007380 <_strtod_l+0x590>)
 80072b2:	4650      	mov	r0, sl
 80072b4:	9308      	str	r3, [sp, #32]
 80072b6:	2300      	movs	r3, #0
 80072b8:	4659      	mov	r1, fp
 80072ba:	461e      	mov	r6, r3
 80072bc:	1124      	asrs	r4, r4, #4
 80072be:	2c01      	cmp	r4, #1
 80072c0:	dc21      	bgt.n	8007306 <_strtod_l+0x516>
 80072c2:	b10b      	cbz	r3, 80072c8 <_strtod_l+0x4d8>
 80072c4:	4682      	mov	sl, r0
 80072c6:	468b      	mov	fp, r1
 80072c8:	492d      	ldr	r1, [pc, #180]	@ (8007380 <_strtod_l+0x590>)
 80072ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80072ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80072d2:	4652      	mov	r2, sl
 80072d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072d8:	465b      	mov	r3, fp
 80072da:	f7f9 f8fd 	bl	80004d8 <__aeabi_dmul>
 80072de:	4b25      	ldr	r3, [pc, #148]	@ (8007374 <_strtod_l+0x584>)
 80072e0:	460a      	mov	r2, r1
 80072e2:	400b      	ands	r3, r1
 80072e4:	4927      	ldr	r1, [pc, #156]	@ (8007384 <_strtod_l+0x594>)
 80072e6:	4682      	mov	sl, r0
 80072e8:	428b      	cmp	r3, r1
 80072ea:	d898      	bhi.n	800721e <_strtod_l+0x42e>
 80072ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80072f0:	428b      	cmp	r3, r1
 80072f2:	bf86      	itte	hi
 80072f4:	f04f 3aff 	movhi.w	sl, #4294967295
 80072f8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007388 <_strtod_l+0x598>
 80072fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007300:	2300      	movs	r3, #0
 8007302:	9308      	str	r3, [sp, #32]
 8007304:	e07a      	b.n	80073fc <_strtod_l+0x60c>
 8007306:	07e2      	lsls	r2, r4, #31
 8007308:	d505      	bpl.n	8007316 <_strtod_l+0x526>
 800730a:	9b08      	ldr	r3, [sp, #32]
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	f7f9 f8e2 	bl	80004d8 <__aeabi_dmul>
 8007314:	2301      	movs	r3, #1
 8007316:	9a08      	ldr	r2, [sp, #32]
 8007318:	3601      	adds	r6, #1
 800731a:	3208      	adds	r2, #8
 800731c:	1064      	asrs	r4, r4, #1
 800731e:	9208      	str	r2, [sp, #32]
 8007320:	e7cd      	b.n	80072be <_strtod_l+0x4ce>
 8007322:	d0ed      	beq.n	8007300 <_strtod_l+0x510>
 8007324:	4264      	negs	r4, r4
 8007326:	f014 020f 	ands.w	r2, r4, #15
 800732a:	d00a      	beq.n	8007342 <_strtod_l+0x552>
 800732c:	4b13      	ldr	r3, [pc, #76]	@ (800737c <_strtod_l+0x58c>)
 800732e:	4650      	mov	r0, sl
 8007330:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007334:	4659      	mov	r1, fp
 8007336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733a:	f7f9 f9f7 	bl	800072c <__aeabi_ddiv>
 800733e:	4682      	mov	sl, r0
 8007340:	468b      	mov	fp, r1
 8007342:	1124      	asrs	r4, r4, #4
 8007344:	d0dc      	beq.n	8007300 <_strtod_l+0x510>
 8007346:	2c1f      	cmp	r4, #31
 8007348:	dd20      	ble.n	800738c <_strtod_l+0x59c>
 800734a:	2400      	movs	r4, #0
 800734c:	46a0      	mov	r8, r4
 800734e:	46a1      	mov	r9, r4
 8007350:	940a      	str	r4, [sp, #40]	@ 0x28
 8007352:	2322      	movs	r3, #34	@ 0x22
 8007354:	9a05      	ldr	r2, [sp, #20]
 8007356:	f04f 0a00 	mov.w	sl, #0
 800735a:	f04f 0b00 	mov.w	fp, #0
 800735e:	6013      	str	r3, [r2, #0]
 8007360:	e768      	b.n	8007234 <_strtod_l+0x444>
 8007362:	bf00      	nop
 8007364:	08008ca3 	.word	0x08008ca3
 8007368:	08008ebc 	.word	0x08008ebc
 800736c:	08008c9b 	.word	0x08008c9b
 8007370:	08008cd2 	.word	0x08008cd2
 8007374:	7ff00000 	.word	0x7ff00000
 8007378:	08009065 	.word	0x08009065
 800737c:	08008df0 	.word	0x08008df0
 8007380:	08008dc8 	.word	0x08008dc8
 8007384:	7ca00000 	.word	0x7ca00000
 8007388:	7fefffff 	.word	0x7fefffff
 800738c:	f014 0310 	ands.w	r3, r4, #16
 8007390:	bf18      	it	ne
 8007392:	236a      	movne	r3, #106	@ 0x6a
 8007394:	4650      	mov	r0, sl
 8007396:	9308      	str	r3, [sp, #32]
 8007398:	4659      	mov	r1, fp
 800739a:	2300      	movs	r3, #0
 800739c:	4ea9      	ldr	r6, [pc, #676]	@ (8007644 <_strtod_l+0x854>)
 800739e:	07e2      	lsls	r2, r4, #31
 80073a0:	d504      	bpl.n	80073ac <_strtod_l+0x5bc>
 80073a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073a6:	f7f9 f897 	bl	80004d8 <__aeabi_dmul>
 80073aa:	2301      	movs	r3, #1
 80073ac:	1064      	asrs	r4, r4, #1
 80073ae:	f106 0608 	add.w	r6, r6, #8
 80073b2:	d1f4      	bne.n	800739e <_strtod_l+0x5ae>
 80073b4:	b10b      	cbz	r3, 80073ba <_strtod_l+0x5ca>
 80073b6:	4682      	mov	sl, r0
 80073b8:	468b      	mov	fp, r1
 80073ba:	9b08      	ldr	r3, [sp, #32]
 80073bc:	b1b3      	cbz	r3, 80073ec <_strtod_l+0x5fc>
 80073be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80073c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	4659      	mov	r1, fp
 80073ca:	dd0f      	ble.n	80073ec <_strtod_l+0x5fc>
 80073cc:	2b1f      	cmp	r3, #31
 80073ce:	dd57      	ble.n	8007480 <_strtod_l+0x690>
 80073d0:	2b34      	cmp	r3, #52	@ 0x34
 80073d2:	bfd8      	it	le
 80073d4:	f04f 33ff 	movle.w	r3, #4294967295
 80073d8:	f04f 0a00 	mov.w	sl, #0
 80073dc:	bfcf      	iteee	gt
 80073de:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80073e2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80073e6:	4093      	lslle	r3, r2
 80073e8:	ea03 0b01 	andle.w	fp, r3, r1
 80073ec:	2200      	movs	r2, #0
 80073ee:	2300      	movs	r3, #0
 80073f0:	4650      	mov	r0, sl
 80073f2:	4659      	mov	r1, fp
 80073f4:	f7f9 fad8 	bl	80009a8 <__aeabi_dcmpeq>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	d1a6      	bne.n	800734a <_strtod_l+0x55a>
 80073fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073fe:	463a      	mov	r2, r7
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007404:	462b      	mov	r3, r5
 8007406:	9805      	ldr	r0, [sp, #20]
 8007408:	f7ff f8d0 	bl	80065ac <__s2b>
 800740c:	900a      	str	r0, [sp, #40]	@ 0x28
 800740e:	2800      	cmp	r0, #0
 8007410:	f43f af05 	beq.w	800721e <_strtod_l+0x42e>
 8007414:	2400      	movs	r4, #0
 8007416:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007418:	eba9 0308 	sub.w	r3, r9, r8
 800741c:	2a00      	cmp	r2, #0
 800741e:	bfa8      	it	ge
 8007420:	2300      	movge	r3, #0
 8007422:	46a0      	mov	r8, r4
 8007424:	9312      	str	r3, [sp, #72]	@ 0x48
 8007426:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800742a:	9316      	str	r3, [sp, #88]	@ 0x58
 800742c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800742e:	9805      	ldr	r0, [sp, #20]
 8007430:	6859      	ldr	r1, [r3, #4]
 8007432:	f7ff f813 	bl	800645c <_Balloc>
 8007436:	4681      	mov	r9, r0
 8007438:	2800      	cmp	r0, #0
 800743a:	f43f aef4 	beq.w	8007226 <_strtod_l+0x436>
 800743e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007440:	300c      	adds	r0, #12
 8007442:	691a      	ldr	r2, [r3, #16]
 8007444:	f103 010c 	add.w	r1, r3, #12
 8007448:	3202      	adds	r2, #2
 800744a:	0092      	lsls	r2, r2, #2
 800744c:	f7fe f8a3 	bl	8005596 <memcpy>
 8007450:	ab1c      	add	r3, sp, #112	@ 0x70
 8007452:	9301      	str	r3, [sp, #4]
 8007454:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	4652      	mov	r2, sl
 800745a:	465b      	mov	r3, fp
 800745c:	9805      	ldr	r0, [sp, #20]
 800745e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007462:	f7ff fbd5 	bl	8006c10 <__d2b>
 8007466:	901a      	str	r0, [sp, #104]	@ 0x68
 8007468:	2800      	cmp	r0, #0
 800746a:	f43f aedc 	beq.w	8007226 <_strtod_l+0x436>
 800746e:	2101      	movs	r1, #1
 8007470:	9805      	ldr	r0, [sp, #20]
 8007472:	f7ff f931 	bl	80066d8 <__i2b>
 8007476:	4680      	mov	r8, r0
 8007478:	b948      	cbnz	r0, 800748e <_strtod_l+0x69e>
 800747a:	f04f 0800 	mov.w	r8, #0
 800747e:	e6d2      	b.n	8007226 <_strtod_l+0x436>
 8007480:	f04f 32ff 	mov.w	r2, #4294967295
 8007484:	fa02 f303 	lsl.w	r3, r2, r3
 8007488:	ea03 0a0a 	and.w	sl, r3, sl
 800748c:	e7ae      	b.n	80073ec <_strtod_l+0x5fc>
 800748e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007490:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007492:	2d00      	cmp	r5, #0
 8007494:	bfab      	itete	ge
 8007496:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007498:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800749a:	18ef      	addge	r7, r5, r3
 800749c:	1b5e      	sublt	r6, r3, r5
 800749e:	9b08      	ldr	r3, [sp, #32]
 80074a0:	bfa8      	it	ge
 80074a2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80074a4:	eba5 0503 	sub.w	r5, r5, r3
 80074a8:	4415      	add	r5, r2
 80074aa:	4b67      	ldr	r3, [pc, #412]	@ (8007648 <_strtod_l+0x858>)
 80074ac:	f105 35ff 	add.w	r5, r5, #4294967295
 80074b0:	bfb8      	it	lt
 80074b2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80074b4:	429d      	cmp	r5, r3
 80074b6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80074ba:	da50      	bge.n	800755e <_strtod_l+0x76e>
 80074bc:	1b5b      	subs	r3, r3, r5
 80074be:	2b1f      	cmp	r3, #31
 80074c0:	f04f 0101 	mov.w	r1, #1
 80074c4:	eba2 0203 	sub.w	r2, r2, r3
 80074c8:	dc3d      	bgt.n	8007546 <_strtod_l+0x756>
 80074ca:	fa01 f303 	lsl.w	r3, r1, r3
 80074ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80074d0:	2300      	movs	r3, #0
 80074d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80074d4:	18bd      	adds	r5, r7, r2
 80074d6:	9b08      	ldr	r3, [sp, #32]
 80074d8:	42af      	cmp	r7, r5
 80074da:	4416      	add	r6, r2
 80074dc:	441e      	add	r6, r3
 80074de:	463b      	mov	r3, r7
 80074e0:	bfa8      	it	ge
 80074e2:	462b      	movge	r3, r5
 80074e4:	42b3      	cmp	r3, r6
 80074e6:	bfa8      	it	ge
 80074e8:	4633      	movge	r3, r6
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	bfc2      	ittt	gt
 80074ee:	1aed      	subgt	r5, r5, r3
 80074f0:	1af6      	subgt	r6, r6, r3
 80074f2:	1aff      	subgt	r7, r7, r3
 80074f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	dd16      	ble.n	8007528 <_strtod_l+0x738>
 80074fa:	4641      	mov	r1, r8
 80074fc:	461a      	mov	r2, r3
 80074fe:	9805      	ldr	r0, [sp, #20]
 8007500:	f7ff f9a8 	bl	8006854 <__pow5mult>
 8007504:	4680      	mov	r8, r0
 8007506:	2800      	cmp	r0, #0
 8007508:	d0b7      	beq.n	800747a <_strtod_l+0x68a>
 800750a:	4601      	mov	r1, r0
 800750c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800750e:	9805      	ldr	r0, [sp, #20]
 8007510:	f7ff f8f8 	bl	8006704 <__multiply>
 8007514:	900e      	str	r0, [sp, #56]	@ 0x38
 8007516:	2800      	cmp	r0, #0
 8007518:	f43f ae85 	beq.w	8007226 <_strtod_l+0x436>
 800751c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800751e:	9805      	ldr	r0, [sp, #20]
 8007520:	f7fe ffdc 	bl	80064dc <_Bfree>
 8007524:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007526:	931a      	str	r3, [sp, #104]	@ 0x68
 8007528:	2d00      	cmp	r5, #0
 800752a:	dc1d      	bgt.n	8007568 <_strtod_l+0x778>
 800752c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800752e:	2b00      	cmp	r3, #0
 8007530:	dd23      	ble.n	800757a <_strtod_l+0x78a>
 8007532:	4649      	mov	r1, r9
 8007534:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007536:	9805      	ldr	r0, [sp, #20]
 8007538:	f7ff f98c 	bl	8006854 <__pow5mult>
 800753c:	4681      	mov	r9, r0
 800753e:	b9e0      	cbnz	r0, 800757a <_strtod_l+0x78a>
 8007540:	f04f 0900 	mov.w	r9, #0
 8007544:	e66f      	b.n	8007226 <_strtod_l+0x436>
 8007546:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800754a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800754e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007552:	35e2      	adds	r5, #226	@ 0xe2
 8007554:	fa01 f305 	lsl.w	r3, r1, r5
 8007558:	9310      	str	r3, [sp, #64]	@ 0x40
 800755a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800755c:	e7ba      	b.n	80074d4 <_strtod_l+0x6e4>
 800755e:	2300      	movs	r3, #0
 8007560:	9310      	str	r3, [sp, #64]	@ 0x40
 8007562:	2301      	movs	r3, #1
 8007564:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007566:	e7b5      	b.n	80074d4 <_strtod_l+0x6e4>
 8007568:	462a      	mov	r2, r5
 800756a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800756c:	9805      	ldr	r0, [sp, #20]
 800756e:	f7ff f9cb 	bl	8006908 <__lshift>
 8007572:	901a      	str	r0, [sp, #104]	@ 0x68
 8007574:	2800      	cmp	r0, #0
 8007576:	d1d9      	bne.n	800752c <_strtod_l+0x73c>
 8007578:	e655      	b.n	8007226 <_strtod_l+0x436>
 800757a:	2e00      	cmp	r6, #0
 800757c:	dd07      	ble.n	800758e <_strtod_l+0x79e>
 800757e:	4649      	mov	r1, r9
 8007580:	4632      	mov	r2, r6
 8007582:	9805      	ldr	r0, [sp, #20]
 8007584:	f7ff f9c0 	bl	8006908 <__lshift>
 8007588:	4681      	mov	r9, r0
 800758a:	2800      	cmp	r0, #0
 800758c:	d0d8      	beq.n	8007540 <_strtod_l+0x750>
 800758e:	2f00      	cmp	r7, #0
 8007590:	dd08      	ble.n	80075a4 <_strtod_l+0x7b4>
 8007592:	4641      	mov	r1, r8
 8007594:	463a      	mov	r2, r7
 8007596:	9805      	ldr	r0, [sp, #20]
 8007598:	f7ff f9b6 	bl	8006908 <__lshift>
 800759c:	4680      	mov	r8, r0
 800759e:	2800      	cmp	r0, #0
 80075a0:	f43f ae41 	beq.w	8007226 <_strtod_l+0x436>
 80075a4:	464a      	mov	r2, r9
 80075a6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075a8:	9805      	ldr	r0, [sp, #20]
 80075aa:	f7ff fa35 	bl	8006a18 <__mdiff>
 80075ae:	4604      	mov	r4, r0
 80075b0:	2800      	cmp	r0, #0
 80075b2:	f43f ae38 	beq.w	8007226 <_strtod_l+0x436>
 80075b6:	68c3      	ldr	r3, [r0, #12]
 80075b8:	4641      	mov	r1, r8
 80075ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80075bc:	2300      	movs	r3, #0
 80075be:	60c3      	str	r3, [r0, #12]
 80075c0:	f7ff fa0e 	bl	80069e0 <__mcmp>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	da45      	bge.n	8007654 <_strtod_l+0x864>
 80075c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075ca:	ea53 030a 	orrs.w	r3, r3, sl
 80075ce:	d16b      	bne.n	80076a8 <_strtod_l+0x8b8>
 80075d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d167      	bne.n	80076a8 <_strtod_l+0x8b8>
 80075d8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80075dc:	0d1b      	lsrs	r3, r3, #20
 80075de:	051b      	lsls	r3, r3, #20
 80075e0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80075e4:	d960      	bls.n	80076a8 <_strtod_l+0x8b8>
 80075e6:	6963      	ldr	r3, [r4, #20]
 80075e8:	b913      	cbnz	r3, 80075f0 <_strtod_l+0x800>
 80075ea:	6923      	ldr	r3, [r4, #16]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	dd5b      	ble.n	80076a8 <_strtod_l+0x8b8>
 80075f0:	4621      	mov	r1, r4
 80075f2:	2201      	movs	r2, #1
 80075f4:	9805      	ldr	r0, [sp, #20]
 80075f6:	f7ff f987 	bl	8006908 <__lshift>
 80075fa:	4641      	mov	r1, r8
 80075fc:	4604      	mov	r4, r0
 80075fe:	f7ff f9ef 	bl	80069e0 <__mcmp>
 8007602:	2800      	cmp	r0, #0
 8007604:	dd50      	ble.n	80076a8 <_strtod_l+0x8b8>
 8007606:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800760a:	9a08      	ldr	r2, [sp, #32]
 800760c:	0d1b      	lsrs	r3, r3, #20
 800760e:	051b      	lsls	r3, r3, #20
 8007610:	2a00      	cmp	r2, #0
 8007612:	d06a      	beq.n	80076ea <_strtod_l+0x8fa>
 8007614:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007618:	d867      	bhi.n	80076ea <_strtod_l+0x8fa>
 800761a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800761e:	f67f ae98 	bls.w	8007352 <_strtod_l+0x562>
 8007622:	4650      	mov	r0, sl
 8007624:	4659      	mov	r1, fp
 8007626:	4b09      	ldr	r3, [pc, #36]	@ (800764c <_strtod_l+0x85c>)
 8007628:	2200      	movs	r2, #0
 800762a:	f7f8 ff55 	bl	80004d8 <__aeabi_dmul>
 800762e:	4b08      	ldr	r3, [pc, #32]	@ (8007650 <_strtod_l+0x860>)
 8007630:	4682      	mov	sl, r0
 8007632:	400b      	ands	r3, r1
 8007634:	468b      	mov	fp, r1
 8007636:	2b00      	cmp	r3, #0
 8007638:	f47f ae00 	bne.w	800723c <_strtod_l+0x44c>
 800763c:	2322      	movs	r3, #34	@ 0x22
 800763e:	9a05      	ldr	r2, [sp, #20]
 8007640:	6013      	str	r3, [r2, #0]
 8007642:	e5fb      	b.n	800723c <_strtod_l+0x44c>
 8007644:	08008ee8 	.word	0x08008ee8
 8007648:	fffffc02 	.word	0xfffffc02
 800764c:	39500000 	.word	0x39500000
 8007650:	7ff00000 	.word	0x7ff00000
 8007654:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007658:	d165      	bne.n	8007726 <_strtod_l+0x936>
 800765a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800765c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007660:	b35a      	cbz	r2, 80076ba <_strtod_l+0x8ca>
 8007662:	4a99      	ldr	r2, [pc, #612]	@ (80078c8 <_strtod_l+0xad8>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d12b      	bne.n	80076c0 <_strtod_l+0x8d0>
 8007668:	9b08      	ldr	r3, [sp, #32]
 800766a:	4651      	mov	r1, sl
 800766c:	b303      	cbz	r3, 80076b0 <_strtod_l+0x8c0>
 800766e:	465a      	mov	r2, fp
 8007670:	4b96      	ldr	r3, [pc, #600]	@ (80078cc <_strtod_l+0xadc>)
 8007672:	4013      	ands	r3, r2
 8007674:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007678:	f04f 32ff 	mov.w	r2, #4294967295
 800767c:	d81b      	bhi.n	80076b6 <_strtod_l+0x8c6>
 800767e:	0d1b      	lsrs	r3, r3, #20
 8007680:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007684:	fa02 f303 	lsl.w	r3, r2, r3
 8007688:	4299      	cmp	r1, r3
 800768a:	d119      	bne.n	80076c0 <_strtod_l+0x8d0>
 800768c:	4b90      	ldr	r3, [pc, #576]	@ (80078d0 <_strtod_l+0xae0>)
 800768e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007690:	429a      	cmp	r2, r3
 8007692:	d102      	bne.n	800769a <_strtod_l+0x8aa>
 8007694:	3101      	adds	r1, #1
 8007696:	f43f adc6 	beq.w	8007226 <_strtod_l+0x436>
 800769a:	f04f 0a00 	mov.w	sl, #0
 800769e:	4b8b      	ldr	r3, [pc, #556]	@ (80078cc <_strtod_l+0xadc>)
 80076a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076a2:	401a      	ands	r2, r3
 80076a4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80076a8:	9b08      	ldr	r3, [sp, #32]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1b9      	bne.n	8007622 <_strtod_l+0x832>
 80076ae:	e5c5      	b.n	800723c <_strtod_l+0x44c>
 80076b0:	f04f 33ff 	mov.w	r3, #4294967295
 80076b4:	e7e8      	b.n	8007688 <_strtod_l+0x898>
 80076b6:	4613      	mov	r3, r2
 80076b8:	e7e6      	b.n	8007688 <_strtod_l+0x898>
 80076ba:	ea53 030a 	orrs.w	r3, r3, sl
 80076be:	d0a2      	beq.n	8007606 <_strtod_l+0x816>
 80076c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80076c2:	b1db      	cbz	r3, 80076fc <_strtod_l+0x90c>
 80076c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076c6:	4213      	tst	r3, r2
 80076c8:	d0ee      	beq.n	80076a8 <_strtod_l+0x8b8>
 80076ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076cc:	4650      	mov	r0, sl
 80076ce:	4659      	mov	r1, fp
 80076d0:	9a08      	ldr	r2, [sp, #32]
 80076d2:	b1bb      	cbz	r3, 8007704 <_strtod_l+0x914>
 80076d4:	f7ff fb68 	bl	8006da8 <sulp>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076e0:	f7f8 fd44 	bl	800016c <__adddf3>
 80076e4:	4682      	mov	sl, r0
 80076e6:	468b      	mov	fp, r1
 80076e8:	e7de      	b.n	80076a8 <_strtod_l+0x8b8>
 80076ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80076ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80076f2:	f04f 3aff 	mov.w	sl, #4294967295
 80076f6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80076fa:	e7d5      	b.n	80076a8 <_strtod_l+0x8b8>
 80076fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076fe:	ea13 0f0a 	tst.w	r3, sl
 8007702:	e7e1      	b.n	80076c8 <_strtod_l+0x8d8>
 8007704:	f7ff fb50 	bl	8006da8 <sulp>
 8007708:	4602      	mov	r2, r0
 800770a:	460b      	mov	r3, r1
 800770c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007710:	f7f8 fd2a 	bl	8000168 <__aeabi_dsub>
 8007714:	2200      	movs	r2, #0
 8007716:	2300      	movs	r3, #0
 8007718:	4682      	mov	sl, r0
 800771a:	468b      	mov	fp, r1
 800771c:	f7f9 f944 	bl	80009a8 <__aeabi_dcmpeq>
 8007720:	2800      	cmp	r0, #0
 8007722:	d0c1      	beq.n	80076a8 <_strtod_l+0x8b8>
 8007724:	e615      	b.n	8007352 <_strtod_l+0x562>
 8007726:	4641      	mov	r1, r8
 8007728:	4620      	mov	r0, r4
 800772a:	f7ff fac9 	bl	8006cc0 <__ratio>
 800772e:	2200      	movs	r2, #0
 8007730:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007734:	4606      	mov	r6, r0
 8007736:	460f      	mov	r7, r1
 8007738:	f7f9 f94a 	bl	80009d0 <__aeabi_dcmple>
 800773c:	2800      	cmp	r0, #0
 800773e:	d06d      	beq.n	800781c <_strtod_l+0xa2c>
 8007740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007742:	2b00      	cmp	r3, #0
 8007744:	d178      	bne.n	8007838 <_strtod_l+0xa48>
 8007746:	f1ba 0f00 	cmp.w	sl, #0
 800774a:	d156      	bne.n	80077fa <_strtod_l+0xa0a>
 800774c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800774e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007752:	2b00      	cmp	r3, #0
 8007754:	d158      	bne.n	8007808 <_strtod_l+0xa18>
 8007756:	2200      	movs	r2, #0
 8007758:	4630      	mov	r0, r6
 800775a:	4639      	mov	r1, r7
 800775c:	4b5d      	ldr	r3, [pc, #372]	@ (80078d4 <_strtod_l+0xae4>)
 800775e:	f7f9 f92d 	bl	80009bc <__aeabi_dcmplt>
 8007762:	2800      	cmp	r0, #0
 8007764:	d157      	bne.n	8007816 <_strtod_l+0xa26>
 8007766:	4630      	mov	r0, r6
 8007768:	4639      	mov	r1, r7
 800776a:	2200      	movs	r2, #0
 800776c:	4b5a      	ldr	r3, [pc, #360]	@ (80078d8 <_strtod_l+0xae8>)
 800776e:	f7f8 feb3 	bl	80004d8 <__aeabi_dmul>
 8007772:	4606      	mov	r6, r0
 8007774:	460f      	mov	r7, r1
 8007776:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800777a:	9606      	str	r6, [sp, #24]
 800777c:	9307      	str	r3, [sp, #28]
 800777e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007782:	4d52      	ldr	r5, [pc, #328]	@ (80078cc <_strtod_l+0xadc>)
 8007784:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007788:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800778a:	401d      	ands	r5, r3
 800778c:	4b53      	ldr	r3, [pc, #332]	@ (80078dc <_strtod_l+0xaec>)
 800778e:	429d      	cmp	r5, r3
 8007790:	f040 80aa 	bne.w	80078e8 <_strtod_l+0xaf8>
 8007794:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007796:	4650      	mov	r0, sl
 8007798:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800779c:	4659      	mov	r1, fp
 800779e:	f7ff f9cf 	bl	8006b40 <__ulp>
 80077a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077a6:	f7f8 fe97 	bl	80004d8 <__aeabi_dmul>
 80077aa:	4652      	mov	r2, sl
 80077ac:	465b      	mov	r3, fp
 80077ae:	f7f8 fcdd 	bl	800016c <__adddf3>
 80077b2:	460b      	mov	r3, r1
 80077b4:	4945      	ldr	r1, [pc, #276]	@ (80078cc <_strtod_l+0xadc>)
 80077b6:	4a4a      	ldr	r2, [pc, #296]	@ (80078e0 <_strtod_l+0xaf0>)
 80077b8:	4019      	ands	r1, r3
 80077ba:	4291      	cmp	r1, r2
 80077bc:	4682      	mov	sl, r0
 80077be:	d942      	bls.n	8007846 <_strtod_l+0xa56>
 80077c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80077c2:	4b43      	ldr	r3, [pc, #268]	@ (80078d0 <_strtod_l+0xae0>)
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d103      	bne.n	80077d0 <_strtod_l+0x9e0>
 80077c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80077ca:	3301      	adds	r3, #1
 80077cc:	f43f ad2b 	beq.w	8007226 <_strtod_l+0x436>
 80077d0:	f04f 3aff 	mov.w	sl, #4294967295
 80077d4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80078d0 <_strtod_l+0xae0>
 80077d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077da:	9805      	ldr	r0, [sp, #20]
 80077dc:	f7fe fe7e 	bl	80064dc <_Bfree>
 80077e0:	4649      	mov	r1, r9
 80077e2:	9805      	ldr	r0, [sp, #20]
 80077e4:	f7fe fe7a 	bl	80064dc <_Bfree>
 80077e8:	4641      	mov	r1, r8
 80077ea:	9805      	ldr	r0, [sp, #20]
 80077ec:	f7fe fe76 	bl	80064dc <_Bfree>
 80077f0:	4621      	mov	r1, r4
 80077f2:	9805      	ldr	r0, [sp, #20]
 80077f4:	f7fe fe72 	bl	80064dc <_Bfree>
 80077f8:	e618      	b.n	800742c <_strtod_l+0x63c>
 80077fa:	f1ba 0f01 	cmp.w	sl, #1
 80077fe:	d103      	bne.n	8007808 <_strtod_l+0xa18>
 8007800:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007802:	2b00      	cmp	r3, #0
 8007804:	f43f ada5 	beq.w	8007352 <_strtod_l+0x562>
 8007808:	2200      	movs	r2, #0
 800780a:	4b36      	ldr	r3, [pc, #216]	@ (80078e4 <_strtod_l+0xaf4>)
 800780c:	2600      	movs	r6, #0
 800780e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007812:	4f30      	ldr	r7, [pc, #192]	@ (80078d4 <_strtod_l+0xae4>)
 8007814:	e7b3      	b.n	800777e <_strtod_l+0x98e>
 8007816:	2600      	movs	r6, #0
 8007818:	4f2f      	ldr	r7, [pc, #188]	@ (80078d8 <_strtod_l+0xae8>)
 800781a:	e7ac      	b.n	8007776 <_strtod_l+0x986>
 800781c:	4630      	mov	r0, r6
 800781e:	4639      	mov	r1, r7
 8007820:	4b2d      	ldr	r3, [pc, #180]	@ (80078d8 <_strtod_l+0xae8>)
 8007822:	2200      	movs	r2, #0
 8007824:	f7f8 fe58 	bl	80004d8 <__aeabi_dmul>
 8007828:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800782a:	4606      	mov	r6, r0
 800782c:	460f      	mov	r7, r1
 800782e:	2b00      	cmp	r3, #0
 8007830:	d0a1      	beq.n	8007776 <_strtod_l+0x986>
 8007832:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007836:	e7a2      	b.n	800777e <_strtod_l+0x98e>
 8007838:	2200      	movs	r2, #0
 800783a:	4b26      	ldr	r3, [pc, #152]	@ (80078d4 <_strtod_l+0xae4>)
 800783c:	4616      	mov	r6, r2
 800783e:	461f      	mov	r7, r3
 8007840:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007844:	e79b      	b.n	800777e <_strtod_l+0x98e>
 8007846:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800784a:	9b08      	ldr	r3, [sp, #32]
 800784c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1c1      	bne.n	80077d8 <_strtod_l+0x9e8>
 8007854:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007858:	0d1b      	lsrs	r3, r3, #20
 800785a:	051b      	lsls	r3, r3, #20
 800785c:	429d      	cmp	r5, r3
 800785e:	d1bb      	bne.n	80077d8 <_strtod_l+0x9e8>
 8007860:	4630      	mov	r0, r6
 8007862:	4639      	mov	r1, r7
 8007864:	f7f9 fbde 	bl	8001024 <__aeabi_d2lz>
 8007868:	f7f8 fe08 	bl	800047c <__aeabi_l2d>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	4630      	mov	r0, r6
 8007872:	4639      	mov	r1, r7
 8007874:	f7f8 fc78 	bl	8000168 <__aeabi_dsub>
 8007878:	460b      	mov	r3, r1
 800787a:	4602      	mov	r2, r0
 800787c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007880:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007886:	ea46 060a 	orr.w	r6, r6, sl
 800788a:	431e      	orrs	r6, r3
 800788c:	d069      	beq.n	8007962 <_strtod_l+0xb72>
 800788e:	a30a      	add	r3, pc, #40	@ (adr r3, 80078b8 <_strtod_l+0xac8>)
 8007890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007894:	f7f9 f892 	bl	80009bc <__aeabi_dcmplt>
 8007898:	2800      	cmp	r0, #0
 800789a:	f47f accf 	bne.w	800723c <_strtod_l+0x44c>
 800789e:	a308      	add	r3, pc, #32	@ (adr r3, 80078c0 <_strtod_l+0xad0>)
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078a8:	f7f9 f8a6 	bl	80009f8 <__aeabi_dcmpgt>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	d093      	beq.n	80077d8 <_strtod_l+0x9e8>
 80078b0:	e4c4      	b.n	800723c <_strtod_l+0x44c>
 80078b2:	bf00      	nop
 80078b4:	f3af 8000 	nop.w
 80078b8:	94a03595 	.word	0x94a03595
 80078bc:	3fdfffff 	.word	0x3fdfffff
 80078c0:	35afe535 	.word	0x35afe535
 80078c4:	3fe00000 	.word	0x3fe00000
 80078c8:	000fffff 	.word	0x000fffff
 80078cc:	7ff00000 	.word	0x7ff00000
 80078d0:	7fefffff 	.word	0x7fefffff
 80078d4:	3ff00000 	.word	0x3ff00000
 80078d8:	3fe00000 	.word	0x3fe00000
 80078dc:	7fe00000 	.word	0x7fe00000
 80078e0:	7c9fffff 	.word	0x7c9fffff
 80078e4:	bff00000 	.word	0xbff00000
 80078e8:	9b08      	ldr	r3, [sp, #32]
 80078ea:	b323      	cbz	r3, 8007936 <_strtod_l+0xb46>
 80078ec:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80078f0:	d821      	bhi.n	8007936 <_strtod_l+0xb46>
 80078f2:	a327      	add	r3, pc, #156	@ (adr r3, 8007990 <_strtod_l+0xba0>)
 80078f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f8:	4630      	mov	r0, r6
 80078fa:	4639      	mov	r1, r7
 80078fc:	f7f9 f868 	bl	80009d0 <__aeabi_dcmple>
 8007900:	b1a0      	cbz	r0, 800792c <_strtod_l+0xb3c>
 8007902:	4639      	mov	r1, r7
 8007904:	4630      	mov	r0, r6
 8007906:	f7f9 f8bf 	bl	8000a88 <__aeabi_d2uiz>
 800790a:	2801      	cmp	r0, #1
 800790c:	bf38      	it	cc
 800790e:	2001      	movcc	r0, #1
 8007910:	f7f8 fd68 	bl	80003e4 <__aeabi_ui2d>
 8007914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007916:	4606      	mov	r6, r0
 8007918:	460f      	mov	r7, r1
 800791a:	b9fb      	cbnz	r3, 800795c <_strtod_l+0xb6c>
 800791c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007920:	9014      	str	r0, [sp, #80]	@ 0x50
 8007922:	9315      	str	r3, [sp, #84]	@ 0x54
 8007924:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007928:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800792c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800792e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007932:	1b5b      	subs	r3, r3, r5
 8007934:	9311      	str	r3, [sp, #68]	@ 0x44
 8007936:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800793a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800793e:	f7ff f8ff 	bl	8006b40 <__ulp>
 8007942:	4602      	mov	r2, r0
 8007944:	460b      	mov	r3, r1
 8007946:	4650      	mov	r0, sl
 8007948:	4659      	mov	r1, fp
 800794a:	f7f8 fdc5 	bl	80004d8 <__aeabi_dmul>
 800794e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007952:	f7f8 fc0b 	bl	800016c <__adddf3>
 8007956:	4682      	mov	sl, r0
 8007958:	468b      	mov	fp, r1
 800795a:	e776      	b.n	800784a <_strtod_l+0xa5a>
 800795c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007960:	e7e0      	b.n	8007924 <_strtod_l+0xb34>
 8007962:	a30d      	add	r3, pc, #52	@ (adr r3, 8007998 <_strtod_l+0xba8>)
 8007964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007968:	f7f9 f828 	bl	80009bc <__aeabi_dcmplt>
 800796c:	e79e      	b.n	80078ac <_strtod_l+0xabc>
 800796e:	2300      	movs	r3, #0
 8007970:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007972:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007974:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007976:	6013      	str	r3, [r2, #0]
 8007978:	f7ff ba77 	b.w	8006e6a <_strtod_l+0x7a>
 800797c:	2a65      	cmp	r2, #101	@ 0x65
 800797e:	f43f ab6e 	beq.w	800705e <_strtod_l+0x26e>
 8007982:	2a45      	cmp	r2, #69	@ 0x45
 8007984:	f43f ab6b 	beq.w	800705e <_strtod_l+0x26e>
 8007988:	2301      	movs	r3, #1
 800798a:	f7ff bba6 	b.w	80070da <_strtod_l+0x2ea>
 800798e:	bf00      	nop
 8007990:	ffc00000 	.word	0xffc00000
 8007994:	41dfffff 	.word	0x41dfffff
 8007998:	94a03595 	.word	0x94a03595
 800799c:	3fcfffff 	.word	0x3fcfffff

080079a0 <_strtod_r>:
 80079a0:	4b01      	ldr	r3, [pc, #4]	@ (80079a8 <_strtod_r+0x8>)
 80079a2:	f7ff ba25 	b.w	8006df0 <_strtod_l>
 80079a6:	bf00      	nop
 80079a8:	20000074 	.word	0x20000074

080079ac <_strtol_l.constprop.0>:
 80079ac:	2b24      	cmp	r3, #36	@ 0x24
 80079ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b2:	4686      	mov	lr, r0
 80079b4:	4690      	mov	r8, r2
 80079b6:	d801      	bhi.n	80079bc <_strtol_l.constprop.0+0x10>
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d106      	bne.n	80079ca <_strtol_l.constprop.0+0x1e>
 80079bc:	f7fd fdb0 	bl	8005520 <__errno>
 80079c0:	2316      	movs	r3, #22
 80079c2:	6003      	str	r3, [r0, #0]
 80079c4:	2000      	movs	r0, #0
 80079c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ca:	460d      	mov	r5, r1
 80079cc:	4833      	ldr	r0, [pc, #204]	@ (8007a9c <_strtol_l.constprop.0+0xf0>)
 80079ce:	462a      	mov	r2, r5
 80079d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079d4:	5d06      	ldrb	r6, [r0, r4]
 80079d6:	f016 0608 	ands.w	r6, r6, #8
 80079da:	d1f8      	bne.n	80079ce <_strtol_l.constprop.0+0x22>
 80079dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80079de:	d12d      	bne.n	8007a3c <_strtol_l.constprop.0+0x90>
 80079e0:	2601      	movs	r6, #1
 80079e2:	782c      	ldrb	r4, [r5, #0]
 80079e4:	1c95      	adds	r5, r2, #2
 80079e6:	f033 0210 	bics.w	r2, r3, #16
 80079ea:	d109      	bne.n	8007a00 <_strtol_l.constprop.0+0x54>
 80079ec:	2c30      	cmp	r4, #48	@ 0x30
 80079ee:	d12a      	bne.n	8007a46 <_strtol_l.constprop.0+0x9a>
 80079f0:	782a      	ldrb	r2, [r5, #0]
 80079f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80079f6:	2a58      	cmp	r2, #88	@ 0x58
 80079f8:	d125      	bne.n	8007a46 <_strtol_l.constprop.0+0x9a>
 80079fa:	2310      	movs	r3, #16
 80079fc:	786c      	ldrb	r4, [r5, #1]
 80079fe:	3502      	adds	r5, #2
 8007a00:	2200      	movs	r2, #0
 8007a02:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007a06:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007a0a:	fbbc f9f3 	udiv	r9, ip, r3
 8007a0e:	4610      	mov	r0, r2
 8007a10:	fb03 ca19 	mls	sl, r3, r9, ip
 8007a14:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007a18:	2f09      	cmp	r7, #9
 8007a1a:	d81b      	bhi.n	8007a54 <_strtol_l.constprop.0+0xa8>
 8007a1c:	463c      	mov	r4, r7
 8007a1e:	42a3      	cmp	r3, r4
 8007a20:	dd27      	ble.n	8007a72 <_strtol_l.constprop.0+0xc6>
 8007a22:	1c57      	adds	r7, r2, #1
 8007a24:	d007      	beq.n	8007a36 <_strtol_l.constprop.0+0x8a>
 8007a26:	4581      	cmp	r9, r0
 8007a28:	d320      	bcc.n	8007a6c <_strtol_l.constprop.0+0xc0>
 8007a2a:	d101      	bne.n	8007a30 <_strtol_l.constprop.0+0x84>
 8007a2c:	45a2      	cmp	sl, r4
 8007a2e:	db1d      	blt.n	8007a6c <_strtol_l.constprop.0+0xc0>
 8007a30:	2201      	movs	r2, #1
 8007a32:	fb00 4003 	mla	r0, r0, r3, r4
 8007a36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a3a:	e7eb      	b.n	8007a14 <_strtol_l.constprop.0+0x68>
 8007a3c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007a3e:	bf04      	itt	eq
 8007a40:	782c      	ldrbeq	r4, [r5, #0]
 8007a42:	1c95      	addeq	r5, r2, #2
 8007a44:	e7cf      	b.n	80079e6 <_strtol_l.constprop.0+0x3a>
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1da      	bne.n	8007a00 <_strtol_l.constprop.0+0x54>
 8007a4a:	2c30      	cmp	r4, #48	@ 0x30
 8007a4c:	bf0c      	ite	eq
 8007a4e:	2308      	moveq	r3, #8
 8007a50:	230a      	movne	r3, #10
 8007a52:	e7d5      	b.n	8007a00 <_strtol_l.constprop.0+0x54>
 8007a54:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007a58:	2f19      	cmp	r7, #25
 8007a5a:	d801      	bhi.n	8007a60 <_strtol_l.constprop.0+0xb4>
 8007a5c:	3c37      	subs	r4, #55	@ 0x37
 8007a5e:	e7de      	b.n	8007a1e <_strtol_l.constprop.0+0x72>
 8007a60:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007a64:	2f19      	cmp	r7, #25
 8007a66:	d804      	bhi.n	8007a72 <_strtol_l.constprop.0+0xc6>
 8007a68:	3c57      	subs	r4, #87	@ 0x57
 8007a6a:	e7d8      	b.n	8007a1e <_strtol_l.constprop.0+0x72>
 8007a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a70:	e7e1      	b.n	8007a36 <_strtol_l.constprop.0+0x8a>
 8007a72:	1c53      	adds	r3, r2, #1
 8007a74:	d108      	bne.n	8007a88 <_strtol_l.constprop.0+0xdc>
 8007a76:	2322      	movs	r3, #34	@ 0x22
 8007a78:	4660      	mov	r0, ip
 8007a7a:	f8ce 3000 	str.w	r3, [lr]
 8007a7e:	f1b8 0f00 	cmp.w	r8, #0
 8007a82:	d0a0      	beq.n	80079c6 <_strtol_l.constprop.0+0x1a>
 8007a84:	1e69      	subs	r1, r5, #1
 8007a86:	e006      	b.n	8007a96 <_strtol_l.constprop.0+0xea>
 8007a88:	b106      	cbz	r6, 8007a8c <_strtol_l.constprop.0+0xe0>
 8007a8a:	4240      	negs	r0, r0
 8007a8c:	f1b8 0f00 	cmp.w	r8, #0
 8007a90:	d099      	beq.n	80079c6 <_strtol_l.constprop.0+0x1a>
 8007a92:	2a00      	cmp	r2, #0
 8007a94:	d1f6      	bne.n	8007a84 <_strtol_l.constprop.0+0xd8>
 8007a96:	f8c8 1000 	str.w	r1, [r8]
 8007a9a:	e794      	b.n	80079c6 <_strtol_l.constprop.0+0x1a>
 8007a9c:	08008f11 	.word	0x08008f11

08007aa0 <_strtol_r>:
 8007aa0:	f7ff bf84 	b.w	80079ac <_strtol_l.constprop.0>

08007aa4 <__ssputs_r>:
 8007aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa8:	461f      	mov	r7, r3
 8007aaa:	688e      	ldr	r6, [r1, #8]
 8007aac:	4682      	mov	sl, r0
 8007aae:	42be      	cmp	r6, r7
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	4690      	mov	r8, r2
 8007ab4:	680b      	ldr	r3, [r1, #0]
 8007ab6:	d82d      	bhi.n	8007b14 <__ssputs_r+0x70>
 8007ab8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007abc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ac0:	d026      	beq.n	8007b10 <__ssputs_r+0x6c>
 8007ac2:	6965      	ldr	r5, [r4, #20]
 8007ac4:	6909      	ldr	r1, [r1, #16]
 8007ac6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007aca:	eba3 0901 	sub.w	r9, r3, r1
 8007ace:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ad2:	1c7b      	adds	r3, r7, #1
 8007ad4:	444b      	add	r3, r9
 8007ad6:	106d      	asrs	r5, r5, #1
 8007ad8:	429d      	cmp	r5, r3
 8007ada:	bf38      	it	cc
 8007adc:	461d      	movcc	r5, r3
 8007ade:	0553      	lsls	r3, r2, #21
 8007ae0:	d527      	bpl.n	8007b32 <__ssputs_r+0x8e>
 8007ae2:	4629      	mov	r1, r5
 8007ae4:	f7fe fc2e 	bl	8006344 <_malloc_r>
 8007ae8:	4606      	mov	r6, r0
 8007aea:	b360      	cbz	r0, 8007b46 <__ssputs_r+0xa2>
 8007aec:	464a      	mov	r2, r9
 8007aee:	6921      	ldr	r1, [r4, #16]
 8007af0:	f7fd fd51 	bl	8005596 <memcpy>
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007afe:	81a3      	strh	r3, [r4, #12]
 8007b00:	6126      	str	r6, [r4, #16]
 8007b02:	444e      	add	r6, r9
 8007b04:	6026      	str	r6, [r4, #0]
 8007b06:	463e      	mov	r6, r7
 8007b08:	6165      	str	r5, [r4, #20]
 8007b0a:	eba5 0509 	sub.w	r5, r5, r9
 8007b0e:	60a5      	str	r5, [r4, #8]
 8007b10:	42be      	cmp	r6, r7
 8007b12:	d900      	bls.n	8007b16 <__ssputs_r+0x72>
 8007b14:	463e      	mov	r6, r7
 8007b16:	4632      	mov	r2, r6
 8007b18:	4641      	mov	r1, r8
 8007b1a:	6820      	ldr	r0, [r4, #0]
 8007b1c:	f7fd fc93 	bl	8005446 <memmove>
 8007b20:	2000      	movs	r0, #0
 8007b22:	68a3      	ldr	r3, [r4, #8]
 8007b24:	1b9b      	subs	r3, r3, r6
 8007b26:	60a3      	str	r3, [r4, #8]
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	4433      	add	r3, r6
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b32:	462a      	mov	r2, r5
 8007b34:	f000 ff2f 	bl	8008996 <_realloc_r>
 8007b38:	4606      	mov	r6, r0
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	d1e0      	bne.n	8007b00 <__ssputs_r+0x5c>
 8007b3e:	4650      	mov	r0, sl
 8007b40:	6921      	ldr	r1, [r4, #16]
 8007b42:	f7fe fb8d 	bl	8006260 <_free_r>
 8007b46:	230c      	movs	r3, #12
 8007b48:	f8ca 3000 	str.w	r3, [sl]
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b56:	81a3      	strh	r3, [r4, #12]
 8007b58:	e7e9      	b.n	8007b2e <__ssputs_r+0x8a>
	...

08007b5c <_svfiprintf_r>:
 8007b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b60:	4698      	mov	r8, r3
 8007b62:	898b      	ldrh	r3, [r1, #12]
 8007b64:	4607      	mov	r7, r0
 8007b66:	061b      	lsls	r3, r3, #24
 8007b68:	460d      	mov	r5, r1
 8007b6a:	4614      	mov	r4, r2
 8007b6c:	b09d      	sub	sp, #116	@ 0x74
 8007b6e:	d510      	bpl.n	8007b92 <_svfiprintf_r+0x36>
 8007b70:	690b      	ldr	r3, [r1, #16]
 8007b72:	b973      	cbnz	r3, 8007b92 <_svfiprintf_r+0x36>
 8007b74:	2140      	movs	r1, #64	@ 0x40
 8007b76:	f7fe fbe5 	bl	8006344 <_malloc_r>
 8007b7a:	6028      	str	r0, [r5, #0]
 8007b7c:	6128      	str	r0, [r5, #16]
 8007b7e:	b930      	cbnz	r0, 8007b8e <_svfiprintf_r+0x32>
 8007b80:	230c      	movs	r3, #12
 8007b82:	603b      	str	r3, [r7, #0]
 8007b84:	f04f 30ff 	mov.w	r0, #4294967295
 8007b88:	b01d      	add	sp, #116	@ 0x74
 8007b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b8e:	2340      	movs	r3, #64	@ 0x40
 8007b90:	616b      	str	r3, [r5, #20]
 8007b92:	2300      	movs	r3, #0
 8007b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b96:	2320      	movs	r3, #32
 8007b98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b9c:	2330      	movs	r3, #48	@ 0x30
 8007b9e:	f04f 0901 	mov.w	r9, #1
 8007ba2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ba6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007d40 <_svfiprintf_r+0x1e4>
 8007baa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bae:	4623      	mov	r3, r4
 8007bb0:	469a      	mov	sl, r3
 8007bb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bb6:	b10a      	cbz	r2, 8007bbc <_svfiprintf_r+0x60>
 8007bb8:	2a25      	cmp	r2, #37	@ 0x25
 8007bba:	d1f9      	bne.n	8007bb0 <_svfiprintf_r+0x54>
 8007bbc:	ebba 0b04 	subs.w	fp, sl, r4
 8007bc0:	d00b      	beq.n	8007bda <_svfiprintf_r+0x7e>
 8007bc2:	465b      	mov	r3, fp
 8007bc4:	4622      	mov	r2, r4
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	4638      	mov	r0, r7
 8007bca:	f7ff ff6b 	bl	8007aa4 <__ssputs_r>
 8007bce:	3001      	adds	r0, #1
 8007bd0:	f000 80a7 	beq.w	8007d22 <_svfiprintf_r+0x1c6>
 8007bd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bd6:	445a      	add	r2, fp
 8007bd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bda:	f89a 3000 	ldrb.w	r3, [sl]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 809f 	beq.w	8007d22 <_svfiprintf_r+0x1c6>
 8007be4:	2300      	movs	r3, #0
 8007be6:	f04f 32ff 	mov.w	r2, #4294967295
 8007bea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bee:	f10a 0a01 	add.w	sl, sl, #1
 8007bf2:	9304      	str	r3, [sp, #16]
 8007bf4:	9307      	str	r3, [sp, #28]
 8007bf6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007bfa:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bfc:	4654      	mov	r4, sl
 8007bfe:	2205      	movs	r2, #5
 8007c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c04:	484e      	ldr	r0, [pc, #312]	@ (8007d40 <_svfiprintf_r+0x1e4>)
 8007c06:	f7fd fcb8 	bl	800557a <memchr>
 8007c0a:	9a04      	ldr	r2, [sp, #16]
 8007c0c:	b9d8      	cbnz	r0, 8007c46 <_svfiprintf_r+0xea>
 8007c0e:	06d0      	lsls	r0, r2, #27
 8007c10:	bf44      	itt	mi
 8007c12:	2320      	movmi	r3, #32
 8007c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c18:	0711      	lsls	r1, r2, #28
 8007c1a:	bf44      	itt	mi
 8007c1c:	232b      	movmi	r3, #43	@ 0x2b
 8007c1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c22:	f89a 3000 	ldrb.w	r3, [sl]
 8007c26:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c28:	d015      	beq.n	8007c56 <_svfiprintf_r+0xfa>
 8007c2a:	4654      	mov	r4, sl
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	f04f 0c0a 	mov.w	ip, #10
 8007c32:	9a07      	ldr	r2, [sp, #28]
 8007c34:	4621      	mov	r1, r4
 8007c36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c3a:	3b30      	subs	r3, #48	@ 0x30
 8007c3c:	2b09      	cmp	r3, #9
 8007c3e:	d94b      	bls.n	8007cd8 <_svfiprintf_r+0x17c>
 8007c40:	b1b0      	cbz	r0, 8007c70 <_svfiprintf_r+0x114>
 8007c42:	9207      	str	r2, [sp, #28]
 8007c44:	e014      	b.n	8007c70 <_svfiprintf_r+0x114>
 8007c46:	eba0 0308 	sub.w	r3, r0, r8
 8007c4a:	fa09 f303 	lsl.w	r3, r9, r3
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	46a2      	mov	sl, r4
 8007c52:	9304      	str	r3, [sp, #16]
 8007c54:	e7d2      	b.n	8007bfc <_svfiprintf_r+0xa0>
 8007c56:	9b03      	ldr	r3, [sp, #12]
 8007c58:	1d19      	adds	r1, r3, #4
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	9103      	str	r1, [sp, #12]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	bfbb      	ittet	lt
 8007c62:	425b      	neglt	r3, r3
 8007c64:	f042 0202 	orrlt.w	r2, r2, #2
 8007c68:	9307      	strge	r3, [sp, #28]
 8007c6a:	9307      	strlt	r3, [sp, #28]
 8007c6c:	bfb8      	it	lt
 8007c6e:	9204      	strlt	r2, [sp, #16]
 8007c70:	7823      	ldrb	r3, [r4, #0]
 8007c72:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c74:	d10a      	bne.n	8007c8c <_svfiprintf_r+0x130>
 8007c76:	7863      	ldrb	r3, [r4, #1]
 8007c78:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c7a:	d132      	bne.n	8007ce2 <_svfiprintf_r+0x186>
 8007c7c:	9b03      	ldr	r3, [sp, #12]
 8007c7e:	3402      	adds	r4, #2
 8007c80:	1d1a      	adds	r2, r3, #4
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	9203      	str	r2, [sp, #12]
 8007c86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c8a:	9305      	str	r3, [sp, #20]
 8007c8c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007d44 <_svfiprintf_r+0x1e8>
 8007c90:	2203      	movs	r2, #3
 8007c92:	4650      	mov	r0, sl
 8007c94:	7821      	ldrb	r1, [r4, #0]
 8007c96:	f7fd fc70 	bl	800557a <memchr>
 8007c9a:	b138      	cbz	r0, 8007cac <_svfiprintf_r+0x150>
 8007c9c:	2240      	movs	r2, #64	@ 0x40
 8007c9e:	9b04      	ldr	r3, [sp, #16]
 8007ca0:	eba0 000a 	sub.w	r0, r0, sl
 8007ca4:	4082      	lsls	r2, r0
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	3401      	adds	r4, #1
 8007caa:	9304      	str	r3, [sp, #16]
 8007cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb0:	2206      	movs	r2, #6
 8007cb2:	4825      	ldr	r0, [pc, #148]	@ (8007d48 <_svfiprintf_r+0x1ec>)
 8007cb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007cb8:	f7fd fc5f 	bl	800557a <memchr>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d036      	beq.n	8007d2e <_svfiprintf_r+0x1d2>
 8007cc0:	4b22      	ldr	r3, [pc, #136]	@ (8007d4c <_svfiprintf_r+0x1f0>)
 8007cc2:	bb1b      	cbnz	r3, 8007d0c <_svfiprintf_r+0x1b0>
 8007cc4:	9b03      	ldr	r3, [sp, #12]
 8007cc6:	3307      	adds	r3, #7
 8007cc8:	f023 0307 	bic.w	r3, r3, #7
 8007ccc:	3308      	adds	r3, #8
 8007cce:	9303      	str	r3, [sp, #12]
 8007cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cd2:	4433      	add	r3, r6
 8007cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cd6:	e76a      	b.n	8007bae <_svfiprintf_r+0x52>
 8007cd8:	460c      	mov	r4, r1
 8007cda:	2001      	movs	r0, #1
 8007cdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ce0:	e7a8      	b.n	8007c34 <_svfiprintf_r+0xd8>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f04f 0c0a 	mov.w	ip, #10
 8007ce8:	4619      	mov	r1, r3
 8007cea:	3401      	adds	r4, #1
 8007cec:	9305      	str	r3, [sp, #20]
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cf4:	3a30      	subs	r2, #48	@ 0x30
 8007cf6:	2a09      	cmp	r2, #9
 8007cf8:	d903      	bls.n	8007d02 <_svfiprintf_r+0x1a6>
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d0c6      	beq.n	8007c8c <_svfiprintf_r+0x130>
 8007cfe:	9105      	str	r1, [sp, #20]
 8007d00:	e7c4      	b.n	8007c8c <_svfiprintf_r+0x130>
 8007d02:	4604      	mov	r4, r0
 8007d04:	2301      	movs	r3, #1
 8007d06:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d0a:	e7f0      	b.n	8007cee <_svfiprintf_r+0x192>
 8007d0c:	ab03      	add	r3, sp, #12
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	462a      	mov	r2, r5
 8007d12:	4638      	mov	r0, r7
 8007d14:	4b0e      	ldr	r3, [pc, #56]	@ (8007d50 <_svfiprintf_r+0x1f4>)
 8007d16:	a904      	add	r1, sp, #16
 8007d18:	f7fc fc90 	bl	800463c <_printf_float>
 8007d1c:	1c42      	adds	r2, r0, #1
 8007d1e:	4606      	mov	r6, r0
 8007d20:	d1d6      	bne.n	8007cd0 <_svfiprintf_r+0x174>
 8007d22:	89ab      	ldrh	r3, [r5, #12]
 8007d24:	065b      	lsls	r3, r3, #25
 8007d26:	f53f af2d 	bmi.w	8007b84 <_svfiprintf_r+0x28>
 8007d2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d2c:	e72c      	b.n	8007b88 <_svfiprintf_r+0x2c>
 8007d2e:	ab03      	add	r3, sp, #12
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	462a      	mov	r2, r5
 8007d34:	4638      	mov	r0, r7
 8007d36:	4b06      	ldr	r3, [pc, #24]	@ (8007d50 <_svfiprintf_r+0x1f4>)
 8007d38:	a904      	add	r1, sp, #16
 8007d3a:	f7fc ff1d 	bl	8004b78 <_printf_i>
 8007d3e:	e7ed      	b.n	8007d1c <_svfiprintf_r+0x1c0>
 8007d40:	08009011 	.word	0x08009011
 8007d44:	08009017 	.word	0x08009017
 8007d48:	0800901b 	.word	0x0800901b
 8007d4c:	0800463d 	.word	0x0800463d
 8007d50:	08007aa5 	.word	0x08007aa5

08007d54 <__sfputc_r>:
 8007d54:	6893      	ldr	r3, [r2, #8]
 8007d56:	b410      	push	{r4}
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	6093      	str	r3, [r2, #8]
 8007d5e:	da07      	bge.n	8007d70 <__sfputc_r+0x1c>
 8007d60:	6994      	ldr	r4, [r2, #24]
 8007d62:	42a3      	cmp	r3, r4
 8007d64:	db01      	blt.n	8007d6a <__sfputc_r+0x16>
 8007d66:	290a      	cmp	r1, #10
 8007d68:	d102      	bne.n	8007d70 <__sfputc_r+0x1c>
 8007d6a:	bc10      	pop	{r4}
 8007d6c:	f000 b9da 	b.w	8008124 <__swbuf_r>
 8007d70:	6813      	ldr	r3, [r2, #0]
 8007d72:	1c58      	adds	r0, r3, #1
 8007d74:	6010      	str	r0, [r2, #0]
 8007d76:	7019      	strb	r1, [r3, #0]
 8007d78:	4608      	mov	r0, r1
 8007d7a:	bc10      	pop	{r4}
 8007d7c:	4770      	bx	lr

08007d7e <__sfputs_r>:
 8007d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d80:	4606      	mov	r6, r0
 8007d82:	460f      	mov	r7, r1
 8007d84:	4614      	mov	r4, r2
 8007d86:	18d5      	adds	r5, r2, r3
 8007d88:	42ac      	cmp	r4, r5
 8007d8a:	d101      	bne.n	8007d90 <__sfputs_r+0x12>
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	e007      	b.n	8007da0 <__sfputs_r+0x22>
 8007d90:	463a      	mov	r2, r7
 8007d92:	4630      	mov	r0, r6
 8007d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d98:	f7ff ffdc 	bl	8007d54 <__sfputc_r>
 8007d9c:	1c43      	adds	r3, r0, #1
 8007d9e:	d1f3      	bne.n	8007d88 <__sfputs_r+0xa>
 8007da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007da4 <_vfiprintf_r>:
 8007da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da8:	460d      	mov	r5, r1
 8007daa:	4614      	mov	r4, r2
 8007dac:	4698      	mov	r8, r3
 8007dae:	4606      	mov	r6, r0
 8007db0:	b09d      	sub	sp, #116	@ 0x74
 8007db2:	b118      	cbz	r0, 8007dbc <_vfiprintf_r+0x18>
 8007db4:	6a03      	ldr	r3, [r0, #32]
 8007db6:	b90b      	cbnz	r3, 8007dbc <_vfiprintf_r+0x18>
 8007db8:	f7fd fa9a 	bl	80052f0 <__sinit>
 8007dbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dbe:	07d9      	lsls	r1, r3, #31
 8007dc0:	d405      	bmi.n	8007dce <_vfiprintf_r+0x2a>
 8007dc2:	89ab      	ldrh	r3, [r5, #12]
 8007dc4:	059a      	lsls	r2, r3, #22
 8007dc6:	d402      	bmi.n	8007dce <_vfiprintf_r+0x2a>
 8007dc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dca:	f7fd fbd4 	bl	8005576 <__retarget_lock_acquire_recursive>
 8007dce:	89ab      	ldrh	r3, [r5, #12]
 8007dd0:	071b      	lsls	r3, r3, #28
 8007dd2:	d501      	bpl.n	8007dd8 <_vfiprintf_r+0x34>
 8007dd4:	692b      	ldr	r3, [r5, #16]
 8007dd6:	b99b      	cbnz	r3, 8007e00 <_vfiprintf_r+0x5c>
 8007dd8:	4629      	mov	r1, r5
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f000 f9e0 	bl	80081a0 <__swsetup_r>
 8007de0:	b170      	cbz	r0, 8007e00 <_vfiprintf_r+0x5c>
 8007de2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007de4:	07dc      	lsls	r4, r3, #31
 8007de6:	d504      	bpl.n	8007df2 <_vfiprintf_r+0x4e>
 8007de8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dec:	b01d      	add	sp, #116	@ 0x74
 8007dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df2:	89ab      	ldrh	r3, [r5, #12]
 8007df4:	0598      	lsls	r0, r3, #22
 8007df6:	d4f7      	bmi.n	8007de8 <_vfiprintf_r+0x44>
 8007df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dfa:	f7fd fbbd 	bl	8005578 <__retarget_lock_release_recursive>
 8007dfe:	e7f3      	b.n	8007de8 <_vfiprintf_r+0x44>
 8007e00:	2300      	movs	r3, #0
 8007e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e04:	2320      	movs	r3, #32
 8007e06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e0a:	2330      	movs	r3, #48	@ 0x30
 8007e0c:	f04f 0901 	mov.w	r9, #1
 8007e10:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e14:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007fc0 <_vfiprintf_r+0x21c>
 8007e18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e1c:	4623      	mov	r3, r4
 8007e1e:	469a      	mov	sl, r3
 8007e20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e24:	b10a      	cbz	r2, 8007e2a <_vfiprintf_r+0x86>
 8007e26:	2a25      	cmp	r2, #37	@ 0x25
 8007e28:	d1f9      	bne.n	8007e1e <_vfiprintf_r+0x7a>
 8007e2a:	ebba 0b04 	subs.w	fp, sl, r4
 8007e2e:	d00b      	beq.n	8007e48 <_vfiprintf_r+0xa4>
 8007e30:	465b      	mov	r3, fp
 8007e32:	4622      	mov	r2, r4
 8007e34:	4629      	mov	r1, r5
 8007e36:	4630      	mov	r0, r6
 8007e38:	f7ff ffa1 	bl	8007d7e <__sfputs_r>
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	f000 80a7 	beq.w	8007f90 <_vfiprintf_r+0x1ec>
 8007e42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e44:	445a      	add	r2, fp
 8007e46:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e48:	f89a 3000 	ldrb.w	r3, [sl]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 809f 	beq.w	8007f90 <_vfiprintf_r+0x1ec>
 8007e52:	2300      	movs	r3, #0
 8007e54:	f04f 32ff 	mov.w	r2, #4294967295
 8007e58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e5c:	f10a 0a01 	add.w	sl, sl, #1
 8007e60:	9304      	str	r3, [sp, #16]
 8007e62:	9307      	str	r3, [sp, #28]
 8007e64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e68:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e6a:	4654      	mov	r4, sl
 8007e6c:	2205      	movs	r2, #5
 8007e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e72:	4853      	ldr	r0, [pc, #332]	@ (8007fc0 <_vfiprintf_r+0x21c>)
 8007e74:	f7fd fb81 	bl	800557a <memchr>
 8007e78:	9a04      	ldr	r2, [sp, #16]
 8007e7a:	b9d8      	cbnz	r0, 8007eb4 <_vfiprintf_r+0x110>
 8007e7c:	06d1      	lsls	r1, r2, #27
 8007e7e:	bf44      	itt	mi
 8007e80:	2320      	movmi	r3, #32
 8007e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e86:	0713      	lsls	r3, r2, #28
 8007e88:	bf44      	itt	mi
 8007e8a:	232b      	movmi	r3, #43	@ 0x2b
 8007e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e90:	f89a 3000 	ldrb.w	r3, [sl]
 8007e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e96:	d015      	beq.n	8007ec4 <_vfiprintf_r+0x120>
 8007e98:	4654      	mov	r4, sl
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	f04f 0c0a 	mov.w	ip, #10
 8007ea0:	9a07      	ldr	r2, [sp, #28]
 8007ea2:	4621      	mov	r1, r4
 8007ea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ea8:	3b30      	subs	r3, #48	@ 0x30
 8007eaa:	2b09      	cmp	r3, #9
 8007eac:	d94b      	bls.n	8007f46 <_vfiprintf_r+0x1a2>
 8007eae:	b1b0      	cbz	r0, 8007ede <_vfiprintf_r+0x13a>
 8007eb0:	9207      	str	r2, [sp, #28]
 8007eb2:	e014      	b.n	8007ede <_vfiprintf_r+0x13a>
 8007eb4:	eba0 0308 	sub.w	r3, r0, r8
 8007eb8:	fa09 f303 	lsl.w	r3, r9, r3
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	46a2      	mov	sl, r4
 8007ec0:	9304      	str	r3, [sp, #16]
 8007ec2:	e7d2      	b.n	8007e6a <_vfiprintf_r+0xc6>
 8007ec4:	9b03      	ldr	r3, [sp, #12]
 8007ec6:	1d19      	adds	r1, r3, #4
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	9103      	str	r1, [sp, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	bfbb      	ittet	lt
 8007ed0:	425b      	neglt	r3, r3
 8007ed2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ed6:	9307      	strge	r3, [sp, #28]
 8007ed8:	9307      	strlt	r3, [sp, #28]
 8007eda:	bfb8      	it	lt
 8007edc:	9204      	strlt	r2, [sp, #16]
 8007ede:	7823      	ldrb	r3, [r4, #0]
 8007ee0:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ee2:	d10a      	bne.n	8007efa <_vfiprintf_r+0x156>
 8007ee4:	7863      	ldrb	r3, [r4, #1]
 8007ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ee8:	d132      	bne.n	8007f50 <_vfiprintf_r+0x1ac>
 8007eea:	9b03      	ldr	r3, [sp, #12]
 8007eec:	3402      	adds	r4, #2
 8007eee:	1d1a      	adds	r2, r3, #4
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	9203      	str	r2, [sp, #12]
 8007ef4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ef8:	9305      	str	r3, [sp, #20]
 8007efa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007fc4 <_vfiprintf_r+0x220>
 8007efe:	2203      	movs	r2, #3
 8007f00:	4650      	mov	r0, sl
 8007f02:	7821      	ldrb	r1, [r4, #0]
 8007f04:	f7fd fb39 	bl	800557a <memchr>
 8007f08:	b138      	cbz	r0, 8007f1a <_vfiprintf_r+0x176>
 8007f0a:	2240      	movs	r2, #64	@ 0x40
 8007f0c:	9b04      	ldr	r3, [sp, #16]
 8007f0e:	eba0 000a 	sub.w	r0, r0, sl
 8007f12:	4082      	lsls	r2, r0
 8007f14:	4313      	orrs	r3, r2
 8007f16:	3401      	adds	r4, #1
 8007f18:	9304      	str	r3, [sp, #16]
 8007f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f1e:	2206      	movs	r2, #6
 8007f20:	4829      	ldr	r0, [pc, #164]	@ (8007fc8 <_vfiprintf_r+0x224>)
 8007f22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f26:	f7fd fb28 	bl	800557a <memchr>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d03f      	beq.n	8007fae <_vfiprintf_r+0x20a>
 8007f2e:	4b27      	ldr	r3, [pc, #156]	@ (8007fcc <_vfiprintf_r+0x228>)
 8007f30:	bb1b      	cbnz	r3, 8007f7a <_vfiprintf_r+0x1d6>
 8007f32:	9b03      	ldr	r3, [sp, #12]
 8007f34:	3307      	adds	r3, #7
 8007f36:	f023 0307 	bic.w	r3, r3, #7
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	9303      	str	r3, [sp, #12]
 8007f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f40:	443b      	add	r3, r7
 8007f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f44:	e76a      	b.n	8007e1c <_vfiprintf_r+0x78>
 8007f46:	460c      	mov	r4, r1
 8007f48:	2001      	movs	r0, #1
 8007f4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f4e:	e7a8      	b.n	8007ea2 <_vfiprintf_r+0xfe>
 8007f50:	2300      	movs	r3, #0
 8007f52:	f04f 0c0a 	mov.w	ip, #10
 8007f56:	4619      	mov	r1, r3
 8007f58:	3401      	adds	r4, #1
 8007f5a:	9305      	str	r3, [sp, #20]
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f62:	3a30      	subs	r2, #48	@ 0x30
 8007f64:	2a09      	cmp	r2, #9
 8007f66:	d903      	bls.n	8007f70 <_vfiprintf_r+0x1cc>
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d0c6      	beq.n	8007efa <_vfiprintf_r+0x156>
 8007f6c:	9105      	str	r1, [sp, #20]
 8007f6e:	e7c4      	b.n	8007efa <_vfiprintf_r+0x156>
 8007f70:	4604      	mov	r4, r0
 8007f72:	2301      	movs	r3, #1
 8007f74:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f78:	e7f0      	b.n	8007f5c <_vfiprintf_r+0x1b8>
 8007f7a:	ab03      	add	r3, sp, #12
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	462a      	mov	r2, r5
 8007f80:	4630      	mov	r0, r6
 8007f82:	4b13      	ldr	r3, [pc, #76]	@ (8007fd0 <_vfiprintf_r+0x22c>)
 8007f84:	a904      	add	r1, sp, #16
 8007f86:	f7fc fb59 	bl	800463c <_printf_float>
 8007f8a:	4607      	mov	r7, r0
 8007f8c:	1c78      	adds	r0, r7, #1
 8007f8e:	d1d6      	bne.n	8007f3e <_vfiprintf_r+0x19a>
 8007f90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f92:	07d9      	lsls	r1, r3, #31
 8007f94:	d405      	bmi.n	8007fa2 <_vfiprintf_r+0x1fe>
 8007f96:	89ab      	ldrh	r3, [r5, #12]
 8007f98:	059a      	lsls	r2, r3, #22
 8007f9a:	d402      	bmi.n	8007fa2 <_vfiprintf_r+0x1fe>
 8007f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f9e:	f7fd faeb 	bl	8005578 <__retarget_lock_release_recursive>
 8007fa2:	89ab      	ldrh	r3, [r5, #12]
 8007fa4:	065b      	lsls	r3, r3, #25
 8007fa6:	f53f af1f 	bmi.w	8007de8 <_vfiprintf_r+0x44>
 8007faa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007fac:	e71e      	b.n	8007dec <_vfiprintf_r+0x48>
 8007fae:	ab03      	add	r3, sp, #12
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	462a      	mov	r2, r5
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	4b06      	ldr	r3, [pc, #24]	@ (8007fd0 <_vfiprintf_r+0x22c>)
 8007fb8:	a904      	add	r1, sp, #16
 8007fba:	f7fc fddd 	bl	8004b78 <_printf_i>
 8007fbe:	e7e4      	b.n	8007f8a <_vfiprintf_r+0x1e6>
 8007fc0:	08009011 	.word	0x08009011
 8007fc4:	08009017 	.word	0x08009017
 8007fc8:	0800901b 	.word	0x0800901b
 8007fcc:	0800463d 	.word	0x0800463d
 8007fd0:	08007d7f 	.word	0x08007d7f

08007fd4 <__sflush_r>:
 8007fd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fda:	0716      	lsls	r6, r2, #28
 8007fdc:	4605      	mov	r5, r0
 8007fde:	460c      	mov	r4, r1
 8007fe0:	d454      	bmi.n	800808c <__sflush_r+0xb8>
 8007fe2:	684b      	ldr	r3, [r1, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	dc02      	bgt.n	8007fee <__sflush_r+0x1a>
 8007fe8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	dd48      	ble.n	8008080 <__sflush_r+0xac>
 8007fee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ff0:	2e00      	cmp	r6, #0
 8007ff2:	d045      	beq.n	8008080 <__sflush_r+0xac>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ffa:	682f      	ldr	r7, [r5, #0]
 8007ffc:	6a21      	ldr	r1, [r4, #32]
 8007ffe:	602b      	str	r3, [r5, #0]
 8008000:	d030      	beq.n	8008064 <__sflush_r+0x90>
 8008002:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	0759      	lsls	r1, r3, #29
 8008008:	d505      	bpl.n	8008016 <__sflush_r+0x42>
 800800a:	6863      	ldr	r3, [r4, #4]
 800800c:	1ad2      	subs	r2, r2, r3
 800800e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008010:	b10b      	cbz	r3, 8008016 <__sflush_r+0x42>
 8008012:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008014:	1ad2      	subs	r2, r2, r3
 8008016:	2300      	movs	r3, #0
 8008018:	4628      	mov	r0, r5
 800801a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800801c:	6a21      	ldr	r1, [r4, #32]
 800801e:	47b0      	blx	r6
 8008020:	1c43      	adds	r3, r0, #1
 8008022:	89a3      	ldrh	r3, [r4, #12]
 8008024:	d106      	bne.n	8008034 <__sflush_r+0x60>
 8008026:	6829      	ldr	r1, [r5, #0]
 8008028:	291d      	cmp	r1, #29
 800802a:	d82b      	bhi.n	8008084 <__sflush_r+0xb0>
 800802c:	4a28      	ldr	r2, [pc, #160]	@ (80080d0 <__sflush_r+0xfc>)
 800802e:	410a      	asrs	r2, r1
 8008030:	07d6      	lsls	r6, r2, #31
 8008032:	d427      	bmi.n	8008084 <__sflush_r+0xb0>
 8008034:	2200      	movs	r2, #0
 8008036:	6062      	str	r2, [r4, #4]
 8008038:	6922      	ldr	r2, [r4, #16]
 800803a:	04d9      	lsls	r1, r3, #19
 800803c:	6022      	str	r2, [r4, #0]
 800803e:	d504      	bpl.n	800804a <__sflush_r+0x76>
 8008040:	1c42      	adds	r2, r0, #1
 8008042:	d101      	bne.n	8008048 <__sflush_r+0x74>
 8008044:	682b      	ldr	r3, [r5, #0]
 8008046:	b903      	cbnz	r3, 800804a <__sflush_r+0x76>
 8008048:	6560      	str	r0, [r4, #84]	@ 0x54
 800804a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800804c:	602f      	str	r7, [r5, #0]
 800804e:	b1b9      	cbz	r1, 8008080 <__sflush_r+0xac>
 8008050:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008054:	4299      	cmp	r1, r3
 8008056:	d002      	beq.n	800805e <__sflush_r+0x8a>
 8008058:	4628      	mov	r0, r5
 800805a:	f7fe f901 	bl	8006260 <_free_r>
 800805e:	2300      	movs	r3, #0
 8008060:	6363      	str	r3, [r4, #52]	@ 0x34
 8008062:	e00d      	b.n	8008080 <__sflush_r+0xac>
 8008064:	2301      	movs	r3, #1
 8008066:	4628      	mov	r0, r5
 8008068:	47b0      	blx	r6
 800806a:	4602      	mov	r2, r0
 800806c:	1c50      	adds	r0, r2, #1
 800806e:	d1c9      	bne.n	8008004 <__sflush_r+0x30>
 8008070:	682b      	ldr	r3, [r5, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d0c6      	beq.n	8008004 <__sflush_r+0x30>
 8008076:	2b1d      	cmp	r3, #29
 8008078:	d001      	beq.n	800807e <__sflush_r+0xaa>
 800807a:	2b16      	cmp	r3, #22
 800807c:	d11d      	bne.n	80080ba <__sflush_r+0xe6>
 800807e:	602f      	str	r7, [r5, #0]
 8008080:	2000      	movs	r0, #0
 8008082:	e021      	b.n	80080c8 <__sflush_r+0xf4>
 8008084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008088:	b21b      	sxth	r3, r3
 800808a:	e01a      	b.n	80080c2 <__sflush_r+0xee>
 800808c:	690f      	ldr	r7, [r1, #16]
 800808e:	2f00      	cmp	r7, #0
 8008090:	d0f6      	beq.n	8008080 <__sflush_r+0xac>
 8008092:	0793      	lsls	r3, r2, #30
 8008094:	bf18      	it	ne
 8008096:	2300      	movne	r3, #0
 8008098:	680e      	ldr	r6, [r1, #0]
 800809a:	bf08      	it	eq
 800809c:	694b      	ldreq	r3, [r1, #20]
 800809e:	1bf6      	subs	r6, r6, r7
 80080a0:	600f      	str	r7, [r1, #0]
 80080a2:	608b      	str	r3, [r1, #8]
 80080a4:	2e00      	cmp	r6, #0
 80080a6:	ddeb      	ble.n	8008080 <__sflush_r+0xac>
 80080a8:	4633      	mov	r3, r6
 80080aa:	463a      	mov	r2, r7
 80080ac:	4628      	mov	r0, r5
 80080ae:	6a21      	ldr	r1, [r4, #32]
 80080b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80080b4:	47e0      	blx	ip
 80080b6:	2800      	cmp	r0, #0
 80080b8:	dc07      	bgt.n	80080ca <__sflush_r+0xf6>
 80080ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080c2:	f04f 30ff 	mov.w	r0, #4294967295
 80080c6:	81a3      	strh	r3, [r4, #12]
 80080c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ca:	4407      	add	r7, r0
 80080cc:	1a36      	subs	r6, r6, r0
 80080ce:	e7e9      	b.n	80080a4 <__sflush_r+0xd0>
 80080d0:	dfbffffe 	.word	0xdfbffffe

080080d4 <_fflush_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	690b      	ldr	r3, [r1, #16]
 80080d8:	4605      	mov	r5, r0
 80080da:	460c      	mov	r4, r1
 80080dc:	b913      	cbnz	r3, 80080e4 <_fflush_r+0x10>
 80080de:	2500      	movs	r5, #0
 80080e0:	4628      	mov	r0, r5
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	b118      	cbz	r0, 80080ee <_fflush_r+0x1a>
 80080e6:	6a03      	ldr	r3, [r0, #32]
 80080e8:	b90b      	cbnz	r3, 80080ee <_fflush_r+0x1a>
 80080ea:	f7fd f901 	bl	80052f0 <__sinit>
 80080ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d0f3      	beq.n	80080de <_fflush_r+0xa>
 80080f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80080f8:	07d0      	lsls	r0, r2, #31
 80080fa:	d404      	bmi.n	8008106 <_fflush_r+0x32>
 80080fc:	0599      	lsls	r1, r3, #22
 80080fe:	d402      	bmi.n	8008106 <_fflush_r+0x32>
 8008100:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008102:	f7fd fa38 	bl	8005576 <__retarget_lock_acquire_recursive>
 8008106:	4628      	mov	r0, r5
 8008108:	4621      	mov	r1, r4
 800810a:	f7ff ff63 	bl	8007fd4 <__sflush_r>
 800810e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008110:	4605      	mov	r5, r0
 8008112:	07da      	lsls	r2, r3, #31
 8008114:	d4e4      	bmi.n	80080e0 <_fflush_r+0xc>
 8008116:	89a3      	ldrh	r3, [r4, #12]
 8008118:	059b      	lsls	r3, r3, #22
 800811a:	d4e1      	bmi.n	80080e0 <_fflush_r+0xc>
 800811c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800811e:	f7fd fa2b 	bl	8005578 <__retarget_lock_release_recursive>
 8008122:	e7dd      	b.n	80080e0 <_fflush_r+0xc>

08008124 <__swbuf_r>:
 8008124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008126:	460e      	mov	r6, r1
 8008128:	4614      	mov	r4, r2
 800812a:	4605      	mov	r5, r0
 800812c:	b118      	cbz	r0, 8008136 <__swbuf_r+0x12>
 800812e:	6a03      	ldr	r3, [r0, #32]
 8008130:	b90b      	cbnz	r3, 8008136 <__swbuf_r+0x12>
 8008132:	f7fd f8dd 	bl	80052f0 <__sinit>
 8008136:	69a3      	ldr	r3, [r4, #24]
 8008138:	60a3      	str	r3, [r4, #8]
 800813a:	89a3      	ldrh	r3, [r4, #12]
 800813c:	071a      	lsls	r2, r3, #28
 800813e:	d501      	bpl.n	8008144 <__swbuf_r+0x20>
 8008140:	6923      	ldr	r3, [r4, #16]
 8008142:	b943      	cbnz	r3, 8008156 <__swbuf_r+0x32>
 8008144:	4621      	mov	r1, r4
 8008146:	4628      	mov	r0, r5
 8008148:	f000 f82a 	bl	80081a0 <__swsetup_r>
 800814c:	b118      	cbz	r0, 8008156 <__swbuf_r+0x32>
 800814e:	f04f 37ff 	mov.w	r7, #4294967295
 8008152:	4638      	mov	r0, r7
 8008154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	6922      	ldr	r2, [r4, #16]
 800815a:	b2f6      	uxtb	r6, r6
 800815c:	1a98      	subs	r0, r3, r2
 800815e:	6963      	ldr	r3, [r4, #20]
 8008160:	4637      	mov	r7, r6
 8008162:	4283      	cmp	r3, r0
 8008164:	dc05      	bgt.n	8008172 <__swbuf_r+0x4e>
 8008166:	4621      	mov	r1, r4
 8008168:	4628      	mov	r0, r5
 800816a:	f7ff ffb3 	bl	80080d4 <_fflush_r>
 800816e:	2800      	cmp	r0, #0
 8008170:	d1ed      	bne.n	800814e <__swbuf_r+0x2a>
 8008172:	68a3      	ldr	r3, [r4, #8]
 8008174:	3b01      	subs	r3, #1
 8008176:	60a3      	str	r3, [r4, #8]
 8008178:	6823      	ldr	r3, [r4, #0]
 800817a:	1c5a      	adds	r2, r3, #1
 800817c:	6022      	str	r2, [r4, #0]
 800817e:	701e      	strb	r6, [r3, #0]
 8008180:	6962      	ldr	r2, [r4, #20]
 8008182:	1c43      	adds	r3, r0, #1
 8008184:	429a      	cmp	r2, r3
 8008186:	d004      	beq.n	8008192 <__swbuf_r+0x6e>
 8008188:	89a3      	ldrh	r3, [r4, #12]
 800818a:	07db      	lsls	r3, r3, #31
 800818c:	d5e1      	bpl.n	8008152 <__swbuf_r+0x2e>
 800818e:	2e0a      	cmp	r6, #10
 8008190:	d1df      	bne.n	8008152 <__swbuf_r+0x2e>
 8008192:	4621      	mov	r1, r4
 8008194:	4628      	mov	r0, r5
 8008196:	f7ff ff9d 	bl	80080d4 <_fflush_r>
 800819a:	2800      	cmp	r0, #0
 800819c:	d0d9      	beq.n	8008152 <__swbuf_r+0x2e>
 800819e:	e7d6      	b.n	800814e <__swbuf_r+0x2a>

080081a0 <__swsetup_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	4b29      	ldr	r3, [pc, #164]	@ (8008248 <__swsetup_r+0xa8>)
 80081a4:	4605      	mov	r5, r0
 80081a6:	6818      	ldr	r0, [r3, #0]
 80081a8:	460c      	mov	r4, r1
 80081aa:	b118      	cbz	r0, 80081b4 <__swsetup_r+0x14>
 80081ac:	6a03      	ldr	r3, [r0, #32]
 80081ae:	b90b      	cbnz	r3, 80081b4 <__swsetup_r+0x14>
 80081b0:	f7fd f89e 	bl	80052f0 <__sinit>
 80081b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081b8:	0719      	lsls	r1, r3, #28
 80081ba:	d422      	bmi.n	8008202 <__swsetup_r+0x62>
 80081bc:	06da      	lsls	r2, r3, #27
 80081be:	d407      	bmi.n	80081d0 <__swsetup_r+0x30>
 80081c0:	2209      	movs	r2, #9
 80081c2:	602a      	str	r2, [r5, #0]
 80081c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081c8:	f04f 30ff 	mov.w	r0, #4294967295
 80081cc:	81a3      	strh	r3, [r4, #12]
 80081ce:	e033      	b.n	8008238 <__swsetup_r+0x98>
 80081d0:	0758      	lsls	r0, r3, #29
 80081d2:	d512      	bpl.n	80081fa <__swsetup_r+0x5a>
 80081d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081d6:	b141      	cbz	r1, 80081ea <__swsetup_r+0x4a>
 80081d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081dc:	4299      	cmp	r1, r3
 80081de:	d002      	beq.n	80081e6 <__swsetup_r+0x46>
 80081e0:	4628      	mov	r0, r5
 80081e2:	f7fe f83d 	bl	8006260 <_free_r>
 80081e6:	2300      	movs	r3, #0
 80081e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80081ea:	89a3      	ldrh	r3, [r4, #12]
 80081ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80081f0:	81a3      	strh	r3, [r4, #12]
 80081f2:	2300      	movs	r3, #0
 80081f4:	6063      	str	r3, [r4, #4]
 80081f6:	6923      	ldr	r3, [r4, #16]
 80081f8:	6023      	str	r3, [r4, #0]
 80081fa:	89a3      	ldrh	r3, [r4, #12]
 80081fc:	f043 0308 	orr.w	r3, r3, #8
 8008200:	81a3      	strh	r3, [r4, #12]
 8008202:	6923      	ldr	r3, [r4, #16]
 8008204:	b94b      	cbnz	r3, 800821a <__swsetup_r+0x7a>
 8008206:	89a3      	ldrh	r3, [r4, #12]
 8008208:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800820c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008210:	d003      	beq.n	800821a <__swsetup_r+0x7a>
 8008212:	4621      	mov	r1, r4
 8008214:	4628      	mov	r0, r5
 8008216:	f000 fc30 	bl	8008a7a <__smakebuf_r>
 800821a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800821e:	f013 0201 	ands.w	r2, r3, #1
 8008222:	d00a      	beq.n	800823a <__swsetup_r+0x9a>
 8008224:	2200      	movs	r2, #0
 8008226:	60a2      	str	r2, [r4, #8]
 8008228:	6962      	ldr	r2, [r4, #20]
 800822a:	4252      	negs	r2, r2
 800822c:	61a2      	str	r2, [r4, #24]
 800822e:	6922      	ldr	r2, [r4, #16]
 8008230:	b942      	cbnz	r2, 8008244 <__swsetup_r+0xa4>
 8008232:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008236:	d1c5      	bne.n	80081c4 <__swsetup_r+0x24>
 8008238:	bd38      	pop	{r3, r4, r5, pc}
 800823a:	0799      	lsls	r1, r3, #30
 800823c:	bf58      	it	pl
 800823e:	6962      	ldrpl	r2, [r4, #20]
 8008240:	60a2      	str	r2, [r4, #8]
 8008242:	e7f4      	b.n	800822e <__swsetup_r+0x8e>
 8008244:	2000      	movs	r0, #0
 8008246:	e7f7      	b.n	8008238 <__swsetup_r+0x98>
 8008248:	20000024 	.word	0x20000024

0800824c <strncmp>:
 800824c:	b510      	push	{r4, lr}
 800824e:	b16a      	cbz	r2, 800826c <strncmp+0x20>
 8008250:	3901      	subs	r1, #1
 8008252:	1884      	adds	r4, r0, r2
 8008254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008258:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800825c:	429a      	cmp	r2, r3
 800825e:	d103      	bne.n	8008268 <strncmp+0x1c>
 8008260:	42a0      	cmp	r0, r4
 8008262:	d001      	beq.n	8008268 <strncmp+0x1c>
 8008264:	2a00      	cmp	r2, #0
 8008266:	d1f5      	bne.n	8008254 <strncmp+0x8>
 8008268:	1ad0      	subs	r0, r2, r3
 800826a:	bd10      	pop	{r4, pc}
 800826c:	4610      	mov	r0, r2
 800826e:	e7fc      	b.n	800826a <strncmp+0x1e>

08008270 <_sbrk_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	2300      	movs	r3, #0
 8008274:	4d05      	ldr	r5, [pc, #20]	@ (800828c <_sbrk_r+0x1c>)
 8008276:	4604      	mov	r4, r0
 8008278:	4608      	mov	r0, r1
 800827a:	602b      	str	r3, [r5, #0]
 800827c:	f7f9 fa58 	bl	8001730 <_sbrk>
 8008280:	1c43      	adds	r3, r0, #1
 8008282:	d102      	bne.n	800828a <_sbrk_r+0x1a>
 8008284:	682b      	ldr	r3, [r5, #0]
 8008286:	b103      	cbz	r3, 800828a <_sbrk_r+0x1a>
 8008288:	6023      	str	r3, [r4, #0]
 800828a:	bd38      	pop	{r3, r4, r5, pc}
 800828c:	2000048c 	.word	0x2000048c

08008290 <nan>:
 8008290:	2000      	movs	r0, #0
 8008292:	4901      	ldr	r1, [pc, #4]	@ (8008298 <nan+0x8>)
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	7ff80000 	.word	0x7ff80000

0800829c <__assert_func>:
 800829c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800829e:	4614      	mov	r4, r2
 80082a0:	461a      	mov	r2, r3
 80082a2:	4b09      	ldr	r3, [pc, #36]	@ (80082c8 <__assert_func+0x2c>)
 80082a4:	4605      	mov	r5, r0
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68d8      	ldr	r0, [r3, #12]
 80082aa:	b954      	cbnz	r4, 80082c2 <__assert_func+0x26>
 80082ac:	4b07      	ldr	r3, [pc, #28]	@ (80082cc <__assert_func+0x30>)
 80082ae:	461c      	mov	r4, r3
 80082b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082b4:	9100      	str	r1, [sp, #0]
 80082b6:	462b      	mov	r3, r5
 80082b8:	4905      	ldr	r1, [pc, #20]	@ (80082d0 <__assert_func+0x34>)
 80082ba:	f000 fba7 	bl	8008a0c <fiprintf>
 80082be:	f000 fc3b 	bl	8008b38 <abort>
 80082c2:	4b04      	ldr	r3, [pc, #16]	@ (80082d4 <__assert_func+0x38>)
 80082c4:	e7f4      	b.n	80082b0 <__assert_func+0x14>
 80082c6:	bf00      	nop
 80082c8:	20000024 	.word	0x20000024
 80082cc:	08009065 	.word	0x08009065
 80082d0:	08009037 	.word	0x08009037
 80082d4:	0800902a 	.word	0x0800902a

080082d8 <_calloc_r>:
 80082d8:	b570      	push	{r4, r5, r6, lr}
 80082da:	fba1 5402 	umull	r5, r4, r1, r2
 80082de:	b93c      	cbnz	r4, 80082f0 <_calloc_r+0x18>
 80082e0:	4629      	mov	r1, r5
 80082e2:	f7fe f82f 	bl	8006344 <_malloc_r>
 80082e6:	4606      	mov	r6, r0
 80082e8:	b928      	cbnz	r0, 80082f6 <_calloc_r+0x1e>
 80082ea:	2600      	movs	r6, #0
 80082ec:	4630      	mov	r0, r6
 80082ee:	bd70      	pop	{r4, r5, r6, pc}
 80082f0:	220c      	movs	r2, #12
 80082f2:	6002      	str	r2, [r0, #0]
 80082f4:	e7f9      	b.n	80082ea <_calloc_r+0x12>
 80082f6:	462a      	mov	r2, r5
 80082f8:	4621      	mov	r1, r4
 80082fa:	f7fd f8be 	bl	800547a <memset>
 80082fe:	e7f5      	b.n	80082ec <_calloc_r+0x14>

08008300 <rshift>:
 8008300:	6903      	ldr	r3, [r0, #16]
 8008302:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008306:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800830a:	f100 0414 	add.w	r4, r0, #20
 800830e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008312:	dd46      	ble.n	80083a2 <rshift+0xa2>
 8008314:	f011 011f 	ands.w	r1, r1, #31
 8008318:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800831c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008320:	d10c      	bne.n	800833c <rshift+0x3c>
 8008322:	4629      	mov	r1, r5
 8008324:	f100 0710 	add.w	r7, r0, #16
 8008328:	42b1      	cmp	r1, r6
 800832a:	d335      	bcc.n	8008398 <rshift+0x98>
 800832c:	1a9b      	subs	r3, r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	1eea      	subs	r2, r5, #3
 8008332:	4296      	cmp	r6, r2
 8008334:	bf38      	it	cc
 8008336:	2300      	movcc	r3, #0
 8008338:	4423      	add	r3, r4
 800833a:	e015      	b.n	8008368 <rshift+0x68>
 800833c:	46a1      	mov	r9, r4
 800833e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008342:	f1c1 0820 	rsb	r8, r1, #32
 8008346:	40cf      	lsrs	r7, r1
 8008348:	f105 0e04 	add.w	lr, r5, #4
 800834c:	4576      	cmp	r6, lr
 800834e:	46f4      	mov	ip, lr
 8008350:	d816      	bhi.n	8008380 <rshift+0x80>
 8008352:	1a9a      	subs	r2, r3, r2
 8008354:	0092      	lsls	r2, r2, #2
 8008356:	3a04      	subs	r2, #4
 8008358:	3501      	adds	r5, #1
 800835a:	42ae      	cmp	r6, r5
 800835c:	bf38      	it	cc
 800835e:	2200      	movcc	r2, #0
 8008360:	18a3      	adds	r3, r4, r2
 8008362:	50a7      	str	r7, [r4, r2]
 8008364:	b107      	cbz	r7, 8008368 <rshift+0x68>
 8008366:	3304      	adds	r3, #4
 8008368:	42a3      	cmp	r3, r4
 800836a:	eba3 0204 	sub.w	r2, r3, r4
 800836e:	bf08      	it	eq
 8008370:	2300      	moveq	r3, #0
 8008372:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008376:	6102      	str	r2, [r0, #16]
 8008378:	bf08      	it	eq
 800837a:	6143      	streq	r3, [r0, #20]
 800837c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008380:	f8dc c000 	ldr.w	ip, [ip]
 8008384:	fa0c fc08 	lsl.w	ip, ip, r8
 8008388:	ea4c 0707 	orr.w	r7, ip, r7
 800838c:	f849 7b04 	str.w	r7, [r9], #4
 8008390:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008394:	40cf      	lsrs	r7, r1
 8008396:	e7d9      	b.n	800834c <rshift+0x4c>
 8008398:	f851 cb04 	ldr.w	ip, [r1], #4
 800839c:	f847 cf04 	str.w	ip, [r7, #4]!
 80083a0:	e7c2      	b.n	8008328 <rshift+0x28>
 80083a2:	4623      	mov	r3, r4
 80083a4:	e7e0      	b.n	8008368 <rshift+0x68>

080083a6 <__hexdig_fun>:
 80083a6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80083aa:	2b09      	cmp	r3, #9
 80083ac:	d802      	bhi.n	80083b4 <__hexdig_fun+0xe>
 80083ae:	3820      	subs	r0, #32
 80083b0:	b2c0      	uxtb	r0, r0
 80083b2:	4770      	bx	lr
 80083b4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80083b8:	2b05      	cmp	r3, #5
 80083ba:	d801      	bhi.n	80083c0 <__hexdig_fun+0x1a>
 80083bc:	3847      	subs	r0, #71	@ 0x47
 80083be:	e7f7      	b.n	80083b0 <__hexdig_fun+0xa>
 80083c0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80083c4:	2b05      	cmp	r3, #5
 80083c6:	d801      	bhi.n	80083cc <__hexdig_fun+0x26>
 80083c8:	3827      	subs	r0, #39	@ 0x27
 80083ca:	e7f1      	b.n	80083b0 <__hexdig_fun+0xa>
 80083cc:	2000      	movs	r0, #0
 80083ce:	4770      	bx	lr

080083d0 <__gethex>:
 80083d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d4:	468a      	mov	sl, r1
 80083d6:	4690      	mov	r8, r2
 80083d8:	b085      	sub	sp, #20
 80083da:	9302      	str	r3, [sp, #8]
 80083dc:	680b      	ldr	r3, [r1, #0]
 80083de:	9001      	str	r0, [sp, #4]
 80083e0:	1c9c      	adds	r4, r3, #2
 80083e2:	46a1      	mov	r9, r4
 80083e4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80083e8:	2830      	cmp	r0, #48	@ 0x30
 80083ea:	d0fa      	beq.n	80083e2 <__gethex+0x12>
 80083ec:	eba9 0303 	sub.w	r3, r9, r3
 80083f0:	f1a3 0b02 	sub.w	fp, r3, #2
 80083f4:	f7ff ffd7 	bl	80083a6 <__hexdig_fun>
 80083f8:	4605      	mov	r5, r0
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d168      	bne.n	80084d0 <__gethex+0x100>
 80083fe:	2201      	movs	r2, #1
 8008400:	4648      	mov	r0, r9
 8008402:	499f      	ldr	r1, [pc, #636]	@ (8008680 <__gethex+0x2b0>)
 8008404:	f7ff ff22 	bl	800824c <strncmp>
 8008408:	4607      	mov	r7, r0
 800840a:	2800      	cmp	r0, #0
 800840c:	d167      	bne.n	80084de <__gethex+0x10e>
 800840e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008412:	4626      	mov	r6, r4
 8008414:	f7ff ffc7 	bl	80083a6 <__hexdig_fun>
 8008418:	2800      	cmp	r0, #0
 800841a:	d062      	beq.n	80084e2 <__gethex+0x112>
 800841c:	4623      	mov	r3, r4
 800841e:	7818      	ldrb	r0, [r3, #0]
 8008420:	4699      	mov	r9, r3
 8008422:	2830      	cmp	r0, #48	@ 0x30
 8008424:	f103 0301 	add.w	r3, r3, #1
 8008428:	d0f9      	beq.n	800841e <__gethex+0x4e>
 800842a:	f7ff ffbc 	bl	80083a6 <__hexdig_fun>
 800842e:	fab0 f580 	clz	r5, r0
 8008432:	f04f 0b01 	mov.w	fp, #1
 8008436:	096d      	lsrs	r5, r5, #5
 8008438:	464a      	mov	r2, r9
 800843a:	4616      	mov	r6, r2
 800843c:	7830      	ldrb	r0, [r6, #0]
 800843e:	3201      	adds	r2, #1
 8008440:	f7ff ffb1 	bl	80083a6 <__hexdig_fun>
 8008444:	2800      	cmp	r0, #0
 8008446:	d1f8      	bne.n	800843a <__gethex+0x6a>
 8008448:	2201      	movs	r2, #1
 800844a:	4630      	mov	r0, r6
 800844c:	498c      	ldr	r1, [pc, #560]	@ (8008680 <__gethex+0x2b0>)
 800844e:	f7ff fefd 	bl	800824c <strncmp>
 8008452:	2800      	cmp	r0, #0
 8008454:	d13f      	bne.n	80084d6 <__gethex+0x106>
 8008456:	b944      	cbnz	r4, 800846a <__gethex+0x9a>
 8008458:	1c74      	adds	r4, r6, #1
 800845a:	4622      	mov	r2, r4
 800845c:	4616      	mov	r6, r2
 800845e:	7830      	ldrb	r0, [r6, #0]
 8008460:	3201      	adds	r2, #1
 8008462:	f7ff ffa0 	bl	80083a6 <__hexdig_fun>
 8008466:	2800      	cmp	r0, #0
 8008468:	d1f8      	bne.n	800845c <__gethex+0x8c>
 800846a:	1ba4      	subs	r4, r4, r6
 800846c:	00a7      	lsls	r7, r4, #2
 800846e:	7833      	ldrb	r3, [r6, #0]
 8008470:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008474:	2b50      	cmp	r3, #80	@ 0x50
 8008476:	d13e      	bne.n	80084f6 <__gethex+0x126>
 8008478:	7873      	ldrb	r3, [r6, #1]
 800847a:	2b2b      	cmp	r3, #43	@ 0x2b
 800847c:	d033      	beq.n	80084e6 <__gethex+0x116>
 800847e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008480:	d034      	beq.n	80084ec <__gethex+0x11c>
 8008482:	2400      	movs	r4, #0
 8008484:	1c71      	adds	r1, r6, #1
 8008486:	7808      	ldrb	r0, [r1, #0]
 8008488:	f7ff ff8d 	bl	80083a6 <__hexdig_fun>
 800848c:	1e43      	subs	r3, r0, #1
 800848e:	b2db      	uxtb	r3, r3
 8008490:	2b18      	cmp	r3, #24
 8008492:	d830      	bhi.n	80084f6 <__gethex+0x126>
 8008494:	f1a0 0210 	sub.w	r2, r0, #16
 8008498:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800849c:	f7ff ff83 	bl	80083a6 <__hexdig_fun>
 80084a0:	f100 3cff 	add.w	ip, r0, #4294967295
 80084a4:	fa5f fc8c 	uxtb.w	ip, ip
 80084a8:	f1bc 0f18 	cmp.w	ip, #24
 80084ac:	f04f 030a 	mov.w	r3, #10
 80084b0:	d91e      	bls.n	80084f0 <__gethex+0x120>
 80084b2:	b104      	cbz	r4, 80084b6 <__gethex+0xe6>
 80084b4:	4252      	negs	r2, r2
 80084b6:	4417      	add	r7, r2
 80084b8:	f8ca 1000 	str.w	r1, [sl]
 80084bc:	b1ed      	cbz	r5, 80084fa <__gethex+0x12a>
 80084be:	f1bb 0f00 	cmp.w	fp, #0
 80084c2:	bf0c      	ite	eq
 80084c4:	2506      	moveq	r5, #6
 80084c6:	2500      	movne	r5, #0
 80084c8:	4628      	mov	r0, r5
 80084ca:	b005      	add	sp, #20
 80084cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d0:	2500      	movs	r5, #0
 80084d2:	462c      	mov	r4, r5
 80084d4:	e7b0      	b.n	8008438 <__gethex+0x68>
 80084d6:	2c00      	cmp	r4, #0
 80084d8:	d1c7      	bne.n	800846a <__gethex+0x9a>
 80084da:	4627      	mov	r7, r4
 80084dc:	e7c7      	b.n	800846e <__gethex+0x9e>
 80084de:	464e      	mov	r6, r9
 80084e0:	462f      	mov	r7, r5
 80084e2:	2501      	movs	r5, #1
 80084e4:	e7c3      	b.n	800846e <__gethex+0x9e>
 80084e6:	2400      	movs	r4, #0
 80084e8:	1cb1      	adds	r1, r6, #2
 80084ea:	e7cc      	b.n	8008486 <__gethex+0xb6>
 80084ec:	2401      	movs	r4, #1
 80084ee:	e7fb      	b.n	80084e8 <__gethex+0x118>
 80084f0:	fb03 0002 	mla	r0, r3, r2, r0
 80084f4:	e7ce      	b.n	8008494 <__gethex+0xc4>
 80084f6:	4631      	mov	r1, r6
 80084f8:	e7de      	b.n	80084b8 <__gethex+0xe8>
 80084fa:	4629      	mov	r1, r5
 80084fc:	eba6 0309 	sub.w	r3, r6, r9
 8008500:	3b01      	subs	r3, #1
 8008502:	2b07      	cmp	r3, #7
 8008504:	dc0a      	bgt.n	800851c <__gethex+0x14c>
 8008506:	9801      	ldr	r0, [sp, #4]
 8008508:	f7fd ffa8 	bl	800645c <_Balloc>
 800850c:	4604      	mov	r4, r0
 800850e:	b940      	cbnz	r0, 8008522 <__gethex+0x152>
 8008510:	4602      	mov	r2, r0
 8008512:	21e4      	movs	r1, #228	@ 0xe4
 8008514:	4b5b      	ldr	r3, [pc, #364]	@ (8008684 <__gethex+0x2b4>)
 8008516:	485c      	ldr	r0, [pc, #368]	@ (8008688 <__gethex+0x2b8>)
 8008518:	f7ff fec0 	bl	800829c <__assert_func>
 800851c:	3101      	adds	r1, #1
 800851e:	105b      	asrs	r3, r3, #1
 8008520:	e7ef      	b.n	8008502 <__gethex+0x132>
 8008522:	2300      	movs	r3, #0
 8008524:	f100 0a14 	add.w	sl, r0, #20
 8008528:	4655      	mov	r5, sl
 800852a:	469b      	mov	fp, r3
 800852c:	45b1      	cmp	r9, r6
 800852e:	d337      	bcc.n	80085a0 <__gethex+0x1d0>
 8008530:	f845 bb04 	str.w	fp, [r5], #4
 8008534:	eba5 050a 	sub.w	r5, r5, sl
 8008538:	10ad      	asrs	r5, r5, #2
 800853a:	6125      	str	r5, [r4, #16]
 800853c:	4658      	mov	r0, fp
 800853e:	f7fe f87f 	bl	8006640 <__hi0bits>
 8008542:	016d      	lsls	r5, r5, #5
 8008544:	f8d8 6000 	ldr.w	r6, [r8]
 8008548:	1a2d      	subs	r5, r5, r0
 800854a:	42b5      	cmp	r5, r6
 800854c:	dd54      	ble.n	80085f8 <__gethex+0x228>
 800854e:	1bad      	subs	r5, r5, r6
 8008550:	4629      	mov	r1, r5
 8008552:	4620      	mov	r0, r4
 8008554:	f7fe fc07 	bl	8006d66 <__any_on>
 8008558:	4681      	mov	r9, r0
 800855a:	b178      	cbz	r0, 800857c <__gethex+0x1ac>
 800855c:	f04f 0901 	mov.w	r9, #1
 8008560:	1e6b      	subs	r3, r5, #1
 8008562:	1159      	asrs	r1, r3, #5
 8008564:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008568:	f003 021f 	and.w	r2, r3, #31
 800856c:	fa09 f202 	lsl.w	r2, r9, r2
 8008570:	420a      	tst	r2, r1
 8008572:	d003      	beq.n	800857c <__gethex+0x1ac>
 8008574:	454b      	cmp	r3, r9
 8008576:	dc36      	bgt.n	80085e6 <__gethex+0x216>
 8008578:	f04f 0902 	mov.w	r9, #2
 800857c:	4629      	mov	r1, r5
 800857e:	4620      	mov	r0, r4
 8008580:	f7ff febe 	bl	8008300 <rshift>
 8008584:	442f      	add	r7, r5
 8008586:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800858a:	42bb      	cmp	r3, r7
 800858c:	da42      	bge.n	8008614 <__gethex+0x244>
 800858e:	4621      	mov	r1, r4
 8008590:	9801      	ldr	r0, [sp, #4]
 8008592:	f7fd ffa3 	bl	80064dc <_Bfree>
 8008596:	2300      	movs	r3, #0
 8008598:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800859a:	25a3      	movs	r5, #163	@ 0xa3
 800859c:	6013      	str	r3, [r2, #0]
 800859e:	e793      	b.n	80084c8 <__gethex+0xf8>
 80085a0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80085a4:	2a2e      	cmp	r2, #46	@ 0x2e
 80085a6:	d012      	beq.n	80085ce <__gethex+0x1fe>
 80085a8:	2b20      	cmp	r3, #32
 80085aa:	d104      	bne.n	80085b6 <__gethex+0x1e6>
 80085ac:	f845 bb04 	str.w	fp, [r5], #4
 80085b0:	f04f 0b00 	mov.w	fp, #0
 80085b4:	465b      	mov	r3, fp
 80085b6:	7830      	ldrb	r0, [r6, #0]
 80085b8:	9303      	str	r3, [sp, #12]
 80085ba:	f7ff fef4 	bl	80083a6 <__hexdig_fun>
 80085be:	9b03      	ldr	r3, [sp, #12]
 80085c0:	f000 000f 	and.w	r0, r0, #15
 80085c4:	4098      	lsls	r0, r3
 80085c6:	ea4b 0b00 	orr.w	fp, fp, r0
 80085ca:	3304      	adds	r3, #4
 80085cc:	e7ae      	b.n	800852c <__gethex+0x15c>
 80085ce:	45b1      	cmp	r9, r6
 80085d0:	d8ea      	bhi.n	80085a8 <__gethex+0x1d8>
 80085d2:	2201      	movs	r2, #1
 80085d4:	4630      	mov	r0, r6
 80085d6:	492a      	ldr	r1, [pc, #168]	@ (8008680 <__gethex+0x2b0>)
 80085d8:	9303      	str	r3, [sp, #12]
 80085da:	f7ff fe37 	bl	800824c <strncmp>
 80085de:	9b03      	ldr	r3, [sp, #12]
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d1e1      	bne.n	80085a8 <__gethex+0x1d8>
 80085e4:	e7a2      	b.n	800852c <__gethex+0x15c>
 80085e6:	4620      	mov	r0, r4
 80085e8:	1ea9      	subs	r1, r5, #2
 80085ea:	f7fe fbbc 	bl	8006d66 <__any_on>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d0c2      	beq.n	8008578 <__gethex+0x1a8>
 80085f2:	f04f 0903 	mov.w	r9, #3
 80085f6:	e7c1      	b.n	800857c <__gethex+0x1ac>
 80085f8:	da09      	bge.n	800860e <__gethex+0x23e>
 80085fa:	1b75      	subs	r5, r6, r5
 80085fc:	4621      	mov	r1, r4
 80085fe:	462a      	mov	r2, r5
 8008600:	9801      	ldr	r0, [sp, #4]
 8008602:	f7fe f981 	bl	8006908 <__lshift>
 8008606:	4604      	mov	r4, r0
 8008608:	1b7f      	subs	r7, r7, r5
 800860a:	f100 0a14 	add.w	sl, r0, #20
 800860e:	f04f 0900 	mov.w	r9, #0
 8008612:	e7b8      	b.n	8008586 <__gethex+0x1b6>
 8008614:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008618:	42bd      	cmp	r5, r7
 800861a:	dd6f      	ble.n	80086fc <__gethex+0x32c>
 800861c:	1bed      	subs	r5, r5, r7
 800861e:	42ae      	cmp	r6, r5
 8008620:	dc34      	bgt.n	800868c <__gethex+0x2bc>
 8008622:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008626:	2b02      	cmp	r3, #2
 8008628:	d022      	beq.n	8008670 <__gethex+0x2a0>
 800862a:	2b03      	cmp	r3, #3
 800862c:	d024      	beq.n	8008678 <__gethex+0x2a8>
 800862e:	2b01      	cmp	r3, #1
 8008630:	d115      	bne.n	800865e <__gethex+0x28e>
 8008632:	42ae      	cmp	r6, r5
 8008634:	d113      	bne.n	800865e <__gethex+0x28e>
 8008636:	2e01      	cmp	r6, #1
 8008638:	d10b      	bne.n	8008652 <__gethex+0x282>
 800863a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800863e:	9a02      	ldr	r2, [sp, #8]
 8008640:	2562      	movs	r5, #98	@ 0x62
 8008642:	6013      	str	r3, [r2, #0]
 8008644:	2301      	movs	r3, #1
 8008646:	6123      	str	r3, [r4, #16]
 8008648:	f8ca 3000 	str.w	r3, [sl]
 800864c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800864e:	601c      	str	r4, [r3, #0]
 8008650:	e73a      	b.n	80084c8 <__gethex+0xf8>
 8008652:	4620      	mov	r0, r4
 8008654:	1e71      	subs	r1, r6, #1
 8008656:	f7fe fb86 	bl	8006d66 <__any_on>
 800865a:	2800      	cmp	r0, #0
 800865c:	d1ed      	bne.n	800863a <__gethex+0x26a>
 800865e:	4621      	mov	r1, r4
 8008660:	9801      	ldr	r0, [sp, #4]
 8008662:	f7fd ff3b 	bl	80064dc <_Bfree>
 8008666:	2300      	movs	r3, #0
 8008668:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800866a:	2550      	movs	r5, #80	@ 0x50
 800866c:	6013      	str	r3, [r2, #0]
 800866e:	e72b      	b.n	80084c8 <__gethex+0xf8>
 8008670:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1f3      	bne.n	800865e <__gethex+0x28e>
 8008676:	e7e0      	b.n	800863a <__gethex+0x26a>
 8008678:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1dd      	bne.n	800863a <__gethex+0x26a>
 800867e:	e7ee      	b.n	800865e <__gethex+0x28e>
 8008680:	08008eb8 	.word	0x08008eb8
 8008684:	08008d4b 	.word	0x08008d4b
 8008688:	08009066 	.word	0x08009066
 800868c:	1e6f      	subs	r7, r5, #1
 800868e:	f1b9 0f00 	cmp.w	r9, #0
 8008692:	d130      	bne.n	80086f6 <__gethex+0x326>
 8008694:	b127      	cbz	r7, 80086a0 <__gethex+0x2d0>
 8008696:	4639      	mov	r1, r7
 8008698:	4620      	mov	r0, r4
 800869a:	f7fe fb64 	bl	8006d66 <__any_on>
 800869e:	4681      	mov	r9, r0
 80086a0:	2301      	movs	r3, #1
 80086a2:	4629      	mov	r1, r5
 80086a4:	1b76      	subs	r6, r6, r5
 80086a6:	2502      	movs	r5, #2
 80086a8:	117a      	asrs	r2, r7, #5
 80086aa:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80086ae:	f007 071f 	and.w	r7, r7, #31
 80086b2:	40bb      	lsls	r3, r7
 80086b4:	4213      	tst	r3, r2
 80086b6:	4620      	mov	r0, r4
 80086b8:	bf18      	it	ne
 80086ba:	f049 0902 	orrne.w	r9, r9, #2
 80086be:	f7ff fe1f 	bl	8008300 <rshift>
 80086c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80086c6:	f1b9 0f00 	cmp.w	r9, #0
 80086ca:	d047      	beq.n	800875c <__gethex+0x38c>
 80086cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d015      	beq.n	8008700 <__gethex+0x330>
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d017      	beq.n	8008708 <__gethex+0x338>
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d109      	bne.n	80086f0 <__gethex+0x320>
 80086dc:	f019 0f02 	tst.w	r9, #2
 80086e0:	d006      	beq.n	80086f0 <__gethex+0x320>
 80086e2:	f8da 3000 	ldr.w	r3, [sl]
 80086e6:	ea49 0903 	orr.w	r9, r9, r3
 80086ea:	f019 0f01 	tst.w	r9, #1
 80086ee:	d10e      	bne.n	800870e <__gethex+0x33e>
 80086f0:	f045 0510 	orr.w	r5, r5, #16
 80086f4:	e032      	b.n	800875c <__gethex+0x38c>
 80086f6:	f04f 0901 	mov.w	r9, #1
 80086fa:	e7d1      	b.n	80086a0 <__gethex+0x2d0>
 80086fc:	2501      	movs	r5, #1
 80086fe:	e7e2      	b.n	80086c6 <__gethex+0x2f6>
 8008700:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008702:	f1c3 0301 	rsb	r3, r3, #1
 8008706:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008708:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800870a:	2b00      	cmp	r3, #0
 800870c:	d0f0      	beq.n	80086f0 <__gethex+0x320>
 800870e:	f04f 0c00 	mov.w	ip, #0
 8008712:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008716:	f104 0314 	add.w	r3, r4, #20
 800871a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800871e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008722:	4618      	mov	r0, r3
 8008724:	f853 2b04 	ldr.w	r2, [r3], #4
 8008728:	f1b2 3fff 	cmp.w	r2, #4294967295
 800872c:	d01b      	beq.n	8008766 <__gethex+0x396>
 800872e:	3201      	adds	r2, #1
 8008730:	6002      	str	r2, [r0, #0]
 8008732:	2d02      	cmp	r5, #2
 8008734:	f104 0314 	add.w	r3, r4, #20
 8008738:	d13c      	bne.n	80087b4 <__gethex+0x3e4>
 800873a:	f8d8 2000 	ldr.w	r2, [r8]
 800873e:	3a01      	subs	r2, #1
 8008740:	42b2      	cmp	r2, r6
 8008742:	d109      	bne.n	8008758 <__gethex+0x388>
 8008744:	2201      	movs	r2, #1
 8008746:	1171      	asrs	r1, r6, #5
 8008748:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800874c:	f006 061f 	and.w	r6, r6, #31
 8008750:	fa02 f606 	lsl.w	r6, r2, r6
 8008754:	421e      	tst	r6, r3
 8008756:	d13a      	bne.n	80087ce <__gethex+0x3fe>
 8008758:	f045 0520 	orr.w	r5, r5, #32
 800875c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800875e:	601c      	str	r4, [r3, #0]
 8008760:	9b02      	ldr	r3, [sp, #8]
 8008762:	601f      	str	r7, [r3, #0]
 8008764:	e6b0      	b.n	80084c8 <__gethex+0xf8>
 8008766:	4299      	cmp	r1, r3
 8008768:	f843 cc04 	str.w	ip, [r3, #-4]
 800876c:	d8d9      	bhi.n	8008722 <__gethex+0x352>
 800876e:	68a3      	ldr	r3, [r4, #8]
 8008770:	459b      	cmp	fp, r3
 8008772:	db17      	blt.n	80087a4 <__gethex+0x3d4>
 8008774:	6861      	ldr	r1, [r4, #4]
 8008776:	9801      	ldr	r0, [sp, #4]
 8008778:	3101      	adds	r1, #1
 800877a:	f7fd fe6f 	bl	800645c <_Balloc>
 800877e:	4681      	mov	r9, r0
 8008780:	b918      	cbnz	r0, 800878a <__gethex+0x3ba>
 8008782:	4602      	mov	r2, r0
 8008784:	2184      	movs	r1, #132	@ 0x84
 8008786:	4b19      	ldr	r3, [pc, #100]	@ (80087ec <__gethex+0x41c>)
 8008788:	e6c5      	b.n	8008516 <__gethex+0x146>
 800878a:	6922      	ldr	r2, [r4, #16]
 800878c:	f104 010c 	add.w	r1, r4, #12
 8008790:	3202      	adds	r2, #2
 8008792:	0092      	lsls	r2, r2, #2
 8008794:	300c      	adds	r0, #12
 8008796:	f7fc fefe 	bl	8005596 <memcpy>
 800879a:	4621      	mov	r1, r4
 800879c:	9801      	ldr	r0, [sp, #4]
 800879e:	f7fd fe9d 	bl	80064dc <_Bfree>
 80087a2:	464c      	mov	r4, r9
 80087a4:	6923      	ldr	r3, [r4, #16]
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	6122      	str	r2, [r4, #16]
 80087aa:	2201      	movs	r2, #1
 80087ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80087b0:	615a      	str	r2, [r3, #20]
 80087b2:	e7be      	b.n	8008732 <__gethex+0x362>
 80087b4:	6922      	ldr	r2, [r4, #16]
 80087b6:	455a      	cmp	r2, fp
 80087b8:	dd0b      	ble.n	80087d2 <__gethex+0x402>
 80087ba:	2101      	movs	r1, #1
 80087bc:	4620      	mov	r0, r4
 80087be:	f7ff fd9f 	bl	8008300 <rshift>
 80087c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80087c6:	3701      	adds	r7, #1
 80087c8:	42bb      	cmp	r3, r7
 80087ca:	f6ff aee0 	blt.w	800858e <__gethex+0x1be>
 80087ce:	2501      	movs	r5, #1
 80087d0:	e7c2      	b.n	8008758 <__gethex+0x388>
 80087d2:	f016 061f 	ands.w	r6, r6, #31
 80087d6:	d0fa      	beq.n	80087ce <__gethex+0x3fe>
 80087d8:	4453      	add	r3, sl
 80087da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80087de:	f7fd ff2f 	bl	8006640 <__hi0bits>
 80087e2:	f1c6 0620 	rsb	r6, r6, #32
 80087e6:	42b0      	cmp	r0, r6
 80087e8:	dbe7      	blt.n	80087ba <__gethex+0x3ea>
 80087ea:	e7f0      	b.n	80087ce <__gethex+0x3fe>
 80087ec:	08008d4b 	.word	0x08008d4b

080087f0 <L_shift>:
 80087f0:	f1c2 0208 	rsb	r2, r2, #8
 80087f4:	0092      	lsls	r2, r2, #2
 80087f6:	b570      	push	{r4, r5, r6, lr}
 80087f8:	f1c2 0620 	rsb	r6, r2, #32
 80087fc:	6843      	ldr	r3, [r0, #4]
 80087fe:	6804      	ldr	r4, [r0, #0]
 8008800:	fa03 f506 	lsl.w	r5, r3, r6
 8008804:	432c      	orrs	r4, r5
 8008806:	40d3      	lsrs	r3, r2
 8008808:	6004      	str	r4, [r0, #0]
 800880a:	f840 3f04 	str.w	r3, [r0, #4]!
 800880e:	4288      	cmp	r0, r1
 8008810:	d3f4      	bcc.n	80087fc <L_shift+0xc>
 8008812:	bd70      	pop	{r4, r5, r6, pc}

08008814 <__match>:
 8008814:	b530      	push	{r4, r5, lr}
 8008816:	6803      	ldr	r3, [r0, #0]
 8008818:	3301      	adds	r3, #1
 800881a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800881e:	b914      	cbnz	r4, 8008826 <__match+0x12>
 8008820:	6003      	str	r3, [r0, #0]
 8008822:	2001      	movs	r0, #1
 8008824:	bd30      	pop	{r4, r5, pc}
 8008826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800882a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800882e:	2d19      	cmp	r5, #25
 8008830:	bf98      	it	ls
 8008832:	3220      	addls	r2, #32
 8008834:	42a2      	cmp	r2, r4
 8008836:	d0f0      	beq.n	800881a <__match+0x6>
 8008838:	2000      	movs	r0, #0
 800883a:	e7f3      	b.n	8008824 <__match+0x10>

0800883c <__hexnan>:
 800883c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008840:	2500      	movs	r5, #0
 8008842:	680b      	ldr	r3, [r1, #0]
 8008844:	4682      	mov	sl, r0
 8008846:	115e      	asrs	r6, r3, #5
 8008848:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800884c:	f013 031f 	ands.w	r3, r3, #31
 8008850:	bf18      	it	ne
 8008852:	3604      	addne	r6, #4
 8008854:	1f37      	subs	r7, r6, #4
 8008856:	4690      	mov	r8, r2
 8008858:	46b9      	mov	r9, r7
 800885a:	463c      	mov	r4, r7
 800885c:	46ab      	mov	fp, r5
 800885e:	b087      	sub	sp, #28
 8008860:	6801      	ldr	r1, [r0, #0]
 8008862:	9301      	str	r3, [sp, #4]
 8008864:	f846 5c04 	str.w	r5, [r6, #-4]
 8008868:	9502      	str	r5, [sp, #8]
 800886a:	784a      	ldrb	r2, [r1, #1]
 800886c:	1c4b      	adds	r3, r1, #1
 800886e:	9303      	str	r3, [sp, #12]
 8008870:	b342      	cbz	r2, 80088c4 <__hexnan+0x88>
 8008872:	4610      	mov	r0, r2
 8008874:	9105      	str	r1, [sp, #20]
 8008876:	9204      	str	r2, [sp, #16]
 8008878:	f7ff fd95 	bl	80083a6 <__hexdig_fun>
 800887c:	2800      	cmp	r0, #0
 800887e:	d151      	bne.n	8008924 <__hexnan+0xe8>
 8008880:	9a04      	ldr	r2, [sp, #16]
 8008882:	9905      	ldr	r1, [sp, #20]
 8008884:	2a20      	cmp	r2, #32
 8008886:	d818      	bhi.n	80088ba <__hexnan+0x7e>
 8008888:	9b02      	ldr	r3, [sp, #8]
 800888a:	459b      	cmp	fp, r3
 800888c:	dd13      	ble.n	80088b6 <__hexnan+0x7a>
 800888e:	454c      	cmp	r4, r9
 8008890:	d206      	bcs.n	80088a0 <__hexnan+0x64>
 8008892:	2d07      	cmp	r5, #7
 8008894:	dc04      	bgt.n	80088a0 <__hexnan+0x64>
 8008896:	462a      	mov	r2, r5
 8008898:	4649      	mov	r1, r9
 800889a:	4620      	mov	r0, r4
 800889c:	f7ff ffa8 	bl	80087f0 <L_shift>
 80088a0:	4544      	cmp	r4, r8
 80088a2:	d952      	bls.n	800894a <__hexnan+0x10e>
 80088a4:	2300      	movs	r3, #0
 80088a6:	f1a4 0904 	sub.w	r9, r4, #4
 80088aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80088ae:	461d      	mov	r5, r3
 80088b0:	464c      	mov	r4, r9
 80088b2:	f8cd b008 	str.w	fp, [sp, #8]
 80088b6:	9903      	ldr	r1, [sp, #12]
 80088b8:	e7d7      	b.n	800886a <__hexnan+0x2e>
 80088ba:	2a29      	cmp	r2, #41	@ 0x29
 80088bc:	d157      	bne.n	800896e <__hexnan+0x132>
 80088be:	3102      	adds	r1, #2
 80088c0:	f8ca 1000 	str.w	r1, [sl]
 80088c4:	f1bb 0f00 	cmp.w	fp, #0
 80088c8:	d051      	beq.n	800896e <__hexnan+0x132>
 80088ca:	454c      	cmp	r4, r9
 80088cc:	d206      	bcs.n	80088dc <__hexnan+0xa0>
 80088ce:	2d07      	cmp	r5, #7
 80088d0:	dc04      	bgt.n	80088dc <__hexnan+0xa0>
 80088d2:	462a      	mov	r2, r5
 80088d4:	4649      	mov	r1, r9
 80088d6:	4620      	mov	r0, r4
 80088d8:	f7ff ff8a 	bl	80087f0 <L_shift>
 80088dc:	4544      	cmp	r4, r8
 80088de:	d936      	bls.n	800894e <__hexnan+0x112>
 80088e0:	4623      	mov	r3, r4
 80088e2:	f1a8 0204 	sub.w	r2, r8, #4
 80088e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80088ea:	429f      	cmp	r7, r3
 80088ec:	f842 1f04 	str.w	r1, [r2, #4]!
 80088f0:	d2f9      	bcs.n	80088e6 <__hexnan+0xaa>
 80088f2:	1b3b      	subs	r3, r7, r4
 80088f4:	f023 0303 	bic.w	r3, r3, #3
 80088f8:	3304      	adds	r3, #4
 80088fa:	3401      	adds	r4, #1
 80088fc:	3e03      	subs	r6, #3
 80088fe:	42b4      	cmp	r4, r6
 8008900:	bf88      	it	hi
 8008902:	2304      	movhi	r3, #4
 8008904:	2200      	movs	r2, #0
 8008906:	4443      	add	r3, r8
 8008908:	f843 2b04 	str.w	r2, [r3], #4
 800890c:	429f      	cmp	r7, r3
 800890e:	d2fb      	bcs.n	8008908 <__hexnan+0xcc>
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	b91b      	cbnz	r3, 800891c <__hexnan+0xe0>
 8008914:	4547      	cmp	r7, r8
 8008916:	d128      	bne.n	800896a <__hexnan+0x12e>
 8008918:	2301      	movs	r3, #1
 800891a:	603b      	str	r3, [r7, #0]
 800891c:	2005      	movs	r0, #5
 800891e:	b007      	add	sp, #28
 8008920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008924:	3501      	adds	r5, #1
 8008926:	2d08      	cmp	r5, #8
 8008928:	f10b 0b01 	add.w	fp, fp, #1
 800892c:	dd06      	ble.n	800893c <__hexnan+0x100>
 800892e:	4544      	cmp	r4, r8
 8008930:	d9c1      	bls.n	80088b6 <__hexnan+0x7a>
 8008932:	2300      	movs	r3, #0
 8008934:	2501      	movs	r5, #1
 8008936:	f844 3c04 	str.w	r3, [r4, #-4]
 800893a:	3c04      	subs	r4, #4
 800893c:	6822      	ldr	r2, [r4, #0]
 800893e:	f000 000f 	and.w	r0, r0, #15
 8008942:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008946:	6020      	str	r0, [r4, #0]
 8008948:	e7b5      	b.n	80088b6 <__hexnan+0x7a>
 800894a:	2508      	movs	r5, #8
 800894c:	e7b3      	b.n	80088b6 <__hexnan+0x7a>
 800894e:	9b01      	ldr	r3, [sp, #4]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d0dd      	beq.n	8008910 <__hexnan+0xd4>
 8008954:	f04f 32ff 	mov.w	r2, #4294967295
 8008958:	f1c3 0320 	rsb	r3, r3, #32
 800895c:	40da      	lsrs	r2, r3
 800895e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008962:	4013      	ands	r3, r2
 8008964:	f846 3c04 	str.w	r3, [r6, #-4]
 8008968:	e7d2      	b.n	8008910 <__hexnan+0xd4>
 800896a:	3f04      	subs	r7, #4
 800896c:	e7d0      	b.n	8008910 <__hexnan+0xd4>
 800896e:	2004      	movs	r0, #4
 8008970:	e7d5      	b.n	800891e <__hexnan+0xe2>

08008972 <__ascii_mbtowc>:
 8008972:	b082      	sub	sp, #8
 8008974:	b901      	cbnz	r1, 8008978 <__ascii_mbtowc+0x6>
 8008976:	a901      	add	r1, sp, #4
 8008978:	b142      	cbz	r2, 800898c <__ascii_mbtowc+0x1a>
 800897a:	b14b      	cbz	r3, 8008990 <__ascii_mbtowc+0x1e>
 800897c:	7813      	ldrb	r3, [r2, #0]
 800897e:	600b      	str	r3, [r1, #0]
 8008980:	7812      	ldrb	r2, [r2, #0]
 8008982:	1e10      	subs	r0, r2, #0
 8008984:	bf18      	it	ne
 8008986:	2001      	movne	r0, #1
 8008988:	b002      	add	sp, #8
 800898a:	4770      	bx	lr
 800898c:	4610      	mov	r0, r2
 800898e:	e7fb      	b.n	8008988 <__ascii_mbtowc+0x16>
 8008990:	f06f 0001 	mvn.w	r0, #1
 8008994:	e7f8      	b.n	8008988 <__ascii_mbtowc+0x16>

08008996 <_realloc_r>:
 8008996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800899a:	4680      	mov	r8, r0
 800899c:	4615      	mov	r5, r2
 800899e:	460c      	mov	r4, r1
 80089a0:	b921      	cbnz	r1, 80089ac <_realloc_r+0x16>
 80089a2:	4611      	mov	r1, r2
 80089a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089a8:	f7fd bccc 	b.w	8006344 <_malloc_r>
 80089ac:	b92a      	cbnz	r2, 80089ba <_realloc_r+0x24>
 80089ae:	f7fd fc57 	bl	8006260 <_free_r>
 80089b2:	2400      	movs	r4, #0
 80089b4:	4620      	mov	r0, r4
 80089b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ba:	f000 f8c4 	bl	8008b46 <_malloc_usable_size_r>
 80089be:	4285      	cmp	r5, r0
 80089c0:	4606      	mov	r6, r0
 80089c2:	d802      	bhi.n	80089ca <_realloc_r+0x34>
 80089c4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80089c8:	d8f4      	bhi.n	80089b4 <_realloc_r+0x1e>
 80089ca:	4629      	mov	r1, r5
 80089cc:	4640      	mov	r0, r8
 80089ce:	f7fd fcb9 	bl	8006344 <_malloc_r>
 80089d2:	4607      	mov	r7, r0
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d0ec      	beq.n	80089b2 <_realloc_r+0x1c>
 80089d8:	42b5      	cmp	r5, r6
 80089da:	462a      	mov	r2, r5
 80089dc:	4621      	mov	r1, r4
 80089de:	bf28      	it	cs
 80089e0:	4632      	movcs	r2, r6
 80089e2:	f7fc fdd8 	bl	8005596 <memcpy>
 80089e6:	4621      	mov	r1, r4
 80089e8:	4640      	mov	r0, r8
 80089ea:	f7fd fc39 	bl	8006260 <_free_r>
 80089ee:	463c      	mov	r4, r7
 80089f0:	e7e0      	b.n	80089b4 <_realloc_r+0x1e>

080089f2 <__ascii_wctomb>:
 80089f2:	4603      	mov	r3, r0
 80089f4:	4608      	mov	r0, r1
 80089f6:	b141      	cbz	r1, 8008a0a <__ascii_wctomb+0x18>
 80089f8:	2aff      	cmp	r2, #255	@ 0xff
 80089fa:	d904      	bls.n	8008a06 <__ascii_wctomb+0x14>
 80089fc:	228a      	movs	r2, #138	@ 0x8a
 80089fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008a02:	601a      	str	r2, [r3, #0]
 8008a04:	4770      	bx	lr
 8008a06:	2001      	movs	r0, #1
 8008a08:	700a      	strb	r2, [r1, #0]
 8008a0a:	4770      	bx	lr

08008a0c <fiprintf>:
 8008a0c:	b40e      	push	{r1, r2, r3}
 8008a0e:	b503      	push	{r0, r1, lr}
 8008a10:	4601      	mov	r1, r0
 8008a12:	ab03      	add	r3, sp, #12
 8008a14:	4805      	ldr	r0, [pc, #20]	@ (8008a2c <fiprintf+0x20>)
 8008a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a1a:	6800      	ldr	r0, [r0, #0]
 8008a1c:	9301      	str	r3, [sp, #4]
 8008a1e:	f7ff f9c1 	bl	8007da4 <_vfiprintf_r>
 8008a22:	b002      	add	sp, #8
 8008a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a28:	b003      	add	sp, #12
 8008a2a:	4770      	bx	lr
 8008a2c:	20000024 	.word	0x20000024

08008a30 <__swhatbuf_r>:
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	460c      	mov	r4, r1
 8008a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a38:	4615      	mov	r5, r2
 8008a3a:	2900      	cmp	r1, #0
 8008a3c:	461e      	mov	r6, r3
 8008a3e:	b096      	sub	sp, #88	@ 0x58
 8008a40:	da0c      	bge.n	8008a5c <__swhatbuf_r+0x2c>
 8008a42:	89a3      	ldrh	r3, [r4, #12]
 8008a44:	2100      	movs	r1, #0
 8008a46:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a4a:	bf14      	ite	ne
 8008a4c:	2340      	movne	r3, #64	@ 0x40
 8008a4e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a52:	2000      	movs	r0, #0
 8008a54:	6031      	str	r1, [r6, #0]
 8008a56:	602b      	str	r3, [r5, #0]
 8008a58:	b016      	add	sp, #88	@ 0x58
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}
 8008a5c:	466a      	mov	r2, sp
 8008a5e:	f000 f849 	bl	8008af4 <_fstat_r>
 8008a62:	2800      	cmp	r0, #0
 8008a64:	dbed      	blt.n	8008a42 <__swhatbuf_r+0x12>
 8008a66:	9901      	ldr	r1, [sp, #4]
 8008a68:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a6c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a70:	4259      	negs	r1, r3
 8008a72:	4159      	adcs	r1, r3
 8008a74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a78:	e7eb      	b.n	8008a52 <__swhatbuf_r+0x22>

08008a7a <__smakebuf_r>:
 8008a7a:	898b      	ldrh	r3, [r1, #12]
 8008a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a7e:	079d      	lsls	r5, r3, #30
 8008a80:	4606      	mov	r6, r0
 8008a82:	460c      	mov	r4, r1
 8008a84:	d507      	bpl.n	8008a96 <__smakebuf_r+0x1c>
 8008a86:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a8a:	6023      	str	r3, [r4, #0]
 8008a8c:	6123      	str	r3, [r4, #16]
 8008a8e:	2301      	movs	r3, #1
 8008a90:	6163      	str	r3, [r4, #20]
 8008a92:	b003      	add	sp, #12
 8008a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a96:	466a      	mov	r2, sp
 8008a98:	ab01      	add	r3, sp, #4
 8008a9a:	f7ff ffc9 	bl	8008a30 <__swhatbuf_r>
 8008a9e:	9f00      	ldr	r7, [sp, #0]
 8008aa0:	4605      	mov	r5, r0
 8008aa2:	4639      	mov	r1, r7
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	f7fd fc4d 	bl	8006344 <_malloc_r>
 8008aaa:	b948      	cbnz	r0, 8008ac0 <__smakebuf_r+0x46>
 8008aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ab0:	059a      	lsls	r2, r3, #22
 8008ab2:	d4ee      	bmi.n	8008a92 <__smakebuf_r+0x18>
 8008ab4:	f023 0303 	bic.w	r3, r3, #3
 8008ab8:	f043 0302 	orr.w	r3, r3, #2
 8008abc:	81a3      	strh	r3, [r4, #12]
 8008abe:	e7e2      	b.n	8008a86 <__smakebuf_r+0xc>
 8008ac0:	89a3      	ldrh	r3, [r4, #12]
 8008ac2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aca:	81a3      	strh	r3, [r4, #12]
 8008acc:	9b01      	ldr	r3, [sp, #4]
 8008ace:	6020      	str	r0, [r4, #0]
 8008ad0:	b15b      	cbz	r3, 8008aea <__smakebuf_r+0x70>
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ad8:	f000 f81e 	bl	8008b18 <_isatty_r>
 8008adc:	b128      	cbz	r0, 8008aea <__smakebuf_r+0x70>
 8008ade:	89a3      	ldrh	r3, [r4, #12]
 8008ae0:	f023 0303 	bic.w	r3, r3, #3
 8008ae4:	f043 0301 	orr.w	r3, r3, #1
 8008ae8:	81a3      	strh	r3, [r4, #12]
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	431d      	orrs	r5, r3
 8008aee:	81a5      	strh	r5, [r4, #12]
 8008af0:	e7cf      	b.n	8008a92 <__smakebuf_r+0x18>
	...

08008af4 <_fstat_r>:
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	2300      	movs	r3, #0
 8008af8:	4d06      	ldr	r5, [pc, #24]	@ (8008b14 <_fstat_r+0x20>)
 8008afa:	4604      	mov	r4, r0
 8008afc:	4608      	mov	r0, r1
 8008afe:	4611      	mov	r1, r2
 8008b00:	602b      	str	r3, [r5, #0]
 8008b02:	f7f8 fdef 	bl	80016e4 <_fstat>
 8008b06:	1c43      	adds	r3, r0, #1
 8008b08:	d102      	bne.n	8008b10 <_fstat_r+0x1c>
 8008b0a:	682b      	ldr	r3, [r5, #0]
 8008b0c:	b103      	cbz	r3, 8008b10 <_fstat_r+0x1c>
 8008b0e:	6023      	str	r3, [r4, #0]
 8008b10:	bd38      	pop	{r3, r4, r5, pc}
 8008b12:	bf00      	nop
 8008b14:	2000048c 	.word	0x2000048c

08008b18 <_isatty_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	4d05      	ldr	r5, [pc, #20]	@ (8008b34 <_isatty_r+0x1c>)
 8008b1e:	4604      	mov	r4, r0
 8008b20:	4608      	mov	r0, r1
 8008b22:	602b      	str	r3, [r5, #0]
 8008b24:	f7f8 fded 	bl	8001702 <_isatty>
 8008b28:	1c43      	adds	r3, r0, #1
 8008b2a:	d102      	bne.n	8008b32 <_isatty_r+0x1a>
 8008b2c:	682b      	ldr	r3, [r5, #0]
 8008b2e:	b103      	cbz	r3, 8008b32 <_isatty_r+0x1a>
 8008b30:	6023      	str	r3, [r4, #0]
 8008b32:	bd38      	pop	{r3, r4, r5, pc}
 8008b34:	2000048c 	.word	0x2000048c

08008b38 <abort>:
 8008b38:	2006      	movs	r0, #6
 8008b3a:	b508      	push	{r3, lr}
 8008b3c:	f000 f834 	bl	8008ba8 <raise>
 8008b40:	2001      	movs	r0, #1
 8008b42:	f7f8 fd80 	bl	8001646 <_exit>

08008b46 <_malloc_usable_size_r>:
 8008b46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b4a:	1f18      	subs	r0, r3, #4
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	bfbc      	itt	lt
 8008b50:	580b      	ldrlt	r3, [r1, r0]
 8008b52:	18c0      	addlt	r0, r0, r3
 8008b54:	4770      	bx	lr

08008b56 <_raise_r>:
 8008b56:	291f      	cmp	r1, #31
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	4605      	mov	r5, r0
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	d904      	bls.n	8008b6a <_raise_r+0x14>
 8008b60:	2316      	movs	r3, #22
 8008b62:	6003      	str	r3, [r0, #0]
 8008b64:	f04f 30ff 	mov.w	r0, #4294967295
 8008b68:	bd38      	pop	{r3, r4, r5, pc}
 8008b6a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008b6c:	b112      	cbz	r2, 8008b74 <_raise_r+0x1e>
 8008b6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b72:	b94b      	cbnz	r3, 8008b88 <_raise_r+0x32>
 8008b74:	4628      	mov	r0, r5
 8008b76:	f000 f831 	bl	8008bdc <_getpid_r>
 8008b7a:	4622      	mov	r2, r4
 8008b7c:	4601      	mov	r1, r0
 8008b7e:	4628      	mov	r0, r5
 8008b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b84:	f000 b818 	b.w	8008bb8 <_kill_r>
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d00a      	beq.n	8008ba2 <_raise_r+0x4c>
 8008b8c:	1c59      	adds	r1, r3, #1
 8008b8e:	d103      	bne.n	8008b98 <_raise_r+0x42>
 8008b90:	2316      	movs	r3, #22
 8008b92:	6003      	str	r3, [r0, #0]
 8008b94:	2001      	movs	r0, #1
 8008b96:	e7e7      	b.n	8008b68 <_raise_r+0x12>
 8008b98:	2100      	movs	r1, #0
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008ba0:	4798      	blx	r3
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	e7e0      	b.n	8008b68 <_raise_r+0x12>
	...

08008ba8 <raise>:
 8008ba8:	4b02      	ldr	r3, [pc, #8]	@ (8008bb4 <raise+0xc>)
 8008baa:	4601      	mov	r1, r0
 8008bac:	6818      	ldr	r0, [r3, #0]
 8008bae:	f7ff bfd2 	b.w	8008b56 <_raise_r>
 8008bb2:	bf00      	nop
 8008bb4:	20000024 	.word	0x20000024

08008bb8 <_kill_r>:
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	2300      	movs	r3, #0
 8008bbc:	4d06      	ldr	r5, [pc, #24]	@ (8008bd8 <_kill_r+0x20>)
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	4608      	mov	r0, r1
 8008bc2:	4611      	mov	r1, r2
 8008bc4:	602b      	str	r3, [r5, #0]
 8008bc6:	f7f8 fd2e 	bl	8001626 <_kill>
 8008bca:	1c43      	adds	r3, r0, #1
 8008bcc:	d102      	bne.n	8008bd4 <_kill_r+0x1c>
 8008bce:	682b      	ldr	r3, [r5, #0]
 8008bd0:	b103      	cbz	r3, 8008bd4 <_kill_r+0x1c>
 8008bd2:	6023      	str	r3, [r4, #0]
 8008bd4:	bd38      	pop	{r3, r4, r5, pc}
 8008bd6:	bf00      	nop
 8008bd8:	2000048c 	.word	0x2000048c

08008bdc <_getpid_r>:
 8008bdc:	f7f8 bd1c 	b.w	8001618 <_getpid>

08008be0 <_init>:
 8008be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be2:	bf00      	nop
 8008be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008be6:	bc08      	pop	{r3}
 8008be8:	469e      	mov	lr, r3
 8008bea:	4770      	bx	lr

08008bec <_fini>:
 8008bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bee:	bf00      	nop
 8008bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bf2:	bc08      	pop	{r3}
 8008bf4:	469e      	mov	lr, r3
 8008bf6:	4770      	bx	lr
