
ltc2959_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007694  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  080077a8  080077a8  000087a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c00  08007c00  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007c00  08007c00  00008c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c08  08007c08  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c08  08007c08  00008c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c0c  08007c0c  00008c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007c10  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  200001d4  08007de4  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08007de4  0000939c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069b4  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001821  00000000  00000000  0000fbb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  000113d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000623  00000000  00000000  00011c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e0f  00000000  00000000  00012223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac52  00000000  00000000  0002a032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084a0e  00000000  00000000  00034c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9692  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a8  00000000  00000000  000b96d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000bcb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800778c 	.word	0x0800778c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800778c 	.word	0x0800778c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be8:	4b24      	ldr	r3, [pc, #144]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a23      	ldr	r2, [pc, #140]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000bee:	f043 0310 	orr.w	r3, r3, #16
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0310 	and.w	r3, r3, #16
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c00:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a1d      	ldr	r2, [pc, #116]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000c06:	f043 0320 	orr.w	r3, r3, #32
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0320 	and.w	r3, r3, #32
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c18:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a17      	ldr	r2, [pc, #92]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000c1e:	f043 0308 	orr.w	r3, r3, #8
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f003 0308 	and.w	r3, r3, #8
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a11      	ldr	r2, [pc, #68]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000c36:	f043 0304 	orr.w	r3, r3, #4
 8000c3a:	6193      	str	r3, [r2, #24]
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <MX_GPIO_Init+0xa8>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f003 0304 	and.w	r3, r3, #4
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c4e:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <MX_GPIO_Init+0xac>)
 8000c50:	f000 fcfc 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <MX_GPIO_Init+0xac>)
 8000c6e:	f000 fb69 	bl	8001344 <HAL_GPIO_Init>

}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40011000 	.word	0x40011000

08000c84 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <MX_I2C2_Init+0x50>)
 8000c8a:	4a13      	ldr	r2, [pc, #76]	@ (8000cd8 <MX_I2C2_Init+0x54>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <MX_I2C2_Init+0x50>)
 8000c90:	4a12      	ldr	r2, [pc, #72]	@ (8000cdc <MX_I2C2_Init+0x58>)
 8000c92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <MX_I2C2_Init+0x50>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <MX_I2C2_Init+0x50>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <MX_I2C2_Init+0x50>)
 8000ca2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ca6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <MX_I2C2_Init+0x50>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cae:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <MX_I2C2_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <MX_I2C2_Init+0x50>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <MX_I2C2_Init+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cc0:	4804      	ldr	r0, [pc, #16]	@ (8000cd4 <MX_I2C2_Init+0x50>)
 8000cc2:	f000 fcdb 	bl	800167c <HAL_I2C_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ccc:	f000 f8a1 	bl	8000e12 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200001f0 	.word	0x200001f0
 8000cd8:	40005800 	.word	0x40005800
 8000cdc:	00061a80 	.word	0x00061a80

08000ce0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a16      	ldr	r2, [pc, #88]	@ (8000d54 <HAL_I2C_MspInit+0x74>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d124      	bne.n	8000d4a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <HAL_I2C_MspInit+0x78>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a14      	ldr	r2, [pc, #80]	@ (8000d58 <HAL_I2C_MspInit+0x78>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <HAL_I2C_MspInit+0x78>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d18:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1e:	2312      	movs	r3, #18
 8000d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480b      	ldr	r0, [pc, #44]	@ (8000d5c <HAL_I2C_MspInit+0x7c>)
 8000d2e:	f000 fb09 	bl	8001344 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d32:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <HAL_I2C_MspInit+0x78>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	4a08      	ldr	r2, [pc, #32]	@ (8000d58 <HAL_I2C_MspInit+0x78>)
 8000d38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d3c:	61d3      	str	r3, [r2, #28]
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <HAL_I2C_MspInit+0x78>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3720      	adds	r7, #32
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40005800 	.word	0x40005800
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40010c00 	.word	0x40010c00

08000d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d64:	f000 f9a8 	bl	80010b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d68:	f000 f80e 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6c:	f7ff ff32 	bl	8000bd4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000d70:	f7ff ff88 	bl	8000c84 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  LTC2959_Init(ltc2959_config);
 8000d74:	4b03      	ldr	r3, [pc, #12]	@ (8000d84 <main+0x24>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f002 f98e 	bl	800309a <LTC2959_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d7e:	bf00      	nop
 8000d80:	e7fd      	b.n	8000d7e <main+0x1e>
 8000d82:	bf00      	nop
 8000d84:	20000244 	.word	0x20000244

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b090      	sub	sp, #64	@ 0x40
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0318 	add.w	r3, r7, #24
 8000d92:	2228      	movs	r2, #40	@ 0x28
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 f92d 	bl	8003ff6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000daa:	2301      	movs	r3, #1
 8000dac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000db2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dc6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dcc:	f107 0318 	add.w	r3, r7, #24
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 fcad 	bl	8002730 <HAL_RCC_OscConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ddc:	f000 f819 	bl	8000e12 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de0:	230f      	movs	r3, #15
 8000de2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de4:	2302      	movs	r3, #2
 8000de6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000df0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2102      	movs	r1, #2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 ff1a 	bl	8002c34 <HAL_RCC_ClockConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e06:	f000 f804 	bl	8000e12 <Error_Handler>
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	3740      	adds	r7, #64	@ 0x40
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e16:	b672      	cpsid	i
}
 8000e18:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1a:	bf00      	nop
 8000e1c:	e7fd      	b.n	8000e1a <Error_Handler+0x8>
	...

08000e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <HAL_MspInit+0x5c>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	4a14      	ldr	r2, [pc, #80]	@ (8000e7c <HAL_MspInit+0x5c>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6193      	str	r3, [r2, #24]
 8000e32:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <HAL_MspInit+0x5c>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e7c <HAL_MspInit+0x5c>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	4a0e      	ldr	r2, [pc, #56]	@ (8000e7c <HAL_MspInit+0x5c>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e48:	61d3      	str	r3, [r2, #28]
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e7c <HAL_MspInit+0x5c>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e56:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <HAL_MspInit+0x60>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	4a04      	ldr	r2, [pc, #16]	@ (8000e80 <HAL_MspInit+0x60>)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40010000 	.word	0x40010000

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <NMI_Handler+0x4>

08000e8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed4:	f000 f936 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return 1;
 8000ee0:	2301      	movs	r3, #1
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr

08000eea <_kill>:

int _kill(int pid, int sig)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ef4:	f003 f8d2 	bl	800409c <__errno>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2216      	movs	r2, #22
 8000efc:	601a      	str	r2, [r3, #0]
  return -1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <_exit>:

void _exit (int status)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f12:	f04f 31ff 	mov.w	r1, #4294967295
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffe7 	bl	8000eea <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <_exit+0x12>

08000f20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	e00a      	b.n	8000f48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f32:	f3af 8000 	nop.w
 8000f36:	4601      	mov	r1, r0
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	60ba      	str	r2, [r7, #8]
 8000f3e:	b2ca      	uxtb	r2, r1
 8000f40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3301      	adds	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	dbf0      	blt.n	8000f32 <_read+0x12>
  }

  return len;
 8000f50:	687b      	ldr	r3, [r7, #4]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	e009      	b.n	8000f80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	60ba      	str	r2, [r7, #8]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	dbf1      	blt.n	8000f6c <_write+0x12>
  }
  return len;
 8000f88:	687b      	ldr	r3, [r7, #4]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <_close>:

int _close(int file)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fb8:	605a      	str	r2, [r3, #4]
  return 0;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <_isatty>:

int _isatty(int file)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b085      	sub	sp, #20
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
	...

08000ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ffc:	4a14      	ldr	r2, [pc, #80]	@ (8001050 <_sbrk+0x5c>)
 8000ffe:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <_sbrk+0x60>)
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001008:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001010:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <_sbrk+0x64>)
 8001012:	4a12      	ldr	r2, [pc, #72]	@ (800105c <_sbrk+0x68>)
 8001014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001016:	4b10      	ldr	r3, [pc, #64]	@ (8001058 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	429a      	cmp	r2, r3
 8001022:	d207      	bcs.n	8001034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001024:	f003 f83a 	bl	800409c <__errno>
 8001028:	4603      	mov	r3, r0
 800102a:	220c      	movs	r2, #12
 800102c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	e009      	b.n	8001048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001034:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	4a05      	ldr	r2, [pc, #20]	@ (8001058 <_sbrk+0x64>)
 8001044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001046:	68fb      	ldr	r3, [r7, #12]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20005000 	.word	0x20005000
 8001054:	00000400 	.word	0x00000400
 8001058:	20000248 	.word	0x20000248
 800105c:	200003a0 	.word	0x200003a0

08001060 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800106c:	f7ff fff8 	bl	8001060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001070:	480b      	ldr	r0, [pc, #44]	@ (80010a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001072:	490c      	ldr	r1, [pc, #48]	@ (80010a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001074:	4a0c      	ldr	r2, [pc, #48]	@ (80010a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a09      	ldr	r2, [pc, #36]	@ (80010ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001088:	4c09      	ldr	r4, [pc, #36]	@ (80010b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001096:	f003 f807 	bl	80040a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800109a:	f7ff fe61 	bl	8000d60 <main>
  bx lr
 800109e:	4770      	bx	lr
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80010a8:	08007c10 	.word	0x08007c10
  ldr r2, =_sbss
 80010ac:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80010b0:	2000039c 	.word	0x2000039c

080010b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC1_2_IRQHandler>
	...

080010b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <HAL_Init+0x28>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a07      	ldr	r2, [pc, #28]	@ (80010e0 <HAL_Init+0x28>)
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f000 f907 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ce:	200f      	movs	r0, #15
 80010d0:	f000 f808 	bl	80010e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d4:	f7ff fea4 	bl	8000e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40022000 	.word	0x40022000

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <HAL_InitTick+0x54>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <HAL_InitTick+0x58>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f911 	bl	800132a <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00e      	b.n	8001130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d80a      	bhi.n	800112e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f000 f8e7 	bl	80012f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4a06      	ldr	r2, [pc, #24]	@ (8001140 <HAL_InitTick+0x5c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000000 	.word	0x20000000
 800113c:	20000008 	.word	0x20000008
 8001140:	20000004 	.word	0x20000004

08001144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <HAL_IncTick+0x1c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <HAL_IncTick+0x20>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a03      	ldr	r2, [pc, #12]	@ (8001164 <HAL_IncTick+0x20>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	20000008 	.word	0x20000008
 8001164:	2000024c 	.word	0x2000024c

08001168 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b02      	ldr	r3, [pc, #8]	@ (8001178 <HAL_GetTick+0x10>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	2000024c 	.word	0x2000024c

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	@ (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	@ (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	@ 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2b04      	cmp	r3, #4
 8001250:	bf28      	it	cs
 8001252:	2304      	movcs	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	2b06      	cmp	r3, #6
 800125c:	d902      	bls.n	8001264 <NVIC_EncodePriority+0x30>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b03      	subs	r3, #3
 8001262:	e000      	b.n	8001266 <NVIC_EncodePriority+0x32>
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43d9      	mvns	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	4313      	orrs	r3, r2
         );
}
 800128e:	4618      	mov	r0, r3
 8001290:	3724      	adds	r7, #36	@ 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f7ff ff90 	bl	80011e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff49 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001304:	f7ff ff5e 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 8001308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	6978      	ldr	r0, [r7, #20]
 8001310:	f7ff ff90 	bl	8001234 <NVIC_EncodePriority>
 8001314:	4602      	mov	r2, r0
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff5f 	bl	80011e0 <__NVIC_SetPriority>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ffb0 	bl	8001298 <SysTick_Config>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b08b      	sub	sp, #44	@ 0x2c
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001356:	e169      	b.n	800162c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001358:	2201      	movs	r2, #1
 800135a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	429a      	cmp	r2, r3
 8001372:	f040 8158 	bne.w	8001626 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	4a9a      	ldr	r2, [pc, #616]	@ (80015e4 <HAL_GPIO_Init+0x2a0>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d05e      	beq.n	800143e <HAL_GPIO_Init+0xfa>
 8001380:	4a98      	ldr	r2, [pc, #608]	@ (80015e4 <HAL_GPIO_Init+0x2a0>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d875      	bhi.n	8001472 <HAL_GPIO_Init+0x12e>
 8001386:	4a98      	ldr	r2, [pc, #608]	@ (80015e8 <HAL_GPIO_Init+0x2a4>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d058      	beq.n	800143e <HAL_GPIO_Init+0xfa>
 800138c:	4a96      	ldr	r2, [pc, #600]	@ (80015e8 <HAL_GPIO_Init+0x2a4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d86f      	bhi.n	8001472 <HAL_GPIO_Init+0x12e>
 8001392:	4a96      	ldr	r2, [pc, #600]	@ (80015ec <HAL_GPIO_Init+0x2a8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d052      	beq.n	800143e <HAL_GPIO_Init+0xfa>
 8001398:	4a94      	ldr	r2, [pc, #592]	@ (80015ec <HAL_GPIO_Init+0x2a8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d869      	bhi.n	8001472 <HAL_GPIO_Init+0x12e>
 800139e:	4a94      	ldr	r2, [pc, #592]	@ (80015f0 <HAL_GPIO_Init+0x2ac>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d04c      	beq.n	800143e <HAL_GPIO_Init+0xfa>
 80013a4:	4a92      	ldr	r2, [pc, #584]	@ (80015f0 <HAL_GPIO_Init+0x2ac>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d863      	bhi.n	8001472 <HAL_GPIO_Init+0x12e>
 80013aa:	4a92      	ldr	r2, [pc, #584]	@ (80015f4 <HAL_GPIO_Init+0x2b0>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d046      	beq.n	800143e <HAL_GPIO_Init+0xfa>
 80013b0:	4a90      	ldr	r2, [pc, #576]	@ (80015f4 <HAL_GPIO_Init+0x2b0>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d85d      	bhi.n	8001472 <HAL_GPIO_Init+0x12e>
 80013b6:	2b12      	cmp	r3, #18
 80013b8:	d82a      	bhi.n	8001410 <HAL_GPIO_Init+0xcc>
 80013ba:	2b12      	cmp	r3, #18
 80013bc:	d859      	bhi.n	8001472 <HAL_GPIO_Init+0x12e>
 80013be:	a201      	add	r2, pc, #4	@ (adr r2, 80013c4 <HAL_GPIO_Init+0x80>)
 80013c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c4:	0800143f 	.word	0x0800143f
 80013c8:	08001419 	.word	0x08001419
 80013cc:	0800142b 	.word	0x0800142b
 80013d0:	0800146d 	.word	0x0800146d
 80013d4:	08001473 	.word	0x08001473
 80013d8:	08001473 	.word	0x08001473
 80013dc:	08001473 	.word	0x08001473
 80013e0:	08001473 	.word	0x08001473
 80013e4:	08001473 	.word	0x08001473
 80013e8:	08001473 	.word	0x08001473
 80013ec:	08001473 	.word	0x08001473
 80013f0:	08001473 	.word	0x08001473
 80013f4:	08001473 	.word	0x08001473
 80013f8:	08001473 	.word	0x08001473
 80013fc:	08001473 	.word	0x08001473
 8001400:	08001473 	.word	0x08001473
 8001404:	08001473 	.word	0x08001473
 8001408:	08001421 	.word	0x08001421
 800140c:	08001435 	.word	0x08001435
 8001410:	4a79      	ldr	r2, [pc, #484]	@ (80015f8 <HAL_GPIO_Init+0x2b4>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d013      	beq.n	800143e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001416:	e02c      	b.n	8001472 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	623b      	str	r3, [r7, #32]
          break;
 800141e:	e029      	b.n	8001474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	3304      	adds	r3, #4
 8001426:	623b      	str	r3, [r7, #32]
          break;
 8001428:	e024      	b.n	8001474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	3308      	adds	r3, #8
 8001430:	623b      	str	r3, [r7, #32]
          break;
 8001432:	e01f      	b.n	8001474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	330c      	adds	r3, #12
 800143a:	623b      	str	r3, [r7, #32]
          break;
 800143c:	e01a      	b.n	8001474 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001446:	2304      	movs	r3, #4
 8001448:	623b      	str	r3, [r7, #32]
          break;
 800144a:	e013      	b.n	8001474 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d105      	bne.n	8001460 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001454:	2308      	movs	r3, #8
 8001456:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	611a      	str	r2, [r3, #16]
          break;
 800145e:	e009      	b.n	8001474 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001460:	2308      	movs	r3, #8
 8001462:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	615a      	str	r2, [r3, #20]
          break;
 800146a:	e003      	b.n	8001474 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
          break;
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x130>
          break;
 8001472:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	2bff      	cmp	r3, #255	@ 0xff
 8001478:	d801      	bhi.n	800147e <HAL_GPIO_Init+0x13a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	e001      	b.n	8001482 <HAL_GPIO_Init+0x13e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3304      	adds	r3, #4
 8001482:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	2bff      	cmp	r3, #255	@ 0xff
 8001488:	d802      	bhi.n	8001490 <HAL_GPIO_Init+0x14c>
 800148a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	e002      	b.n	8001496 <HAL_GPIO_Init+0x152>
 8001490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001492:	3b08      	subs	r3, #8
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	210f      	movs	r1, #15
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	401a      	ands	r2, r3
 80014a8:	6a39      	ldr	r1, [r7, #32]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	fa01 f303 	lsl.w	r3, r1, r3
 80014b0:	431a      	orrs	r2, r3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 80b1 	beq.w	8001626 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014c4:	4b4d      	ldr	r3, [pc, #308]	@ (80015fc <HAL_GPIO_Init+0x2b8>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a4c      	ldr	r2, [pc, #304]	@ (80015fc <HAL_GPIO_Init+0x2b8>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b4a      	ldr	r3, [pc, #296]	@ (80015fc <HAL_GPIO_Init+0x2b8>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014dc:	4a48      	ldr	r2, [pc, #288]	@ (8001600 <HAL_GPIO_Init+0x2bc>)
 80014de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e0:	089b      	lsrs	r3, r3, #2
 80014e2:	3302      	adds	r3, #2
 80014e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	220f      	movs	r2, #15
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4013      	ands	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a40      	ldr	r2, [pc, #256]	@ (8001604 <HAL_GPIO_Init+0x2c0>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d013      	beq.n	8001530 <HAL_GPIO_Init+0x1ec>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a3f      	ldr	r2, [pc, #252]	@ (8001608 <HAL_GPIO_Init+0x2c4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d00d      	beq.n	800152c <HAL_GPIO_Init+0x1e8>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a3e      	ldr	r2, [pc, #248]	@ (800160c <HAL_GPIO_Init+0x2c8>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d007      	beq.n	8001528 <HAL_GPIO_Init+0x1e4>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a3d      	ldr	r2, [pc, #244]	@ (8001610 <HAL_GPIO_Init+0x2cc>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d101      	bne.n	8001524 <HAL_GPIO_Init+0x1e0>
 8001520:	2303      	movs	r3, #3
 8001522:	e006      	b.n	8001532 <HAL_GPIO_Init+0x1ee>
 8001524:	2304      	movs	r3, #4
 8001526:	e004      	b.n	8001532 <HAL_GPIO_Init+0x1ee>
 8001528:	2302      	movs	r3, #2
 800152a:	e002      	b.n	8001532 <HAL_GPIO_Init+0x1ee>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <HAL_GPIO_Init+0x1ee>
 8001530:	2300      	movs	r3, #0
 8001532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001534:	f002 0203 	and.w	r2, r2, #3
 8001538:	0092      	lsls	r2, r2, #2
 800153a:	4093      	lsls	r3, r2
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	4313      	orrs	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001542:	492f      	ldr	r1, [pc, #188]	@ (8001600 <HAL_GPIO_Init+0x2bc>)
 8001544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d006      	beq.n	800156a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800155c:	4b2d      	ldr	r3, [pc, #180]	@ (8001614 <HAL_GPIO_Init+0x2d0>)
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	492c      	ldr	r1, [pc, #176]	@ (8001614 <HAL_GPIO_Init+0x2d0>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	608b      	str	r3, [r1, #8]
 8001568:	e006      	b.n	8001578 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800156a:	4b2a      	ldr	r3, [pc, #168]	@ (8001614 <HAL_GPIO_Init+0x2d0>)
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	43db      	mvns	r3, r3
 8001572:	4928      	ldr	r1, [pc, #160]	@ (8001614 <HAL_GPIO_Init+0x2d0>)
 8001574:	4013      	ands	r3, r2
 8001576:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d006      	beq.n	8001592 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001584:	4b23      	ldr	r3, [pc, #140]	@ (8001614 <HAL_GPIO_Init+0x2d0>)
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	4922      	ldr	r1, [pc, #136]	@ (8001614 <HAL_GPIO_Init+0x2d0>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	60cb      	str	r3, [r1, #12]
 8001590:	e006      	b.n	80015a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001592:	4b20      	ldr	r3, [pc, #128]	@ (8001614 <HAL_GPIO_Init+0x2d0>)
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	43db      	mvns	r3, r3
 800159a:	491e      	ldr	r1, [pc, #120]	@ (8001614 <HAL_GPIO_Init+0x2d0>)
 800159c:	4013      	ands	r3, r2
 800159e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d006      	beq.n	80015ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015ac:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <HAL_GPIO_Init+0x2d0>)
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	4918      	ldr	r1, [pc, #96]	@ (8001614 <HAL_GPIO_Init+0x2d0>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <HAL_GPIO_Init+0x2d0>)
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	4914      	ldr	r1, [pc, #80]	@ (8001614 <HAL_GPIO_Init+0x2d0>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d021      	beq.n	8001618 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <HAL_GPIO_Init+0x2d0>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	490e      	ldr	r1, [pc, #56]	@ (8001614 <HAL_GPIO_Init+0x2d0>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	600b      	str	r3, [r1, #0]
 80015e0:	e021      	b.n	8001626 <HAL_GPIO_Init+0x2e2>
 80015e2:	bf00      	nop
 80015e4:	10320000 	.word	0x10320000
 80015e8:	10310000 	.word	0x10310000
 80015ec:	10220000 	.word	0x10220000
 80015f0:	10210000 	.word	0x10210000
 80015f4:	10120000 	.word	0x10120000
 80015f8:	10110000 	.word	0x10110000
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010000 	.word	0x40010000
 8001604:	40010800 	.word	0x40010800
 8001608:	40010c00 	.word	0x40010c00
 800160c:	40011000 	.word	0x40011000
 8001610:	40011400 	.word	0x40011400
 8001614:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001618:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <HAL_GPIO_Init+0x304>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	43db      	mvns	r3, r3
 8001620:	4909      	ldr	r1, [pc, #36]	@ (8001648 <HAL_GPIO_Init+0x304>)
 8001622:	4013      	ands	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001628:	3301      	adds	r3, #1
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001632:	fa22 f303 	lsr.w	r3, r2, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	f47f ae8e 	bne.w	8001358 <HAL_GPIO_Init+0x14>
  }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	372c      	adds	r7, #44	@ 0x2c
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	40010400 	.word	0x40010400

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001668:	e003      	b.n	8001672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	041a      	lsls	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	611a      	str	r2, [r3, #16]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e12b      	b.n	80018e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d106      	bne.n	80016a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fb1c 	bl	8000ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2224      	movs	r2, #36	@ 0x24
 80016ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0201 	bic.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016e0:	f001 fbf0 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 80016e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	4a81      	ldr	r2, [pc, #516]	@ (80018f0 <HAL_I2C_Init+0x274>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d807      	bhi.n	8001700 <HAL_I2C_Init+0x84>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4a80      	ldr	r2, [pc, #512]	@ (80018f4 <HAL_I2C_Init+0x278>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	bf94      	ite	ls
 80016f8:	2301      	movls	r3, #1
 80016fa:	2300      	movhi	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	e006      	b.n	800170e <HAL_I2C_Init+0x92>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4a7d      	ldr	r2, [pc, #500]	@ (80018f8 <HAL_I2C_Init+0x27c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	bf94      	ite	ls
 8001708:	2301      	movls	r3, #1
 800170a:	2300      	movhi	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e0e7      	b.n	80018e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4a78      	ldr	r2, [pc, #480]	@ (80018fc <HAL_I2C_Init+0x280>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0c9b      	lsrs	r3, r3, #18
 8001720:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68ba      	ldr	r2, [r7, #8]
 8001732:	430a      	orrs	r2, r1
 8001734:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	4a6a      	ldr	r2, [pc, #424]	@ (80018f0 <HAL_I2C_Init+0x274>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d802      	bhi.n	8001750 <HAL_I2C_Init+0xd4>
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	3301      	adds	r3, #1
 800174e:	e009      	b.n	8001764 <HAL_I2C_Init+0xe8>
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	4a69      	ldr	r2, [pc, #420]	@ (8001900 <HAL_I2C_Init+0x284>)
 800175c:	fba2 2303 	umull	r2, r3, r2, r3
 8001760:	099b      	lsrs	r3, r3, #6
 8001762:	3301      	adds	r3, #1
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	430b      	orrs	r3, r1
 800176a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001776:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	495c      	ldr	r1, [pc, #368]	@ (80018f0 <HAL_I2C_Init+0x274>)
 8001780:	428b      	cmp	r3, r1
 8001782:	d819      	bhi.n	80017b8 <HAL_I2C_Init+0x13c>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1e59      	subs	r1, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001792:	1c59      	adds	r1, r3, #1
 8001794:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001798:	400b      	ands	r3, r1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00a      	beq.n	80017b4 <HAL_I2C_Init+0x138>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1e59      	subs	r1, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ac:	3301      	adds	r3, #1
 80017ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b2:	e051      	b.n	8001858 <HAL_I2C_Init+0x1dc>
 80017b4:	2304      	movs	r3, #4
 80017b6:	e04f      	b.n	8001858 <HAL_I2C_Init+0x1dc>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d111      	bne.n	80017e4 <HAL_I2C_Init+0x168>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1e58      	subs	r0, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6859      	ldr	r1, [r3, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	440b      	add	r3, r1
 80017ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80017d2:	3301      	adds	r3, #1
 80017d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bf0c      	ite	eq
 80017dc:	2301      	moveq	r3, #1
 80017de:	2300      	movne	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	e012      	b.n	800180a <HAL_I2C_Init+0x18e>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	1e58      	subs	r0, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	0099      	lsls	r1, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017fa:	3301      	adds	r3, #1
 80017fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_I2C_Init+0x196>
 800180e:	2301      	movs	r3, #1
 8001810:	e022      	b.n	8001858 <HAL_I2C_Init+0x1dc>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10e      	bne.n	8001838 <HAL_I2C_Init+0x1bc>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1e58      	subs	r0, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6859      	ldr	r1, [r3, #4]
 8001822:	460b      	mov	r3, r1
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	440b      	add	r3, r1
 8001828:	fbb0 f3f3 	udiv	r3, r0, r3
 800182c:	3301      	adds	r3, #1
 800182e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001836:	e00f      	b.n	8001858 <HAL_I2C_Init+0x1dc>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1e58      	subs	r0, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	0099      	lsls	r1, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	fbb0 f3f3 	udiv	r3, r0, r3
 800184e:	3301      	adds	r3, #1
 8001850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001854:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	6809      	ldr	r1, [r1, #0]
 800185c:	4313      	orrs	r3, r2
 800185e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69da      	ldr	r2, [r3, #28]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001886:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6911      	ldr	r1, [r2, #16]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68d2      	ldr	r2, [r2, #12]
 8001892:	4311      	orrs	r1, r2
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	430b      	orrs	r3, r1
 800189a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695a      	ldr	r2, [r3, #20]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0201 	orr.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2220      	movs	r2, #32
 80018d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	000186a0 	.word	0x000186a0
 80018f4:	001e847f 	.word	0x001e847f
 80018f8:	003d08ff 	.word	0x003d08ff
 80018fc:	431bde83 	.word	0x431bde83
 8001900:	10624dd3 	.word	0x10624dd3

08001904 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af02      	add	r7, sp, #8
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	4608      	mov	r0, r1
 800190e:	4611      	mov	r1, r2
 8001910:	461a      	mov	r2, r3
 8001912:	4603      	mov	r3, r0
 8001914:	817b      	strh	r3, [r7, #10]
 8001916:	460b      	mov	r3, r1
 8001918:	813b      	strh	r3, [r7, #8]
 800191a:	4613      	mov	r3, r2
 800191c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800191e:	f7ff fc23 	bl	8001168 <HAL_GetTick>
 8001922:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b20      	cmp	r3, #32
 800192e:	f040 80d9 	bne.w	8001ae4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2319      	movs	r3, #25
 8001938:	2201      	movs	r2, #1
 800193a:	496d      	ldr	r1, [pc, #436]	@ (8001af0 <HAL_I2C_Mem_Write+0x1ec>)
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 fcc1 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001948:	2302      	movs	r3, #2
 800194a:	e0cc      	b.n	8001ae6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001952:	2b01      	cmp	r3, #1
 8001954:	d101      	bne.n	800195a <HAL_I2C_Mem_Write+0x56>
 8001956:	2302      	movs	r3, #2
 8001958:	e0c5      	b.n	8001ae6 <HAL_I2C_Mem_Write+0x1e2>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b01      	cmp	r3, #1
 800196e:	d007      	beq.n	8001980 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0201 	orr.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800198e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2221      	movs	r2, #33	@ 0x21
 8001994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2240      	movs	r2, #64	@ 0x40
 800199c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6a3a      	ldr	r2, [r7, #32]
 80019aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80019b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4a4d      	ldr	r2, [pc, #308]	@ (8001af4 <HAL_I2C_Mem_Write+0x1f0>)
 80019c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019c2:	88f8      	ldrh	r0, [r7, #6]
 80019c4:	893a      	ldrh	r2, [r7, #8]
 80019c6:	8979      	ldrh	r1, [r7, #10]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	4603      	mov	r3, r0
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 faf8 	bl	8001fc8 <I2C_RequestMemoryWrite>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d052      	beq.n	8001a84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e081      	b.n	8001ae6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 fd86 	bl	80024f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00d      	beq.n	8001a0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d107      	bne.n	8001a0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e06b      	b.n	8001ae6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a12:	781a      	ldrb	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	3b01      	subs	r3, #1
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d11b      	bne.n	8001a84 <HAL_I2C_Mem_Write+0x180>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d017      	beq.n	8001a84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a58:	781a      	ldrb	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1aa      	bne.n	80019e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 fd79 	bl	8002588 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00d      	beq.n	8001ab8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d107      	bne.n	8001ab4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ab2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e016      	b.n	8001ae6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2220      	movs	r2, #32
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	e000      	b.n	8001ae6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ae4:	2302      	movs	r3, #2
  }
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	00100002 	.word	0x00100002
 8001af4:	ffff0000 	.word	0xffff0000

08001af8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	@ 0x30
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	4608      	mov	r0, r1
 8001b02:	4611      	mov	r1, r2
 8001b04:	461a      	mov	r2, r3
 8001b06:	4603      	mov	r3, r0
 8001b08:	817b      	strh	r3, [r7, #10]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	813b      	strh	r3, [r7, #8]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b16:	f7ff fb27 	bl	8001168 <HAL_GetTick>
 8001b1a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b20      	cmp	r3, #32
 8001b26:	f040 8244 	bne.w	8001fb2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2319      	movs	r3, #25
 8001b30:	2201      	movs	r2, #1
 8001b32:	4982      	ldr	r1, [pc, #520]	@ (8001d3c <HAL_I2C_Mem_Read+0x244>)
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 fbc5 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001b40:	2302      	movs	r3, #2
 8001b42:	e237      	b.n	8001fb4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_I2C_Mem_Read+0x5a>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e230      	b.n	8001fb4 <HAL_I2C_Mem_Read+0x4bc>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d007      	beq.n	8001b78 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2222      	movs	r2, #34	@ 0x22
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2240      	movs	r2, #64	@ 0x40
 8001b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ba2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001ba8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4a62      	ldr	r2, [pc, #392]	@ (8001d40 <HAL_I2C_Mem_Read+0x248>)
 8001bb8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bba:	88f8      	ldrh	r0, [r7, #6]
 8001bbc:	893a      	ldrh	r2, [r7, #8]
 8001bbe:	8979      	ldrh	r1, [r7, #10]
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	4603      	mov	r3, r0
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 fa92 	bl	80020f4 <I2C_RequestMemoryRead>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e1ec      	b.n	8001fb4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d113      	bne.n	8001c0a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e1c0      	b.n	8001f8c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d11e      	bne.n	8001c50 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c22:	b672      	cpsid	i
}
 8001c24:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	61bb      	str	r3, [r7, #24]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	61bb      	str	r3, [r7, #24]
 8001c3a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c4c:	b662      	cpsie	i
}
 8001c4e:	e035      	b.n	8001cbc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d11e      	bne.n	8001c96 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c68:	b672      	cpsid	i
}
 8001c6a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c92:	b662      	cpsie	i
}
 8001c94:	e012      	b.n	8001cbc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ca4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001cbc:	e166      	b.n	8001f8c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	f200 811f 	bhi.w	8001f06 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d123      	bne.n	8001d18 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 fc9f 	bl	8002618 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e167      	b.n	8001fb4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d16:	e139      	b.n	8001f8c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d152      	bne.n	8001dc6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d26:	2200      	movs	r2, #0
 8001d28:	4906      	ldr	r1, [pc, #24]	@ (8001d44 <HAL_I2C_Mem_Read+0x24c>)
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 faca 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d008      	beq.n	8001d48 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e13c      	b.n	8001fb4 <HAL_I2C_Mem_Read+0x4bc>
 8001d3a:	bf00      	nop
 8001d3c:	00100002 	.word	0x00100002
 8001d40:	ffff0000 	.word	0xffff0000
 8001d44:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001d48:	b672      	cpsid	i
}
 8001d4a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691a      	ldr	r2, [r3, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	3b01      	subs	r3, #1
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001d8e:	b662      	cpsie	i
}
 8001d90:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001dc4:	e0e2      	b.n	8001f8c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dcc:	2200      	movs	r2, #0
 8001dce:	497b      	ldr	r1, [pc, #492]	@ (8001fbc <HAL_I2C_Mem_Read+0x4c4>)
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f000 fa77 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0e9      	b.n	8001fb4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001df0:	b672      	cpsid	i
}
 8001df2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691a      	ldr	r2, [r3, #16]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001e26:	4b66      	ldr	r3, [pc, #408]	@ (8001fc0 <HAL_I2C_Mem_Read+0x4c8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	08db      	lsrs	r3, r3, #3
 8001e2c:	4a65      	ldr	r2, [pc, #404]	@ (8001fc4 <HAL_I2C_Mem_Read+0x4cc>)
 8001e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e32:	0a1a      	lsrs	r2, r3, #8
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	00da      	lsls	r2, r3, #3
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d118      	bne.n	8001e7e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2220      	movs	r2, #32
 8001e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	f043 0220 	orr.w	r2, r3, #32
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001e6e:	b662      	cpsie	i
}
 8001e70:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e09a      	b.n	8001fb4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d1d9      	bne.n	8001e40 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ece:	b662      	cpsie	i
}
 8001ed0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f04:	e042      	b.n	8001f8c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f08:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 fb84 	bl	8002618 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e04c      	b.n	8001fb4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d118      	bne.n	8001f8c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f76:	3b01      	subs	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f47f ae94 	bne.w	8001cbe <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e000      	b.n	8001fb4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001fb2:	2302      	movs	r3, #2
  }
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3728      	adds	r7, #40	@ 0x28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	00010004 	.word	0x00010004
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	14f8b589 	.word	0x14f8b589

08001fc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	4608      	mov	r0, r1
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	817b      	strh	r3, [r7, #10]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	813b      	strh	r3, [r7, #8]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ff0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 f960 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00d      	beq.n	8002026 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002018:	d103      	bne.n	8002022 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002020:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e05f      	b.n	80020e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002026:	897b      	ldrh	r3, [r7, #10]
 8002028:	b2db      	uxtb	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002034:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	6a3a      	ldr	r2, [r7, #32]
 800203a:	492d      	ldr	r1, [pc, #180]	@ (80020f0 <I2C_RequestMemoryWrite+0x128>)
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 f9bb 	bl	80023b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e04c      	b.n	80020e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002064:	6a39      	ldr	r1, [r7, #32]
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 fa46 	bl	80024f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00d      	beq.n	800208e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	2b04      	cmp	r3, #4
 8002078:	d107      	bne.n	800208a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002088:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e02b      	b.n	80020e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d105      	bne.n	80020a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002094:	893b      	ldrh	r3, [r7, #8]
 8002096:	b2da      	uxtb	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	611a      	str	r2, [r3, #16]
 800209e:	e021      	b.n	80020e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80020a0:	893b      	ldrh	r3, [r7, #8]
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020b0:	6a39      	ldr	r1, [r7, #32]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 fa20 	bl	80024f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00d      	beq.n	80020da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d107      	bne.n	80020d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e005      	b.n	80020e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020da:	893b      	ldrh	r3, [r7, #8]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	00010002 	.word	0x00010002

080020f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af02      	add	r7, sp, #8
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	4608      	mov	r0, r1
 80020fe:	4611      	mov	r1, r2
 8002100:	461a      	mov	r2, r3
 8002102:	4603      	mov	r3, r0
 8002104:	817b      	strh	r3, [r7, #10]
 8002106:	460b      	mov	r3, r1
 8002108:	813b      	strh	r3, [r7, #8]
 800210a:	4613      	mov	r3, r2
 800210c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800211c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800212c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	2200      	movs	r2, #0
 8002136:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f8c2 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00d      	beq.n	8002162 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002150:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002154:	d103      	bne.n	800215e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800215c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e0aa      	b.n	80022b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002162:	897b      	ldrh	r3, [r7, #10]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002170:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	6a3a      	ldr	r2, [r7, #32]
 8002176:	4952      	ldr	r1, [pc, #328]	@ (80022c0 <I2C_RequestMemoryRead+0x1cc>)
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 f91d 	bl	80023b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e097      	b.n	80022b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800219e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021a0:	6a39      	ldr	r1, [r7, #32]
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 f9a8 	bl	80024f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00d      	beq.n	80021ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d107      	bne.n	80021c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e076      	b.n	80022b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021ca:	88fb      	ldrh	r3, [r7, #6]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d105      	bne.n	80021dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021d0:	893b      	ldrh	r3, [r7, #8]
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	611a      	str	r2, [r3, #16]
 80021da:	e021      	b.n	8002220 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021dc:	893b      	ldrh	r3, [r7, #8]
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ec:	6a39      	ldr	r1, [r7, #32]
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 f982 	bl	80024f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00d      	beq.n	8002216 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d107      	bne.n	8002212 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002210:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e050      	b.n	80022b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002216:	893b      	ldrh	r3, [r7, #8]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002222:	6a39      	ldr	r1, [r7, #32]
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 f967 	bl	80024f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00d      	beq.n	800224c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002234:	2b04      	cmp	r3, #4
 8002236:	d107      	bne.n	8002248 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002246:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e035      	b.n	80022b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800225a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800225c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	2200      	movs	r2, #0
 8002264:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f82b 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00d      	beq.n	8002290 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002282:	d103      	bne.n	800228c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800228a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e013      	b.n	80022b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002290:	897b      	ldrh	r3, [r7, #10]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	b2da      	uxtb	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a2:	6a3a      	ldr	r2, [r7, #32]
 80022a4:	4906      	ldr	r1, [pc, #24]	@ (80022c0 <I2C_RequestMemoryRead+0x1cc>)
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f886 	bl	80023b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	00010002 	.word	0x00010002

080022c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	4613      	mov	r3, r2
 80022d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022d4:	e048      	b.n	8002368 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d044      	beq.n	8002368 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022de:	f7fe ff43 	bl	8001168 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d302      	bcc.n	80022f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d139      	bne.n	8002368 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	0c1b      	lsrs	r3, r3, #16
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d10d      	bne.n	800231a <I2C_WaitOnFlagUntilTimeout+0x56>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	43da      	mvns	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	4013      	ands	r3, r2
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	e00c      	b.n	8002334 <I2C_WaitOnFlagUntilTimeout+0x70>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	43da      	mvns	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	4013      	ands	r3, r2
 8002326:	b29b      	uxth	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf0c      	ite	eq
 800232c:	2301      	moveq	r3, #1
 800232e:	2300      	movne	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	461a      	mov	r2, r3
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	429a      	cmp	r2, r3
 8002338:	d116      	bne.n	8002368 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e023      	b.n	80023b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	0c1b      	lsrs	r3, r3, #16
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b01      	cmp	r3, #1
 8002370:	d10d      	bne.n	800238e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	43da      	mvns	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	4013      	ands	r3, r2
 800237e:	b29b      	uxth	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf0c      	ite	eq
 8002384:	2301      	moveq	r3, #1
 8002386:	2300      	movne	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	e00c      	b.n	80023a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	43da      	mvns	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	4013      	ands	r3, r2
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d093      	beq.n	80022d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023c6:	e071      	b.n	80024ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023d6:	d123      	bne.n	8002420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	f043 0204 	orr.w	r2, r3, #4
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e067      	b.n	80024f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002426:	d041      	beq.n	80024ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002428:	f7fe fe9e 	bl	8001168 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	d302      	bcc.n	800243e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d136      	bne.n	80024ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b01      	cmp	r3, #1
 8002446:	d10c      	bne.n	8002462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	43da      	mvns	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4013      	ands	r3, r2
 8002454:	b29b      	uxth	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	bf14      	ite	ne
 800245a:	2301      	movne	r3, #1
 800245c:	2300      	moveq	r3, #0
 800245e:	b2db      	uxtb	r3, r3
 8002460:	e00b      	b.n	800247a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	43da      	mvns	r2, r3
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	4013      	ands	r3, r2
 800246e:	b29b      	uxth	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf14      	ite	ne
 8002474:	2301      	movne	r3, #1
 8002476:	2300      	moveq	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d016      	beq.n	80024ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002498:	f043 0220 	orr.w	r2, r3, #32
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e021      	b.n	80024f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	0c1b      	lsrs	r3, r3, #16
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d10c      	bne.n	80024d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	43da      	mvns	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	4013      	ands	r3, r2
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf14      	ite	ne
 80024c8:	2301      	movne	r3, #1
 80024ca:	2300      	moveq	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	e00b      	b.n	80024e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	43da      	mvns	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	4013      	ands	r3, r2
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	bf14      	ite	ne
 80024e2:	2301      	movne	r3, #1
 80024e4:	2300      	moveq	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f47f af6d 	bne.w	80023c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002504:	e034      	b.n	8002570 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f8e3 	bl	80026d2 <I2C_IsAcknowledgeFailed>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e034      	b.n	8002580 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d028      	beq.n	8002570 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251e:	f7fe fe23 	bl	8001168 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	429a      	cmp	r2, r3
 800252c:	d302      	bcc.n	8002534 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d11d      	bne.n	8002570 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800253e:	2b80      	cmp	r3, #128	@ 0x80
 8002540:	d016      	beq.n	8002570 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	f043 0220 	orr.w	r2, r3, #32
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e007      	b.n	8002580 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800257a:	2b80      	cmp	r3, #128	@ 0x80
 800257c:	d1c3      	bne.n	8002506 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002594:	e034      	b.n	8002600 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f89b 	bl	80026d2 <I2C_IsAcknowledgeFailed>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e034      	b.n	8002610 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ac:	d028      	beq.n	8002600 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ae:	f7fe fddb 	bl	8001168 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d302      	bcc.n	80025c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d11d      	bne.n	8002600 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d016      	beq.n	8002600 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	f043 0220 	orr.w	r2, r3, #32
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e007      	b.n	8002610 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b04      	cmp	r3, #4
 800260c:	d1c3      	bne.n	8002596 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002624:	e049      	b.n	80026ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	2b10      	cmp	r3, #16
 8002632:	d119      	bne.n	8002668 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0210 	mvn.w	r2, #16
 800263c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e030      	b.n	80026ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002668:	f7fe fd7e 	bl	8001168 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	429a      	cmp	r2, r3
 8002676:	d302      	bcc.n	800267e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d11d      	bne.n	80026ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002688:	2b40      	cmp	r3, #64	@ 0x40
 800268a:	d016      	beq.n	80026ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	f043 0220 	orr.w	r2, r3, #32
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e007      	b.n	80026ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c4:	2b40      	cmp	r3, #64	@ 0x40
 80026c6:	d1ae      	bne.n	8002626 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026e8:	d11b      	bne.n	8002722 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026f2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	f043 0204 	orr.w	r2, r3, #4
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
	...

08002730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e272      	b.n	8002c28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 8087 	beq.w	800285e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002750:	4b92      	ldr	r3, [pc, #584]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 030c 	and.w	r3, r3, #12
 8002758:	2b04      	cmp	r3, #4
 800275a:	d00c      	beq.n	8002776 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800275c:	4b8f      	ldr	r3, [pc, #572]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 030c 	and.w	r3, r3, #12
 8002764:	2b08      	cmp	r3, #8
 8002766:	d112      	bne.n	800278e <HAL_RCC_OscConfig+0x5e>
 8002768:	4b8c      	ldr	r3, [pc, #560]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002774:	d10b      	bne.n	800278e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002776:	4b89      	ldr	r3, [pc, #548]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d06c      	beq.n	800285c <HAL_RCC_OscConfig+0x12c>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d168      	bne.n	800285c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e24c      	b.n	8002c28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002796:	d106      	bne.n	80027a6 <HAL_RCC_OscConfig+0x76>
 8002798:	4b80      	ldr	r3, [pc, #512]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a7f      	ldr	r2, [pc, #508]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 800279e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	e02e      	b.n	8002804 <HAL_RCC_OscConfig+0xd4>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCC_OscConfig+0x98>
 80027ae:	4b7b      	ldr	r3, [pc, #492]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a7a      	ldr	r2, [pc, #488]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 80027b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	4b78      	ldr	r3, [pc, #480]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a77      	ldr	r2, [pc, #476]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 80027c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	e01d      	b.n	8002804 <HAL_RCC_OscConfig+0xd4>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027d0:	d10c      	bne.n	80027ec <HAL_RCC_OscConfig+0xbc>
 80027d2:	4b72      	ldr	r3, [pc, #456]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a71      	ldr	r2, [pc, #452]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 80027d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	4b6f      	ldr	r3, [pc, #444]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a6e      	ldr	r2, [pc, #440]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 80027e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	e00b      	b.n	8002804 <HAL_RCC_OscConfig+0xd4>
 80027ec:	4b6b      	ldr	r3, [pc, #428]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a6a      	ldr	r2, [pc, #424]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 80027f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	4b68      	ldr	r3, [pc, #416]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a67      	ldr	r2, [pc, #412]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 80027fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002802:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d013      	beq.n	8002834 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7fe fcac 	bl	8001168 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002814:	f7fe fca8 	bl	8001168 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	@ 0x64
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e200      	b.n	8002c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	4b5d      	ldr	r3, [pc, #372]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f0      	beq.n	8002814 <HAL_RCC_OscConfig+0xe4>
 8002832:	e014      	b.n	800285e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7fe fc98 	bl	8001168 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800283c:	f7fe fc94 	bl	8001168 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b64      	cmp	r3, #100	@ 0x64
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e1ec      	b.n	8002c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284e:	4b53      	ldr	r3, [pc, #332]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x10c>
 800285a:	e000      	b.n	800285e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d063      	beq.n	8002932 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800286a:	4b4c      	ldr	r3, [pc, #304]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00b      	beq.n	800288e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002876:	4b49      	ldr	r3, [pc, #292]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	2b08      	cmp	r3, #8
 8002880:	d11c      	bne.n	80028bc <HAL_RCC_OscConfig+0x18c>
 8002882:	4b46      	ldr	r3, [pc, #280]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d116      	bne.n	80028bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288e:	4b43      	ldr	r3, [pc, #268]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d005      	beq.n	80028a6 <HAL_RCC_OscConfig+0x176>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d001      	beq.n	80028a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e1c0      	b.n	8002c28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a6:	4b3d      	ldr	r3, [pc, #244]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4939      	ldr	r1, [pc, #228]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ba:	e03a      	b.n	8002932 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d020      	beq.n	8002906 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028c4:	4b36      	ldr	r3, [pc, #216]	@ (80029a0 <HAL_RCC_OscConfig+0x270>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ca:	f7fe fc4d 	bl	8001168 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d2:	f7fe fc49 	bl	8001168 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e1a1      	b.n	8002c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e4:	4b2d      	ldr	r3, [pc, #180]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f0:	4b2a      	ldr	r3, [pc, #168]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4927      	ldr	r1, [pc, #156]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 8002900:	4313      	orrs	r3, r2
 8002902:	600b      	str	r3, [r1, #0]
 8002904:	e015      	b.n	8002932 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002906:	4b26      	ldr	r3, [pc, #152]	@ (80029a0 <HAL_RCC_OscConfig+0x270>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7fe fc2c 	bl	8001168 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002914:	f7fe fc28 	bl	8001168 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e180      	b.n	8002c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002926:	4b1d      	ldr	r3, [pc, #116]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d03a      	beq.n	80029b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d019      	beq.n	800297a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002946:	4b17      	ldr	r3, [pc, #92]	@ (80029a4 <HAL_RCC_OscConfig+0x274>)
 8002948:	2201      	movs	r2, #1
 800294a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294c:	f7fe fc0c 	bl	8001168 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002954:	f7fe fc08 	bl	8001168 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e160      	b.n	8002c28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002966:	4b0d      	ldr	r3, [pc, #52]	@ (800299c <HAL_RCC_OscConfig+0x26c>)
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002972:	2001      	movs	r0, #1
 8002974:	f000 faba 	bl	8002eec <RCC_Delay>
 8002978:	e01c      	b.n	80029b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800297a:	4b0a      	ldr	r3, [pc, #40]	@ (80029a4 <HAL_RCC_OscConfig+0x274>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002980:	f7fe fbf2 	bl	8001168 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002986:	e00f      	b.n	80029a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002988:	f7fe fbee 	bl	8001168 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d908      	bls.n	80029a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e146      	b.n	8002c28 <HAL_RCC_OscConfig+0x4f8>
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
 80029a0:	42420000 	.word	0x42420000
 80029a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a8:	4b92      	ldr	r3, [pc, #584]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1e9      	bne.n	8002988 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80a6 	beq.w	8002b0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c2:	2300      	movs	r3, #0
 80029c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c6:	4b8b      	ldr	r3, [pc, #556]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10d      	bne.n	80029ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d2:	4b88      	ldr	r3, [pc, #544]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	4a87      	ldr	r2, [pc, #540]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029dc:	61d3      	str	r3, [r2, #28]
 80029de:	4b85      	ldr	r3, [pc, #532]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ea:	2301      	movs	r3, #1
 80029ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ee:	4b82      	ldr	r3, [pc, #520]	@ (8002bf8 <HAL_RCC_OscConfig+0x4c8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d118      	bne.n	8002a2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029fa:	4b7f      	ldr	r3, [pc, #508]	@ (8002bf8 <HAL_RCC_OscConfig+0x4c8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a7e      	ldr	r2, [pc, #504]	@ (8002bf8 <HAL_RCC_OscConfig+0x4c8>)
 8002a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a06:	f7fe fbaf 	bl	8001168 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a0e:	f7fe fbab 	bl	8001168 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b64      	cmp	r3, #100	@ 0x64
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e103      	b.n	8002c28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a20:	4b75      	ldr	r3, [pc, #468]	@ (8002bf8 <HAL_RCC_OscConfig+0x4c8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d106      	bne.n	8002a42 <HAL_RCC_OscConfig+0x312>
 8002a34:	4b6f      	ldr	r3, [pc, #444]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	4a6e      	ldr	r2, [pc, #440]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6213      	str	r3, [r2, #32]
 8002a40:	e02d      	b.n	8002a9e <HAL_RCC_OscConfig+0x36e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x334>
 8002a4a:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	4a69      	ldr	r2, [pc, #420]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002a50:	f023 0301 	bic.w	r3, r3, #1
 8002a54:	6213      	str	r3, [r2, #32]
 8002a56:	4b67      	ldr	r3, [pc, #412]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	4a66      	ldr	r2, [pc, #408]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002a5c:	f023 0304 	bic.w	r3, r3, #4
 8002a60:	6213      	str	r3, [r2, #32]
 8002a62:	e01c      	b.n	8002a9e <HAL_RCC_OscConfig+0x36e>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	2b05      	cmp	r3, #5
 8002a6a:	d10c      	bne.n	8002a86 <HAL_RCC_OscConfig+0x356>
 8002a6c:	4b61      	ldr	r3, [pc, #388]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4a60      	ldr	r2, [pc, #384]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	f043 0304 	orr.w	r3, r3, #4
 8002a76:	6213      	str	r3, [r2, #32]
 8002a78:	4b5e      	ldr	r3, [pc, #376]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	4a5d      	ldr	r2, [pc, #372]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6213      	str	r3, [r2, #32]
 8002a84:	e00b      	b.n	8002a9e <HAL_RCC_OscConfig+0x36e>
 8002a86:	4b5b      	ldr	r3, [pc, #364]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	4a5a      	ldr	r2, [pc, #360]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	f023 0301 	bic.w	r3, r3, #1
 8002a90:	6213      	str	r3, [r2, #32]
 8002a92:	4b58      	ldr	r3, [pc, #352]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	4a57      	ldr	r2, [pc, #348]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002a98:	f023 0304 	bic.w	r3, r3, #4
 8002a9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d015      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa6:	f7fe fb5f 	bl	8001168 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aac:	e00a      	b.n	8002ac4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aae:	f7fe fb5b 	bl	8001168 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e0b1      	b.n	8002c28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac4:	4b4b      	ldr	r3, [pc, #300]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0ee      	beq.n	8002aae <HAL_RCC_OscConfig+0x37e>
 8002ad0:	e014      	b.n	8002afc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad2:	f7fe fb49 	bl	8001168 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad8:	e00a      	b.n	8002af0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ada:	f7fe fb45 	bl	8001168 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e09b      	b.n	8002c28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af0:	4b40      	ldr	r3, [pc, #256]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1ee      	bne.n	8002ada <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002afc:	7dfb      	ldrb	r3, [r7, #23]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d105      	bne.n	8002b0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b02:	4b3c      	ldr	r3, [pc, #240]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	4a3b      	ldr	r2, [pc, #236]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 8087 	beq.w	8002c26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b18:	4b36      	ldr	r3, [pc, #216]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 030c 	and.w	r3, r3, #12
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d061      	beq.n	8002be8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d146      	bne.n	8002bba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2c:	4b33      	ldr	r3, [pc, #204]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b32:	f7fe fb19 	bl	8001168 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3a:	f7fe fb15 	bl	8001168 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e06d      	b.n	8002c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b4c:	4b29      	ldr	r3, [pc, #164]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1f0      	bne.n	8002b3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b60:	d108      	bne.n	8002b74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b62:	4b24      	ldr	r3, [pc, #144]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	4921      	ldr	r1, [pc, #132]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b74:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a19      	ldr	r1, [r3, #32]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b84:	430b      	orrs	r3, r1
 8002b86:	491b      	ldr	r1, [pc, #108]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b92:	f7fe fae9 	bl	8001168 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9a:	f7fe fae5 	bl	8001168 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e03d      	b.n	8002c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bac:	4b11      	ldr	r3, [pc, #68]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x46a>
 8002bb8:	e035      	b.n	8002c26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bba:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <HAL_RCC_OscConfig+0x4cc>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc0:	f7fe fad2 	bl	8001168 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7fe face 	bl	8001168 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e026      	b.n	8002c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x498>
 8002be6:	e01e      	b.n	8002c26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d107      	bne.n	8002c00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e019      	b.n	8002c28 <HAL_RCC_OscConfig+0x4f8>
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40007000 	.word	0x40007000
 8002bfc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c00:	4b0b      	ldr	r3, [pc, #44]	@ (8002c30 <HAL_RCC_OscConfig+0x500>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d001      	beq.n	8002c26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000

08002c34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0d0      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c48:	4b6a      	ldr	r3, [pc, #424]	@ (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d910      	bls.n	8002c78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c56:	4b67      	ldr	r3, [pc, #412]	@ (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 0207 	bic.w	r2, r3, #7
 8002c5e:	4965      	ldr	r1, [pc, #404]	@ (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b63      	ldr	r3, [pc, #396]	@ (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0b8      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d020      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c90:	4b59      	ldr	r3, [pc, #356]	@ (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4a58      	ldr	r2, [pc, #352]	@ (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ca8:	4b53      	ldr	r3, [pc, #332]	@ (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4a52      	ldr	r2, [pc, #328]	@ (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002cb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb4:	4b50      	ldr	r3, [pc, #320]	@ (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	494d      	ldr	r1, [pc, #308]	@ (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d040      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d107      	bne.n	8002cea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	4b47      	ldr	r3, [pc, #284]	@ (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d115      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e07f      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf2:	4b41      	ldr	r3, [pc, #260]	@ (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d109      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e073      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d02:	4b3d      	ldr	r3, [pc, #244]	@ (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e06b      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d12:	4b39      	ldr	r3, [pc, #228]	@ (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f023 0203 	bic.w	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4936      	ldr	r1, [pc, #216]	@ (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d24:	f7fe fa20 	bl	8001168 <HAL_GetTick>
 8002d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2c:	f7fe fa1c 	bl	8001168 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e053      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	4b2d      	ldr	r3, [pc, #180]	@ (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 020c 	and.w	r2, r3, #12
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d1eb      	bne.n	8002d2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d54:	4b27      	ldr	r3, [pc, #156]	@ (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d210      	bcs.n	8002d84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b24      	ldr	r3, [pc, #144]	@ (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 0207 	bic.w	r2, r3, #7
 8002d6a:	4922      	ldr	r1, [pc, #136]	@ (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	4b20      	ldr	r3, [pc, #128]	@ (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e032      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d90:	4b19      	ldr	r3, [pc, #100]	@ (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	4916      	ldr	r1, [pc, #88]	@ (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dae:	4b12      	ldr	r3, [pc, #72]	@ (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	490e      	ldr	r1, [pc, #56]	@ (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dc2:	f000 f821 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	490a      	ldr	r1, [pc, #40]	@ (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002dd4:	5ccb      	ldrb	r3, [r1, r3]
 8002dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dda:	4a09      	ldr	r2, [pc, #36]	@ (8002e00 <HAL_RCC_ClockConfig+0x1cc>)
 8002ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dde:	4b09      	ldr	r3, [pc, #36]	@ (8002e04 <HAL_RCC_ClockConfig+0x1d0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe f97e 	bl	80010e4 <HAL_InitTick>

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40022000 	.word	0x40022000
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	080077a8 	.word	0x080077a8
 8002e00:	20000000 	.word	0x20000000
 8002e04:	20000004 	.word	0x20000004

08002e08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	2300      	movs	r3, #0
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e22:	4b1e      	ldr	r3, [pc, #120]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x94>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d002      	beq.n	8002e38 <HAL_RCC_GetSysClockFreq+0x30>
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d003      	beq.n	8002e3e <HAL_RCC_GetSysClockFreq+0x36>
 8002e36:	e027      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e38:	4b19      	ldr	r3, [pc, #100]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e3a:	613b      	str	r3, [r7, #16]
      break;
 8002e3c:	e027      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	0c9b      	lsrs	r3, r3, #18
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	4a17      	ldr	r2, [pc, #92]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e48:	5cd3      	ldrb	r3, [r2, r3]
 8002e4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d010      	beq.n	8002e78 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e56:	4b11      	ldr	r3, [pc, #68]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x94>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	0c5b      	lsrs	r3, r3, #17
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	4a11      	ldr	r2, [pc, #68]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e62:	5cd3      	ldrb	r3, [r2, r3]
 8002e64:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e6a:	fb03 f202 	mul.w	r2, r3, r2
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	e004      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8002eac <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e7c:	fb02 f303 	mul.w	r3, r2, r3
 8002e80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	613b      	str	r3, [r7, #16]
      break;
 8002e86:	e002      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e88:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e8a:	613b      	str	r3, [r7, #16]
      break;
 8002e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e8e:	693b      	ldr	r3, [r7, #16]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	371c      	adds	r7, #28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	007a1200 	.word	0x007a1200
 8002ea4:	080077c0 	.word	0x080077c0
 8002ea8:	080077d0 	.word	0x080077d0
 8002eac:	003d0900 	.word	0x003d0900

08002eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb4:	4b02      	ldr	r3, [pc, #8]	@ (8002ec0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	20000000 	.word	0x20000000

08002ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ec8:	f7ff fff2 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	4b05      	ldr	r3, [pc, #20]	@ (8002ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	0a1b      	lsrs	r3, r3, #8
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	4903      	ldr	r1, [pc, #12]	@ (8002ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eda:	5ccb      	ldrb	r3, [r1, r3]
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	080077b8 	.word	0x080077b8

08002eec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f20 <RCC_Delay+0x34>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f24 <RCC_Delay+0x38>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	0a5b      	lsrs	r3, r3, #9
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	fb02 f303 	mul.w	r3, r2, r3
 8002f06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f08:	bf00      	nop
  }
  while (Delay --);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1e5a      	subs	r2, r3, #1
 8002f0e:	60fa      	str	r2, [r7, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1f9      	bne.n	8002f08 <RCC_Delay+0x1c>
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	20000000 	.word	0x20000000
 8002f24:	10624dd3 	.word	0x10624dd3

08002f28 <Write_Reg>:

#include "../../ltc2959/ltc2959.h"

#include "i2c.h"

static void Write_Reg(uint8_t reg, uint8_t value) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af04      	add	r7, sp, #16
 8002f2e:	4603      	mov	r3, r0
 8002f30:	460a      	mov	r2, r1
 8002f32:	71fb      	strb	r3, [r7, #7]
 8002f34:	4613      	mov	r3, r2
 8002f36:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[1] = {value};
 8002f38:	79bb      	ldrb	r3, [r7, #6]
 8002f3a:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Mem_Write(&LTC2959_I2C_PORT, LTC2959_I2C_ADDR, reg, 1, &buf[0], 1, 10);
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	230a      	movs	r3, #10
 8002f42:	9302      	str	r3, [sp, #8]
 8002f44:	2301      	movs	r3, #1
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	f107 030c 	add.w	r3, r7, #12
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	2301      	movs	r3, #1
 8002f50:	21c6      	movs	r1, #198	@ 0xc6
 8002f52:	4803      	ldr	r0, [pc, #12]	@ (8002f60 <Write_Reg+0x38>)
 8002f54:	f7fe fcd6 	bl	8001904 <HAL_I2C_Mem_Write>
}
 8002f58:	bf00      	nop
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	200001f0 	.word	0x200001f0

08002f64 <Read_Reg>:

static uint8_t Read_Reg(uint8_t reg){
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af04      	add	r7, sp, #16
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	HAL_I2C_Mem_Read(&LTC2959_I2C_PORT, LTC2959_I2C_ADDR, reg, 1, &value, 1, 10);
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	230a      	movs	r3, #10
 8002f74:	9302      	str	r3, [sp, #8]
 8002f76:	2301      	movs	r3, #1
 8002f78:	9301      	str	r3, [sp, #4]
 8002f7a:	f107 030f 	add.w	r3, r7, #15
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2301      	movs	r3, #1
 8002f82:	21c6      	movs	r1, #198	@ 0xc6
 8002f84:	4803      	ldr	r0, [pc, #12]	@ (8002f94 <Read_Reg+0x30>)
 8002f86:	f7fe fdb7 	bl	8001af8 <HAL_I2C_Mem_Read>
	return value;
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	200001f0 	.word	0x200001f0

08002f98 <Set_ADC_Mode>:

/*
 * Param: mode - This parameter can be a value of @ref ADC_MODE
 * Specifies the ADC MODE
*/
static void Set_ADC_Mode(uint8_t mode){
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71fb      	strb	r3, [r7, #7]
    uint8_t value = Read_Reg(REG_ADC_CONTROL);
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	f7ff ffde 	bl	8002f64 <Read_Reg>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	73fb      	strb	r3, [r7, #15]
    MODIFY_REG(value, CTRL_ADC_MODE_MASK, mode);
 8002fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	b25a      	sxtb	r2, r3
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	b25b      	sxtb	r3, r3
 8002fbe:	73fb      	strb	r3, [r7, #15]
//    value = (value & ~CTRL_ADC_MODE_MASK) | mode;
    Write_Reg(REG_ADC_CONTROL, value);
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	f7ff ffaf 	bl	8002f28 <Write_Reg>
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <Set_GPIO_Configure>:

/*
 * Param: config - This parameter can be a value of @ref GPIO_CONFIG
 * Specifies the GPIO PIN in different modes
*/
static void Set_GPIO_Configure(uint8_t config) {
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	71fb      	strb	r3, [r7, #7]
    uint8_t value = Read_Reg(REG_ADC_CONTROL);
 8002fdc:	2001      	movs	r0, #1
 8002fde:	f7ff ffc1 	bl	8002f64 <Read_Reg>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	73fb      	strb	r3, [r7, #15]
    MODIFY_REG(value, CTRL_GPIO_CONFIG_MASK, config);
 8002fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fea:	f023 0318 	bic.w	r3, r3, #24
 8002fee:	b25a      	sxtb	r2, r3
 8002ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	b25b      	sxtb	r3, r3
 8002ff8:	73fb      	strb	r3, [r7, #15]
//    value = (value & ~CTRL_GPIO_CONFIG_MASK) | config;
    Write_Reg(REG_ADC_CONTROL, value);
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	2001      	movs	r0, #1
 8003000:	f7ff ff92 	bl	8002f28 <Write_Reg>
}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <Set_Voltage_Input>:

/*
 * Param: input - This parameter can be a value of @ref VOLTAGE_INPUT
 * Specifies the VOLTAGE INPUT PIN, BETWEEN VDD OR SENSEN
*/
static void Set_Voltage_Input(uint8_t input) {
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
    uint8_t value = Read_Reg(REG_ADC_CONTROL);
 8003016:	2001      	movs	r0, #1
 8003018:	f7ff ffa4 	bl	8002f64 <Read_Reg>
 800301c:	4603      	mov	r3, r0
 800301e:	73fb      	strb	r3, [r7, #15]
    MODIFY_REG(value, CTRL_CONFIG_VOLTAGE_INPUT_MASK, input);
 8003020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003024:	f023 0304 	bic.w	r3, r3, #4
 8003028:	b25a      	sxtb	r2, r3
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	4313      	orrs	r3, r2
 8003030:	b25b      	sxtb	r3, r3
 8003032:	73fb      	strb	r3, [r7, #15]
//    value = (value & ~CTRL_CONFIG_VOLTAGE_INPUT_MASK) | config;
    Write_Reg(REG_ADC_CONTROL, value);
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	4619      	mov	r1, r3
 8003038:	2001      	movs	r0, #1
 800303a:	f7ff ff75 	bl	8002f28 <Write_Reg>
}
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <Set_Coulomb_Counter_Deadband>:

/*
 * Param: deadband - This parameter can be a value of @ref COULOMB_COUNTER_DEADBAND
 * Specifies the DEADBAND OF COULOMB COUNTER
*/
static void Set_Coulomb_Counter_Deadband(uint8_t deadband){
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	4603      	mov	r3, r0
 800304e:	71fb      	strb	r3, [r7, #7]
	uint8_t value = Read_Reg(REG_COULOMB_COUNTER_CONTROL);
 8003050:	2002      	movs	r0, #2
 8003052:	f7ff ff87 	bl	8002f64 <Read_Reg>
 8003056:	4603      	mov	r3, r0
 8003058:	73fb      	strb	r3, [r7, #15]
    // Set the deadband
	MODIFY_REG(value, CC_CONFIG_DEADBAND_MASK, deadband);
 800305a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800305e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003062:	b25a      	sxtb	r2, r3
 8003064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003068:	4313      	orrs	r3, r2
 800306a:	b25b      	sxtb	r3, r3
 800306c:	73fb      	strb	r3, [r7, #15]
    // Ensure reserved bits are set to their default values
	MODIFY_REG(value, CC_CONFIG_RESERVED_54_MASK, CC_CONFIG_RESERVED_54_DEFAULT);
 800306e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003072:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003076:	b25b      	sxtb	r3, r3
 8003078:	f043 0310 	orr.w	r3, r3, #16
 800307c:	b25b      	sxtb	r3, r3
 800307e:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG(value, CC_CONFIG_RESERVED_20_MASK, CC_CONFIG_RESERVED_20_DEFAULT);
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	f023 0307 	bic.w	r3, r3, #7
 8003086:	73fb      	strb	r3, [r7, #15]
	Write_Reg(REG_COULOMB_COUNTER_CONTROL, value);
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	4619      	mov	r1, r3
 800308c:	2002      	movs	r0, #2
 800308e:	f7ff ff4b 	bl	8002f28 <Write_Reg>
}
 8003092:	bf00      	nop
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <LTC2959_Init>:

/*
 * Param: config_t - pointer to configuration data for LTC2959
 * Init function for LTC2959
 */
void LTC2959_Init(LTC2959_Config_t *config_t){
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
	Set_ADC_Mode(config_t->ADC_mode);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff ff76 	bl	8002f98 <Set_ADC_Mode>
	Set_GPIO_Configure(config_t->GPIO_config);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	785b      	ldrb	r3, [r3, #1]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff8e 	bl	8002fd2 <Set_GPIO_Configure>
	Set_Voltage_Input(config_t->GPIO_config);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	785b      	ldrb	r3, [r3, #1]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff ffa6 	bl	800300c <Set_Voltage_Input>
	Set_Coulomb_Counter_Deadband(config_t->CC_deadband);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	78db      	ldrb	r3, [r3, #3]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ffbe 	bl	8003046 <Set_Coulomb_Counter_Deadband>
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <__cvt>:
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030d8:	461d      	mov	r5, r3
 80030da:	bfbb      	ittet	lt
 80030dc:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80030e0:	461d      	movlt	r5, r3
 80030e2:	2300      	movge	r3, #0
 80030e4:	232d      	movlt	r3, #45	@ 0x2d
 80030e6:	b088      	sub	sp, #32
 80030e8:	4614      	mov	r4, r2
 80030ea:	bfb8      	it	lt
 80030ec:	4614      	movlt	r4, r2
 80030ee:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80030f0:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80030f2:	7013      	strb	r3, [r2, #0]
 80030f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80030f6:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80030fa:	f023 0820 	bic.w	r8, r3, #32
 80030fe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003102:	d005      	beq.n	8003110 <__cvt+0x3e>
 8003104:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003108:	d100      	bne.n	800310c <__cvt+0x3a>
 800310a:	3601      	adds	r6, #1
 800310c:	2302      	movs	r3, #2
 800310e:	e000      	b.n	8003112 <__cvt+0x40>
 8003110:	2303      	movs	r3, #3
 8003112:	aa07      	add	r2, sp, #28
 8003114:	9204      	str	r2, [sp, #16]
 8003116:	aa06      	add	r2, sp, #24
 8003118:	e9cd a202 	strd	sl, r2, [sp, #8]
 800311c:	e9cd 3600 	strd	r3, r6, [sp]
 8003120:	4622      	mov	r2, r4
 8003122:	462b      	mov	r3, r5
 8003124:	f001 f884 	bl	8004230 <_dtoa_r>
 8003128:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800312c:	4607      	mov	r7, r0
 800312e:	d119      	bne.n	8003164 <__cvt+0x92>
 8003130:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003132:	07db      	lsls	r3, r3, #31
 8003134:	d50e      	bpl.n	8003154 <__cvt+0x82>
 8003136:	eb00 0906 	add.w	r9, r0, r6
 800313a:	2200      	movs	r2, #0
 800313c:	2300      	movs	r3, #0
 800313e:	4620      	mov	r0, r4
 8003140:	4629      	mov	r1, r5
 8003142:	f7fd fc31 	bl	80009a8 <__aeabi_dcmpeq>
 8003146:	b108      	cbz	r0, 800314c <__cvt+0x7a>
 8003148:	f8cd 901c 	str.w	r9, [sp, #28]
 800314c:	2230      	movs	r2, #48	@ 0x30
 800314e:	9b07      	ldr	r3, [sp, #28]
 8003150:	454b      	cmp	r3, r9
 8003152:	d31e      	bcc.n	8003192 <__cvt+0xc0>
 8003154:	4638      	mov	r0, r7
 8003156:	9b07      	ldr	r3, [sp, #28]
 8003158:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800315a:	1bdb      	subs	r3, r3, r7
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	b008      	add	sp, #32
 8003160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003164:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003168:	eb00 0906 	add.w	r9, r0, r6
 800316c:	d1e5      	bne.n	800313a <__cvt+0x68>
 800316e:	7803      	ldrb	r3, [r0, #0]
 8003170:	2b30      	cmp	r3, #48	@ 0x30
 8003172:	d10a      	bne.n	800318a <__cvt+0xb8>
 8003174:	2200      	movs	r2, #0
 8003176:	2300      	movs	r3, #0
 8003178:	4620      	mov	r0, r4
 800317a:	4629      	mov	r1, r5
 800317c:	f7fd fc14 	bl	80009a8 <__aeabi_dcmpeq>
 8003180:	b918      	cbnz	r0, 800318a <__cvt+0xb8>
 8003182:	f1c6 0601 	rsb	r6, r6, #1
 8003186:	f8ca 6000 	str.w	r6, [sl]
 800318a:	f8da 3000 	ldr.w	r3, [sl]
 800318e:	4499      	add	r9, r3
 8003190:	e7d3      	b.n	800313a <__cvt+0x68>
 8003192:	1c59      	adds	r1, r3, #1
 8003194:	9107      	str	r1, [sp, #28]
 8003196:	701a      	strb	r2, [r3, #0]
 8003198:	e7d9      	b.n	800314e <__cvt+0x7c>

0800319a <__exponent>:
 800319a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800319c:	2900      	cmp	r1, #0
 800319e:	bfb6      	itet	lt
 80031a0:	232d      	movlt	r3, #45	@ 0x2d
 80031a2:	232b      	movge	r3, #43	@ 0x2b
 80031a4:	4249      	neglt	r1, r1
 80031a6:	2909      	cmp	r1, #9
 80031a8:	7002      	strb	r2, [r0, #0]
 80031aa:	7043      	strb	r3, [r0, #1]
 80031ac:	dd29      	ble.n	8003202 <__exponent+0x68>
 80031ae:	f10d 0307 	add.w	r3, sp, #7
 80031b2:	461d      	mov	r5, r3
 80031b4:	270a      	movs	r7, #10
 80031b6:	fbb1 f6f7 	udiv	r6, r1, r7
 80031ba:	461a      	mov	r2, r3
 80031bc:	fb07 1416 	mls	r4, r7, r6, r1
 80031c0:	3430      	adds	r4, #48	@ 0x30
 80031c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80031c6:	460c      	mov	r4, r1
 80031c8:	2c63      	cmp	r4, #99	@ 0x63
 80031ca:	4631      	mov	r1, r6
 80031cc:	f103 33ff 	add.w	r3, r3, #4294967295
 80031d0:	dcf1      	bgt.n	80031b6 <__exponent+0x1c>
 80031d2:	3130      	adds	r1, #48	@ 0x30
 80031d4:	1e94      	subs	r4, r2, #2
 80031d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80031da:	4623      	mov	r3, r4
 80031dc:	1c41      	adds	r1, r0, #1
 80031de:	42ab      	cmp	r3, r5
 80031e0:	d30a      	bcc.n	80031f8 <__exponent+0x5e>
 80031e2:	f10d 0309 	add.w	r3, sp, #9
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	42ac      	cmp	r4, r5
 80031ea:	bf88      	it	hi
 80031ec:	2300      	movhi	r3, #0
 80031ee:	3302      	adds	r3, #2
 80031f0:	4403      	add	r3, r0
 80031f2:	1a18      	subs	r0, r3, r0
 80031f4:	b003      	add	sp, #12
 80031f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80031fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003200:	e7ed      	b.n	80031de <__exponent+0x44>
 8003202:	2330      	movs	r3, #48	@ 0x30
 8003204:	3130      	adds	r1, #48	@ 0x30
 8003206:	7083      	strb	r3, [r0, #2]
 8003208:	70c1      	strb	r1, [r0, #3]
 800320a:	1d03      	adds	r3, r0, #4
 800320c:	e7f1      	b.n	80031f2 <__exponent+0x58>
	...

08003210 <_printf_float>:
 8003210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003214:	b091      	sub	sp, #68	@ 0x44
 8003216:	460c      	mov	r4, r1
 8003218:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800321c:	4616      	mov	r6, r2
 800321e:	461f      	mov	r7, r3
 8003220:	4605      	mov	r5, r0
 8003222:	f000 fef1 	bl	8004008 <_localeconv_r>
 8003226:	6803      	ldr	r3, [r0, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	9308      	str	r3, [sp, #32]
 800322c:	f7fc ff90 	bl	8000150 <strlen>
 8003230:	2300      	movs	r3, #0
 8003232:	930e      	str	r3, [sp, #56]	@ 0x38
 8003234:	f8d8 3000 	ldr.w	r3, [r8]
 8003238:	9009      	str	r0, [sp, #36]	@ 0x24
 800323a:	3307      	adds	r3, #7
 800323c:	f023 0307 	bic.w	r3, r3, #7
 8003240:	f103 0208 	add.w	r2, r3, #8
 8003244:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003248:	f8d4 b000 	ldr.w	fp, [r4]
 800324c:	f8c8 2000 	str.w	r2, [r8]
 8003250:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003254:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003258:	930b      	str	r3, [sp, #44]	@ 0x2c
 800325a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800325e:	f04f 32ff 	mov.w	r2, #4294967295
 8003262:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003266:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800326a:	4b9c      	ldr	r3, [pc, #624]	@ (80034dc <_printf_float+0x2cc>)
 800326c:	f7fd fbce 	bl	8000a0c <__aeabi_dcmpun>
 8003270:	bb70      	cbnz	r0, 80032d0 <_printf_float+0xc0>
 8003272:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003276:	f04f 32ff 	mov.w	r2, #4294967295
 800327a:	4b98      	ldr	r3, [pc, #608]	@ (80034dc <_printf_float+0x2cc>)
 800327c:	f7fd fba8 	bl	80009d0 <__aeabi_dcmple>
 8003280:	bb30      	cbnz	r0, 80032d0 <_printf_float+0xc0>
 8003282:	2200      	movs	r2, #0
 8003284:	2300      	movs	r3, #0
 8003286:	4640      	mov	r0, r8
 8003288:	4649      	mov	r1, r9
 800328a:	f7fd fb97 	bl	80009bc <__aeabi_dcmplt>
 800328e:	b110      	cbz	r0, 8003296 <_printf_float+0x86>
 8003290:	232d      	movs	r3, #45	@ 0x2d
 8003292:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003296:	4a92      	ldr	r2, [pc, #584]	@ (80034e0 <_printf_float+0x2d0>)
 8003298:	4b92      	ldr	r3, [pc, #584]	@ (80034e4 <_printf_float+0x2d4>)
 800329a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800329e:	bf94      	ite	ls
 80032a0:	4690      	movls	r8, r2
 80032a2:	4698      	movhi	r8, r3
 80032a4:	2303      	movs	r3, #3
 80032a6:	f04f 0900 	mov.w	r9, #0
 80032aa:	6123      	str	r3, [r4, #16]
 80032ac:	f02b 0304 	bic.w	r3, fp, #4
 80032b0:	6023      	str	r3, [r4, #0]
 80032b2:	4633      	mov	r3, r6
 80032b4:	4621      	mov	r1, r4
 80032b6:	4628      	mov	r0, r5
 80032b8:	9700      	str	r7, [sp, #0]
 80032ba:	aa0f      	add	r2, sp, #60	@ 0x3c
 80032bc:	f000 f9d4 	bl	8003668 <_printf_common>
 80032c0:	3001      	adds	r0, #1
 80032c2:	f040 8090 	bne.w	80033e6 <_printf_float+0x1d6>
 80032c6:	f04f 30ff 	mov.w	r0, #4294967295
 80032ca:	b011      	add	sp, #68	@ 0x44
 80032cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032d0:	4642      	mov	r2, r8
 80032d2:	464b      	mov	r3, r9
 80032d4:	4640      	mov	r0, r8
 80032d6:	4649      	mov	r1, r9
 80032d8:	f7fd fb98 	bl	8000a0c <__aeabi_dcmpun>
 80032dc:	b148      	cbz	r0, 80032f2 <_printf_float+0xe2>
 80032de:	464b      	mov	r3, r9
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	bfb8      	it	lt
 80032e4:	232d      	movlt	r3, #45	@ 0x2d
 80032e6:	4a80      	ldr	r2, [pc, #512]	@ (80034e8 <_printf_float+0x2d8>)
 80032e8:	bfb8      	it	lt
 80032ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80032ee:	4b7f      	ldr	r3, [pc, #508]	@ (80034ec <_printf_float+0x2dc>)
 80032f0:	e7d3      	b.n	800329a <_printf_float+0x8a>
 80032f2:	6863      	ldr	r3, [r4, #4]
 80032f4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	d13f      	bne.n	800337c <_printf_float+0x16c>
 80032fc:	2306      	movs	r3, #6
 80032fe:	6063      	str	r3, [r4, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003306:	6023      	str	r3, [r4, #0]
 8003308:	9206      	str	r2, [sp, #24]
 800330a:	aa0e      	add	r2, sp, #56	@ 0x38
 800330c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003310:	aa0d      	add	r2, sp, #52	@ 0x34
 8003312:	9203      	str	r2, [sp, #12]
 8003314:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003318:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800331c:	6863      	ldr	r3, [r4, #4]
 800331e:	4642      	mov	r2, r8
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	4628      	mov	r0, r5
 8003324:	464b      	mov	r3, r9
 8003326:	910a      	str	r1, [sp, #40]	@ 0x28
 8003328:	f7ff fed3 	bl	80030d2 <__cvt>
 800332c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800332e:	4680      	mov	r8, r0
 8003330:	2947      	cmp	r1, #71	@ 0x47
 8003332:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003334:	d128      	bne.n	8003388 <_printf_float+0x178>
 8003336:	1cc8      	adds	r0, r1, #3
 8003338:	db02      	blt.n	8003340 <_printf_float+0x130>
 800333a:	6863      	ldr	r3, [r4, #4]
 800333c:	4299      	cmp	r1, r3
 800333e:	dd40      	ble.n	80033c2 <_printf_float+0x1b2>
 8003340:	f1aa 0a02 	sub.w	sl, sl, #2
 8003344:	fa5f fa8a 	uxtb.w	sl, sl
 8003348:	4652      	mov	r2, sl
 800334a:	3901      	subs	r1, #1
 800334c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003350:	910d      	str	r1, [sp, #52]	@ 0x34
 8003352:	f7ff ff22 	bl	800319a <__exponent>
 8003356:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003358:	4681      	mov	r9, r0
 800335a:	1813      	adds	r3, r2, r0
 800335c:	2a01      	cmp	r2, #1
 800335e:	6123      	str	r3, [r4, #16]
 8003360:	dc02      	bgt.n	8003368 <_printf_float+0x158>
 8003362:	6822      	ldr	r2, [r4, #0]
 8003364:	07d2      	lsls	r2, r2, #31
 8003366:	d501      	bpl.n	800336c <_printf_float+0x15c>
 8003368:	3301      	adds	r3, #1
 800336a:	6123      	str	r3, [r4, #16]
 800336c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003370:	2b00      	cmp	r3, #0
 8003372:	d09e      	beq.n	80032b2 <_printf_float+0xa2>
 8003374:	232d      	movs	r3, #45	@ 0x2d
 8003376:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800337a:	e79a      	b.n	80032b2 <_printf_float+0xa2>
 800337c:	2947      	cmp	r1, #71	@ 0x47
 800337e:	d1bf      	bne.n	8003300 <_printf_float+0xf0>
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1bd      	bne.n	8003300 <_printf_float+0xf0>
 8003384:	2301      	movs	r3, #1
 8003386:	e7ba      	b.n	80032fe <_printf_float+0xee>
 8003388:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800338c:	d9dc      	bls.n	8003348 <_printf_float+0x138>
 800338e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003392:	d118      	bne.n	80033c6 <_printf_float+0x1b6>
 8003394:	2900      	cmp	r1, #0
 8003396:	6863      	ldr	r3, [r4, #4]
 8003398:	dd0b      	ble.n	80033b2 <_printf_float+0x1a2>
 800339a:	6121      	str	r1, [r4, #16]
 800339c:	b913      	cbnz	r3, 80033a4 <_printf_float+0x194>
 800339e:	6822      	ldr	r2, [r4, #0]
 80033a0:	07d0      	lsls	r0, r2, #31
 80033a2:	d502      	bpl.n	80033aa <_printf_float+0x19a>
 80033a4:	3301      	adds	r3, #1
 80033a6:	440b      	add	r3, r1
 80033a8:	6123      	str	r3, [r4, #16]
 80033aa:	f04f 0900 	mov.w	r9, #0
 80033ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 80033b0:	e7dc      	b.n	800336c <_printf_float+0x15c>
 80033b2:	b913      	cbnz	r3, 80033ba <_printf_float+0x1aa>
 80033b4:	6822      	ldr	r2, [r4, #0]
 80033b6:	07d2      	lsls	r2, r2, #31
 80033b8:	d501      	bpl.n	80033be <_printf_float+0x1ae>
 80033ba:	3302      	adds	r3, #2
 80033bc:	e7f4      	b.n	80033a8 <_printf_float+0x198>
 80033be:	2301      	movs	r3, #1
 80033c0:	e7f2      	b.n	80033a8 <_printf_float+0x198>
 80033c2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80033c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80033c8:	4299      	cmp	r1, r3
 80033ca:	db05      	blt.n	80033d8 <_printf_float+0x1c8>
 80033cc:	6823      	ldr	r3, [r4, #0]
 80033ce:	6121      	str	r1, [r4, #16]
 80033d0:	07d8      	lsls	r0, r3, #31
 80033d2:	d5ea      	bpl.n	80033aa <_printf_float+0x19a>
 80033d4:	1c4b      	adds	r3, r1, #1
 80033d6:	e7e7      	b.n	80033a8 <_printf_float+0x198>
 80033d8:	2900      	cmp	r1, #0
 80033da:	bfcc      	ite	gt
 80033dc:	2201      	movgt	r2, #1
 80033de:	f1c1 0202 	rsble	r2, r1, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	e7e0      	b.n	80033a8 <_printf_float+0x198>
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	055a      	lsls	r2, r3, #21
 80033ea:	d407      	bmi.n	80033fc <_printf_float+0x1ec>
 80033ec:	6923      	ldr	r3, [r4, #16]
 80033ee:	4642      	mov	r2, r8
 80033f0:	4631      	mov	r1, r6
 80033f2:	4628      	mov	r0, r5
 80033f4:	47b8      	blx	r7
 80033f6:	3001      	adds	r0, #1
 80033f8:	d12b      	bne.n	8003452 <_printf_float+0x242>
 80033fa:	e764      	b.n	80032c6 <_printf_float+0xb6>
 80033fc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003400:	f240 80dc 	bls.w	80035bc <_printf_float+0x3ac>
 8003404:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003408:	2200      	movs	r2, #0
 800340a:	2300      	movs	r3, #0
 800340c:	f7fd facc 	bl	80009a8 <__aeabi_dcmpeq>
 8003410:	2800      	cmp	r0, #0
 8003412:	d033      	beq.n	800347c <_printf_float+0x26c>
 8003414:	2301      	movs	r3, #1
 8003416:	4631      	mov	r1, r6
 8003418:	4628      	mov	r0, r5
 800341a:	4a35      	ldr	r2, [pc, #212]	@ (80034f0 <_printf_float+0x2e0>)
 800341c:	47b8      	blx	r7
 800341e:	3001      	adds	r0, #1
 8003420:	f43f af51 	beq.w	80032c6 <_printf_float+0xb6>
 8003424:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003428:	4543      	cmp	r3, r8
 800342a:	db02      	blt.n	8003432 <_printf_float+0x222>
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	07d8      	lsls	r0, r3, #31
 8003430:	d50f      	bpl.n	8003452 <_printf_float+0x242>
 8003432:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003436:	4631      	mov	r1, r6
 8003438:	4628      	mov	r0, r5
 800343a:	47b8      	blx	r7
 800343c:	3001      	adds	r0, #1
 800343e:	f43f af42 	beq.w	80032c6 <_printf_float+0xb6>
 8003442:	f04f 0900 	mov.w	r9, #0
 8003446:	f108 38ff 	add.w	r8, r8, #4294967295
 800344a:	f104 0a1a 	add.w	sl, r4, #26
 800344e:	45c8      	cmp	r8, r9
 8003450:	dc09      	bgt.n	8003466 <_printf_float+0x256>
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	079b      	lsls	r3, r3, #30
 8003456:	f100 8102 	bmi.w	800365e <_printf_float+0x44e>
 800345a:	68e0      	ldr	r0, [r4, #12]
 800345c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800345e:	4298      	cmp	r0, r3
 8003460:	bfb8      	it	lt
 8003462:	4618      	movlt	r0, r3
 8003464:	e731      	b.n	80032ca <_printf_float+0xba>
 8003466:	2301      	movs	r3, #1
 8003468:	4652      	mov	r2, sl
 800346a:	4631      	mov	r1, r6
 800346c:	4628      	mov	r0, r5
 800346e:	47b8      	blx	r7
 8003470:	3001      	adds	r0, #1
 8003472:	f43f af28 	beq.w	80032c6 <_printf_float+0xb6>
 8003476:	f109 0901 	add.w	r9, r9, #1
 800347a:	e7e8      	b.n	800344e <_printf_float+0x23e>
 800347c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800347e:	2b00      	cmp	r3, #0
 8003480:	dc38      	bgt.n	80034f4 <_printf_float+0x2e4>
 8003482:	2301      	movs	r3, #1
 8003484:	4631      	mov	r1, r6
 8003486:	4628      	mov	r0, r5
 8003488:	4a19      	ldr	r2, [pc, #100]	@ (80034f0 <_printf_float+0x2e0>)
 800348a:	47b8      	blx	r7
 800348c:	3001      	adds	r0, #1
 800348e:	f43f af1a 	beq.w	80032c6 <_printf_float+0xb6>
 8003492:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003496:	ea59 0303 	orrs.w	r3, r9, r3
 800349a:	d102      	bne.n	80034a2 <_printf_float+0x292>
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	07d9      	lsls	r1, r3, #31
 80034a0:	d5d7      	bpl.n	8003452 <_printf_float+0x242>
 80034a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80034a6:	4631      	mov	r1, r6
 80034a8:	4628      	mov	r0, r5
 80034aa:	47b8      	blx	r7
 80034ac:	3001      	adds	r0, #1
 80034ae:	f43f af0a 	beq.w	80032c6 <_printf_float+0xb6>
 80034b2:	f04f 0a00 	mov.w	sl, #0
 80034b6:	f104 0b1a 	add.w	fp, r4, #26
 80034ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80034bc:	425b      	negs	r3, r3
 80034be:	4553      	cmp	r3, sl
 80034c0:	dc01      	bgt.n	80034c6 <_printf_float+0x2b6>
 80034c2:	464b      	mov	r3, r9
 80034c4:	e793      	b.n	80033ee <_printf_float+0x1de>
 80034c6:	2301      	movs	r3, #1
 80034c8:	465a      	mov	r2, fp
 80034ca:	4631      	mov	r1, r6
 80034cc:	4628      	mov	r0, r5
 80034ce:	47b8      	blx	r7
 80034d0:	3001      	adds	r0, #1
 80034d2:	f43f aef8 	beq.w	80032c6 <_printf_float+0xb6>
 80034d6:	f10a 0a01 	add.w	sl, sl, #1
 80034da:	e7ee      	b.n	80034ba <_printf_float+0x2aa>
 80034dc:	7fefffff 	.word	0x7fefffff
 80034e0:	080077d2 	.word	0x080077d2
 80034e4:	080077d6 	.word	0x080077d6
 80034e8:	080077da 	.word	0x080077da
 80034ec:	080077de 	.word	0x080077de
 80034f0:	080077e2 	.word	0x080077e2
 80034f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80034f6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80034fa:	4553      	cmp	r3, sl
 80034fc:	bfa8      	it	ge
 80034fe:	4653      	movge	r3, sl
 8003500:	2b00      	cmp	r3, #0
 8003502:	4699      	mov	r9, r3
 8003504:	dc36      	bgt.n	8003574 <_printf_float+0x364>
 8003506:	f04f 0b00 	mov.w	fp, #0
 800350a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800350e:	f104 021a 	add.w	r2, r4, #26
 8003512:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003514:	930a      	str	r3, [sp, #40]	@ 0x28
 8003516:	eba3 0309 	sub.w	r3, r3, r9
 800351a:	455b      	cmp	r3, fp
 800351c:	dc31      	bgt.n	8003582 <_printf_float+0x372>
 800351e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003520:	459a      	cmp	sl, r3
 8003522:	dc3a      	bgt.n	800359a <_printf_float+0x38a>
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	07da      	lsls	r2, r3, #31
 8003528:	d437      	bmi.n	800359a <_printf_float+0x38a>
 800352a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800352c:	ebaa 0903 	sub.w	r9, sl, r3
 8003530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003532:	ebaa 0303 	sub.w	r3, sl, r3
 8003536:	4599      	cmp	r9, r3
 8003538:	bfa8      	it	ge
 800353a:	4699      	movge	r9, r3
 800353c:	f1b9 0f00 	cmp.w	r9, #0
 8003540:	dc33      	bgt.n	80035aa <_printf_float+0x39a>
 8003542:	f04f 0800 	mov.w	r8, #0
 8003546:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800354a:	f104 0b1a 	add.w	fp, r4, #26
 800354e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003550:	ebaa 0303 	sub.w	r3, sl, r3
 8003554:	eba3 0309 	sub.w	r3, r3, r9
 8003558:	4543      	cmp	r3, r8
 800355a:	f77f af7a 	ble.w	8003452 <_printf_float+0x242>
 800355e:	2301      	movs	r3, #1
 8003560:	465a      	mov	r2, fp
 8003562:	4631      	mov	r1, r6
 8003564:	4628      	mov	r0, r5
 8003566:	47b8      	blx	r7
 8003568:	3001      	adds	r0, #1
 800356a:	f43f aeac 	beq.w	80032c6 <_printf_float+0xb6>
 800356e:	f108 0801 	add.w	r8, r8, #1
 8003572:	e7ec      	b.n	800354e <_printf_float+0x33e>
 8003574:	4642      	mov	r2, r8
 8003576:	4631      	mov	r1, r6
 8003578:	4628      	mov	r0, r5
 800357a:	47b8      	blx	r7
 800357c:	3001      	adds	r0, #1
 800357e:	d1c2      	bne.n	8003506 <_printf_float+0x2f6>
 8003580:	e6a1      	b.n	80032c6 <_printf_float+0xb6>
 8003582:	2301      	movs	r3, #1
 8003584:	4631      	mov	r1, r6
 8003586:	4628      	mov	r0, r5
 8003588:	920a      	str	r2, [sp, #40]	@ 0x28
 800358a:	47b8      	blx	r7
 800358c:	3001      	adds	r0, #1
 800358e:	f43f ae9a 	beq.w	80032c6 <_printf_float+0xb6>
 8003592:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003594:	f10b 0b01 	add.w	fp, fp, #1
 8003598:	e7bb      	b.n	8003512 <_printf_float+0x302>
 800359a:	4631      	mov	r1, r6
 800359c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80035a0:	4628      	mov	r0, r5
 80035a2:	47b8      	blx	r7
 80035a4:	3001      	adds	r0, #1
 80035a6:	d1c0      	bne.n	800352a <_printf_float+0x31a>
 80035a8:	e68d      	b.n	80032c6 <_printf_float+0xb6>
 80035aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80035ac:	464b      	mov	r3, r9
 80035ae:	4631      	mov	r1, r6
 80035b0:	4628      	mov	r0, r5
 80035b2:	4442      	add	r2, r8
 80035b4:	47b8      	blx	r7
 80035b6:	3001      	adds	r0, #1
 80035b8:	d1c3      	bne.n	8003542 <_printf_float+0x332>
 80035ba:	e684      	b.n	80032c6 <_printf_float+0xb6>
 80035bc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80035c0:	f1ba 0f01 	cmp.w	sl, #1
 80035c4:	dc01      	bgt.n	80035ca <_printf_float+0x3ba>
 80035c6:	07db      	lsls	r3, r3, #31
 80035c8:	d536      	bpl.n	8003638 <_printf_float+0x428>
 80035ca:	2301      	movs	r3, #1
 80035cc:	4642      	mov	r2, r8
 80035ce:	4631      	mov	r1, r6
 80035d0:	4628      	mov	r0, r5
 80035d2:	47b8      	blx	r7
 80035d4:	3001      	adds	r0, #1
 80035d6:	f43f ae76 	beq.w	80032c6 <_printf_float+0xb6>
 80035da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80035de:	4631      	mov	r1, r6
 80035e0:	4628      	mov	r0, r5
 80035e2:	47b8      	blx	r7
 80035e4:	3001      	adds	r0, #1
 80035e6:	f43f ae6e 	beq.w	80032c6 <_printf_float+0xb6>
 80035ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80035ee:	2200      	movs	r2, #0
 80035f0:	2300      	movs	r3, #0
 80035f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80035f6:	f7fd f9d7 	bl	80009a8 <__aeabi_dcmpeq>
 80035fa:	b9c0      	cbnz	r0, 800362e <_printf_float+0x41e>
 80035fc:	4653      	mov	r3, sl
 80035fe:	f108 0201 	add.w	r2, r8, #1
 8003602:	4631      	mov	r1, r6
 8003604:	4628      	mov	r0, r5
 8003606:	47b8      	blx	r7
 8003608:	3001      	adds	r0, #1
 800360a:	d10c      	bne.n	8003626 <_printf_float+0x416>
 800360c:	e65b      	b.n	80032c6 <_printf_float+0xb6>
 800360e:	2301      	movs	r3, #1
 8003610:	465a      	mov	r2, fp
 8003612:	4631      	mov	r1, r6
 8003614:	4628      	mov	r0, r5
 8003616:	47b8      	blx	r7
 8003618:	3001      	adds	r0, #1
 800361a:	f43f ae54 	beq.w	80032c6 <_printf_float+0xb6>
 800361e:	f108 0801 	add.w	r8, r8, #1
 8003622:	45d0      	cmp	r8, sl
 8003624:	dbf3      	blt.n	800360e <_printf_float+0x3fe>
 8003626:	464b      	mov	r3, r9
 8003628:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800362c:	e6e0      	b.n	80033f0 <_printf_float+0x1e0>
 800362e:	f04f 0800 	mov.w	r8, #0
 8003632:	f104 0b1a 	add.w	fp, r4, #26
 8003636:	e7f4      	b.n	8003622 <_printf_float+0x412>
 8003638:	2301      	movs	r3, #1
 800363a:	4642      	mov	r2, r8
 800363c:	e7e1      	b.n	8003602 <_printf_float+0x3f2>
 800363e:	2301      	movs	r3, #1
 8003640:	464a      	mov	r2, r9
 8003642:	4631      	mov	r1, r6
 8003644:	4628      	mov	r0, r5
 8003646:	47b8      	blx	r7
 8003648:	3001      	adds	r0, #1
 800364a:	f43f ae3c 	beq.w	80032c6 <_printf_float+0xb6>
 800364e:	f108 0801 	add.w	r8, r8, #1
 8003652:	68e3      	ldr	r3, [r4, #12]
 8003654:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003656:	1a5b      	subs	r3, r3, r1
 8003658:	4543      	cmp	r3, r8
 800365a:	dcf0      	bgt.n	800363e <_printf_float+0x42e>
 800365c:	e6fd      	b.n	800345a <_printf_float+0x24a>
 800365e:	f04f 0800 	mov.w	r8, #0
 8003662:	f104 0919 	add.w	r9, r4, #25
 8003666:	e7f4      	b.n	8003652 <_printf_float+0x442>

08003668 <_printf_common>:
 8003668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800366c:	4616      	mov	r6, r2
 800366e:	4698      	mov	r8, r3
 8003670:	688a      	ldr	r2, [r1, #8]
 8003672:	690b      	ldr	r3, [r1, #16]
 8003674:	4607      	mov	r7, r0
 8003676:	4293      	cmp	r3, r2
 8003678:	bfb8      	it	lt
 800367a:	4613      	movlt	r3, r2
 800367c:	6033      	str	r3, [r6, #0]
 800367e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003682:	460c      	mov	r4, r1
 8003684:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003688:	b10a      	cbz	r2, 800368e <_printf_common+0x26>
 800368a:	3301      	adds	r3, #1
 800368c:	6033      	str	r3, [r6, #0]
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	0699      	lsls	r1, r3, #26
 8003692:	bf42      	ittt	mi
 8003694:	6833      	ldrmi	r3, [r6, #0]
 8003696:	3302      	addmi	r3, #2
 8003698:	6033      	strmi	r3, [r6, #0]
 800369a:	6825      	ldr	r5, [r4, #0]
 800369c:	f015 0506 	ands.w	r5, r5, #6
 80036a0:	d106      	bne.n	80036b0 <_printf_common+0x48>
 80036a2:	f104 0a19 	add.w	sl, r4, #25
 80036a6:	68e3      	ldr	r3, [r4, #12]
 80036a8:	6832      	ldr	r2, [r6, #0]
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	42ab      	cmp	r3, r5
 80036ae:	dc2b      	bgt.n	8003708 <_printf_common+0xa0>
 80036b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036b4:	6822      	ldr	r2, [r4, #0]
 80036b6:	3b00      	subs	r3, #0
 80036b8:	bf18      	it	ne
 80036ba:	2301      	movne	r3, #1
 80036bc:	0692      	lsls	r2, r2, #26
 80036be:	d430      	bmi.n	8003722 <_printf_common+0xba>
 80036c0:	4641      	mov	r1, r8
 80036c2:	4638      	mov	r0, r7
 80036c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80036c8:	47c8      	blx	r9
 80036ca:	3001      	adds	r0, #1
 80036cc:	d023      	beq.n	8003716 <_printf_common+0xae>
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	6922      	ldr	r2, [r4, #16]
 80036d2:	f003 0306 	and.w	r3, r3, #6
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	bf14      	ite	ne
 80036da:	2500      	movne	r5, #0
 80036dc:	6833      	ldreq	r3, [r6, #0]
 80036de:	f04f 0600 	mov.w	r6, #0
 80036e2:	bf08      	it	eq
 80036e4:	68e5      	ldreq	r5, [r4, #12]
 80036e6:	f104 041a 	add.w	r4, r4, #26
 80036ea:	bf08      	it	eq
 80036ec:	1aed      	subeq	r5, r5, r3
 80036ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80036f2:	bf08      	it	eq
 80036f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036f8:	4293      	cmp	r3, r2
 80036fa:	bfc4      	itt	gt
 80036fc:	1a9b      	subgt	r3, r3, r2
 80036fe:	18ed      	addgt	r5, r5, r3
 8003700:	42b5      	cmp	r5, r6
 8003702:	d11a      	bne.n	800373a <_printf_common+0xd2>
 8003704:	2000      	movs	r0, #0
 8003706:	e008      	b.n	800371a <_printf_common+0xb2>
 8003708:	2301      	movs	r3, #1
 800370a:	4652      	mov	r2, sl
 800370c:	4641      	mov	r1, r8
 800370e:	4638      	mov	r0, r7
 8003710:	47c8      	blx	r9
 8003712:	3001      	adds	r0, #1
 8003714:	d103      	bne.n	800371e <_printf_common+0xb6>
 8003716:	f04f 30ff 	mov.w	r0, #4294967295
 800371a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800371e:	3501      	adds	r5, #1
 8003720:	e7c1      	b.n	80036a6 <_printf_common+0x3e>
 8003722:	2030      	movs	r0, #48	@ 0x30
 8003724:	18e1      	adds	r1, r4, r3
 8003726:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003730:	4422      	add	r2, r4
 8003732:	3302      	adds	r3, #2
 8003734:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003738:	e7c2      	b.n	80036c0 <_printf_common+0x58>
 800373a:	2301      	movs	r3, #1
 800373c:	4622      	mov	r2, r4
 800373e:	4641      	mov	r1, r8
 8003740:	4638      	mov	r0, r7
 8003742:	47c8      	blx	r9
 8003744:	3001      	adds	r0, #1
 8003746:	d0e6      	beq.n	8003716 <_printf_common+0xae>
 8003748:	3601      	adds	r6, #1
 800374a:	e7d9      	b.n	8003700 <_printf_common+0x98>

0800374c <_printf_i>:
 800374c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003750:	7e0f      	ldrb	r7, [r1, #24]
 8003752:	4691      	mov	r9, r2
 8003754:	2f78      	cmp	r7, #120	@ 0x78
 8003756:	4680      	mov	r8, r0
 8003758:	460c      	mov	r4, r1
 800375a:	469a      	mov	sl, r3
 800375c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800375e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003762:	d807      	bhi.n	8003774 <_printf_i+0x28>
 8003764:	2f62      	cmp	r7, #98	@ 0x62
 8003766:	d80a      	bhi.n	800377e <_printf_i+0x32>
 8003768:	2f00      	cmp	r7, #0
 800376a:	f000 80d3 	beq.w	8003914 <_printf_i+0x1c8>
 800376e:	2f58      	cmp	r7, #88	@ 0x58
 8003770:	f000 80ba 	beq.w	80038e8 <_printf_i+0x19c>
 8003774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003778:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800377c:	e03a      	b.n	80037f4 <_printf_i+0xa8>
 800377e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003782:	2b15      	cmp	r3, #21
 8003784:	d8f6      	bhi.n	8003774 <_printf_i+0x28>
 8003786:	a101      	add	r1, pc, #4	@ (adr r1, 800378c <_printf_i+0x40>)
 8003788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800378c:	080037e5 	.word	0x080037e5
 8003790:	080037f9 	.word	0x080037f9
 8003794:	08003775 	.word	0x08003775
 8003798:	08003775 	.word	0x08003775
 800379c:	08003775 	.word	0x08003775
 80037a0:	08003775 	.word	0x08003775
 80037a4:	080037f9 	.word	0x080037f9
 80037a8:	08003775 	.word	0x08003775
 80037ac:	08003775 	.word	0x08003775
 80037b0:	08003775 	.word	0x08003775
 80037b4:	08003775 	.word	0x08003775
 80037b8:	080038fb 	.word	0x080038fb
 80037bc:	08003823 	.word	0x08003823
 80037c0:	080038b5 	.word	0x080038b5
 80037c4:	08003775 	.word	0x08003775
 80037c8:	08003775 	.word	0x08003775
 80037cc:	0800391d 	.word	0x0800391d
 80037d0:	08003775 	.word	0x08003775
 80037d4:	08003823 	.word	0x08003823
 80037d8:	08003775 	.word	0x08003775
 80037dc:	08003775 	.word	0x08003775
 80037e0:	080038bd 	.word	0x080038bd
 80037e4:	6833      	ldr	r3, [r6, #0]
 80037e6:	1d1a      	adds	r2, r3, #4
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6032      	str	r2, [r6, #0]
 80037ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80037f4:	2301      	movs	r3, #1
 80037f6:	e09e      	b.n	8003936 <_printf_i+0x1ea>
 80037f8:	6833      	ldr	r3, [r6, #0]
 80037fa:	6820      	ldr	r0, [r4, #0]
 80037fc:	1d19      	adds	r1, r3, #4
 80037fe:	6031      	str	r1, [r6, #0]
 8003800:	0606      	lsls	r6, r0, #24
 8003802:	d501      	bpl.n	8003808 <_printf_i+0xbc>
 8003804:	681d      	ldr	r5, [r3, #0]
 8003806:	e003      	b.n	8003810 <_printf_i+0xc4>
 8003808:	0645      	lsls	r5, r0, #25
 800380a:	d5fb      	bpl.n	8003804 <_printf_i+0xb8>
 800380c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003810:	2d00      	cmp	r5, #0
 8003812:	da03      	bge.n	800381c <_printf_i+0xd0>
 8003814:	232d      	movs	r3, #45	@ 0x2d
 8003816:	426d      	negs	r5, r5
 8003818:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800381c:	230a      	movs	r3, #10
 800381e:	4859      	ldr	r0, [pc, #356]	@ (8003984 <_printf_i+0x238>)
 8003820:	e011      	b.n	8003846 <_printf_i+0xfa>
 8003822:	6821      	ldr	r1, [r4, #0]
 8003824:	6833      	ldr	r3, [r6, #0]
 8003826:	0608      	lsls	r0, r1, #24
 8003828:	f853 5b04 	ldr.w	r5, [r3], #4
 800382c:	d402      	bmi.n	8003834 <_printf_i+0xe8>
 800382e:	0649      	lsls	r1, r1, #25
 8003830:	bf48      	it	mi
 8003832:	b2ad      	uxthmi	r5, r5
 8003834:	2f6f      	cmp	r7, #111	@ 0x6f
 8003836:	6033      	str	r3, [r6, #0]
 8003838:	bf14      	ite	ne
 800383a:	230a      	movne	r3, #10
 800383c:	2308      	moveq	r3, #8
 800383e:	4851      	ldr	r0, [pc, #324]	@ (8003984 <_printf_i+0x238>)
 8003840:	2100      	movs	r1, #0
 8003842:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003846:	6866      	ldr	r6, [r4, #4]
 8003848:	2e00      	cmp	r6, #0
 800384a:	bfa8      	it	ge
 800384c:	6821      	ldrge	r1, [r4, #0]
 800384e:	60a6      	str	r6, [r4, #8]
 8003850:	bfa4      	itt	ge
 8003852:	f021 0104 	bicge.w	r1, r1, #4
 8003856:	6021      	strge	r1, [r4, #0]
 8003858:	b90d      	cbnz	r5, 800385e <_printf_i+0x112>
 800385a:	2e00      	cmp	r6, #0
 800385c:	d04b      	beq.n	80038f6 <_printf_i+0x1aa>
 800385e:	4616      	mov	r6, r2
 8003860:	fbb5 f1f3 	udiv	r1, r5, r3
 8003864:	fb03 5711 	mls	r7, r3, r1, r5
 8003868:	5dc7      	ldrb	r7, [r0, r7]
 800386a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800386e:	462f      	mov	r7, r5
 8003870:	42bb      	cmp	r3, r7
 8003872:	460d      	mov	r5, r1
 8003874:	d9f4      	bls.n	8003860 <_printf_i+0x114>
 8003876:	2b08      	cmp	r3, #8
 8003878:	d10b      	bne.n	8003892 <_printf_i+0x146>
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	07df      	lsls	r7, r3, #31
 800387e:	d508      	bpl.n	8003892 <_printf_i+0x146>
 8003880:	6923      	ldr	r3, [r4, #16]
 8003882:	6861      	ldr	r1, [r4, #4]
 8003884:	4299      	cmp	r1, r3
 8003886:	bfde      	ittt	le
 8003888:	2330      	movle	r3, #48	@ 0x30
 800388a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800388e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003892:	1b92      	subs	r2, r2, r6
 8003894:	6122      	str	r2, [r4, #16]
 8003896:	464b      	mov	r3, r9
 8003898:	4621      	mov	r1, r4
 800389a:	4640      	mov	r0, r8
 800389c:	f8cd a000 	str.w	sl, [sp]
 80038a0:	aa03      	add	r2, sp, #12
 80038a2:	f7ff fee1 	bl	8003668 <_printf_common>
 80038a6:	3001      	adds	r0, #1
 80038a8:	d14a      	bne.n	8003940 <_printf_i+0x1f4>
 80038aa:	f04f 30ff 	mov.w	r0, #4294967295
 80038ae:	b004      	add	sp, #16
 80038b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b4:	6823      	ldr	r3, [r4, #0]
 80038b6:	f043 0320 	orr.w	r3, r3, #32
 80038ba:	6023      	str	r3, [r4, #0]
 80038bc:	2778      	movs	r7, #120	@ 0x78
 80038be:	4832      	ldr	r0, [pc, #200]	@ (8003988 <_printf_i+0x23c>)
 80038c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	6831      	ldr	r1, [r6, #0]
 80038c8:	061f      	lsls	r7, r3, #24
 80038ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80038ce:	d402      	bmi.n	80038d6 <_printf_i+0x18a>
 80038d0:	065f      	lsls	r7, r3, #25
 80038d2:	bf48      	it	mi
 80038d4:	b2ad      	uxthmi	r5, r5
 80038d6:	6031      	str	r1, [r6, #0]
 80038d8:	07d9      	lsls	r1, r3, #31
 80038da:	bf44      	itt	mi
 80038dc:	f043 0320 	orrmi.w	r3, r3, #32
 80038e0:	6023      	strmi	r3, [r4, #0]
 80038e2:	b11d      	cbz	r5, 80038ec <_printf_i+0x1a0>
 80038e4:	2310      	movs	r3, #16
 80038e6:	e7ab      	b.n	8003840 <_printf_i+0xf4>
 80038e8:	4826      	ldr	r0, [pc, #152]	@ (8003984 <_printf_i+0x238>)
 80038ea:	e7e9      	b.n	80038c0 <_printf_i+0x174>
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	f023 0320 	bic.w	r3, r3, #32
 80038f2:	6023      	str	r3, [r4, #0]
 80038f4:	e7f6      	b.n	80038e4 <_printf_i+0x198>
 80038f6:	4616      	mov	r6, r2
 80038f8:	e7bd      	b.n	8003876 <_printf_i+0x12a>
 80038fa:	6833      	ldr	r3, [r6, #0]
 80038fc:	6825      	ldr	r5, [r4, #0]
 80038fe:	1d18      	adds	r0, r3, #4
 8003900:	6961      	ldr	r1, [r4, #20]
 8003902:	6030      	str	r0, [r6, #0]
 8003904:	062e      	lsls	r6, r5, #24
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	d501      	bpl.n	800390e <_printf_i+0x1c2>
 800390a:	6019      	str	r1, [r3, #0]
 800390c:	e002      	b.n	8003914 <_printf_i+0x1c8>
 800390e:	0668      	lsls	r0, r5, #25
 8003910:	d5fb      	bpl.n	800390a <_printf_i+0x1be>
 8003912:	8019      	strh	r1, [r3, #0]
 8003914:	2300      	movs	r3, #0
 8003916:	4616      	mov	r6, r2
 8003918:	6123      	str	r3, [r4, #16]
 800391a:	e7bc      	b.n	8003896 <_printf_i+0x14a>
 800391c:	6833      	ldr	r3, [r6, #0]
 800391e:	2100      	movs	r1, #0
 8003920:	1d1a      	adds	r2, r3, #4
 8003922:	6032      	str	r2, [r6, #0]
 8003924:	681e      	ldr	r6, [r3, #0]
 8003926:	6862      	ldr	r2, [r4, #4]
 8003928:	4630      	mov	r0, r6
 800392a:	f000 fbe4 	bl	80040f6 <memchr>
 800392e:	b108      	cbz	r0, 8003934 <_printf_i+0x1e8>
 8003930:	1b80      	subs	r0, r0, r6
 8003932:	6060      	str	r0, [r4, #4]
 8003934:	6863      	ldr	r3, [r4, #4]
 8003936:	6123      	str	r3, [r4, #16]
 8003938:	2300      	movs	r3, #0
 800393a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800393e:	e7aa      	b.n	8003896 <_printf_i+0x14a>
 8003940:	4632      	mov	r2, r6
 8003942:	4649      	mov	r1, r9
 8003944:	4640      	mov	r0, r8
 8003946:	6923      	ldr	r3, [r4, #16]
 8003948:	47d0      	blx	sl
 800394a:	3001      	adds	r0, #1
 800394c:	d0ad      	beq.n	80038aa <_printf_i+0x15e>
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	079b      	lsls	r3, r3, #30
 8003952:	d413      	bmi.n	800397c <_printf_i+0x230>
 8003954:	68e0      	ldr	r0, [r4, #12]
 8003956:	9b03      	ldr	r3, [sp, #12]
 8003958:	4298      	cmp	r0, r3
 800395a:	bfb8      	it	lt
 800395c:	4618      	movlt	r0, r3
 800395e:	e7a6      	b.n	80038ae <_printf_i+0x162>
 8003960:	2301      	movs	r3, #1
 8003962:	4632      	mov	r2, r6
 8003964:	4649      	mov	r1, r9
 8003966:	4640      	mov	r0, r8
 8003968:	47d0      	blx	sl
 800396a:	3001      	adds	r0, #1
 800396c:	d09d      	beq.n	80038aa <_printf_i+0x15e>
 800396e:	3501      	adds	r5, #1
 8003970:	68e3      	ldr	r3, [r4, #12]
 8003972:	9903      	ldr	r1, [sp, #12]
 8003974:	1a5b      	subs	r3, r3, r1
 8003976:	42ab      	cmp	r3, r5
 8003978:	dcf2      	bgt.n	8003960 <_printf_i+0x214>
 800397a:	e7eb      	b.n	8003954 <_printf_i+0x208>
 800397c:	2500      	movs	r5, #0
 800397e:	f104 0619 	add.w	r6, r4, #25
 8003982:	e7f5      	b.n	8003970 <_printf_i+0x224>
 8003984:	080077e4 	.word	0x080077e4
 8003988:	080077f5 	.word	0x080077f5

0800398c <_scanf_float>:
 800398c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003990:	b087      	sub	sp, #28
 8003992:	9303      	str	r3, [sp, #12]
 8003994:	688b      	ldr	r3, [r1, #8]
 8003996:	4617      	mov	r7, r2
 8003998:	1e5a      	subs	r2, r3, #1
 800399a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800399e:	bf82      	ittt	hi
 80039a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80039a4:	eb03 0b05 	addhi.w	fp, r3, r5
 80039a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80039ac:	460a      	mov	r2, r1
 80039ae:	f04f 0500 	mov.w	r5, #0
 80039b2:	bf88      	it	hi
 80039b4:	608b      	strhi	r3, [r1, #8]
 80039b6:	680b      	ldr	r3, [r1, #0]
 80039b8:	4680      	mov	r8, r0
 80039ba:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80039be:	f842 3b1c 	str.w	r3, [r2], #28
 80039c2:	460c      	mov	r4, r1
 80039c4:	bf98      	it	ls
 80039c6:	f04f 0b00 	movls.w	fp, #0
 80039ca:	4616      	mov	r6, r2
 80039cc:	46aa      	mov	sl, r5
 80039ce:	46a9      	mov	r9, r5
 80039d0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80039d4:	9201      	str	r2, [sp, #4]
 80039d6:	9502      	str	r5, [sp, #8]
 80039d8:	68a2      	ldr	r2, [r4, #8]
 80039da:	b152      	cbz	r2, 80039f2 <_scanf_float+0x66>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b4e      	cmp	r3, #78	@ 0x4e
 80039e2:	d865      	bhi.n	8003ab0 <_scanf_float+0x124>
 80039e4:	2b40      	cmp	r3, #64	@ 0x40
 80039e6:	d83d      	bhi.n	8003a64 <_scanf_float+0xd8>
 80039e8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80039ec:	b2c8      	uxtb	r0, r1
 80039ee:	280e      	cmp	r0, #14
 80039f0:	d93b      	bls.n	8003a6a <_scanf_float+0xde>
 80039f2:	f1b9 0f00 	cmp.w	r9, #0
 80039f6:	d003      	beq.n	8003a00 <_scanf_float+0x74>
 80039f8:	6823      	ldr	r3, [r4, #0]
 80039fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039fe:	6023      	str	r3, [r4, #0]
 8003a00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a04:	f1ba 0f01 	cmp.w	sl, #1
 8003a08:	f200 8118 	bhi.w	8003c3c <_scanf_float+0x2b0>
 8003a0c:	9b01      	ldr	r3, [sp, #4]
 8003a0e:	429e      	cmp	r6, r3
 8003a10:	f200 8109 	bhi.w	8003c26 <_scanf_float+0x29a>
 8003a14:	2001      	movs	r0, #1
 8003a16:	b007      	add	sp, #28
 8003a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a1c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003a20:	2a0d      	cmp	r2, #13
 8003a22:	d8e6      	bhi.n	80039f2 <_scanf_float+0x66>
 8003a24:	a101      	add	r1, pc, #4	@ (adr r1, 8003a2c <_scanf_float+0xa0>)
 8003a26:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003a2a:	bf00      	nop
 8003a2c:	08003b73 	.word	0x08003b73
 8003a30:	080039f3 	.word	0x080039f3
 8003a34:	080039f3 	.word	0x080039f3
 8003a38:	080039f3 	.word	0x080039f3
 8003a3c:	08003bd3 	.word	0x08003bd3
 8003a40:	08003bab 	.word	0x08003bab
 8003a44:	080039f3 	.word	0x080039f3
 8003a48:	080039f3 	.word	0x080039f3
 8003a4c:	08003b81 	.word	0x08003b81
 8003a50:	080039f3 	.word	0x080039f3
 8003a54:	080039f3 	.word	0x080039f3
 8003a58:	080039f3 	.word	0x080039f3
 8003a5c:	080039f3 	.word	0x080039f3
 8003a60:	08003b39 	.word	0x08003b39
 8003a64:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003a68:	e7da      	b.n	8003a20 <_scanf_float+0x94>
 8003a6a:	290e      	cmp	r1, #14
 8003a6c:	d8c1      	bhi.n	80039f2 <_scanf_float+0x66>
 8003a6e:	a001      	add	r0, pc, #4	@ (adr r0, 8003a74 <_scanf_float+0xe8>)
 8003a70:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003a74:	08003b29 	.word	0x08003b29
 8003a78:	080039f3 	.word	0x080039f3
 8003a7c:	08003b29 	.word	0x08003b29
 8003a80:	08003bbf 	.word	0x08003bbf
 8003a84:	080039f3 	.word	0x080039f3
 8003a88:	08003ad1 	.word	0x08003ad1
 8003a8c:	08003b0f 	.word	0x08003b0f
 8003a90:	08003b0f 	.word	0x08003b0f
 8003a94:	08003b0f 	.word	0x08003b0f
 8003a98:	08003b0f 	.word	0x08003b0f
 8003a9c:	08003b0f 	.word	0x08003b0f
 8003aa0:	08003b0f 	.word	0x08003b0f
 8003aa4:	08003b0f 	.word	0x08003b0f
 8003aa8:	08003b0f 	.word	0x08003b0f
 8003aac:	08003b0f 	.word	0x08003b0f
 8003ab0:	2b6e      	cmp	r3, #110	@ 0x6e
 8003ab2:	d809      	bhi.n	8003ac8 <_scanf_float+0x13c>
 8003ab4:	2b60      	cmp	r3, #96	@ 0x60
 8003ab6:	d8b1      	bhi.n	8003a1c <_scanf_float+0x90>
 8003ab8:	2b54      	cmp	r3, #84	@ 0x54
 8003aba:	d07b      	beq.n	8003bb4 <_scanf_float+0x228>
 8003abc:	2b59      	cmp	r3, #89	@ 0x59
 8003abe:	d198      	bne.n	80039f2 <_scanf_float+0x66>
 8003ac0:	2d07      	cmp	r5, #7
 8003ac2:	d196      	bne.n	80039f2 <_scanf_float+0x66>
 8003ac4:	2508      	movs	r5, #8
 8003ac6:	e02c      	b.n	8003b22 <_scanf_float+0x196>
 8003ac8:	2b74      	cmp	r3, #116	@ 0x74
 8003aca:	d073      	beq.n	8003bb4 <_scanf_float+0x228>
 8003acc:	2b79      	cmp	r3, #121	@ 0x79
 8003ace:	e7f6      	b.n	8003abe <_scanf_float+0x132>
 8003ad0:	6821      	ldr	r1, [r4, #0]
 8003ad2:	05c8      	lsls	r0, r1, #23
 8003ad4:	d51b      	bpl.n	8003b0e <_scanf_float+0x182>
 8003ad6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003ada:	6021      	str	r1, [r4, #0]
 8003adc:	f109 0901 	add.w	r9, r9, #1
 8003ae0:	f1bb 0f00 	cmp.w	fp, #0
 8003ae4:	d003      	beq.n	8003aee <_scanf_float+0x162>
 8003ae6:	3201      	adds	r2, #1
 8003ae8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003aec:	60a2      	str	r2, [r4, #8]
 8003aee:	68a3      	ldr	r3, [r4, #8]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	60a3      	str	r3, [r4, #8]
 8003af4:	6923      	ldr	r3, [r4, #16]
 8003af6:	3301      	adds	r3, #1
 8003af8:	6123      	str	r3, [r4, #16]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3b01      	subs	r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	f340 8087 	ble.w	8003c14 <_scanf_float+0x288>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	e764      	b.n	80039d8 <_scanf_float+0x4c>
 8003b0e:	eb1a 0105 	adds.w	r1, sl, r5
 8003b12:	f47f af6e 	bne.w	80039f2 <_scanf_float+0x66>
 8003b16:	460d      	mov	r5, r1
 8003b18:	468a      	mov	sl, r1
 8003b1a:	6822      	ldr	r2, [r4, #0]
 8003b1c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003b20:	6022      	str	r2, [r4, #0]
 8003b22:	f806 3b01 	strb.w	r3, [r6], #1
 8003b26:	e7e2      	b.n	8003aee <_scanf_float+0x162>
 8003b28:	6822      	ldr	r2, [r4, #0]
 8003b2a:	0610      	lsls	r0, r2, #24
 8003b2c:	f57f af61 	bpl.w	80039f2 <_scanf_float+0x66>
 8003b30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b34:	6022      	str	r2, [r4, #0]
 8003b36:	e7f4      	b.n	8003b22 <_scanf_float+0x196>
 8003b38:	f1ba 0f00 	cmp.w	sl, #0
 8003b3c:	d10e      	bne.n	8003b5c <_scanf_float+0x1d0>
 8003b3e:	f1b9 0f00 	cmp.w	r9, #0
 8003b42:	d10e      	bne.n	8003b62 <_scanf_float+0x1d6>
 8003b44:	6822      	ldr	r2, [r4, #0]
 8003b46:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003b4a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003b4e:	d108      	bne.n	8003b62 <_scanf_float+0x1d6>
 8003b50:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003b54:	f04f 0a01 	mov.w	sl, #1
 8003b58:	6022      	str	r2, [r4, #0]
 8003b5a:	e7e2      	b.n	8003b22 <_scanf_float+0x196>
 8003b5c:	f1ba 0f02 	cmp.w	sl, #2
 8003b60:	d055      	beq.n	8003c0e <_scanf_float+0x282>
 8003b62:	2d01      	cmp	r5, #1
 8003b64:	d002      	beq.n	8003b6c <_scanf_float+0x1e0>
 8003b66:	2d04      	cmp	r5, #4
 8003b68:	f47f af43 	bne.w	80039f2 <_scanf_float+0x66>
 8003b6c:	3501      	adds	r5, #1
 8003b6e:	b2ed      	uxtb	r5, r5
 8003b70:	e7d7      	b.n	8003b22 <_scanf_float+0x196>
 8003b72:	f1ba 0f01 	cmp.w	sl, #1
 8003b76:	f47f af3c 	bne.w	80039f2 <_scanf_float+0x66>
 8003b7a:	f04f 0a02 	mov.w	sl, #2
 8003b7e:	e7d0      	b.n	8003b22 <_scanf_float+0x196>
 8003b80:	b97d      	cbnz	r5, 8003ba2 <_scanf_float+0x216>
 8003b82:	f1b9 0f00 	cmp.w	r9, #0
 8003b86:	f47f af37 	bne.w	80039f8 <_scanf_float+0x6c>
 8003b8a:	6822      	ldr	r2, [r4, #0]
 8003b8c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003b90:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003b94:	f040 8103 	bne.w	8003d9e <_scanf_float+0x412>
 8003b98:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003b9c:	2501      	movs	r5, #1
 8003b9e:	6022      	str	r2, [r4, #0]
 8003ba0:	e7bf      	b.n	8003b22 <_scanf_float+0x196>
 8003ba2:	2d03      	cmp	r5, #3
 8003ba4:	d0e2      	beq.n	8003b6c <_scanf_float+0x1e0>
 8003ba6:	2d05      	cmp	r5, #5
 8003ba8:	e7de      	b.n	8003b68 <_scanf_float+0x1dc>
 8003baa:	2d02      	cmp	r5, #2
 8003bac:	f47f af21 	bne.w	80039f2 <_scanf_float+0x66>
 8003bb0:	2503      	movs	r5, #3
 8003bb2:	e7b6      	b.n	8003b22 <_scanf_float+0x196>
 8003bb4:	2d06      	cmp	r5, #6
 8003bb6:	f47f af1c 	bne.w	80039f2 <_scanf_float+0x66>
 8003bba:	2507      	movs	r5, #7
 8003bbc:	e7b1      	b.n	8003b22 <_scanf_float+0x196>
 8003bbe:	6822      	ldr	r2, [r4, #0]
 8003bc0:	0591      	lsls	r1, r2, #22
 8003bc2:	f57f af16 	bpl.w	80039f2 <_scanf_float+0x66>
 8003bc6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003bca:	6022      	str	r2, [r4, #0]
 8003bcc:	f8cd 9008 	str.w	r9, [sp, #8]
 8003bd0:	e7a7      	b.n	8003b22 <_scanf_float+0x196>
 8003bd2:	6822      	ldr	r2, [r4, #0]
 8003bd4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003bd8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003bdc:	d006      	beq.n	8003bec <_scanf_float+0x260>
 8003bde:	0550      	lsls	r0, r2, #21
 8003be0:	f57f af07 	bpl.w	80039f2 <_scanf_float+0x66>
 8003be4:	f1b9 0f00 	cmp.w	r9, #0
 8003be8:	f000 80d9 	beq.w	8003d9e <_scanf_float+0x412>
 8003bec:	0591      	lsls	r1, r2, #22
 8003bee:	bf58      	it	pl
 8003bf0:	9902      	ldrpl	r1, [sp, #8]
 8003bf2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003bf6:	bf58      	it	pl
 8003bf8:	eba9 0101 	subpl.w	r1, r9, r1
 8003bfc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003c00:	f04f 0900 	mov.w	r9, #0
 8003c04:	bf58      	it	pl
 8003c06:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003c0a:	6022      	str	r2, [r4, #0]
 8003c0c:	e789      	b.n	8003b22 <_scanf_float+0x196>
 8003c0e:	f04f 0a03 	mov.w	sl, #3
 8003c12:	e786      	b.n	8003b22 <_scanf_float+0x196>
 8003c14:	4639      	mov	r1, r7
 8003c16:	4640      	mov	r0, r8
 8003c18:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003c1c:	4798      	blx	r3
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	f43f aeda 	beq.w	80039d8 <_scanf_float+0x4c>
 8003c24:	e6e5      	b.n	80039f2 <_scanf_float+0x66>
 8003c26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003c2a:	463a      	mov	r2, r7
 8003c2c:	4640      	mov	r0, r8
 8003c2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003c32:	4798      	blx	r3
 8003c34:	6923      	ldr	r3, [r4, #16]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	6123      	str	r3, [r4, #16]
 8003c3a:	e6e7      	b.n	8003a0c <_scanf_float+0x80>
 8003c3c:	1e6b      	subs	r3, r5, #1
 8003c3e:	2b06      	cmp	r3, #6
 8003c40:	d824      	bhi.n	8003c8c <_scanf_float+0x300>
 8003c42:	2d02      	cmp	r5, #2
 8003c44:	d836      	bhi.n	8003cb4 <_scanf_float+0x328>
 8003c46:	9b01      	ldr	r3, [sp, #4]
 8003c48:	429e      	cmp	r6, r3
 8003c4a:	f67f aee3 	bls.w	8003a14 <_scanf_float+0x88>
 8003c4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003c52:	463a      	mov	r2, r7
 8003c54:	4640      	mov	r0, r8
 8003c56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003c5a:	4798      	blx	r3
 8003c5c:	6923      	ldr	r3, [r4, #16]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	6123      	str	r3, [r4, #16]
 8003c62:	e7f0      	b.n	8003c46 <_scanf_float+0x2ba>
 8003c64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003c68:	463a      	mov	r2, r7
 8003c6a:	4640      	mov	r0, r8
 8003c6c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003c70:	4798      	blx	r3
 8003c72:	6923      	ldr	r3, [r4, #16]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	6123      	str	r3, [r4, #16]
 8003c78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c7c:	fa5f fa8a 	uxtb.w	sl, sl
 8003c80:	f1ba 0f02 	cmp.w	sl, #2
 8003c84:	d1ee      	bne.n	8003c64 <_scanf_float+0x2d8>
 8003c86:	3d03      	subs	r5, #3
 8003c88:	b2ed      	uxtb	r5, r5
 8003c8a:	1b76      	subs	r6, r6, r5
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	05da      	lsls	r2, r3, #23
 8003c90:	d530      	bpl.n	8003cf4 <_scanf_float+0x368>
 8003c92:	055b      	lsls	r3, r3, #21
 8003c94:	d511      	bpl.n	8003cba <_scanf_float+0x32e>
 8003c96:	9b01      	ldr	r3, [sp, #4]
 8003c98:	429e      	cmp	r6, r3
 8003c9a:	f67f aebb 	bls.w	8003a14 <_scanf_float+0x88>
 8003c9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003ca2:	463a      	mov	r2, r7
 8003ca4:	4640      	mov	r0, r8
 8003ca6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003caa:	4798      	blx	r3
 8003cac:	6923      	ldr	r3, [r4, #16]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	6123      	str	r3, [r4, #16]
 8003cb2:	e7f0      	b.n	8003c96 <_scanf_float+0x30a>
 8003cb4:	46aa      	mov	sl, r5
 8003cb6:	46b3      	mov	fp, r6
 8003cb8:	e7de      	b.n	8003c78 <_scanf_float+0x2ec>
 8003cba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003cbe:	6923      	ldr	r3, [r4, #16]
 8003cc0:	2965      	cmp	r1, #101	@ 0x65
 8003cc2:	f103 33ff 	add.w	r3, r3, #4294967295
 8003cc6:	f106 35ff 	add.w	r5, r6, #4294967295
 8003cca:	6123      	str	r3, [r4, #16]
 8003ccc:	d00c      	beq.n	8003ce8 <_scanf_float+0x35c>
 8003cce:	2945      	cmp	r1, #69	@ 0x45
 8003cd0:	d00a      	beq.n	8003ce8 <_scanf_float+0x35c>
 8003cd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003cd6:	463a      	mov	r2, r7
 8003cd8:	4640      	mov	r0, r8
 8003cda:	4798      	blx	r3
 8003cdc:	6923      	ldr	r3, [r4, #16]
 8003cde:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	1eb5      	subs	r5, r6, #2
 8003ce6:	6123      	str	r3, [r4, #16]
 8003ce8:	463a      	mov	r2, r7
 8003cea:	4640      	mov	r0, r8
 8003cec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003cf0:	4798      	blx	r3
 8003cf2:	462e      	mov	r6, r5
 8003cf4:	6822      	ldr	r2, [r4, #0]
 8003cf6:	f012 0210 	ands.w	r2, r2, #16
 8003cfa:	d001      	beq.n	8003d00 <_scanf_float+0x374>
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	e68a      	b.n	8003a16 <_scanf_float+0x8a>
 8003d00:	7032      	strb	r2, [r6, #0]
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d0c:	d11c      	bne.n	8003d48 <_scanf_float+0x3bc>
 8003d0e:	9b02      	ldr	r3, [sp, #8]
 8003d10:	454b      	cmp	r3, r9
 8003d12:	eba3 0209 	sub.w	r2, r3, r9
 8003d16:	d123      	bne.n	8003d60 <_scanf_float+0x3d4>
 8003d18:	2200      	movs	r2, #0
 8003d1a:	4640      	mov	r0, r8
 8003d1c:	9901      	ldr	r1, [sp, #4]
 8003d1e:	f002 fbef 	bl	8006500 <_strtod_r>
 8003d22:	9b03      	ldr	r3, [sp, #12]
 8003d24:	6825      	ldr	r5, [r4, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f015 0f02 	tst.w	r5, #2
 8003d2c:	4606      	mov	r6, r0
 8003d2e:	460f      	mov	r7, r1
 8003d30:	f103 0204 	add.w	r2, r3, #4
 8003d34:	d01f      	beq.n	8003d76 <_scanf_float+0x3ea>
 8003d36:	9903      	ldr	r1, [sp, #12]
 8003d38:	600a      	str	r2, [r1, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	e9c3 6700 	strd	r6, r7, [r3]
 8003d40:	68e3      	ldr	r3, [r4, #12]
 8003d42:	3301      	adds	r3, #1
 8003d44:	60e3      	str	r3, [r4, #12]
 8003d46:	e7d9      	b.n	8003cfc <_scanf_float+0x370>
 8003d48:	9b04      	ldr	r3, [sp, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0e4      	beq.n	8003d18 <_scanf_float+0x38c>
 8003d4e:	9905      	ldr	r1, [sp, #20]
 8003d50:	230a      	movs	r3, #10
 8003d52:	4640      	mov	r0, r8
 8003d54:	3101      	adds	r1, #1
 8003d56:	f002 fc53 	bl	8006600 <_strtol_r>
 8003d5a:	9b04      	ldr	r3, [sp, #16]
 8003d5c:	9e05      	ldr	r6, [sp, #20]
 8003d5e:	1ac2      	subs	r2, r0, r3
 8003d60:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8003d64:	429e      	cmp	r6, r3
 8003d66:	bf28      	it	cs
 8003d68:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8003d6c:	4630      	mov	r0, r6
 8003d6e:	490d      	ldr	r1, [pc, #52]	@ (8003da4 <_scanf_float+0x418>)
 8003d70:	f000 f8de 	bl	8003f30 <siprintf>
 8003d74:	e7d0      	b.n	8003d18 <_scanf_float+0x38c>
 8003d76:	076d      	lsls	r5, r5, #29
 8003d78:	d4dd      	bmi.n	8003d36 <_scanf_float+0x3aa>
 8003d7a:	9d03      	ldr	r5, [sp, #12]
 8003d7c:	602a      	str	r2, [r5, #0]
 8003d7e:	681d      	ldr	r5, [r3, #0]
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	f7fc fe42 	bl	8000a0c <__aeabi_dcmpun>
 8003d88:	b120      	cbz	r0, 8003d94 <_scanf_float+0x408>
 8003d8a:	4807      	ldr	r0, [pc, #28]	@ (8003da8 <_scanf_float+0x41c>)
 8003d8c:	f000 f9c2 	bl	8004114 <nanf>
 8003d90:	6028      	str	r0, [r5, #0]
 8003d92:	e7d5      	b.n	8003d40 <_scanf_float+0x3b4>
 8003d94:	4630      	mov	r0, r6
 8003d96:	4639      	mov	r1, r7
 8003d98:	f7fc fe96 	bl	8000ac8 <__aeabi_d2f>
 8003d9c:	e7f8      	b.n	8003d90 <_scanf_float+0x404>
 8003d9e:	f04f 0900 	mov.w	r9, #0
 8003da2:	e62d      	b.n	8003a00 <_scanf_float+0x74>
 8003da4:	08007806 	.word	0x08007806
 8003da8:	08007b9d 	.word	0x08007b9d

08003dac <std>:
 8003dac:	2300      	movs	r3, #0
 8003dae:	b510      	push	{r4, lr}
 8003db0:	4604      	mov	r4, r0
 8003db2:	e9c0 3300 	strd	r3, r3, [r0]
 8003db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dba:	6083      	str	r3, [r0, #8]
 8003dbc:	8181      	strh	r1, [r0, #12]
 8003dbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8003dc0:	81c2      	strh	r2, [r0, #14]
 8003dc2:	6183      	str	r3, [r0, #24]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	2208      	movs	r2, #8
 8003dc8:	305c      	adds	r0, #92	@ 0x5c
 8003dca:	f000 f914 	bl	8003ff6 <memset>
 8003dce:	4b0d      	ldr	r3, [pc, #52]	@ (8003e04 <std+0x58>)
 8003dd0:	6224      	str	r4, [r4, #32]
 8003dd2:	6263      	str	r3, [r4, #36]	@ 0x24
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e08 <std+0x5c>)
 8003dd6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e0c <std+0x60>)
 8003dda:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8003e10 <std+0x64>)
 8003dde:	6323      	str	r3, [r4, #48]	@ 0x30
 8003de0:	4b0c      	ldr	r3, [pc, #48]	@ (8003e14 <std+0x68>)
 8003de2:	429c      	cmp	r4, r3
 8003de4:	d006      	beq.n	8003df4 <std+0x48>
 8003de6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003dea:	4294      	cmp	r4, r2
 8003dec:	d002      	beq.n	8003df4 <std+0x48>
 8003dee:	33d0      	adds	r3, #208	@ 0xd0
 8003df0:	429c      	cmp	r4, r3
 8003df2:	d105      	bne.n	8003e00 <std+0x54>
 8003df4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dfc:	f000 b978 	b.w	80040f0 <__retarget_lock_init_recursive>
 8003e00:	bd10      	pop	{r4, pc}
 8003e02:	bf00      	nop
 8003e04:	08003f71 	.word	0x08003f71
 8003e08:	08003f93 	.word	0x08003f93
 8003e0c:	08003fcb 	.word	0x08003fcb
 8003e10:	08003fef 	.word	0x08003fef
 8003e14:	20000250 	.word	0x20000250

08003e18 <stdio_exit_handler>:
 8003e18:	4a02      	ldr	r2, [pc, #8]	@ (8003e24 <stdio_exit_handler+0xc>)
 8003e1a:	4903      	ldr	r1, [pc, #12]	@ (8003e28 <stdio_exit_handler+0x10>)
 8003e1c:	4803      	ldr	r0, [pc, #12]	@ (8003e2c <stdio_exit_handler+0x14>)
 8003e1e:	f000 b869 	b.w	8003ef4 <_fwalk_sglue>
 8003e22:	bf00      	nop
 8003e24:	2000000c 	.word	0x2000000c
 8003e28:	080069b5 	.word	0x080069b5
 8003e2c:	2000001c 	.word	0x2000001c

08003e30 <cleanup_stdio>:
 8003e30:	6841      	ldr	r1, [r0, #4]
 8003e32:	4b0c      	ldr	r3, [pc, #48]	@ (8003e64 <cleanup_stdio+0x34>)
 8003e34:	b510      	push	{r4, lr}
 8003e36:	4299      	cmp	r1, r3
 8003e38:	4604      	mov	r4, r0
 8003e3a:	d001      	beq.n	8003e40 <cleanup_stdio+0x10>
 8003e3c:	f002 fdba 	bl	80069b4 <_fflush_r>
 8003e40:	68a1      	ldr	r1, [r4, #8]
 8003e42:	4b09      	ldr	r3, [pc, #36]	@ (8003e68 <cleanup_stdio+0x38>)
 8003e44:	4299      	cmp	r1, r3
 8003e46:	d002      	beq.n	8003e4e <cleanup_stdio+0x1e>
 8003e48:	4620      	mov	r0, r4
 8003e4a:	f002 fdb3 	bl	80069b4 <_fflush_r>
 8003e4e:	68e1      	ldr	r1, [r4, #12]
 8003e50:	4b06      	ldr	r3, [pc, #24]	@ (8003e6c <cleanup_stdio+0x3c>)
 8003e52:	4299      	cmp	r1, r3
 8003e54:	d004      	beq.n	8003e60 <cleanup_stdio+0x30>
 8003e56:	4620      	mov	r0, r4
 8003e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e5c:	f002 bdaa 	b.w	80069b4 <_fflush_r>
 8003e60:	bd10      	pop	{r4, pc}
 8003e62:	bf00      	nop
 8003e64:	20000250 	.word	0x20000250
 8003e68:	200002b8 	.word	0x200002b8
 8003e6c:	20000320 	.word	0x20000320

08003e70 <global_stdio_init.part.0>:
 8003e70:	b510      	push	{r4, lr}
 8003e72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea0 <global_stdio_init.part.0+0x30>)
 8003e74:	4c0b      	ldr	r4, [pc, #44]	@ (8003ea4 <global_stdio_init.part.0+0x34>)
 8003e76:	4a0c      	ldr	r2, [pc, #48]	@ (8003ea8 <global_stdio_init.part.0+0x38>)
 8003e78:	4620      	mov	r0, r4
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	2104      	movs	r1, #4
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f7ff ff94 	bl	8003dac <std>
 8003e84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e88:	2201      	movs	r2, #1
 8003e8a:	2109      	movs	r1, #9
 8003e8c:	f7ff ff8e 	bl	8003dac <std>
 8003e90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e94:	2202      	movs	r2, #2
 8003e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e9a:	2112      	movs	r1, #18
 8003e9c:	f7ff bf86 	b.w	8003dac <std>
 8003ea0:	20000388 	.word	0x20000388
 8003ea4:	20000250 	.word	0x20000250
 8003ea8:	08003e19 	.word	0x08003e19

08003eac <__sfp_lock_acquire>:
 8003eac:	4801      	ldr	r0, [pc, #4]	@ (8003eb4 <__sfp_lock_acquire+0x8>)
 8003eae:	f000 b920 	b.w	80040f2 <__retarget_lock_acquire_recursive>
 8003eb2:	bf00      	nop
 8003eb4:	20000391 	.word	0x20000391

08003eb8 <__sfp_lock_release>:
 8003eb8:	4801      	ldr	r0, [pc, #4]	@ (8003ec0 <__sfp_lock_release+0x8>)
 8003eba:	f000 b91b 	b.w	80040f4 <__retarget_lock_release_recursive>
 8003ebe:	bf00      	nop
 8003ec0:	20000391 	.word	0x20000391

08003ec4 <__sinit>:
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	f7ff fff0 	bl	8003eac <__sfp_lock_acquire>
 8003ecc:	6a23      	ldr	r3, [r4, #32]
 8003ece:	b11b      	cbz	r3, 8003ed8 <__sinit+0x14>
 8003ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ed4:	f7ff bff0 	b.w	8003eb8 <__sfp_lock_release>
 8003ed8:	4b04      	ldr	r3, [pc, #16]	@ (8003eec <__sinit+0x28>)
 8003eda:	6223      	str	r3, [r4, #32]
 8003edc:	4b04      	ldr	r3, [pc, #16]	@ (8003ef0 <__sinit+0x2c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f5      	bne.n	8003ed0 <__sinit+0xc>
 8003ee4:	f7ff ffc4 	bl	8003e70 <global_stdio_init.part.0>
 8003ee8:	e7f2      	b.n	8003ed0 <__sinit+0xc>
 8003eea:	bf00      	nop
 8003eec:	08003e31 	.word	0x08003e31
 8003ef0:	20000388 	.word	0x20000388

08003ef4 <_fwalk_sglue>:
 8003ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ef8:	4607      	mov	r7, r0
 8003efa:	4688      	mov	r8, r1
 8003efc:	4614      	mov	r4, r2
 8003efe:	2600      	movs	r6, #0
 8003f00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f04:	f1b9 0901 	subs.w	r9, r9, #1
 8003f08:	d505      	bpl.n	8003f16 <_fwalk_sglue+0x22>
 8003f0a:	6824      	ldr	r4, [r4, #0]
 8003f0c:	2c00      	cmp	r4, #0
 8003f0e:	d1f7      	bne.n	8003f00 <_fwalk_sglue+0xc>
 8003f10:	4630      	mov	r0, r6
 8003f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f16:	89ab      	ldrh	r3, [r5, #12]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d907      	bls.n	8003f2c <_fwalk_sglue+0x38>
 8003f1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f20:	3301      	adds	r3, #1
 8003f22:	d003      	beq.n	8003f2c <_fwalk_sglue+0x38>
 8003f24:	4629      	mov	r1, r5
 8003f26:	4638      	mov	r0, r7
 8003f28:	47c0      	blx	r8
 8003f2a:	4306      	orrs	r6, r0
 8003f2c:	3568      	adds	r5, #104	@ 0x68
 8003f2e:	e7e9      	b.n	8003f04 <_fwalk_sglue+0x10>

08003f30 <siprintf>:
 8003f30:	b40e      	push	{r1, r2, r3}
 8003f32:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003f36:	b500      	push	{lr}
 8003f38:	b09c      	sub	sp, #112	@ 0x70
 8003f3a:	ab1d      	add	r3, sp, #116	@ 0x74
 8003f3c:	9002      	str	r0, [sp, #8]
 8003f3e:	9006      	str	r0, [sp, #24]
 8003f40:	9107      	str	r1, [sp, #28]
 8003f42:	9104      	str	r1, [sp, #16]
 8003f44:	4808      	ldr	r0, [pc, #32]	@ (8003f68 <siprintf+0x38>)
 8003f46:	4909      	ldr	r1, [pc, #36]	@ (8003f6c <siprintf+0x3c>)
 8003f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f4c:	9105      	str	r1, [sp, #20]
 8003f4e:	6800      	ldr	r0, [r0, #0]
 8003f50:	a902      	add	r1, sp, #8
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	f002 fbb2 	bl	80066bc <_svfiprintf_r>
 8003f58:	2200      	movs	r2, #0
 8003f5a:	9b02      	ldr	r3, [sp, #8]
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	b01c      	add	sp, #112	@ 0x70
 8003f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f64:	b003      	add	sp, #12
 8003f66:	4770      	bx	lr
 8003f68:	20000018 	.word	0x20000018
 8003f6c:	ffff0208 	.word	0xffff0208

08003f70 <__sread>:
 8003f70:	b510      	push	{r4, lr}
 8003f72:	460c      	mov	r4, r1
 8003f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f78:	f000 f86c 	bl	8004054 <_read_r>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	bfab      	itete	ge
 8003f80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f82:	89a3      	ldrhlt	r3, [r4, #12]
 8003f84:	181b      	addge	r3, r3, r0
 8003f86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f8a:	bfac      	ite	ge
 8003f8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f8e:	81a3      	strhlt	r3, [r4, #12]
 8003f90:	bd10      	pop	{r4, pc}

08003f92 <__swrite>:
 8003f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f96:	461f      	mov	r7, r3
 8003f98:	898b      	ldrh	r3, [r1, #12]
 8003f9a:	4605      	mov	r5, r0
 8003f9c:	05db      	lsls	r3, r3, #23
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	4616      	mov	r6, r2
 8003fa2:	d505      	bpl.n	8003fb0 <__swrite+0x1e>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fac:	f000 f840 	bl	8004030 <_lseek_r>
 8003fb0:	89a3      	ldrh	r3, [r4, #12]
 8003fb2:	4632      	mov	r2, r6
 8003fb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fb8:	81a3      	strh	r3, [r4, #12]
 8003fba:	4628      	mov	r0, r5
 8003fbc:	463b      	mov	r3, r7
 8003fbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc6:	f000 b857 	b.w	8004078 <_write_r>

08003fca <__sseek>:
 8003fca:	b510      	push	{r4, lr}
 8003fcc:	460c      	mov	r4, r1
 8003fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fd2:	f000 f82d 	bl	8004030 <_lseek_r>
 8003fd6:	1c43      	adds	r3, r0, #1
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	bf15      	itete	ne
 8003fdc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003fde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003fe2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003fe6:	81a3      	strheq	r3, [r4, #12]
 8003fe8:	bf18      	it	ne
 8003fea:	81a3      	strhne	r3, [r4, #12]
 8003fec:	bd10      	pop	{r4, pc}

08003fee <__sclose>:
 8003fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ff2:	f000 b80d 	b.w	8004010 <_close_r>

08003ff6 <memset>:
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4402      	add	r2, r0
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d100      	bne.n	8004000 <memset+0xa>
 8003ffe:	4770      	bx	lr
 8004000:	f803 1b01 	strb.w	r1, [r3], #1
 8004004:	e7f9      	b.n	8003ffa <memset+0x4>
	...

08004008 <_localeconv_r>:
 8004008:	4800      	ldr	r0, [pc, #0]	@ (800400c <_localeconv_r+0x4>)
 800400a:	4770      	bx	lr
 800400c:	20000158 	.word	0x20000158

08004010 <_close_r>:
 8004010:	b538      	push	{r3, r4, r5, lr}
 8004012:	2300      	movs	r3, #0
 8004014:	4d05      	ldr	r5, [pc, #20]	@ (800402c <_close_r+0x1c>)
 8004016:	4604      	mov	r4, r0
 8004018:	4608      	mov	r0, r1
 800401a:	602b      	str	r3, [r5, #0]
 800401c:	f7fc ffb9 	bl	8000f92 <_close>
 8004020:	1c43      	adds	r3, r0, #1
 8004022:	d102      	bne.n	800402a <_close_r+0x1a>
 8004024:	682b      	ldr	r3, [r5, #0]
 8004026:	b103      	cbz	r3, 800402a <_close_r+0x1a>
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	bd38      	pop	{r3, r4, r5, pc}
 800402c:	2000038c 	.word	0x2000038c

08004030 <_lseek_r>:
 8004030:	b538      	push	{r3, r4, r5, lr}
 8004032:	4604      	mov	r4, r0
 8004034:	4608      	mov	r0, r1
 8004036:	4611      	mov	r1, r2
 8004038:	2200      	movs	r2, #0
 800403a:	4d05      	ldr	r5, [pc, #20]	@ (8004050 <_lseek_r+0x20>)
 800403c:	602a      	str	r2, [r5, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	f7fc ffcb 	bl	8000fda <_lseek>
 8004044:	1c43      	adds	r3, r0, #1
 8004046:	d102      	bne.n	800404e <_lseek_r+0x1e>
 8004048:	682b      	ldr	r3, [r5, #0]
 800404a:	b103      	cbz	r3, 800404e <_lseek_r+0x1e>
 800404c:	6023      	str	r3, [r4, #0]
 800404e:	bd38      	pop	{r3, r4, r5, pc}
 8004050:	2000038c 	.word	0x2000038c

08004054 <_read_r>:
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	4604      	mov	r4, r0
 8004058:	4608      	mov	r0, r1
 800405a:	4611      	mov	r1, r2
 800405c:	2200      	movs	r2, #0
 800405e:	4d05      	ldr	r5, [pc, #20]	@ (8004074 <_read_r+0x20>)
 8004060:	602a      	str	r2, [r5, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	f7fc ff5c 	bl	8000f20 <_read>
 8004068:	1c43      	adds	r3, r0, #1
 800406a:	d102      	bne.n	8004072 <_read_r+0x1e>
 800406c:	682b      	ldr	r3, [r5, #0]
 800406e:	b103      	cbz	r3, 8004072 <_read_r+0x1e>
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	bd38      	pop	{r3, r4, r5, pc}
 8004074:	2000038c 	.word	0x2000038c

08004078 <_write_r>:
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	4604      	mov	r4, r0
 800407c:	4608      	mov	r0, r1
 800407e:	4611      	mov	r1, r2
 8004080:	2200      	movs	r2, #0
 8004082:	4d05      	ldr	r5, [pc, #20]	@ (8004098 <_write_r+0x20>)
 8004084:	602a      	str	r2, [r5, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	f7fc ff67 	bl	8000f5a <_write>
 800408c:	1c43      	adds	r3, r0, #1
 800408e:	d102      	bne.n	8004096 <_write_r+0x1e>
 8004090:	682b      	ldr	r3, [r5, #0]
 8004092:	b103      	cbz	r3, 8004096 <_write_r+0x1e>
 8004094:	6023      	str	r3, [r4, #0]
 8004096:	bd38      	pop	{r3, r4, r5, pc}
 8004098:	2000038c 	.word	0x2000038c

0800409c <__errno>:
 800409c:	4b01      	ldr	r3, [pc, #4]	@ (80040a4 <__errno+0x8>)
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	20000018 	.word	0x20000018

080040a8 <__libc_init_array>:
 80040a8:	b570      	push	{r4, r5, r6, lr}
 80040aa:	2600      	movs	r6, #0
 80040ac:	4d0c      	ldr	r5, [pc, #48]	@ (80040e0 <__libc_init_array+0x38>)
 80040ae:	4c0d      	ldr	r4, [pc, #52]	@ (80040e4 <__libc_init_array+0x3c>)
 80040b0:	1b64      	subs	r4, r4, r5
 80040b2:	10a4      	asrs	r4, r4, #2
 80040b4:	42a6      	cmp	r6, r4
 80040b6:	d109      	bne.n	80040cc <__libc_init_array+0x24>
 80040b8:	f003 fb68 	bl	800778c <_init>
 80040bc:	2600      	movs	r6, #0
 80040be:	4d0a      	ldr	r5, [pc, #40]	@ (80040e8 <__libc_init_array+0x40>)
 80040c0:	4c0a      	ldr	r4, [pc, #40]	@ (80040ec <__libc_init_array+0x44>)
 80040c2:	1b64      	subs	r4, r4, r5
 80040c4:	10a4      	asrs	r4, r4, #2
 80040c6:	42a6      	cmp	r6, r4
 80040c8:	d105      	bne.n	80040d6 <__libc_init_array+0x2e>
 80040ca:	bd70      	pop	{r4, r5, r6, pc}
 80040cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d0:	4798      	blx	r3
 80040d2:	3601      	adds	r6, #1
 80040d4:	e7ee      	b.n	80040b4 <__libc_init_array+0xc>
 80040d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040da:	4798      	blx	r3
 80040dc:	3601      	adds	r6, #1
 80040de:	e7f2      	b.n	80040c6 <__libc_init_array+0x1e>
 80040e0:	08007c08 	.word	0x08007c08
 80040e4:	08007c08 	.word	0x08007c08
 80040e8:	08007c08 	.word	0x08007c08
 80040ec:	08007c0c 	.word	0x08007c0c

080040f0 <__retarget_lock_init_recursive>:
 80040f0:	4770      	bx	lr

080040f2 <__retarget_lock_acquire_recursive>:
 80040f2:	4770      	bx	lr

080040f4 <__retarget_lock_release_recursive>:
 80040f4:	4770      	bx	lr

080040f6 <memchr>:
 80040f6:	4603      	mov	r3, r0
 80040f8:	b510      	push	{r4, lr}
 80040fa:	b2c9      	uxtb	r1, r1
 80040fc:	4402      	add	r2, r0
 80040fe:	4293      	cmp	r3, r2
 8004100:	4618      	mov	r0, r3
 8004102:	d101      	bne.n	8004108 <memchr+0x12>
 8004104:	2000      	movs	r0, #0
 8004106:	e003      	b.n	8004110 <memchr+0x1a>
 8004108:	7804      	ldrb	r4, [r0, #0]
 800410a:	3301      	adds	r3, #1
 800410c:	428c      	cmp	r4, r1
 800410e:	d1f6      	bne.n	80040fe <memchr+0x8>
 8004110:	bd10      	pop	{r4, pc}
	...

08004114 <nanf>:
 8004114:	4800      	ldr	r0, [pc, #0]	@ (8004118 <nanf+0x4>)
 8004116:	4770      	bx	lr
 8004118:	7fc00000 	.word	0x7fc00000

0800411c <quorem>:
 800411c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004120:	6903      	ldr	r3, [r0, #16]
 8004122:	690c      	ldr	r4, [r1, #16]
 8004124:	4607      	mov	r7, r0
 8004126:	42a3      	cmp	r3, r4
 8004128:	db7e      	blt.n	8004228 <quorem+0x10c>
 800412a:	3c01      	subs	r4, #1
 800412c:	00a3      	lsls	r3, r4, #2
 800412e:	f100 0514 	add.w	r5, r0, #20
 8004132:	f101 0814 	add.w	r8, r1, #20
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800413c:	9301      	str	r3, [sp, #4]
 800413e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004142:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004146:	3301      	adds	r3, #1
 8004148:	429a      	cmp	r2, r3
 800414a:	fbb2 f6f3 	udiv	r6, r2, r3
 800414e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004152:	d32e      	bcc.n	80041b2 <quorem+0x96>
 8004154:	f04f 0a00 	mov.w	sl, #0
 8004158:	46c4      	mov	ip, r8
 800415a:	46ae      	mov	lr, r5
 800415c:	46d3      	mov	fp, sl
 800415e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004162:	b298      	uxth	r0, r3
 8004164:	fb06 a000 	mla	r0, r6, r0, sl
 8004168:	0c1b      	lsrs	r3, r3, #16
 800416a:	0c02      	lsrs	r2, r0, #16
 800416c:	fb06 2303 	mla	r3, r6, r3, r2
 8004170:	f8de 2000 	ldr.w	r2, [lr]
 8004174:	b280      	uxth	r0, r0
 8004176:	b292      	uxth	r2, r2
 8004178:	1a12      	subs	r2, r2, r0
 800417a:	445a      	add	r2, fp
 800417c:	f8de 0000 	ldr.w	r0, [lr]
 8004180:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004184:	b29b      	uxth	r3, r3
 8004186:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800418a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800418e:	b292      	uxth	r2, r2
 8004190:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004194:	45e1      	cmp	r9, ip
 8004196:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800419a:	f84e 2b04 	str.w	r2, [lr], #4
 800419e:	d2de      	bcs.n	800415e <quorem+0x42>
 80041a0:	9b00      	ldr	r3, [sp, #0]
 80041a2:	58eb      	ldr	r3, [r5, r3]
 80041a4:	b92b      	cbnz	r3, 80041b2 <quorem+0x96>
 80041a6:	9b01      	ldr	r3, [sp, #4]
 80041a8:	3b04      	subs	r3, #4
 80041aa:	429d      	cmp	r5, r3
 80041ac:	461a      	mov	r2, r3
 80041ae:	d32f      	bcc.n	8004210 <quorem+0xf4>
 80041b0:	613c      	str	r4, [r7, #16]
 80041b2:	4638      	mov	r0, r7
 80041b4:	f001 f9c4 	bl	8005540 <__mcmp>
 80041b8:	2800      	cmp	r0, #0
 80041ba:	db25      	blt.n	8004208 <quorem+0xec>
 80041bc:	4629      	mov	r1, r5
 80041be:	2000      	movs	r0, #0
 80041c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80041c4:	f8d1 c000 	ldr.w	ip, [r1]
 80041c8:	fa1f fe82 	uxth.w	lr, r2
 80041cc:	fa1f f38c 	uxth.w	r3, ip
 80041d0:	eba3 030e 	sub.w	r3, r3, lr
 80041d4:	4403      	add	r3, r0
 80041d6:	0c12      	lsrs	r2, r2, #16
 80041d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80041dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041e6:	45c1      	cmp	r9, r8
 80041e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80041ec:	f841 3b04 	str.w	r3, [r1], #4
 80041f0:	d2e6      	bcs.n	80041c0 <quorem+0xa4>
 80041f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041fa:	b922      	cbnz	r2, 8004206 <quorem+0xea>
 80041fc:	3b04      	subs	r3, #4
 80041fe:	429d      	cmp	r5, r3
 8004200:	461a      	mov	r2, r3
 8004202:	d30b      	bcc.n	800421c <quorem+0x100>
 8004204:	613c      	str	r4, [r7, #16]
 8004206:	3601      	adds	r6, #1
 8004208:	4630      	mov	r0, r6
 800420a:	b003      	add	sp, #12
 800420c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004210:	6812      	ldr	r2, [r2, #0]
 8004212:	3b04      	subs	r3, #4
 8004214:	2a00      	cmp	r2, #0
 8004216:	d1cb      	bne.n	80041b0 <quorem+0x94>
 8004218:	3c01      	subs	r4, #1
 800421a:	e7c6      	b.n	80041aa <quorem+0x8e>
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	3b04      	subs	r3, #4
 8004220:	2a00      	cmp	r2, #0
 8004222:	d1ef      	bne.n	8004204 <quorem+0xe8>
 8004224:	3c01      	subs	r4, #1
 8004226:	e7ea      	b.n	80041fe <quorem+0xe2>
 8004228:	2000      	movs	r0, #0
 800422a:	e7ee      	b.n	800420a <quorem+0xee>
 800422c:	0000      	movs	r0, r0
	...

08004230 <_dtoa_r>:
 8004230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004234:	4614      	mov	r4, r2
 8004236:	461d      	mov	r5, r3
 8004238:	69c7      	ldr	r7, [r0, #28]
 800423a:	b097      	sub	sp, #92	@ 0x5c
 800423c:	4683      	mov	fp, r0
 800423e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004242:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004244:	b97f      	cbnz	r7, 8004266 <_dtoa_r+0x36>
 8004246:	2010      	movs	r0, #16
 8004248:	f000 fe02 	bl	8004e50 <malloc>
 800424c:	4602      	mov	r2, r0
 800424e:	f8cb 001c 	str.w	r0, [fp, #28]
 8004252:	b920      	cbnz	r0, 800425e <_dtoa_r+0x2e>
 8004254:	21ef      	movs	r1, #239	@ 0xef
 8004256:	4ba8      	ldr	r3, [pc, #672]	@ (80044f8 <_dtoa_r+0x2c8>)
 8004258:	48a8      	ldr	r0, [pc, #672]	@ (80044fc <_dtoa_r+0x2cc>)
 800425a:	f002 fc23 	bl	8006aa4 <__assert_func>
 800425e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004262:	6007      	str	r7, [r0, #0]
 8004264:	60c7      	str	r7, [r0, #12]
 8004266:	f8db 301c 	ldr.w	r3, [fp, #28]
 800426a:	6819      	ldr	r1, [r3, #0]
 800426c:	b159      	cbz	r1, 8004286 <_dtoa_r+0x56>
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	2301      	movs	r3, #1
 8004272:	4093      	lsls	r3, r2
 8004274:	604a      	str	r2, [r1, #4]
 8004276:	608b      	str	r3, [r1, #8]
 8004278:	4658      	mov	r0, fp
 800427a:	f000 fedf 	bl	800503c <_Bfree>
 800427e:	2200      	movs	r2, #0
 8004280:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	1e2b      	subs	r3, r5, #0
 8004288:	bfaf      	iteee	ge
 800428a:	2300      	movge	r3, #0
 800428c:	2201      	movlt	r2, #1
 800428e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004292:	9303      	strlt	r3, [sp, #12]
 8004294:	bfa8      	it	ge
 8004296:	6033      	strge	r3, [r6, #0]
 8004298:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800429c:	4b98      	ldr	r3, [pc, #608]	@ (8004500 <_dtoa_r+0x2d0>)
 800429e:	bfb8      	it	lt
 80042a0:	6032      	strlt	r2, [r6, #0]
 80042a2:	ea33 0308 	bics.w	r3, r3, r8
 80042a6:	d112      	bne.n	80042ce <_dtoa_r+0x9e>
 80042a8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80042ac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80042b4:	4323      	orrs	r3, r4
 80042b6:	f000 8550 	beq.w	8004d5a <_dtoa_r+0xb2a>
 80042ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80042bc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004504 <_dtoa_r+0x2d4>
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 8552 	beq.w	8004d6a <_dtoa_r+0xb3a>
 80042c6:	f10a 0303 	add.w	r3, sl, #3
 80042ca:	f000 bd4c 	b.w	8004d66 <_dtoa_r+0xb36>
 80042ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80042d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80042da:	2200      	movs	r2, #0
 80042dc:	2300      	movs	r3, #0
 80042de:	f7fc fb63 	bl	80009a8 <__aeabi_dcmpeq>
 80042e2:	4607      	mov	r7, r0
 80042e4:	b158      	cbz	r0, 80042fe <_dtoa_r+0xce>
 80042e6:	2301      	movs	r3, #1
 80042e8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80042ee:	b113      	cbz	r3, 80042f6 <_dtoa_r+0xc6>
 80042f0:	4b85      	ldr	r3, [pc, #532]	@ (8004508 <_dtoa_r+0x2d8>)
 80042f2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800450c <_dtoa_r+0x2dc>
 80042fa:	f000 bd36 	b.w	8004d6a <_dtoa_r+0xb3a>
 80042fe:	ab14      	add	r3, sp, #80	@ 0x50
 8004300:	9301      	str	r3, [sp, #4]
 8004302:	ab15      	add	r3, sp, #84	@ 0x54
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	4658      	mov	r0, fp
 8004308:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800430c:	f001 fa30 	bl	8005770 <__d2b>
 8004310:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004314:	4681      	mov	r9, r0
 8004316:	2e00      	cmp	r6, #0
 8004318:	d077      	beq.n	800440a <_dtoa_r+0x1da>
 800431a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800431e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004320:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004328:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800432c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004330:	9712      	str	r7, [sp, #72]	@ 0x48
 8004332:	4619      	mov	r1, r3
 8004334:	2200      	movs	r2, #0
 8004336:	4b76      	ldr	r3, [pc, #472]	@ (8004510 <_dtoa_r+0x2e0>)
 8004338:	f7fb ff16 	bl	8000168 <__aeabi_dsub>
 800433c:	a368      	add	r3, pc, #416	@ (adr r3, 80044e0 <_dtoa_r+0x2b0>)
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	f7fc f8c9 	bl	80004d8 <__aeabi_dmul>
 8004346:	a368      	add	r3, pc, #416	@ (adr r3, 80044e8 <_dtoa_r+0x2b8>)
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	f7fb ff0e 	bl	800016c <__adddf3>
 8004350:	4604      	mov	r4, r0
 8004352:	4630      	mov	r0, r6
 8004354:	460d      	mov	r5, r1
 8004356:	f7fc f855 	bl	8000404 <__aeabi_i2d>
 800435a:	a365      	add	r3, pc, #404	@ (adr r3, 80044f0 <_dtoa_r+0x2c0>)
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	f7fc f8ba 	bl	80004d8 <__aeabi_dmul>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4620      	mov	r0, r4
 800436a:	4629      	mov	r1, r5
 800436c:	f7fb fefe 	bl	800016c <__adddf3>
 8004370:	4604      	mov	r4, r0
 8004372:	460d      	mov	r5, r1
 8004374:	f7fc fb60 	bl	8000a38 <__aeabi_d2iz>
 8004378:	2200      	movs	r2, #0
 800437a:	4607      	mov	r7, r0
 800437c:	2300      	movs	r3, #0
 800437e:	4620      	mov	r0, r4
 8004380:	4629      	mov	r1, r5
 8004382:	f7fc fb1b 	bl	80009bc <__aeabi_dcmplt>
 8004386:	b140      	cbz	r0, 800439a <_dtoa_r+0x16a>
 8004388:	4638      	mov	r0, r7
 800438a:	f7fc f83b 	bl	8000404 <__aeabi_i2d>
 800438e:	4622      	mov	r2, r4
 8004390:	462b      	mov	r3, r5
 8004392:	f7fc fb09 	bl	80009a8 <__aeabi_dcmpeq>
 8004396:	b900      	cbnz	r0, 800439a <_dtoa_r+0x16a>
 8004398:	3f01      	subs	r7, #1
 800439a:	2f16      	cmp	r7, #22
 800439c:	d853      	bhi.n	8004446 <_dtoa_r+0x216>
 800439e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80043a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004514 <_dtoa_r+0x2e4>)
 80043a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	f7fc fb06 	bl	80009bc <__aeabi_dcmplt>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d04a      	beq.n	800444a <_dtoa_r+0x21a>
 80043b4:	2300      	movs	r3, #0
 80043b6:	3f01      	subs	r7, #1
 80043b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80043ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80043bc:	1b9b      	subs	r3, r3, r6
 80043be:	1e5a      	subs	r2, r3, #1
 80043c0:	bf46      	itte	mi
 80043c2:	f1c3 0801 	rsbmi	r8, r3, #1
 80043c6:	2300      	movmi	r3, #0
 80043c8:	f04f 0800 	movpl.w	r8, #0
 80043cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80043ce:	bf48      	it	mi
 80043d0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80043d2:	2f00      	cmp	r7, #0
 80043d4:	db3b      	blt.n	800444e <_dtoa_r+0x21e>
 80043d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043d8:	970e      	str	r7, [sp, #56]	@ 0x38
 80043da:	443b      	add	r3, r7
 80043dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80043de:	2300      	movs	r3, #0
 80043e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80043e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80043e4:	2b09      	cmp	r3, #9
 80043e6:	d866      	bhi.n	80044b6 <_dtoa_r+0x286>
 80043e8:	2b05      	cmp	r3, #5
 80043ea:	bfc4      	itt	gt
 80043ec:	3b04      	subgt	r3, #4
 80043ee:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80043f0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80043f2:	bfc8      	it	gt
 80043f4:	2400      	movgt	r4, #0
 80043f6:	f1a3 0302 	sub.w	r3, r3, #2
 80043fa:	bfd8      	it	le
 80043fc:	2401      	movle	r4, #1
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d864      	bhi.n	80044cc <_dtoa_r+0x29c>
 8004402:	e8df f003 	tbb	[pc, r3]
 8004406:	382b      	.short	0x382b
 8004408:	5636      	.short	0x5636
 800440a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800440e:	441e      	add	r6, r3
 8004410:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004414:	2b20      	cmp	r3, #32
 8004416:	bfc1      	itttt	gt
 8004418:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800441c:	fa08 f803 	lslgt.w	r8, r8, r3
 8004420:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004424:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004428:	bfd6      	itet	le
 800442a:	f1c3 0320 	rsble	r3, r3, #32
 800442e:	ea48 0003 	orrgt.w	r0, r8, r3
 8004432:	fa04 f003 	lslle.w	r0, r4, r3
 8004436:	f7fb ffd5 	bl	80003e4 <__aeabi_ui2d>
 800443a:	2201      	movs	r2, #1
 800443c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004440:	3e01      	subs	r6, #1
 8004442:	9212      	str	r2, [sp, #72]	@ 0x48
 8004444:	e775      	b.n	8004332 <_dtoa_r+0x102>
 8004446:	2301      	movs	r3, #1
 8004448:	e7b6      	b.n	80043b8 <_dtoa_r+0x188>
 800444a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800444c:	e7b5      	b.n	80043ba <_dtoa_r+0x18a>
 800444e:	427b      	negs	r3, r7
 8004450:	930a      	str	r3, [sp, #40]	@ 0x28
 8004452:	2300      	movs	r3, #0
 8004454:	eba8 0807 	sub.w	r8, r8, r7
 8004458:	930e      	str	r3, [sp, #56]	@ 0x38
 800445a:	e7c2      	b.n	80043e2 <_dtoa_r+0x1b2>
 800445c:	2300      	movs	r3, #0
 800445e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004460:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004462:	2b00      	cmp	r3, #0
 8004464:	dc35      	bgt.n	80044d2 <_dtoa_r+0x2a2>
 8004466:	2301      	movs	r3, #1
 8004468:	461a      	mov	r2, r3
 800446a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800446e:	9221      	str	r2, [sp, #132]	@ 0x84
 8004470:	e00b      	b.n	800448a <_dtoa_r+0x25a>
 8004472:	2301      	movs	r3, #1
 8004474:	e7f3      	b.n	800445e <_dtoa_r+0x22e>
 8004476:	2300      	movs	r3, #0
 8004478:	930b      	str	r3, [sp, #44]	@ 0x2c
 800447a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800447c:	18fb      	adds	r3, r7, r3
 800447e:	9308      	str	r3, [sp, #32]
 8004480:	3301      	adds	r3, #1
 8004482:	2b01      	cmp	r3, #1
 8004484:	9307      	str	r3, [sp, #28]
 8004486:	bfb8      	it	lt
 8004488:	2301      	movlt	r3, #1
 800448a:	2100      	movs	r1, #0
 800448c:	2204      	movs	r2, #4
 800448e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004492:	f102 0514 	add.w	r5, r2, #20
 8004496:	429d      	cmp	r5, r3
 8004498:	d91f      	bls.n	80044da <_dtoa_r+0x2aa>
 800449a:	6041      	str	r1, [r0, #4]
 800449c:	4658      	mov	r0, fp
 800449e:	f000 fd8d 	bl	8004fbc <_Balloc>
 80044a2:	4682      	mov	sl, r0
 80044a4:	2800      	cmp	r0, #0
 80044a6:	d139      	bne.n	800451c <_dtoa_r+0x2ec>
 80044a8:	4602      	mov	r2, r0
 80044aa:	f240 11af 	movw	r1, #431	@ 0x1af
 80044ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004518 <_dtoa_r+0x2e8>)
 80044b0:	e6d2      	b.n	8004258 <_dtoa_r+0x28>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e7e0      	b.n	8004478 <_dtoa_r+0x248>
 80044b6:	2401      	movs	r4, #1
 80044b8:	2300      	movs	r3, #0
 80044ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 80044bc:	9320      	str	r3, [sp, #128]	@ 0x80
 80044be:	f04f 33ff 	mov.w	r3, #4294967295
 80044c2:	2200      	movs	r2, #0
 80044c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80044c8:	2312      	movs	r3, #18
 80044ca:	e7d0      	b.n	800446e <_dtoa_r+0x23e>
 80044cc:	2301      	movs	r3, #1
 80044ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044d0:	e7f5      	b.n	80044be <_dtoa_r+0x28e>
 80044d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80044d4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80044d8:	e7d7      	b.n	800448a <_dtoa_r+0x25a>
 80044da:	3101      	adds	r1, #1
 80044dc:	0052      	lsls	r2, r2, #1
 80044de:	e7d8      	b.n	8004492 <_dtoa_r+0x262>
 80044e0:	636f4361 	.word	0x636f4361
 80044e4:	3fd287a7 	.word	0x3fd287a7
 80044e8:	8b60c8b3 	.word	0x8b60c8b3
 80044ec:	3fc68a28 	.word	0x3fc68a28
 80044f0:	509f79fb 	.word	0x509f79fb
 80044f4:	3fd34413 	.word	0x3fd34413
 80044f8:	08007818 	.word	0x08007818
 80044fc:	0800782f 	.word	0x0800782f
 8004500:	7ff00000 	.word	0x7ff00000
 8004504:	08007814 	.word	0x08007814
 8004508:	080077e3 	.word	0x080077e3
 800450c:	080077e2 	.word	0x080077e2
 8004510:	3ff80000 	.word	0x3ff80000
 8004514:	08007928 	.word	0x08007928
 8004518:	08007887 	.word	0x08007887
 800451c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004520:	6018      	str	r0, [r3, #0]
 8004522:	9b07      	ldr	r3, [sp, #28]
 8004524:	2b0e      	cmp	r3, #14
 8004526:	f200 80a4 	bhi.w	8004672 <_dtoa_r+0x442>
 800452a:	2c00      	cmp	r4, #0
 800452c:	f000 80a1 	beq.w	8004672 <_dtoa_r+0x442>
 8004530:	2f00      	cmp	r7, #0
 8004532:	dd33      	ble.n	800459c <_dtoa_r+0x36c>
 8004534:	4b86      	ldr	r3, [pc, #536]	@ (8004750 <_dtoa_r+0x520>)
 8004536:	f007 020f 	and.w	r2, r7, #15
 800453a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800453e:	05f8      	lsls	r0, r7, #23
 8004540:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004544:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004548:	ea4f 1427 	mov.w	r4, r7, asr #4
 800454c:	d516      	bpl.n	800457c <_dtoa_r+0x34c>
 800454e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004552:	4b80      	ldr	r3, [pc, #512]	@ (8004754 <_dtoa_r+0x524>)
 8004554:	2603      	movs	r6, #3
 8004556:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800455a:	f7fc f8e7 	bl	800072c <__aeabi_ddiv>
 800455e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004562:	f004 040f 	and.w	r4, r4, #15
 8004566:	4d7b      	ldr	r5, [pc, #492]	@ (8004754 <_dtoa_r+0x524>)
 8004568:	b954      	cbnz	r4, 8004580 <_dtoa_r+0x350>
 800456a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800456e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004572:	f7fc f8db 	bl	800072c <__aeabi_ddiv>
 8004576:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800457a:	e028      	b.n	80045ce <_dtoa_r+0x39e>
 800457c:	2602      	movs	r6, #2
 800457e:	e7f2      	b.n	8004566 <_dtoa_r+0x336>
 8004580:	07e1      	lsls	r1, r4, #31
 8004582:	d508      	bpl.n	8004596 <_dtoa_r+0x366>
 8004584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004588:	e9d5 2300 	ldrd	r2, r3, [r5]
 800458c:	f7fb ffa4 	bl	80004d8 <__aeabi_dmul>
 8004590:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004594:	3601      	adds	r6, #1
 8004596:	1064      	asrs	r4, r4, #1
 8004598:	3508      	adds	r5, #8
 800459a:	e7e5      	b.n	8004568 <_dtoa_r+0x338>
 800459c:	f000 80d2 	beq.w	8004744 <_dtoa_r+0x514>
 80045a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045a4:	427c      	negs	r4, r7
 80045a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004750 <_dtoa_r+0x520>)
 80045a8:	f004 020f 	and.w	r2, r4, #15
 80045ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f7fb ff90 	bl	80004d8 <__aeabi_dmul>
 80045b8:	2602      	movs	r6, #2
 80045ba:	2300      	movs	r3, #0
 80045bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045c0:	4d64      	ldr	r5, [pc, #400]	@ (8004754 <_dtoa_r+0x524>)
 80045c2:	1124      	asrs	r4, r4, #4
 80045c4:	2c00      	cmp	r4, #0
 80045c6:	f040 80b2 	bne.w	800472e <_dtoa_r+0x4fe>
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1d3      	bne.n	8004576 <_dtoa_r+0x346>
 80045ce:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80045d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 80b7 	beq.w	8004748 <_dtoa_r+0x518>
 80045da:	2200      	movs	r2, #0
 80045dc:	4620      	mov	r0, r4
 80045de:	4629      	mov	r1, r5
 80045e0:	4b5d      	ldr	r3, [pc, #372]	@ (8004758 <_dtoa_r+0x528>)
 80045e2:	f7fc f9eb 	bl	80009bc <__aeabi_dcmplt>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	f000 80ae 	beq.w	8004748 <_dtoa_r+0x518>
 80045ec:	9b07      	ldr	r3, [sp, #28]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 80aa 	beq.w	8004748 <_dtoa_r+0x518>
 80045f4:	9b08      	ldr	r3, [sp, #32]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	dd37      	ble.n	800466a <_dtoa_r+0x43a>
 80045fa:	1e7b      	subs	r3, r7, #1
 80045fc:	4620      	mov	r0, r4
 80045fe:	9304      	str	r3, [sp, #16]
 8004600:	2200      	movs	r2, #0
 8004602:	4629      	mov	r1, r5
 8004604:	4b55      	ldr	r3, [pc, #340]	@ (800475c <_dtoa_r+0x52c>)
 8004606:	f7fb ff67 	bl	80004d8 <__aeabi_dmul>
 800460a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800460e:	9c08      	ldr	r4, [sp, #32]
 8004610:	3601      	adds	r6, #1
 8004612:	4630      	mov	r0, r6
 8004614:	f7fb fef6 	bl	8000404 <__aeabi_i2d>
 8004618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800461c:	f7fb ff5c 	bl	80004d8 <__aeabi_dmul>
 8004620:	2200      	movs	r2, #0
 8004622:	4b4f      	ldr	r3, [pc, #316]	@ (8004760 <_dtoa_r+0x530>)
 8004624:	f7fb fda2 	bl	800016c <__adddf3>
 8004628:	4605      	mov	r5, r0
 800462a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800462e:	2c00      	cmp	r4, #0
 8004630:	f040 809a 	bne.w	8004768 <_dtoa_r+0x538>
 8004634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004638:	2200      	movs	r2, #0
 800463a:	4b4a      	ldr	r3, [pc, #296]	@ (8004764 <_dtoa_r+0x534>)
 800463c:	f7fb fd94 	bl	8000168 <__aeabi_dsub>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004648:	462a      	mov	r2, r5
 800464a:	4633      	mov	r3, r6
 800464c:	f7fc f9d4 	bl	80009f8 <__aeabi_dcmpgt>
 8004650:	2800      	cmp	r0, #0
 8004652:	f040 828e 	bne.w	8004b72 <_dtoa_r+0x942>
 8004656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800465a:	462a      	mov	r2, r5
 800465c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004660:	f7fc f9ac 	bl	80009bc <__aeabi_dcmplt>
 8004664:	2800      	cmp	r0, #0
 8004666:	f040 8127 	bne.w	80048b8 <_dtoa_r+0x688>
 800466a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800466e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004672:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004674:	2b00      	cmp	r3, #0
 8004676:	f2c0 8163 	blt.w	8004940 <_dtoa_r+0x710>
 800467a:	2f0e      	cmp	r7, #14
 800467c:	f300 8160 	bgt.w	8004940 <_dtoa_r+0x710>
 8004680:	4b33      	ldr	r3, [pc, #204]	@ (8004750 <_dtoa_r+0x520>)
 8004682:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004686:	e9d3 3400 	ldrd	r3, r4, [r3]
 800468a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800468e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004690:	2b00      	cmp	r3, #0
 8004692:	da03      	bge.n	800469c <_dtoa_r+0x46c>
 8004694:	9b07      	ldr	r3, [sp, #28]
 8004696:	2b00      	cmp	r3, #0
 8004698:	f340 8100 	ble.w	800489c <_dtoa_r+0x66c>
 800469c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80046a0:	4656      	mov	r6, sl
 80046a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046a6:	4620      	mov	r0, r4
 80046a8:	4629      	mov	r1, r5
 80046aa:	f7fc f83f 	bl	800072c <__aeabi_ddiv>
 80046ae:	f7fc f9c3 	bl	8000a38 <__aeabi_d2iz>
 80046b2:	4680      	mov	r8, r0
 80046b4:	f7fb fea6 	bl	8000404 <__aeabi_i2d>
 80046b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046bc:	f7fb ff0c 	bl	80004d8 <__aeabi_dmul>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4620      	mov	r0, r4
 80046c6:	4629      	mov	r1, r5
 80046c8:	f7fb fd4e 	bl	8000168 <__aeabi_dsub>
 80046cc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80046d0:	9d07      	ldr	r5, [sp, #28]
 80046d2:	f806 4b01 	strb.w	r4, [r6], #1
 80046d6:	eba6 040a 	sub.w	r4, r6, sl
 80046da:	42a5      	cmp	r5, r4
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	f040 8116 	bne.w	8004910 <_dtoa_r+0x6e0>
 80046e4:	f7fb fd42 	bl	800016c <__adddf3>
 80046e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046ec:	4604      	mov	r4, r0
 80046ee:	460d      	mov	r5, r1
 80046f0:	f7fc f982 	bl	80009f8 <__aeabi_dcmpgt>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	f040 80f8 	bne.w	80048ea <_dtoa_r+0x6ba>
 80046fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046fe:	4620      	mov	r0, r4
 8004700:	4629      	mov	r1, r5
 8004702:	f7fc f951 	bl	80009a8 <__aeabi_dcmpeq>
 8004706:	b118      	cbz	r0, 8004710 <_dtoa_r+0x4e0>
 8004708:	f018 0f01 	tst.w	r8, #1
 800470c:	f040 80ed 	bne.w	80048ea <_dtoa_r+0x6ba>
 8004710:	4649      	mov	r1, r9
 8004712:	4658      	mov	r0, fp
 8004714:	f000 fc92 	bl	800503c <_Bfree>
 8004718:	2300      	movs	r3, #0
 800471a:	7033      	strb	r3, [r6, #0]
 800471c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800471e:	3701      	adds	r7, #1
 8004720:	601f      	str	r7, [r3, #0]
 8004722:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 8320 	beq.w	8004d6a <_dtoa_r+0xb3a>
 800472a:	601e      	str	r6, [r3, #0]
 800472c:	e31d      	b.n	8004d6a <_dtoa_r+0xb3a>
 800472e:	07e2      	lsls	r2, r4, #31
 8004730:	d505      	bpl.n	800473e <_dtoa_r+0x50e>
 8004732:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004736:	f7fb fecf 	bl	80004d8 <__aeabi_dmul>
 800473a:	2301      	movs	r3, #1
 800473c:	3601      	adds	r6, #1
 800473e:	1064      	asrs	r4, r4, #1
 8004740:	3508      	adds	r5, #8
 8004742:	e73f      	b.n	80045c4 <_dtoa_r+0x394>
 8004744:	2602      	movs	r6, #2
 8004746:	e742      	b.n	80045ce <_dtoa_r+0x39e>
 8004748:	9c07      	ldr	r4, [sp, #28]
 800474a:	9704      	str	r7, [sp, #16]
 800474c:	e761      	b.n	8004612 <_dtoa_r+0x3e2>
 800474e:	bf00      	nop
 8004750:	08007928 	.word	0x08007928
 8004754:	08007900 	.word	0x08007900
 8004758:	3ff00000 	.word	0x3ff00000
 800475c:	40240000 	.word	0x40240000
 8004760:	401c0000 	.word	0x401c0000
 8004764:	40140000 	.word	0x40140000
 8004768:	4b70      	ldr	r3, [pc, #448]	@ (800492c <_dtoa_r+0x6fc>)
 800476a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800476c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004770:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004774:	4454      	add	r4, sl
 8004776:	2900      	cmp	r1, #0
 8004778:	d045      	beq.n	8004806 <_dtoa_r+0x5d6>
 800477a:	2000      	movs	r0, #0
 800477c:	496c      	ldr	r1, [pc, #432]	@ (8004930 <_dtoa_r+0x700>)
 800477e:	f7fb ffd5 	bl	800072c <__aeabi_ddiv>
 8004782:	4633      	mov	r3, r6
 8004784:	462a      	mov	r2, r5
 8004786:	f7fb fcef 	bl	8000168 <__aeabi_dsub>
 800478a:	4656      	mov	r6, sl
 800478c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004794:	f7fc f950 	bl	8000a38 <__aeabi_d2iz>
 8004798:	4605      	mov	r5, r0
 800479a:	f7fb fe33 	bl	8000404 <__aeabi_i2d>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047a6:	f7fb fcdf 	bl	8000168 <__aeabi_dsub>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	3530      	adds	r5, #48	@ 0x30
 80047b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80047b8:	f806 5b01 	strb.w	r5, [r6], #1
 80047bc:	f7fc f8fe 	bl	80009bc <__aeabi_dcmplt>
 80047c0:	2800      	cmp	r0, #0
 80047c2:	d163      	bne.n	800488c <_dtoa_r+0x65c>
 80047c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047c8:	2000      	movs	r0, #0
 80047ca:	495a      	ldr	r1, [pc, #360]	@ (8004934 <_dtoa_r+0x704>)
 80047cc:	f7fb fccc 	bl	8000168 <__aeabi_dsub>
 80047d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80047d4:	f7fc f8f2 	bl	80009bc <__aeabi_dcmplt>
 80047d8:	2800      	cmp	r0, #0
 80047da:	f040 8087 	bne.w	80048ec <_dtoa_r+0x6bc>
 80047de:	42a6      	cmp	r6, r4
 80047e0:	f43f af43 	beq.w	800466a <_dtoa_r+0x43a>
 80047e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80047e8:	2200      	movs	r2, #0
 80047ea:	4b53      	ldr	r3, [pc, #332]	@ (8004938 <_dtoa_r+0x708>)
 80047ec:	f7fb fe74 	bl	80004d8 <__aeabi_dmul>
 80047f0:	2200      	movs	r2, #0
 80047f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80047f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047fa:	4b4f      	ldr	r3, [pc, #316]	@ (8004938 <_dtoa_r+0x708>)
 80047fc:	f7fb fe6c 	bl	80004d8 <__aeabi_dmul>
 8004800:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004804:	e7c4      	b.n	8004790 <_dtoa_r+0x560>
 8004806:	4631      	mov	r1, r6
 8004808:	4628      	mov	r0, r5
 800480a:	f7fb fe65 	bl	80004d8 <__aeabi_dmul>
 800480e:	4656      	mov	r6, sl
 8004810:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004814:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800481a:	f7fc f90d 	bl	8000a38 <__aeabi_d2iz>
 800481e:	4605      	mov	r5, r0
 8004820:	f7fb fdf0 	bl	8000404 <__aeabi_i2d>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800482c:	f7fb fc9c 	bl	8000168 <__aeabi_dsub>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	3530      	adds	r5, #48	@ 0x30
 8004836:	f806 5b01 	strb.w	r5, [r6], #1
 800483a:	42a6      	cmp	r6, r4
 800483c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	d124      	bne.n	8004890 <_dtoa_r+0x660>
 8004846:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800484a:	4b39      	ldr	r3, [pc, #228]	@ (8004930 <_dtoa_r+0x700>)
 800484c:	f7fb fc8e 	bl	800016c <__adddf3>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004858:	f7fc f8ce 	bl	80009f8 <__aeabi_dcmpgt>
 800485c:	2800      	cmp	r0, #0
 800485e:	d145      	bne.n	80048ec <_dtoa_r+0x6bc>
 8004860:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004864:	2000      	movs	r0, #0
 8004866:	4932      	ldr	r1, [pc, #200]	@ (8004930 <_dtoa_r+0x700>)
 8004868:	f7fb fc7e 	bl	8000168 <__aeabi_dsub>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004874:	f7fc f8a2 	bl	80009bc <__aeabi_dcmplt>
 8004878:	2800      	cmp	r0, #0
 800487a:	f43f aef6 	beq.w	800466a <_dtoa_r+0x43a>
 800487e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004880:	1e73      	subs	r3, r6, #1
 8004882:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004884:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004888:	2b30      	cmp	r3, #48	@ 0x30
 800488a:	d0f8      	beq.n	800487e <_dtoa_r+0x64e>
 800488c:	9f04      	ldr	r7, [sp, #16]
 800488e:	e73f      	b.n	8004710 <_dtoa_r+0x4e0>
 8004890:	4b29      	ldr	r3, [pc, #164]	@ (8004938 <_dtoa_r+0x708>)
 8004892:	f7fb fe21 	bl	80004d8 <__aeabi_dmul>
 8004896:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800489a:	e7bc      	b.n	8004816 <_dtoa_r+0x5e6>
 800489c:	d10c      	bne.n	80048b8 <_dtoa_r+0x688>
 800489e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048a2:	2200      	movs	r2, #0
 80048a4:	4b25      	ldr	r3, [pc, #148]	@ (800493c <_dtoa_r+0x70c>)
 80048a6:	f7fb fe17 	bl	80004d8 <__aeabi_dmul>
 80048aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048ae:	f7fc f899 	bl	80009e4 <__aeabi_dcmpge>
 80048b2:	2800      	cmp	r0, #0
 80048b4:	f000 815b 	beq.w	8004b6e <_dtoa_r+0x93e>
 80048b8:	2400      	movs	r4, #0
 80048ba:	4625      	mov	r5, r4
 80048bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80048be:	4656      	mov	r6, sl
 80048c0:	43db      	mvns	r3, r3
 80048c2:	9304      	str	r3, [sp, #16]
 80048c4:	2700      	movs	r7, #0
 80048c6:	4621      	mov	r1, r4
 80048c8:	4658      	mov	r0, fp
 80048ca:	f000 fbb7 	bl	800503c <_Bfree>
 80048ce:	2d00      	cmp	r5, #0
 80048d0:	d0dc      	beq.n	800488c <_dtoa_r+0x65c>
 80048d2:	b12f      	cbz	r7, 80048e0 <_dtoa_r+0x6b0>
 80048d4:	42af      	cmp	r7, r5
 80048d6:	d003      	beq.n	80048e0 <_dtoa_r+0x6b0>
 80048d8:	4639      	mov	r1, r7
 80048da:	4658      	mov	r0, fp
 80048dc:	f000 fbae 	bl	800503c <_Bfree>
 80048e0:	4629      	mov	r1, r5
 80048e2:	4658      	mov	r0, fp
 80048e4:	f000 fbaa 	bl	800503c <_Bfree>
 80048e8:	e7d0      	b.n	800488c <_dtoa_r+0x65c>
 80048ea:	9704      	str	r7, [sp, #16]
 80048ec:	4633      	mov	r3, r6
 80048ee:	461e      	mov	r6, r3
 80048f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80048f4:	2a39      	cmp	r2, #57	@ 0x39
 80048f6:	d107      	bne.n	8004908 <_dtoa_r+0x6d8>
 80048f8:	459a      	cmp	sl, r3
 80048fa:	d1f8      	bne.n	80048ee <_dtoa_r+0x6be>
 80048fc:	9a04      	ldr	r2, [sp, #16]
 80048fe:	3201      	adds	r2, #1
 8004900:	9204      	str	r2, [sp, #16]
 8004902:	2230      	movs	r2, #48	@ 0x30
 8004904:	f88a 2000 	strb.w	r2, [sl]
 8004908:	781a      	ldrb	r2, [r3, #0]
 800490a:	3201      	adds	r2, #1
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	e7bd      	b.n	800488c <_dtoa_r+0x65c>
 8004910:	2200      	movs	r2, #0
 8004912:	4b09      	ldr	r3, [pc, #36]	@ (8004938 <_dtoa_r+0x708>)
 8004914:	f7fb fde0 	bl	80004d8 <__aeabi_dmul>
 8004918:	2200      	movs	r2, #0
 800491a:	2300      	movs	r3, #0
 800491c:	4604      	mov	r4, r0
 800491e:	460d      	mov	r5, r1
 8004920:	f7fc f842 	bl	80009a8 <__aeabi_dcmpeq>
 8004924:	2800      	cmp	r0, #0
 8004926:	f43f aebc 	beq.w	80046a2 <_dtoa_r+0x472>
 800492a:	e6f1      	b.n	8004710 <_dtoa_r+0x4e0>
 800492c:	08007928 	.word	0x08007928
 8004930:	3fe00000 	.word	0x3fe00000
 8004934:	3ff00000 	.word	0x3ff00000
 8004938:	40240000 	.word	0x40240000
 800493c:	40140000 	.word	0x40140000
 8004940:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004942:	2a00      	cmp	r2, #0
 8004944:	f000 80db 	beq.w	8004afe <_dtoa_r+0x8ce>
 8004948:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800494a:	2a01      	cmp	r2, #1
 800494c:	f300 80bf 	bgt.w	8004ace <_dtoa_r+0x89e>
 8004950:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004952:	2a00      	cmp	r2, #0
 8004954:	f000 80b7 	beq.w	8004ac6 <_dtoa_r+0x896>
 8004958:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800495c:	4646      	mov	r6, r8
 800495e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004960:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004962:	2101      	movs	r1, #1
 8004964:	441a      	add	r2, r3
 8004966:	4658      	mov	r0, fp
 8004968:	4498      	add	r8, r3
 800496a:	9209      	str	r2, [sp, #36]	@ 0x24
 800496c:	f000 fc64 	bl	8005238 <__i2b>
 8004970:	4605      	mov	r5, r0
 8004972:	b15e      	cbz	r6, 800498c <_dtoa_r+0x75c>
 8004974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004976:	2b00      	cmp	r3, #0
 8004978:	dd08      	ble.n	800498c <_dtoa_r+0x75c>
 800497a:	42b3      	cmp	r3, r6
 800497c:	bfa8      	it	ge
 800497e:	4633      	movge	r3, r6
 8004980:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004982:	eba8 0803 	sub.w	r8, r8, r3
 8004986:	1af6      	subs	r6, r6, r3
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	9309      	str	r3, [sp, #36]	@ 0x24
 800498c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800498e:	b1f3      	cbz	r3, 80049ce <_dtoa_r+0x79e>
 8004990:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 80b7 	beq.w	8004b06 <_dtoa_r+0x8d6>
 8004998:	b18c      	cbz	r4, 80049be <_dtoa_r+0x78e>
 800499a:	4629      	mov	r1, r5
 800499c:	4622      	mov	r2, r4
 800499e:	4658      	mov	r0, fp
 80049a0:	f000 fd08 	bl	80053b4 <__pow5mult>
 80049a4:	464a      	mov	r2, r9
 80049a6:	4601      	mov	r1, r0
 80049a8:	4605      	mov	r5, r0
 80049aa:	4658      	mov	r0, fp
 80049ac:	f000 fc5a 	bl	8005264 <__multiply>
 80049b0:	4649      	mov	r1, r9
 80049b2:	9004      	str	r0, [sp, #16]
 80049b4:	4658      	mov	r0, fp
 80049b6:	f000 fb41 	bl	800503c <_Bfree>
 80049ba:	9b04      	ldr	r3, [sp, #16]
 80049bc:	4699      	mov	r9, r3
 80049be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049c0:	1b1a      	subs	r2, r3, r4
 80049c2:	d004      	beq.n	80049ce <_dtoa_r+0x79e>
 80049c4:	4649      	mov	r1, r9
 80049c6:	4658      	mov	r0, fp
 80049c8:	f000 fcf4 	bl	80053b4 <__pow5mult>
 80049cc:	4681      	mov	r9, r0
 80049ce:	2101      	movs	r1, #1
 80049d0:	4658      	mov	r0, fp
 80049d2:	f000 fc31 	bl	8005238 <__i2b>
 80049d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80049d8:	4604      	mov	r4, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 81c9 	beq.w	8004d72 <_dtoa_r+0xb42>
 80049e0:	461a      	mov	r2, r3
 80049e2:	4601      	mov	r1, r0
 80049e4:	4658      	mov	r0, fp
 80049e6:	f000 fce5 	bl	80053b4 <__pow5mult>
 80049ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80049ec:	4604      	mov	r4, r0
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	f300 808f 	bgt.w	8004b12 <_dtoa_r+0x8e2>
 80049f4:	9b02      	ldr	r3, [sp, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f040 8087 	bne.w	8004b0a <_dtoa_r+0x8da>
 80049fc:	9b03      	ldr	r3, [sp, #12]
 80049fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f040 8083 	bne.w	8004b0e <_dtoa_r+0x8de>
 8004a08:	9b03      	ldr	r3, [sp, #12]
 8004a0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a0e:	0d1b      	lsrs	r3, r3, #20
 8004a10:	051b      	lsls	r3, r3, #20
 8004a12:	b12b      	cbz	r3, 8004a20 <_dtoa_r+0x7f0>
 8004a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a16:	f108 0801 	add.w	r8, r8, #1
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a1e:	2301      	movs	r3, #1
 8004a20:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 81aa 	beq.w	8004d7e <_dtoa_r+0xb4e>
 8004a2a:	6923      	ldr	r3, [r4, #16]
 8004a2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004a30:	6918      	ldr	r0, [r3, #16]
 8004a32:	f000 fbb5 	bl	80051a0 <__hi0bits>
 8004a36:	f1c0 0020 	rsb	r0, r0, #32
 8004a3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a3c:	4418      	add	r0, r3
 8004a3e:	f010 001f 	ands.w	r0, r0, #31
 8004a42:	d071      	beq.n	8004b28 <_dtoa_r+0x8f8>
 8004a44:	f1c0 0320 	rsb	r3, r0, #32
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	dd65      	ble.n	8004b18 <_dtoa_r+0x8e8>
 8004a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a4e:	f1c0 001c 	rsb	r0, r0, #28
 8004a52:	4403      	add	r3, r0
 8004a54:	4480      	add	r8, r0
 8004a56:	4406      	add	r6, r0
 8004a58:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a5a:	f1b8 0f00 	cmp.w	r8, #0
 8004a5e:	dd05      	ble.n	8004a6c <_dtoa_r+0x83c>
 8004a60:	4649      	mov	r1, r9
 8004a62:	4642      	mov	r2, r8
 8004a64:	4658      	mov	r0, fp
 8004a66:	f000 fcff 	bl	8005468 <__lshift>
 8004a6a:	4681      	mov	r9, r0
 8004a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	dd05      	ble.n	8004a7e <_dtoa_r+0x84e>
 8004a72:	4621      	mov	r1, r4
 8004a74:	461a      	mov	r2, r3
 8004a76:	4658      	mov	r0, fp
 8004a78:	f000 fcf6 	bl	8005468 <__lshift>
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d053      	beq.n	8004b2c <_dtoa_r+0x8fc>
 8004a84:	4621      	mov	r1, r4
 8004a86:	4648      	mov	r0, r9
 8004a88:	f000 fd5a 	bl	8005540 <__mcmp>
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	da4d      	bge.n	8004b2c <_dtoa_r+0x8fc>
 8004a90:	1e7b      	subs	r3, r7, #1
 8004a92:	4649      	mov	r1, r9
 8004a94:	9304      	str	r3, [sp, #16]
 8004a96:	220a      	movs	r2, #10
 8004a98:	2300      	movs	r3, #0
 8004a9a:	4658      	mov	r0, fp
 8004a9c:	f000 faf0 	bl	8005080 <__multadd>
 8004aa0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004aa2:	4681      	mov	r9, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 816c 	beq.w	8004d82 <_dtoa_r+0xb52>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	4629      	mov	r1, r5
 8004aae:	220a      	movs	r2, #10
 8004ab0:	4658      	mov	r0, fp
 8004ab2:	f000 fae5 	bl	8005080 <__multadd>
 8004ab6:	9b08      	ldr	r3, [sp, #32]
 8004ab8:	4605      	mov	r5, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	dc61      	bgt.n	8004b82 <_dtoa_r+0x952>
 8004abe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	dc3b      	bgt.n	8004b3c <_dtoa_r+0x90c>
 8004ac4:	e05d      	b.n	8004b82 <_dtoa_r+0x952>
 8004ac6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004ac8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004acc:	e746      	b.n	800495c <_dtoa_r+0x72c>
 8004ace:	9b07      	ldr	r3, [sp, #28]
 8004ad0:	1e5c      	subs	r4, r3, #1
 8004ad2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ad4:	42a3      	cmp	r3, r4
 8004ad6:	bfbf      	itttt	lt
 8004ad8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004ada:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004adc:	1ae3      	sublt	r3, r4, r3
 8004ade:	18d2      	addlt	r2, r2, r3
 8004ae0:	bfa8      	it	ge
 8004ae2:	1b1c      	subge	r4, r3, r4
 8004ae4:	9b07      	ldr	r3, [sp, #28]
 8004ae6:	bfbe      	ittt	lt
 8004ae8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004aea:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004aec:	2400      	movlt	r4, #0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	bfb5      	itete	lt
 8004af2:	eba8 0603 	sublt.w	r6, r8, r3
 8004af6:	4646      	movge	r6, r8
 8004af8:	2300      	movlt	r3, #0
 8004afa:	9b07      	ldrge	r3, [sp, #28]
 8004afc:	e730      	b.n	8004960 <_dtoa_r+0x730>
 8004afe:	4646      	mov	r6, r8
 8004b00:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004b02:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004b04:	e735      	b.n	8004972 <_dtoa_r+0x742>
 8004b06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004b08:	e75c      	b.n	80049c4 <_dtoa_r+0x794>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e788      	b.n	8004a20 <_dtoa_r+0x7f0>
 8004b0e:	9b02      	ldr	r3, [sp, #8]
 8004b10:	e786      	b.n	8004a20 <_dtoa_r+0x7f0>
 8004b12:	2300      	movs	r3, #0
 8004b14:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b16:	e788      	b.n	8004a2a <_dtoa_r+0x7fa>
 8004b18:	d09f      	beq.n	8004a5a <_dtoa_r+0x82a>
 8004b1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b1c:	331c      	adds	r3, #28
 8004b1e:	441a      	add	r2, r3
 8004b20:	4498      	add	r8, r3
 8004b22:	441e      	add	r6, r3
 8004b24:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b26:	e798      	b.n	8004a5a <_dtoa_r+0x82a>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	e7f6      	b.n	8004b1a <_dtoa_r+0x8ea>
 8004b2c:	9b07      	ldr	r3, [sp, #28]
 8004b2e:	9704      	str	r7, [sp, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	dc20      	bgt.n	8004b76 <_dtoa_r+0x946>
 8004b34:	9308      	str	r3, [sp, #32]
 8004b36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	dd1e      	ble.n	8004b7a <_dtoa_r+0x94a>
 8004b3c:	9b08      	ldr	r3, [sp, #32]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f47f aebc 	bne.w	80048bc <_dtoa_r+0x68c>
 8004b44:	4621      	mov	r1, r4
 8004b46:	2205      	movs	r2, #5
 8004b48:	4658      	mov	r0, fp
 8004b4a:	f000 fa99 	bl	8005080 <__multadd>
 8004b4e:	4601      	mov	r1, r0
 8004b50:	4604      	mov	r4, r0
 8004b52:	4648      	mov	r0, r9
 8004b54:	f000 fcf4 	bl	8005540 <__mcmp>
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	f77f aeaf 	ble.w	80048bc <_dtoa_r+0x68c>
 8004b5e:	2331      	movs	r3, #49	@ 0x31
 8004b60:	4656      	mov	r6, sl
 8004b62:	f806 3b01 	strb.w	r3, [r6], #1
 8004b66:	9b04      	ldr	r3, [sp, #16]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	9304      	str	r3, [sp, #16]
 8004b6c:	e6aa      	b.n	80048c4 <_dtoa_r+0x694>
 8004b6e:	9c07      	ldr	r4, [sp, #28]
 8004b70:	9704      	str	r7, [sp, #16]
 8004b72:	4625      	mov	r5, r4
 8004b74:	e7f3      	b.n	8004b5e <_dtoa_r+0x92e>
 8004b76:	9b07      	ldr	r3, [sp, #28]
 8004b78:	9308      	str	r3, [sp, #32]
 8004b7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 8104 	beq.w	8004d8a <_dtoa_r+0xb5a>
 8004b82:	2e00      	cmp	r6, #0
 8004b84:	dd05      	ble.n	8004b92 <_dtoa_r+0x962>
 8004b86:	4629      	mov	r1, r5
 8004b88:	4632      	mov	r2, r6
 8004b8a:	4658      	mov	r0, fp
 8004b8c:	f000 fc6c 	bl	8005468 <__lshift>
 8004b90:	4605      	mov	r5, r0
 8004b92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d05a      	beq.n	8004c4e <_dtoa_r+0xa1e>
 8004b98:	4658      	mov	r0, fp
 8004b9a:	6869      	ldr	r1, [r5, #4]
 8004b9c:	f000 fa0e 	bl	8004fbc <_Balloc>
 8004ba0:	4606      	mov	r6, r0
 8004ba2:	b928      	cbnz	r0, 8004bb0 <_dtoa_r+0x980>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004baa:	4b83      	ldr	r3, [pc, #524]	@ (8004db8 <_dtoa_r+0xb88>)
 8004bac:	f7ff bb54 	b.w	8004258 <_dtoa_r+0x28>
 8004bb0:	692a      	ldr	r2, [r5, #16]
 8004bb2:	f105 010c 	add.w	r1, r5, #12
 8004bb6:	3202      	adds	r2, #2
 8004bb8:	0092      	lsls	r2, r2, #2
 8004bba:	300c      	adds	r0, #12
 8004bbc:	f001 ff5e 	bl	8006a7c <memcpy>
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	4631      	mov	r1, r6
 8004bc4:	4658      	mov	r0, fp
 8004bc6:	f000 fc4f 	bl	8005468 <__lshift>
 8004bca:	462f      	mov	r7, r5
 8004bcc:	4605      	mov	r5, r0
 8004bce:	f10a 0301 	add.w	r3, sl, #1
 8004bd2:	9307      	str	r3, [sp, #28]
 8004bd4:	9b08      	ldr	r3, [sp, #32]
 8004bd6:	4453      	add	r3, sl
 8004bd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004bda:	9b02      	ldr	r3, [sp, #8]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004be2:	9b07      	ldr	r3, [sp, #28]
 8004be4:	4621      	mov	r1, r4
 8004be6:	3b01      	subs	r3, #1
 8004be8:	4648      	mov	r0, r9
 8004bea:	9302      	str	r3, [sp, #8]
 8004bec:	f7ff fa96 	bl	800411c <quorem>
 8004bf0:	4639      	mov	r1, r7
 8004bf2:	9008      	str	r0, [sp, #32]
 8004bf4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004bf8:	4648      	mov	r0, r9
 8004bfa:	f000 fca1 	bl	8005540 <__mcmp>
 8004bfe:	462a      	mov	r2, r5
 8004c00:	9009      	str	r0, [sp, #36]	@ 0x24
 8004c02:	4621      	mov	r1, r4
 8004c04:	4658      	mov	r0, fp
 8004c06:	f000 fcb7 	bl	8005578 <__mdiff>
 8004c0a:	68c2      	ldr	r2, [r0, #12]
 8004c0c:	4606      	mov	r6, r0
 8004c0e:	bb02      	cbnz	r2, 8004c52 <_dtoa_r+0xa22>
 8004c10:	4601      	mov	r1, r0
 8004c12:	4648      	mov	r0, r9
 8004c14:	f000 fc94 	bl	8005540 <__mcmp>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	4631      	mov	r1, r6
 8004c1c:	4658      	mov	r0, fp
 8004c1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004c20:	f000 fa0c 	bl	800503c <_Bfree>
 8004c24:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c26:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004c28:	9e07      	ldr	r6, [sp, #28]
 8004c2a:	ea43 0102 	orr.w	r1, r3, r2
 8004c2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c30:	4319      	orrs	r1, r3
 8004c32:	d110      	bne.n	8004c56 <_dtoa_r+0xa26>
 8004c34:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004c38:	d029      	beq.n	8004c8e <_dtoa_r+0xa5e>
 8004c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	dd02      	ble.n	8004c46 <_dtoa_r+0xa16>
 8004c40:	9b08      	ldr	r3, [sp, #32]
 8004c42:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004c46:	9b02      	ldr	r3, [sp, #8]
 8004c48:	f883 8000 	strb.w	r8, [r3]
 8004c4c:	e63b      	b.n	80048c6 <_dtoa_r+0x696>
 8004c4e:	4628      	mov	r0, r5
 8004c50:	e7bb      	b.n	8004bca <_dtoa_r+0x99a>
 8004c52:	2201      	movs	r2, #1
 8004c54:	e7e1      	b.n	8004c1a <_dtoa_r+0x9ea>
 8004c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	db04      	blt.n	8004c66 <_dtoa_r+0xa36>
 8004c5c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004c5e:	430b      	orrs	r3, r1
 8004c60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004c62:	430b      	orrs	r3, r1
 8004c64:	d120      	bne.n	8004ca8 <_dtoa_r+0xa78>
 8004c66:	2a00      	cmp	r2, #0
 8004c68:	dded      	ble.n	8004c46 <_dtoa_r+0xa16>
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	4658      	mov	r0, fp
 8004c70:	f000 fbfa 	bl	8005468 <__lshift>
 8004c74:	4621      	mov	r1, r4
 8004c76:	4681      	mov	r9, r0
 8004c78:	f000 fc62 	bl	8005540 <__mcmp>
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	dc03      	bgt.n	8004c88 <_dtoa_r+0xa58>
 8004c80:	d1e1      	bne.n	8004c46 <_dtoa_r+0xa16>
 8004c82:	f018 0f01 	tst.w	r8, #1
 8004c86:	d0de      	beq.n	8004c46 <_dtoa_r+0xa16>
 8004c88:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004c8c:	d1d8      	bne.n	8004c40 <_dtoa_r+0xa10>
 8004c8e:	2339      	movs	r3, #57	@ 0x39
 8004c90:	9a02      	ldr	r2, [sp, #8]
 8004c92:	7013      	strb	r3, [r2, #0]
 8004c94:	4633      	mov	r3, r6
 8004c96:	461e      	mov	r6, r3
 8004c98:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	2a39      	cmp	r2, #57	@ 0x39
 8004ca0:	d052      	beq.n	8004d48 <_dtoa_r+0xb18>
 8004ca2:	3201      	adds	r2, #1
 8004ca4:	701a      	strb	r2, [r3, #0]
 8004ca6:	e60e      	b.n	80048c6 <_dtoa_r+0x696>
 8004ca8:	2a00      	cmp	r2, #0
 8004caa:	dd07      	ble.n	8004cbc <_dtoa_r+0xa8c>
 8004cac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004cb0:	d0ed      	beq.n	8004c8e <_dtoa_r+0xa5e>
 8004cb2:	9a02      	ldr	r2, [sp, #8]
 8004cb4:	f108 0301 	add.w	r3, r8, #1
 8004cb8:	7013      	strb	r3, [r2, #0]
 8004cba:	e604      	b.n	80048c6 <_dtoa_r+0x696>
 8004cbc:	9b07      	ldr	r3, [sp, #28]
 8004cbe:	9a07      	ldr	r2, [sp, #28]
 8004cc0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004cc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d028      	beq.n	8004d1c <_dtoa_r+0xaec>
 8004cca:	4649      	mov	r1, r9
 8004ccc:	2300      	movs	r3, #0
 8004cce:	220a      	movs	r2, #10
 8004cd0:	4658      	mov	r0, fp
 8004cd2:	f000 f9d5 	bl	8005080 <__multadd>
 8004cd6:	42af      	cmp	r7, r5
 8004cd8:	4681      	mov	r9, r0
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	f04f 020a 	mov.w	r2, #10
 8004ce2:	4639      	mov	r1, r7
 8004ce4:	4658      	mov	r0, fp
 8004ce6:	d107      	bne.n	8004cf8 <_dtoa_r+0xac8>
 8004ce8:	f000 f9ca 	bl	8005080 <__multadd>
 8004cec:	4607      	mov	r7, r0
 8004cee:	4605      	mov	r5, r0
 8004cf0:	9b07      	ldr	r3, [sp, #28]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	9307      	str	r3, [sp, #28]
 8004cf6:	e774      	b.n	8004be2 <_dtoa_r+0x9b2>
 8004cf8:	f000 f9c2 	bl	8005080 <__multadd>
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	4607      	mov	r7, r0
 8004d00:	2300      	movs	r3, #0
 8004d02:	220a      	movs	r2, #10
 8004d04:	4658      	mov	r0, fp
 8004d06:	f000 f9bb 	bl	8005080 <__multadd>
 8004d0a:	4605      	mov	r5, r0
 8004d0c:	e7f0      	b.n	8004cf0 <_dtoa_r+0xac0>
 8004d0e:	9b08      	ldr	r3, [sp, #32]
 8004d10:	2700      	movs	r7, #0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bfcc      	ite	gt
 8004d16:	461e      	movgt	r6, r3
 8004d18:	2601      	movle	r6, #1
 8004d1a:	4456      	add	r6, sl
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	2201      	movs	r2, #1
 8004d20:	4658      	mov	r0, fp
 8004d22:	f000 fba1 	bl	8005468 <__lshift>
 8004d26:	4621      	mov	r1, r4
 8004d28:	4681      	mov	r9, r0
 8004d2a:	f000 fc09 	bl	8005540 <__mcmp>
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	dcb0      	bgt.n	8004c94 <_dtoa_r+0xa64>
 8004d32:	d102      	bne.n	8004d3a <_dtoa_r+0xb0a>
 8004d34:	f018 0f01 	tst.w	r8, #1
 8004d38:	d1ac      	bne.n	8004c94 <_dtoa_r+0xa64>
 8004d3a:	4633      	mov	r3, r6
 8004d3c:	461e      	mov	r6, r3
 8004d3e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d42:	2a30      	cmp	r2, #48	@ 0x30
 8004d44:	d0fa      	beq.n	8004d3c <_dtoa_r+0xb0c>
 8004d46:	e5be      	b.n	80048c6 <_dtoa_r+0x696>
 8004d48:	459a      	cmp	sl, r3
 8004d4a:	d1a4      	bne.n	8004c96 <_dtoa_r+0xa66>
 8004d4c:	9b04      	ldr	r3, [sp, #16]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	9304      	str	r3, [sp, #16]
 8004d52:	2331      	movs	r3, #49	@ 0x31
 8004d54:	f88a 3000 	strb.w	r3, [sl]
 8004d58:	e5b5      	b.n	80048c6 <_dtoa_r+0x696>
 8004d5a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004d5c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004dbc <_dtoa_r+0xb8c>
 8004d60:	b11b      	cbz	r3, 8004d6a <_dtoa_r+0xb3a>
 8004d62:	f10a 0308 	add.w	r3, sl, #8
 8004d66:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	4650      	mov	r0, sl
 8004d6c:	b017      	add	sp, #92	@ 0x5c
 8004d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	f77f ae3d 	ble.w	80049f4 <_dtoa_r+0x7c4>
 8004d7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d7e:	2001      	movs	r0, #1
 8004d80:	e65b      	b.n	8004a3a <_dtoa_r+0x80a>
 8004d82:	9b08      	ldr	r3, [sp, #32]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f77f aed6 	ble.w	8004b36 <_dtoa_r+0x906>
 8004d8a:	4656      	mov	r6, sl
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	4648      	mov	r0, r9
 8004d90:	f7ff f9c4 	bl	800411c <quorem>
 8004d94:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004d98:	9b08      	ldr	r3, [sp, #32]
 8004d9a:	f806 8b01 	strb.w	r8, [r6], #1
 8004d9e:	eba6 020a 	sub.w	r2, r6, sl
 8004da2:	4293      	cmp	r3, r2
 8004da4:	ddb3      	ble.n	8004d0e <_dtoa_r+0xade>
 8004da6:	4649      	mov	r1, r9
 8004da8:	2300      	movs	r3, #0
 8004daa:	220a      	movs	r2, #10
 8004dac:	4658      	mov	r0, fp
 8004dae:	f000 f967 	bl	8005080 <__multadd>
 8004db2:	4681      	mov	r9, r0
 8004db4:	e7ea      	b.n	8004d8c <_dtoa_r+0xb5c>
 8004db6:	bf00      	nop
 8004db8:	08007887 	.word	0x08007887
 8004dbc:	0800780b 	.word	0x0800780b

08004dc0 <_free_r>:
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	2900      	cmp	r1, #0
 8004dc6:	d040      	beq.n	8004e4a <_free_r+0x8a>
 8004dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dcc:	1f0c      	subs	r4, r1, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bfb8      	it	lt
 8004dd2:	18e4      	addlt	r4, r4, r3
 8004dd4:	f000 f8e6 	bl	8004fa4 <__malloc_lock>
 8004dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8004e4c <_free_r+0x8c>)
 8004dda:	6813      	ldr	r3, [r2, #0]
 8004ddc:	b933      	cbnz	r3, 8004dec <_free_r+0x2c>
 8004dde:	6063      	str	r3, [r4, #4]
 8004de0:	6014      	str	r4, [r2, #0]
 8004de2:	4628      	mov	r0, r5
 8004de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004de8:	f000 b8e2 	b.w	8004fb0 <__malloc_unlock>
 8004dec:	42a3      	cmp	r3, r4
 8004dee:	d908      	bls.n	8004e02 <_free_r+0x42>
 8004df0:	6820      	ldr	r0, [r4, #0]
 8004df2:	1821      	adds	r1, r4, r0
 8004df4:	428b      	cmp	r3, r1
 8004df6:	bf01      	itttt	eq
 8004df8:	6819      	ldreq	r1, [r3, #0]
 8004dfa:	685b      	ldreq	r3, [r3, #4]
 8004dfc:	1809      	addeq	r1, r1, r0
 8004dfe:	6021      	streq	r1, [r4, #0]
 8004e00:	e7ed      	b.n	8004dde <_free_r+0x1e>
 8004e02:	461a      	mov	r2, r3
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	b10b      	cbz	r3, 8004e0c <_free_r+0x4c>
 8004e08:	42a3      	cmp	r3, r4
 8004e0a:	d9fa      	bls.n	8004e02 <_free_r+0x42>
 8004e0c:	6811      	ldr	r1, [r2, #0]
 8004e0e:	1850      	adds	r0, r2, r1
 8004e10:	42a0      	cmp	r0, r4
 8004e12:	d10b      	bne.n	8004e2c <_free_r+0x6c>
 8004e14:	6820      	ldr	r0, [r4, #0]
 8004e16:	4401      	add	r1, r0
 8004e18:	1850      	adds	r0, r2, r1
 8004e1a:	4283      	cmp	r3, r0
 8004e1c:	6011      	str	r1, [r2, #0]
 8004e1e:	d1e0      	bne.n	8004de2 <_free_r+0x22>
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	4408      	add	r0, r1
 8004e26:	6010      	str	r0, [r2, #0]
 8004e28:	6053      	str	r3, [r2, #4]
 8004e2a:	e7da      	b.n	8004de2 <_free_r+0x22>
 8004e2c:	d902      	bls.n	8004e34 <_free_r+0x74>
 8004e2e:	230c      	movs	r3, #12
 8004e30:	602b      	str	r3, [r5, #0]
 8004e32:	e7d6      	b.n	8004de2 <_free_r+0x22>
 8004e34:	6820      	ldr	r0, [r4, #0]
 8004e36:	1821      	adds	r1, r4, r0
 8004e38:	428b      	cmp	r3, r1
 8004e3a:	bf01      	itttt	eq
 8004e3c:	6819      	ldreq	r1, [r3, #0]
 8004e3e:	685b      	ldreq	r3, [r3, #4]
 8004e40:	1809      	addeq	r1, r1, r0
 8004e42:	6021      	streq	r1, [r4, #0]
 8004e44:	6063      	str	r3, [r4, #4]
 8004e46:	6054      	str	r4, [r2, #4]
 8004e48:	e7cb      	b.n	8004de2 <_free_r+0x22>
 8004e4a:	bd38      	pop	{r3, r4, r5, pc}
 8004e4c:	20000398 	.word	0x20000398

08004e50 <malloc>:
 8004e50:	4b02      	ldr	r3, [pc, #8]	@ (8004e5c <malloc+0xc>)
 8004e52:	4601      	mov	r1, r0
 8004e54:	6818      	ldr	r0, [r3, #0]
 8004e56:	f000 b825 	b.w	8004ea4 <_malloc_r>
 8004e5a:	bf00      	nop
 8004e5c:	20000018 	.word	0x20000018

08004e60 <sbrk_aligned>:
 8004e60:	b570      	push	{r4, r5, r6, lr}
 8004e62:	4e0f      	ldr	r6, [pc, #60]	@ (8004ea0 <sbrk_aligned+0x40>)
 8004e64:	460c      	mov	r4, r1
 8004e66:	6831      	ldr	r1, [r6, #0]
 8004e68:	4605      	mov	r5, r0
 8004e6a:	b911      	cbnz	r1, 8004e72 <sbrk_aligned+0x12>
 8004e6c:	f001 fdf6 	bl	8006a5c <_sbrk_r>
 8004e70:	6030      	str	r0, [r6, #0]
 8004e72:	4621      	mov	r1, r4
 8004e74:	4628      	mov	r0, r5
 8004e76:	f001 fdf1 	bl	8006a5c <_sbrk_r>
 8004e7a:	1c43      	adds	r3, r0, #1
 8004e7c:	d103      	bne.n	8004e86 <sbrk_aligned+0x26>
 8004e7e:	f04f 34ff 	mov.w	r4, #4294967295
 8004e82:	4620      	mov	r0, r4
 8004e84:	bd70      	pop	{r4, r5, r6, pc}
 8004e86:	1cc4      	adds	r4, r0, #3
 8004e88:	f024 0403 	bic.w	r4, r4, #3
 8004e8c:	42a0      	cmp	r0, r4
 8004e8e:	d0f8      	beq.n	8004e82 <sbrk_aligned+0x22>
 8004e90:	1a21      	subs	r1, r4, r0
 8004e92:	4628      	mov	r0, r5
 8004e94:	f001 fde2 	bl	8006a5c <_sbrk_r>
 8004e98:	3001      	adds	r0, #1
 8004e9a:	d1f2      	bne.n	8004e82 <sbrk_aligned+0x22>
 8004e9c:	e7ef      	b.n	8004e7e <sbrk_aligned+0x1e>
 8004e9e:	bf00      	nop
 8004ea0:	20000394 	.word	0x20000394

08004ea4 <_malloc_r>:
 8004ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ea8:	1ccd      	adds	r5, r1, #3
 8004eaa:	f025 0503 	bic.w	r5, r5, #3
 8004eae:	3508      	adds	r5, #8
 8004eb0:	2d0c      	cmp	r5, #12
 8004eb2:	bf38      	it	cc
 8004eb4:	250c      	movcc	r5, #12
 8004eb6:	2d00      	cmp	r5, #0
 8004eb8:	4606      	mov	r6, r0
 8004eba:	db01      	blt.n	8004ec0 <_malloc_r+0x1c>
 8004ebc:	42a9      	cmp	r1, r5
 8004ebe:	d904      	bls.n	8004eca <_malloc_r+0x26>
 8004ec0:	230c      	movs	r3, #12
 8004ec2:	6033      	str	r3, [r6, #0]
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004fa0 <_malloc_r+0xfc>
 8004ece:	f000 f869 	bl	8004fa4 <__malloc_lock>
 8004ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ed6:	461c      	mov	r4, r3
 8004ed8:	bb44      	cbnz	r4, 8004f2c <_malloc_r+0x88>
 8004eda:	4629      	mov	r1, r5
 8004edc:	4630      	mov	r0, r6
 8004ede:	f7ff ffbf 	bl	8004e60 <sbrk_aligned>
 8004ee2:	1c43      	adds	r3, r0, #1
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	d158      	bne.n	8004f9a <_malloc_r+0xf6>
 8004ee8:	f8d8 4000 	ldr.w	r4, [r8]
 8004eec:	4627      	mov	r7, r4
 8004eee:	2f00      	cmp	r7, #0
 8004ef0:	d143      	bne.n	8004f7a <_malloc_r+0xd6>
 8004ef2:	2c00      	cmp	r4, #0
 8004ef4:	d04b      	beq.n	8004f8e <_malloc_r+0xea>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	4639      	mov	r1, r7
 8004efa:	4630      	mov	r0, r6
 8004efc:	eb04 0903 	add.w	r9, r4, r3
 8004f00:	f001 fdac 	bl	8006a5c <_sbrk_r>
 8004f04:	4581      	cmp	r9, r0
 8004f06:	d142      	bne.n	8004f8e <_malloc_r+0xea>
 8004f08:	6821      	ldr	r1, [r4, #0]
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	1a6d      	subs	r5, r5, r1
 8004f0e:	4629      	mov	r1, r5
 8004f10:	f7ff ffa6 	bl	8004e60 <sbrk_aligned>
 8004f14:	3001      	adds	r0, #1
 8004f16:	d03a      	beq.n	8004f8e <_malloc_r+0xea>
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	442b      	add	r3, r5
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	bb62      	cbnz	r2, 8004f80 <_malloc_r+0xdc>
 8004f26:	f8c8 7000 	str.w	r7, [r8]
 8004f2a:	e00f      	b.n	8004f4c <_malloc_r+0xa8>
 8004f2c:	6822      	ldr	r2, [r4, #0]
 8004f2e:	1b52      	subs	r2, r2, r5
 8004f30:	d420      	bmi.n	8004f74 <_malloc_r+0xd0>
 8004f32:	2a0b      	cmp	r2, #11
 8004f34:	d917      	bls.n	8004f66 <_malloc_r+0xc2>
 8004f36:	1961      	adds	r1, r4, r5
 8004f38:	42a3      	cmp	r3, r4
 8004f3a:	6025      	str	r5, [r4, #0]
 8004f3c:	bf18      	it	ne
 8004f3e:	6059      	strne	r1, [r3, #4]
 8004f40:	6863      	ldr	r3, [r4, #4]
 8004f42:	bf08      	it	eq
 8004f44:	f8c8 1000 	streq.w	r1, [r8]
 8004f48:	5162      	str	r2, [r4, r5]
 8004f4a:	604b      	str	r3, [r1, #4]
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f000 f82f 	bl	8004fb0 <__malloc_unlock>
 8004f52:	f104 000b 	add.w	r0, r4, #11
 8004f56:	1d23      	adds	r3, r4, #4
 8004f58:	f020 0007 	bic.w	r0, r0, #7
 8004f5c:	1ac2      	subs	r2, r0, r3
 8004f5e:	bf1c      	itt	ne
 8004f60:	1a1b      	subne	r3, r3, r0
 8004f62:	50a3      	strne	r3, [r4, r2]
 8004f64:	e7af      	b.n	8004ec6 <_malloc_r+0x22>
 8004f66:	6862      	ldr	r2, [r4, #4]
 8004f68:	42a3      	cmp	r3, r4
 8004f6a:	bf0c      	ite	eq
 8004f6c:	f8c8 2000 	streq.w	r2, [r8]
 8004f70:	605a      	strne	r2, [r3, #4]
 8004f72:	e7eb      	b.n	8004f4c <_malloc_r+0xa8>
 8004f74:	4623      	mov	r3, r4
 8004f76:	6864      	ldr	r4, [r4, #4]
 8004f78:	e7ae      	b.n	8004ed8 <_malloc_r+0x34>
 8004f7a:	463c      	mov	r4, r7
 8004f7c:	687f      	ldr	r7, [r7, #4]
 8004f7e:	e7b6      	b.n	8004eee <_malloc_r+0x4a>
 8004f80:	461a      	mov	r2, r3
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	42a3      	cmp	r3, r4
 8004f86:	d1fb      	bne.n	8004f80 <_malloc_r+0xdc>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	6053      	str	r3, [r2, #4]
 8004f8c:	e7de      	b.n	8004f4c <_malloc_r+0xa8>
 8004f8e:	230c      	movs	r3, #12
 8004f90:	4630      	mov	r0, r6
 8004f92:	6033      	str	r3, [r6, #0]
 8004f94:	f000 f80c 	bl	8004fb0 <__malloc_unlock>
 8004f98:	e794      	b.n	8004ec4 <_malloc_r+0x20>
 8004f9a:	6005      	str	r5, [r0, #0]
 8004f9c:	e7d6      	b.n	8004f4c <_malloc_r+0xa8>
 8004f9e:	bf00      	nop
 8004fa0:	20000398 	.word	0x20000398

08004fa4 <__malloc_lock>:
 8004fa4:	4801      	ldr	r0, [pc, #4]	@ (8004fac <__malloc_lock+0x8>)
 8004fa6:	f7ff b8a4 	b.w	80040f2 <__retarget_lock_acquire_recursive>
 8004faa:	bf00      	nop
 8004fac:	20000390 	.word	0x20000390

08004fb0 <__malloc_unlock>:
 8004fb0:	4801      	ldr	r0, [pc, #4]	@ (8004fb8 <__malloc_unlock+0x8>)
 8004fb2:	f7ff b89f 	b.w	80040f4 <__retarget_lock_release_recursive>
 8004fb6:	bf00      	nop
 8004fb8:	20000390 	.word	0x20000390

08004fbc <_Balloc>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	69c6      	ldr	r6, [r0, #28]
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	460d      	mov	r5, r1
 8004fc4:	b976      	cbnz	r6, 8004fe4 <_Balloc+0x28>
 8004fc6:	2010      	movs	r0, #16
 8004fc8:	f7ff ff42 	bl	8004e50 <malloc>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	61e0      	str	r0, [r4, #28]
 8004fd0:	b920      	cbnz	r0, 8004fdc <_Balloc+0x20>
 8004fd2:	216b      	movs	r1, #107	@ 0x6b
 8004fd4:	4b17      	ldr	r3, [pc, #92]	@ (8005034 <_Balloc+0x78>)
 8004fd6:	4818      	ldr	r0, [pc, #96]	@ (8005038 <_Balloc+0x7c>)
 8004fd8:	f001 fd64 	bl	8006aa4 <__assert_func>
 8004fdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004fe0:	6006      	str	r6, [r0, #0]
 8004fe2:	60c6      	str	r6, [r0, #12]
 8004fe4:	69e6      	ldr	r6, [r4, #28]
 8004fe6:	68f3      	ldr	r3, [r6, #12]
 8004fe8:	b183      	cbz	r3, 800500c <_Balloc+0x50>
 8004fea:	69e3      	ldr	r3, [r4, #28]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004ff2:	b9b8      	cbnz	r0, 8005024 <_Balloc+0x68>
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	fa01 f605 	lsl.w	r6, r1, r5
 8004ffa:	1d72      	adds	r2, r6, #5
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	0092      	lsls	r2, r2, #2
 8005000:	f001 fd6e 	bl	8006ae0 <_calloc_r>
 8005004:	b160      	cbz	r0, 8005020 <_Balloc+0x64>
 8005006:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800500a:	e00e      	b.n	800502a <_Balloc+0x6e>
 800500c:	2221      	movs	r2, #33	@ 0x21
 800500e:	2104      	movs	r1, #4
 8005010:	4620      	mov	r0, r4
 8005012:	f001 fd65 	bl	8006ae0 <_calloc_r>
 8005016:	69e3      	ldr	r3, [r4, #28]
 8005018:	60f0      	str	r0, [r6, #12]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e4      	bne.n	8004fea <_Balloc+0x2e>
 8005020:	2000      	movs	r0, #0
 8005022:	bd70      	pop	{r4, r5, r6, pc}
 8005024:	6802      	ldr	r2, [r0, #0]
 8005026:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800502a:	2300      	movs	r3, #0
 800502c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005030:	e7f7      	b.n	8005022 <_Balloc+0x66>
 8005032:	bf00      	nop
 8005034:	08007818 	.word	0x08007818
 8005038:	08007898 	.word	0x08007898

0800503c <_Bfree>:
 800503c:	b570      	push	{r4, r5, r6, lr}
 800503e:	69c6      	ldr	r6, [r0, #28]
 8005040:	4605      	mov	r5, r0
 8005042:	460c      	mov	r4, r1
 8005044:	b976      	cbnz	r6, 8005064 <_Bfree+0x28>
 8005046:	2010      	movs	r0, #16
 8005048:	f7ff ff02 	bl	8004e50 <malloc>
 800504c:	4602      	mov	r2, r0
 800504e:	61e8      	str	r0, [r5, #28]
 8005050:	b920      	cbnz	r0, 800505c <_Bfree+0x20>
 8005052:	218f      	movs	r1, #143	@ 0x8f
 8005054:	4b08      	ldr	r3, [pc, #32]	@ (8005078 <_Bfree+0x3c>)
 8005056:	4809      	ldr	r0, [pc, #36]	@ (800507c <_Bfree+0x40>)
 8005058:	f001 fd24 	bl	8006aa4 <__assert_func>
 800505c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005060:	6006      	str	r6, [r0, #0]
 8005062:	60c6      	str	r6, [r0, #12]
 8005064:	b13c      	cbz	r4, 8005076 <_Bfree+0x3a>
 8005066:	69eb      	ldr	r3, [r5, #28]
 8005068:	6862      	ldr	r2, [r4, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005070:	6021      	str	r1, [r4, #0]
 8005072:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005076:	bd70      	pop	{r4, r5, r6, pc}
 8005078:	08007818 	.word	0x08007818
 800507c:	08007898 	.word	0x08007898

08005080 <__multadd>:
 8005080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005084:	4607      	mov	r7, r0
 8005086:	460c      	mov	r4, r1
 8005088:	461e      	mov	r6, r3
 800508a:	2000      	movs	r0, #0
 800508c:	690d      	ldr	r5, [r1, #16]
 800508e:	f101 0c14 	add.w	ip, r1, #20
 8005092:	f8dc 3000 	ldr.w	r3, [ip]
 8005096:	3001      	adds	r0, #1
 8005098:	b299      	uxth	r1, r3
 800509a:	fb02 6101 	mla	r1, r2, r1, r6
 800509e:	0c1e      	lsrs	r6, r3, #16
 80050a0:	0c0b      	lsrs	r3, r1, #16
 80050a2:	fb02 3306 	mla	r3, r2, r6, r3
 80050a6:	b289      	uxth	r1, r1
 80050a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80050ac:	4285      	cmp	r5, r0
 80050ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80050b2:	f84c 1b04 	str.w	r1, [ip], #4
 80050b6:	dcec      	bgt.n	8005092 <__multadd+0x12>
 80050b8:	b30e      	cbz	r6, 80050fe <__multadd+0x7e>
 80050ba:	68a3      	ldr	r3, [r4, #8]
 80050bc:	42ab      	cmp	r3, r5
 80050be:	dc19      	bgt.n	80050f4 <__multadd+0x74>
 80050c0:	6861      	ldr	r1, [r4, #4]
 80050c2:	4638      	mov	r0, r7
 80050c4:	3101      	adds	r1, #1
 80050c6:	f7ff ff79 	bl	8004fbc <_Balloc>
 80050ca:	4680      	mov	r8, r0
 80050cc:	b928      	cbnz	r0, 80050da <__multadd+0x5a>
 80050ce:	4602      	mov	r2, r0
 80050d0:	21ba      	movs	r1, #186	@ 0xba
 80050d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005104 <__multadd+0x84>)
 80050d4:	480c      	ldr	r0, [pc, #48]	@ (8005108 <__multadd+0x88>)
 80050d6:	f001 fce5 	bl	8006aa4 <__assert_func>
 80050da:	6922      	ldr	r2, [r4, #16]
 80050dc:	f104 010c 	add.w	r1, r4, #12
 80050e0:	3202      	adds	r2, #2
 80050e2:	0092      	lsls	r2, r2, #2
 80050e4:	300c      	adds	r0, #12
 80050e6:	f001 fcc9 	bl	8006a7c <memcpy>
 80050ea:	4621      	mov	r1, r4
 80050ec:	4638      	mov	r0, r7
 80050ee:	f7ff ffa5 	bl	800503c <_Bfree>
 80050f2:	4644      	mov	r4, r8
 80050f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80050f8:	3501      	adds	r5, #1
 80050fa:	615e      	str	r6, [r3, #20]
 80050fc:	6125      	str	r5, [r4, #16]
 80050fe:	4620      	mov	r0, r4
 8005100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005104:	08007887 	.word	0x08007887
 8005108:	08007898 	.word	0x08007898

0800510c <__s2b>:
 800510c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005110:	4615      	mov	r5, r2
 8005112:	2209      	movs	r2, #9
 8005114:	461f      	mov	r7, r3
 8005116:	3308      	adds	r3, #8
 8005118:	460c      	mov	r4, r1
 800511a:	fb93 f3f2 	sdiv	r3, r3, r2
 800511e:	4606      	mov	r6, r0
 8005120:	2201      	movs	r2, #1
 8005122:	2100      	movs	r1, #0
 8005124:	429a      	cmp	r2, r3
 8005126:	db09      	blt.n	800513c <__s2b+0x30>
 8005128:	4630      	mov	r0, r6
 800512a:	f7ff ff47 	bl	8004fbc <_Balloc>
 800512e:	b940      	cbnz	r0, 8005142 <__s2b+0x36>
 8005130:	4602      	mov	r2, r0
 8005132:	21d3      	movs	r1, #211	@ 0xd3
 8005134:	4b18      	ldr	r3, [pc, #96]	@ (8005198 <__s2b+0x8c>)
 8005136:	4819      	ldr	r0, [pc, #100]	@ (800519c <__s2b+0x90>)
 8005138:	f001 fcb4 	bl	8006aa4 <__assert_func>
 800513c:	0052      	lsls	r2, r2, #1
 800513e:	3101      	adds	r1, #1
 8005140:	e7f0      	b.n	8005124 <__s2b+0x18>
 8005142:	9b08      	ldr	r3, [sp, #32]
 8005144:	2d09      	cmp	r5, #9
 8005146:	6143      	str	r3, [r0, #20]
 8005148:	f04f 0301 	mov.w	r3, #1
 800514c:	6103      	str	r3, [r0, #16]
 800514e:	dd16      	ble.n	800517e <__s2b+0x72>
 8005150:	f104 0909 	add.w	r9, r4, #9
 8005154:	46c8      	mov	r8, r9
 8005156:	442c      	add	r4, r5
 8005158:	f818 3b01 	ldrb.w	r3, [r8], #1
 800515c:	4601      	mov	r1, r0
 800515e:	220a      	movs	r2, #10
 8005160:	4630      	mov	r0, r6
 8005162:	3b30      	subs	r3, #48	@ 0x30
 8005164:	f7ff ff8c 	bl	8005080 <__multadd>
 8005168:	45a0      	cmp	r8, r4
 800516a:	d1f5      	bne.n	8005158 <__s2b+0x4c>
 800516c:	f1a5 0408 	sub.w	r4, r5, #8
 8005170:	444c      	add	r4, r9
 8005172:	1b2d      	subs	r5, r5, r4
 8005174:	1963      	adds	r3, r4, r5
 8005176:	42bb      	cmp	r3, r7
 8005178:	db04      	blt.n	8005184 <__s2b+0x78>
 800517a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800517e:	2509      	movs	r5, #9
 8005180:	340a      	adds	r4, #10
 8005182:	e7f6      	b.n	8005172 <__s2b+0x66>
 8005184:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005188:	4601      	mov	r1, r0
 800518a:	220a      	movs	r2, #10
 800518c:	4630      	mov	r0, r6
 800518e:	3b30      	subs	r3, #48	@ 0x30
 8005190:	f7ff ff76 	bl	8005080 <__multadd>
 8005194:	e7ee      	b.n	8005174 <__s2b+0x68>
 8005196:	bf00      	nop
 8005198:	08007887 	.word	0x08007887
 800519c:	08007898 	.word	0x08007898

080051a0 <__hi0bits>:
 80051a0:	4603      	mov	r3, r0
 80051a2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80051a6:	bf3a      	itte	cc
 80051a8:	0403      	lslcc	r3, r0, #16
 80051aa:	2010      	movcc	r0, #16
 80051ac:	2000      	movcs	r0, #0
 80051ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051b2:	bf3c      	itt	cc
 80051b4:	021b      	lslcc	r3, r3, #8
 80051b6:	3008      	addcc	r0, #8
 80051b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051bc:	bf3c      	itt	cc
 80051be:	011b      	lslcc	r3, r3, #4
 80051c0:	3004      	addcc	r0, #4
 80051c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051c6:	bf3c      	itt	cc
 80051c8:	009b      	lslcc	r3, r3, #2
 80051ca:	3002      	addcc	r0, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	db05      	blt.n	80051dc <__hi0bits+0x3c>
 80051d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80051d4:	f100 0001 	add.w	r0, r0, #1
 80051d8:	bf08      	it	eq
 80051da:	2020      	moveq	r0, #32
 80051dc:	4770      	bx	lr

080051de <__lo0bits>:
 80051de:	6803      	ldr	r3, [r0, #0]
 80051e0:	4602      	mov	r2, r0
 80051e2:	f013 0007 	ands.w	r0, r3, #7
 80051e6:	d00b      	beq.n	8005200 <__lo0bits+0x22>
 80051e8:	07d9      	lsls	r1, r3, #31
 80051ea:	d421      	bmi.n	8005230 <__lo0bits+0x52>
 80051ec:	0798      	lsls	r0, r3, #30
 80051ee:	bf49      	itett	mi
 80051f0:	085b      	lsrmi	r3, r3, #1
 80051f2:	089b      	lsrpl	r3, r3, #2
 80051f4:	2001      	movmi	r0, #1
 80051f6:	6013      	strmi	r3, [r2, #0]
 80051f8:	bf5c      	itt	pl
 80051fa:	2002      	movpl	r0, #2
 80051fc:	6013      	strpl	r3, [r2, #0]
 80051fe:	4770      	bx	lr
 8005200:	b299      	uxth	r1, r3
 8005202:	b909      	cbnz	r1, 8005208 <__lo0bits+0x2a>
 8005204:	2010      	movs	r0, #16
 8005206:	0c1b      	lsrs	r3, r3, #16
 8005208:	b2d9      	uxtb	r1, r3
 800520a:	b909      	cbnz	r1, 8005210 <__lo0bits+0x32>
 800520c:	3008      	adds	r0, #8
 800520e:	0a1b      	lsrs	r3, r3, #8
 8005210:	0719      	lsls	r1, r3, #28
 8005212:	bf04      	itt	eq
 8005214:	091b      	lsreq	r3, r3, #4
 8005216:	3004      	addeq	r0, #4
 8005218:	0799      	lsls	r1, r3, #30
 800521a:	bf04      	itt	eq
 800521c:	089b      	lsreq	r3, r3, #2
 800521e:	3002      	addeq	r0, #2
 8005220:	07d9      	lsls	r1, r3, #31
 8005222:	d403      	bmi.n	800522c <__lo0bits+0x4e>
 8005224:	085b      	lsrs	r3, r3, #1
 8005226:	f100 0001 	add.w	r0, r0, #1
 800522a:	d003      	beq.n	8005234 <__lo0bits+0x56>
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	4770      	bx	lr
 8005230:	2000      	movs	r0, #0
 8005232:	4770      	bx	lr
 8005234:	2020      	movs	r0, #32
 8005236:	4770      	bx	lr

08005238 <__i2b>:
 8005238:	b510      	push	{r4, lr}
 800523a:	460c      	mov	r4, r1
 800523c:	2101      	movs	r1, #1
 800523e:	f7ff febd 	bl	8004fbc <_Balloc>
 8005242:	4602      	mov	r2, r0
 8005244:	b928      	cbnz	r0, 8005252 <__i2b+0x1a>
 8005246:	f240 1145 	movw	r1, #325	@ 0x145
 800524a:	4b04      	ldr	r3, [pc, #16]	@ (800525c <__i2b+0x24>)
 800524c:	4804      	ldr	r0, [pc, #16]	@ (8005260 <__i2b+0x28>)
 800524e:	f001 fc29 	bl	8006aa4 <__assert_func>
 8005252:	2301      	movs	r3, #1
 8005254:	6144      	str	r4, [r0, #20]
 8005256:	6103      	str	r3, [r0, #16]
 8005258:	bd10      	pop	{r4, pc}
 800525a:	bf00      	nop
 800525c:	08007887 	.word	0x08007887
 8005260:	08007898 	.word	0x08007898

08005264 <__multiply>:
 8005264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005268:	4614      	mov	r4, r2
 800526a:	690a      	ldr	r2, [r1, #16]
 800526c:	6923      	ldr	r3, [r4, #16]
 800526e:	460f      	mov	r7, r1
 8005270:	429a      	cmp	r2, r3
 8005272:	bfa2      	ittt	ge
 8005274:	4623      	movge	r3, r4
 8005276:	460c      	movge	r4, r1
 8005278:	461f      	movge	r7, r3
 800527a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800527e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005282:	68a3      	ldr	r3, [r4, #8]
 8005284:	6861      	ldr	r1, [r4, #4]
 8005286:	eb0a 0609 	add.w	r6, sl, r9
 800528a:	42b3      	cmp	r3, r6
 800528c:	b085      	sub	sp, #20
 800528e:	bfb8      	it	lt
 8005290:	3101      	addlt	r1, #1
 8005292:	f7ff fe93 	bl	8004fbc <_Balloc>
 8005296:	b930      	cbnz	r0, 80052a6 <__multiply+0x42>
 8005298:	4602      	mov	r2, r0
 800529a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800529e:	4b43      	ldr	r3, [pc, #268]	@ (80053ac <__multiply+0x148>)
 80052a0:	4843      	ldr	r0, [pc, #268]	@ (80053b0 <__multiply+0x14c>)
 80052a2:	f001 fbff 	bl	8006aa4 <__assert_func>
 80052a6:	f100 0514 	add.w	r5, r0, #20
 80052aa:	462b      	mov	r3, r5
 80052ac:	2200      	movs	r2, #0
 80052ae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80052b2:	4543      	cmp	r3, r8
 80052b4:	d321      	bcc.n	80052fa <__multiply+0x96>
 80052b6:	f107 0114 	add.w	r1, r7, #20
 80052ba:	f104 0214 	add.w	r2, r4, #20
 80052be:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80052c2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80052c6:	9302      	str	r3, [sp, #8]
 80052c8:	1b13      	subs	r3, r2, r4
 80052ca:	3b15      	subs	r3, #21
 80052cc:	f023 0303 	bic.w	r3, r3, #3
 80052d0:	3304      	adds	r3, #4
 80052d2:	f104 0715 	add.w	r7, r4, #21
 80052d6:	42ba      	cmp	r2, r7
 80052d8:	bf38      	it	cc
 80052da:	2304      	movcc	r3, #4
 80052dc:	9301      	str	r3, [sp, #4]
 80052de:	9b02      	ldr	r3, [sp, #8]
 80052e0:	9103      	str	r1, [sp, #12]
 80052e2:	428b      	cmp	r3, r1
 80052e4:	d80c      	bhi.n	8005300 <__multiply+0x9c>
 80052e6:	2e00      	cmp	r6, #0
 80052e8:	dd03      	ble.n	80052f2 <__multiply+0x8e>
 80052ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d05a      	beq.n	80053a8 <__multiply+0x144>
 80052f2:	6106      	str	r6, [r0, #16]
 80052f4:	b005      	add	sp, #20
 80052f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052fa:	f843 2b04 	str.w	r2, [r3], #4
 80052fe:	e7d8      	b.n	80052b2 <__multiply+0x4e>
 8005300:	f8b1 a000 	ldrh.w	sl, [r1]
 8005304:	f1ba 0f00 	cmp.w	sl, #0
 8005308:	d023      	beq.n	8005352 <__multiply+0xee>
 800530a:	46a9      	mov	r9, r5
 800530c:	f04f 0c00 	mov.w	ip, #0
 8005310:	f104 0e14 	add.w	lr, r4, #20
 8005314:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005318:	f8d9 3000 	ldr.w	r3, [r9]
 800531c:	fa1f fb87 	uxth.w	fp, r7
 8005320:	b29b      	uxth	r3, r3
 8005322:	fb0a 330b 	mla	r3, sl, fp, r3
 8005326:	4463      	add	r3, ip
 8005328:	f8d9 c000 	ldr.w	ip, [r9]
 800532c:	0c3f      	lsrs	r7, r7, #16
 800532e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005332:	fb0a c707 	mla	r7, sl, r7, ip
 8005336:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800533a:	b29b      	uxth	r3, r3
 800533c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005340:	4572      	cmp	r2, lr
 8005342:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005346:	f849 3b04 	str.w	r3, [r9], #4
 800534a:	d8e3      	bhi.n	8005314 <__multiply+0xb0>
 800534c:	9b01      	ldr	r3, [sp, #4]
 800534e:	f845 c003 	str.w	ip, [r5, r3]
 8005352:	9b03      	ldr	r3, [sp, #12]
 8005354:	3104      	adds	r1, #4
 8005356:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800535a:	f1b9 0f00 	cmp.w	r9, #0
 800535e:	d021      	beq.n	80053a4 <__multiply+0x140>
 8005360:	46ae      	mov	lr, r5
 8005362:	f04f 0a00 	mov.w	sl, #0
 8005366:	682b      	ldr	r3, [r5, #0]
 8005368:	f104 0c14 	add.w	ip, r4, #20
 800536c:	f8bc b000 	ldrh.w	fp, [ip]
 8005370:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005374:	b29b      	uxth	r3, r3
 8005376:	fb09 770b 	mla	r7, r9, fp, r7
 800537a:	4457      	add	r7, sl
 800537c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005380:	f84e 3b04 	str.w	r3, [lr], #4
 8005384:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005388:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800538c:	f8be 3000 	ldrh.w	r3, [lr]
 8005390:	4562      	cmp	r2, ip
 8005392:	fb09 330a 	mla	r3, r9, sl, r3
 8005396:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800539a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800539e:	d8e5      	bhi.n	800536c <__multiply+0x108>
 80053a0:	9f01      	ldr	r7, [sp, #4]
 80053a2:	51eb      	str	r3, [r5, r7]
 80053a4:	3504      	adds	r5, #4
 80053a6:	e79a      	b.n	80052de <__multiply+0x7a>
 80053a8:	3e01      	subs	r6, #1
 80053aa:	e79c      	b.n	80052e6 <__multiply+0x82>
 80053ac:	08007887 	.word	0x08007887
 80053b0:	08007898 	.word	0x08007898

080053b4 <__pow5mult>:
 80053b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053b8:	4615      	mov	r5, r2
 80053ba:	f012 0203 	ands.w	r2, r2, #3
 80053be:	4607      	mov	r7, r0
 80053c0:	460e      	mov	r6, r1
 80053c2:	d007      	beq.n	80053d4 <__pow5mult+0x20>
 80053c4:	4c25      	ldr	r4, [pc, #148]	@ (800545c <__pow5mult+0xa8>)
 80053c6:	3a01      	subs	r2, #1
 80053c8:	2300      	movs	r3, #0
 80053ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80053ce:	f7ff fe57 	bl	8005080 <__multadd>
 80053d2:	4606      	mov	r6, r0
 80053d4:	10ad      	asrs	r5, r5, #2
 80053d6:	d03d      	beq.n	8005454 <__pow5mult+0xa0>
 80053d8:	69fc      	ldr	r4, [r7, #28]
 80053da:	b97c      	cbnz	r4, 80053fc <__pow5mult+0x48>
 80053dc:	2010      	movs	r0, #16
 80053de:	f7ff fd37 	bl	8004e50 <malloc>
 80053e2:	4602      	mov	r2, r0
 80053e4:	61f8      	str	r0, [r7, #28]
 80053e6:	b928      	cbnz	r0, 80053f4 <__pow5mult+0x40>
 80053e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80053ec:	4b1c      	ldr	r3, [pc, #112]	@ (8005460 <__pow5mult+0xac>)
 80053ee:	481d      	ldr	r0, [pc, #116]	@ (8005464 <__pow5mult+0xb0>)
 80053f0:	f001 fb58 	bl	8006aa4 <__assert_func>
 80053f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053f8:	6004      	str	r4, [r0, #0]
 80053fa:	60c4      	str	r4, [r0, #12]
 80053fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005400:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005404:	b94c      	cbnz	r4, 800541a <__pow5mult+0x66>
 8005406:	f240 2171 	movw	r1, #625	@ 0x271
 800540a:	4638      	mov	r0, r7
 800540c:	f7ff ff14 	bl	8005238 <__i2b>
 8005410:	2300      	movs	r3, #0
 8005412:	4604      	mov	r4, r0
 8005414:	f8c8 0008 	str.w	r0, [r8, #8]
 8005418:	6003      	str	r3, [r0, #0]
 800541a:	f04f 0900 	mov.w	r9, #0
 800541e:	07eb      	lsls	r3, r5, #31
 8005420:	d50a      	bpl.n	8005438 <__pow5mult+0x84>
 8005422:	4631      	mov	r1, r6
 8005424:	4622      	mov	r2, r4
 8005426:	4638      	mov	r0, r7
 8005428:	f7ff ff1c 	bl	8005264 <__multiply>
 800542c:	4680      	mov	r8, r0
 800542e:	4631      	mov	r1, r6
 8005430:	4638      	mov	r0, r7
 8005432:	f7ff fe03 	bl	800503c <_Bfree>
 8005436:	4646      	mov	r6, r8
 8005438:	106d      	asrs	r5, r5, #1
 800543a:	d00b      	beq.n	8005454 <__pow5mult+0xa0>
 800543c:	6820      	ldr	r0, [r4, #0]
 800543e:	b938      	cbnz	r0, 8005450 <__pow5mult+0x9c>
 8005440:	4622      	mov	r2, r4
 8005442:	4621      	mov	r1, r4
 8005444:	4638      	mov	r0, r7
 8005446:	f7ff ff0d 	bl	8005264 <__multiply>
 800544a:	6020      	str	r0, [r4, #0]
 800544c:	f8c0 9000 	str.w	r9, [r0]
 8005450:	4604      	mov	r4, r0
 8005452:	e7e4      	b.n	800541e <__pow5mult+0x6a>
 8005454:	4630      	mov	r0, r6
 8005456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800545a:	bf00      	nop
 800545c:	080078f4 	.word	0x080078f4
 8005460:	08007818 	.word	0x08007818
 8005464:	08007898 	.word	0x08007898

08005468 <__lshift>:
 8005468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800546c:	460c      	mov	r4, r1
 800546e:	4607      	mov	r7, r0
 8005470:	4691      	mov	r9, r2
 8005472:	6923      	ldr	r3, [r4, #16]
 8005474:	6849      	ldr	r1, [r1, #4]
 8005476:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800547a:	68a3      	ldr	r3, [r4, #8]
 800547c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005480:	f108 0601 	add.w	r6, r8, #1
 8005484:	42b3      	cmp	r3, r6
 8005486:	db0b      	blt.n	80054a0 <__lshift+0x38>
 8005488:	4638      	mov	r0, r7
 800548a:	f7ff fd97 	bl	8004fbc <_Balloc>
 800548e:	4605      	mov	r5, r0
 8005490:	b948      	cbnz	r0, 80054a6 <__lshift+0x3e>
 8005492:	4602      	mov	r2, r0
 8005494:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005498:	4b27      	ldr	r3, [pc, #156]	@ (8005538 <__lshift+0xd0>)
 800549a:	4828      	ldr	r0, [pc, #160]	@ (800553c <__lshift+0xd4>)
 800549c:	f001 fb02 	bl	8006aa4 <__assert_func>
 80054a0:	3101      	adds	r1, #1
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	e7ee      	b.n	8005484 <__lshift+0x1c>
 80054a6:	2300      	movs	r3, #0
 80054a8:	f100 0114 	add.w	r1, r0, #20
 80054ac:	f100 0210 	add.w	r2, r0, #16
 80054b0:	4618      	mov	r0, r3
 80054b2:	4553      	cmp	r3, sl
 80054b4:	db33      	blt.n	800551e <__lshift+0xb6>
 80054b6:	6920      	ldr	r0, [r4, #16]
 80054b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80054bc:	f104 0314 	add.w	r3, r4, #20
 80054c0:	f019 091f 	ands.w	r9, r9, #31
 80054c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80054c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80054cc:	d02b      	beq.n	8005526 <__lshift+0xbe>
 80054ce:	468a      	mov	sl, r1
 80054d0:	2200      	movs	r2, #0
 80054d2:	f1c9 0e20 	rsb	lr, r9, #32
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	fa00 f009 	lsl.w	r0, r0, r9
 80054dc:	4310      	orrs	r0, r2
 80054de:	f84a 0b04 	str.w	r0, [sl], #4
 80054e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80054e6:	459c      	cmp	ip, r3
 80054e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80054ec:	d8f3      	bhi.n	80054d6 <__lshift+0x6e>
 80054ee:	ebac 0304 	sub.w	r3, ip, r4
 80054f2:	3b15      	subs	r3, #21
 80054f4:	f023 0303 	bic.w	r3, r3, #3
 80054f8:	3304      	adds	r3, #4
 80054fa:	f104 0015 	add.w	r0, r4, #21
 80054fe:	4584      	cmp	ip, r0
 8005500:	bf38      	it	cc
 8005502:	2304      	movcc	r3, #4
 8005504:	50ca      	str	r2, [r1, r3]
 8005506:	b10a      	cbz	r2, 800550c <__lshift+0xa4>
 8005508:	f108 0602 	add.w	r6, r8, #2
 800550c:	3e01      	subs	r6, #1
 800550e:	4638      	mov	r0, r7
 8005510:	4621      	mov	r1, r4
 8005512:	612e      	str	r6, [r5, #16]
 8005514:	f7ff fd92 	bl	800503c <_Bfree>
 8005518:	4628      	mov	r0, r5
 800551a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800551e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005522:	3301      	adds	r3, #1
 8005524:	e7c5      	b.n	80054b2 <__lshift+0x4a>
 8005526:	3904      	subs	r1, #4
 8005528:	f853 2b04 	ldr.w	r2, [r3], #4
 800552c:	459c      	cmp	ip, r3
 800552e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005532:	d8f9      	bhi.n	8005528 <__lshift+0xc0>
 8005534:	e7ea      	b.n	800550c <__lshift+0xa4>
 8005536:	bf00      	nop
 8005538:	08007887 	.word	0x08007887
 800553c:	08007898 	.word	0x08007898

08005540 <__mcmp>:
 8005540:	4603      	mov	r3, r0
 8005542:	690a      	ldr	r2, [r1, #16]
 8005544:	6900      	ldr	r0, [r0, #16]
 8005546:	b530      	push	{r4, r5, lr}
 8005548:	1a80      	subs	r0, r0, r2
 800554a:	d10e      	bne.n	800556a <__mcmp+0x2a>
 800554c:	3314      	adds	r3, #20
 800554e:	3114      	adds	r1, #20
 8005550:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005554:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005558:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800555c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005560:	4295      	cmp	r5, r2
 8005562:	d003      	beq.n	800556c <__mcmp+0x2c>
 8005564:	d205      	bcs.n	8005572 <__mcmp+0x32>
 8005566:	f04f 30ff 	mov.w	r0, #4294967295
 800556a:	bd30      	pop	{r4, r5, pc}
 800556c:	42a3      	cmp	r3, r4
 800556e:	d3f3      	bcc.n	8005558 <__mcmp+0x18>
 8005570:	e7fb      	b.n	800556a <__mcmp+0x2a>
 8005572:	2001      	movs	r0, #1
 8005574:	e7f9      	b.n	800556a <__mcmp+0x2a>
	...

08005578 <__mdiff>:
 8005578:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557c:	4689      	mov	r9, r1
 800557e:	4606      	mov	r6, r0
 8005580:	4611      	mov	r1, r2
 8005582:	4648      	mov	r0, r9
 8005584:	4614      	mov	r4, r2
 8005586:	f7ff ffdb 	bl	8005540 <__mcmp>
 800558a:	1e05      	subs	r5, r0, #0
 800558c:	d112      	bne.n	80055b4 <__mdiff+0x3c>
 800558e:	4629      	mov	r1, r5
 8005590:	4630      	mov	r0, r6
 8005592:	f7ff fd13 	bl	8004fbc <_Balloc>
 8005596:	4602      	mov	r2, r0
 8005598:	b928      	cbnz	r0, 80055a6 <__mdiff+0x2e>
 800559a:	f240 2137 	movw	r1, #567	@ 0x237
 800559e:	4b3e      	ldr	r3, [pc, #248]	@ (8005698 <__mdiff+0x120>)
 80055a0:	483e      	ldr	r0, [pc, #248]	@ (800569c <__mdiff+0x124>)
 80055a2:	f001 fa7f 	bl	8006aa4 <__assert_func>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80055ac:	4610      	mov	r0, r2
 80055ae:	b003      	add	sp, #12
 80055b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b4:	bfbc      	itt	lt
 80055b6:	464b      	movlt	r3, r9
 80055b8:	46a1      	movlt	r9, r4
 80055ba:	4630      	mov	r0, r6
 80055bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80055c0:	bfba      	itte	lt
 80055c2:	461c      	movlt	r4, r3
 80055c4:	2501      	movlt	r5, #1
 80055c6:	2500      	movge	r5, #0
 80055c8:	f7ff fcf8 	bl	8004fbc <_Balloc>
 80055cc:	4602      	mov	r2, r0
 80055ce:	b918      	cbnz	r0, 80055d8 <__mdiff+0x60>
 80055d0:	f240 2145 	movw	r1, #581	@ 0x245
 80055d4:	4b30      	ldr	r3, [pc, #192]	@ (8005698 <__mdiff+0x120>)
 80055d6:	e7e3      	b.n	80055a0 <__mdiff+0x28>
 80055d8:	f100 0b14 	add.w	fp, r0, #20
 80055dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80055e0:	f109 0310 	add.w	r3, r9, #16
 80055e4:	60c5      	str	r5, [r0, #12]
 80055e6:	f04f 0c00 	mov.w	ip, #0
 80055ea:	f109 0514 	add.w	r5, r9, #20
 80055ee:	46d9      	mov	r9, fp
 80055f0:	6926      	ldr	r6, [r4, #16]
 80055f2:	f104 0e14 	add.w	lr, r4, #20
 80055f6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80055fa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	9b01      	ldr	r3, [sp, #4]
 8005602:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005606:	f853 af04 	ldr.w	sl, [r3, #4]!
 800560a:	b281      	uxth	r1, r0
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	fa1f f38a 	uxth.w	r3, sl
 8005612:	1a5b      	subs	r3, r3, r1
 8005614:	0c00      	lsrs	r0, r0, #16
 8005616:	4463      	add	r3, ip
 8005618:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800561c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005620:	b29b      	uxth	r3, r3
 8005622:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005626:	4576      	cmp	r6, lr
 8005628:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800562c:	f849 3b04 	str.w	r3, [r9], #4
 8005630:	d8e6      	bhi.n	8005600 <__mdiff+0x88>
 8005632:	1b33      	subs	r3, r6, r4
 8005634:	3b15      	subs	r3, #21
 8005636:	f023 0303 	bic.w	r3, r3, #3
 800563a:	3415      	adds	r4, #21
 800563c:	3304      	adds	r3, #4
 800563e:	42a6      	cmp	r6, r4
 8005640:	bf38      	it	cc
 8005642:	2304      	movcc	r3, #4
 8005644:	441d      	add	r5, r3
 8005646:	445b      	add	r3, fp
 8005648:	461e      	mov	r6, r3
 800564a:	462c      	mov	r4, r5
 800564c:	4544      	cmp	r4, r8
 800564e:	d30e      	bcc.n	800566e <__mdiff+0xf6>
 8005650:	f108 0103 	add.w	r1, r8, #3
 8005654:	1b49      	subs	r1, r1, r5
 8005656:	f021 0103 	bic.w	r1, r1, #3
 800565a:	3d03      	subs	r5, #3
 800565c:	45a8      	cmp	r8, r5
 800565e:	bf38      	it	cc
 8005660:	2100      	movcc	r1, #0
 8005662:	440b      	add	r3, r1
 8005664:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005668:	b199      	cbz	r1, 8005692 <__mdiff+0x11a>
 800566a:	6117      	str	r7, [r2, #16]
 800566c:	e79e      	b.n	80055ac <__mdiff+0x34>
 800566e:	46e6      	mov	lr, ip
 8005670:	f854 1b04 	ldr.w	r1, [r4], #4
 8005674:	fa1f fc81 	uxth.w	ip, r1
 8005678:	44f4      	add	ip, lr
 800567a:	0c08      	lsrs	r0, r1, #16
 800567c:	4471      	add	r1, lr
 800567e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005682:	b289      	uxth	r1, r1
 8005684:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005688:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800568c:	f846 1b04 	str.w	r1, [r6], #4
 8005690:	e7dc      	b.n	800564c <__mdiff+0xd4>
 8005692:	3f01      	subs	r7, #1
 8005694:	e7e6      	b.n	8005664 <__mdiff+0xec>
 8005696:	bf00      	nop
 8005698:	08007887 	.word	0x08007887
 800569c:	08007898 	.word	0x08007898

080056a0 <__ulp>:
 80056a0:	4b0e      	ldr	r3, [pc, #56]	@ (80056dc <__ulp+0x3c>)
 80056a2:	400b      	ands	r3, r1
 80056a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	dc08      	bgt.n	80056be <__ulp+0x1e>
 80056ac:	425b      	negs	r3, r3
 80056ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80056b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80056b6:	da04      	bge.n	80056c2 <__ulp+0x22>
 80056b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80056bc:	4113      	asrs	r3, r2
 80056be:	2200      	movs	r2, #0
 80056c0:	e008      	b.n	80056d4 <__ulp+0x34>
 80056c2:	f1a2 0314 	sub.w	r3, r2, #20
 80056c6:	2b1e      	cmp	r3, #30
 80056c8:	bfd6      	itet	le
 80056ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80056ce:	2201      	movgt	r2, #1
 80056d0:	40da      	lsrle	r2, r3
 80056d2:	2300      	movs	r3, #0
 80056d4:	4619      	mov	r1, r3
 80056d6:	4610      	mov	r0, r2
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	7ff00000 	.word	0x7ff00000

080056e0 <__b2d>:
 80056e0:	6902      	ldr	r2, [r0, #16]
 80056e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e4:	f100 0614 	add.w	r6, r0, #20
 80056e8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80056ec:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80056f0:	4f1e      	ldr	r7, [pc, #120]	@ (800576c <__b2d+0x8c>)
 80056f2:	4620      	mov	r0, r4
 80056f4:	f7ff fd54 	bl	80051a0 <__hi0bits>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f1c0 0020 	rsb	r0, r0, #32
 80056fe:	2b0a      	cmp	r3, #10
 8005700:	f1a2 0504 	sub.w	r5, r2, #4
 8005704:	6008      	str	r0, [r1, #0]
 8005706:	dc12      	bgt.n	800572e <__b2d+0x4e>
 8005708:	42ae      	cmp	r6, r5
 800570a:	bf2c      	ite	cs
 800570c:	2200      	movcs	r2, #0
 800570e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005712:	f1c3 0c0b 	rsb	ip, r3, #11
 8005716:	3315      	adds	r3, #21
 8005718:	fa24 fe0c 	lsr.w	lr, r4, ip
 800571c:	fa04 f303 	lsl.w	r3, r4, r3
 8005720:	fa22 f20c 	lsr.w	r2, r2, ip
 8005724:	ea4e 0107 	orr.w	r1, lr, r7
 8005728:	431a      	orrs	r2, r3
 800572a:	4610      	mov	r0, r2
 800572c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800572e:	42ae      	cmp	r6, r5
 8005730:	bf36      	itet	cc
 8005732:	f1a2 0508 	subcc.w	r5, r2, #8
 8005736:	2200      	movcs	r2, #0
 8005738:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800573c:	3b0b      	subs	r3, #11
 800573e:	d012      	beq.n	8005766 <__b2d+0x86>
 8005740:	f1c3 0720 	rsb	r7, r3, #32
 8005744:	fa22 f107 	lsr.w	r1, r2, r7
 8005748:	409c      	lsls	r4, r3
 800574a:	430c      	orrs	r4, r1
 800574c:	42b5      	cmp	r5, r6
 800574e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8005752:	bf94      	ite	ls
 8005754:	2400      	movls	r4, #0
 8005756:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800575a:	409a      	lsls	r2, r3
 800575c:	40fc      	lsrs	r4, r7
 800575e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005762:	4322      	orrs	r2, r4
 8005764:	e7e1      	b.n	800572a <__b2d+0x4a>
 8005766:	ea44 0107 	orr.w	r1, r4, r7
 800576a:	e7de      	b.n	800572a <__b2d+0x4a>
 800576c:	3ff00000 	.word	0x3ff00000

08005770 <__d2b>:
 8005770:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005774:	2101      	movs	r1, #1
 8005776:	4690      	mov	r8, r2
 8005778:	4699      	mov	r9, r3
 800577a:	9e08      	ldr	r6, [sp, #32]
 800577c:	f7ff fc1e 	bl	8004fbc <_Balloc>
 8005780:	4604      	mov	r4, r0
 8005782:	b930      	cbnz	r0, 8005792 <__d2b+0x22>
 8005784:	4602      	mov	r2, r0
 8005786:	f240 310f 	movw	r1, #783	@ 0x30f
 800578a:	4b23      	ldr	r3, [pc, #140]	@ (8005818 <__d2b+0xa8>)
 800578c:	4823      	ldr	r0, [pc, #140]	@ (800581c <__d2b+0xac>)
 800578e:	f001 f989 	bl	8006aa4 <__assert_func>
 8005792:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005796:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800579a:	b10d      	cbz	r5, 80057a0 <__d2b+0x30>
 800579c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057a0:	9301      	str	r3, [sp, #4]
 80057a2:	f1b8 0300 	subs.w	r3, r8, #0
 80057a6:	d024      	beq.n	80057f2 <__d2b+0x82>
 80057a8:	4668      	mov	r0, sp
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	f7ff fd17 	bl	80051de <__lo0bits>
 80057b0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80057b4:	b1d8      	cbz	r0, 80057ee <__d2b+0x7e>
 80057b6:	f1c0 0320 	rsb	r3, r0, #32
 80057ba:	fa02 f303 	lsl.w	r3, r2, r3
 80057be:	430b      	orrs	r3, r1
 80057c0:	40c2      	lsrs	r2, r0
 80057c2:	6163      	str	r3, [r4, #20]
 80057c4:	9201      	str	r2, [sp, #4]
 80057c6:	9b01      	ldr	r3, [sp, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	bf0c      	ite	eq
 80057cc:	2201      	moveq	r2, #1
 80057ce:	2202      	movne	r2, #2
 80057d0:	61a3      	str	r3, [r4, #24]
 80057d2:	6122      	str	r2, [r4, #16]
 80057d4:	b1ad      	cbz	r5, 8005802 <__d2b+0x92>
 80057d6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80057da:	4405      	add	r5, r0
 80057dc:	6035      	str	r5, [r6, #0]
 80057de:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80057e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057e4:	6018      	str	r0, [r3, #0]
 80057e6:	4620      	mov	r0, r4
 80057e8:	b002      	add	sp, #8
 80057ea:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80057ee:	6161      	str	r1, [r4, #20]
 80057f0:	e7e9      	b.n	80057c6 <__d2b+0x56>
 80057f2:	a801      	add	r0, sp, #4
 80057f4:	f7ff fcf3 	bl	80051de <__lo0bits>
 80057f8:	9b01      	ldr	r3, [sp, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	6163      	str	r3, [r4, #20]
 80057fe:	3020      	adds	r0, #32
 8005800:	e7e7      	b.n	80057d2 <__d2b+0x62>
 8005802:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005806:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800580a:	6030      	str	r0, [r6, #0]
 800580c:	6918      	ldr	r0, [r3, #16]
 800580e:	f7ff fcc7 	bl	80051a0 <__hi0bits>
 8005812:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005816:	e7e4      	b.n	80057e2 <__d2b+0x72>
 8005818:	08007887 	.word	0x08007887
 800581c:	08007898 	.word	0x08007898

08005820 <__ratio>:
 8005820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005824:	b085      	sub	sp, #20
 8005826:	e9cd 1000 	strd	r1, r0, [sp]
 800582a:	a902      	add	r1, sp, #8
 800582c:	f7ff ff58 	bl	80056e0 <__b2d>
 8005830:	468b      	mov	fp, r1
 8005832:	4606      	mov	r6, r0
 8005834:	460f      	mov	r7, r1
 8005836:	9800      	ldr	r0, [sp, #0]
 8005838:	a903      	add	r1, sp, #12
 800583a:	f7ff ff51 	bl	80056e0 <__b2d>
 800583e:	460d      	mov	r5, r1
 8005840:	9b01      	ldr	r3, [sp, #4]
 8005842:	4689      	mov	r9, r1
 8005844:	6919      	ldr	r1, [r3, #16]
 8005846:	9b00      	ldr	r3, [sp, #0]
 8005848:	4604      	mov	r4, r0
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	4630      	mov	r0, r6
 800584e:	1ac9      	subs	r1, r1, r3
 8005850:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005854:	1a9b      	subs	r3, r3, r2
 8005856:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800585a:	2b00      	cmp	r3, #0
 800585c:	bfcd      	iteet	gt
 800585e:	463a      	movgt	r2, r7
 8005860:	462a      	movle	r2, r5
 8005862:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005866:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800586a:	bfd8      	it	le
 800586c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005870:	464b      	mov	r3, r9
 8005872:	4622      	mov	r2, r4
 8005874:	4659      	mov	r1, fp
 8005876:	f7fa ff59 	bl	800072c <__aeabi_ddiv>
 800587a:	b005      	add	sp, #20
 800587c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005880 <__copybits>:
 8005880:	3901      	subs	r1, #1
 8005882:	b570      	push	{r4, r5, r6, lr}
 8005884:	1149      	asrs	r1, r1, #5
 8005886:	6914      	ldr	r4, [r2, #16]
 8005888:	3101      	adds	r1, #1
 800588a:	f102 0314 	add.w	r3, r2, #20
 800588e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005892:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005896:	1f05      	subs	r5, r0, #4
 8005898:	42a3      	cmp	r3, r4
 800589a:	d30c      	bcc.n	80058b6 <__copybits+0x36>
 800589c:	1aa3      	subs	r3, r4, r2
 800589e:	3b11      	subs	r3, #17
 80058a0:	f023 0303 	bic.w	r3, r3, #3
 80058a4:	3211      	adds	r2, #17
 80058a6:	42a2      	cmp	r2, r4
 80058a8:	bf88      	it	hi
 80058aa:	2300      	movhi	r3, #0
 80058ac:	4418      	add	r0, r3
 80058ae:	2300      	movs	r3, #0
 80058b0:	4288      	cmp	r0, r1
 80058b2:	d305      	bcc.n	80058c0 <__copybits+0x40>
 80058b4:	bd70      	pop	{r4, r5, r6, pc}
 80058b6:	f853 6b04 	ldr.w	r6, [r3], #4
 80058ba:	f845 6f04 	str.w	r6, [r5, #4]!
 80058be:	e7eb      	b.n	8005898 <__copybits+0x18>
 80058c0:	f840 3b04 	str.w	r3, [r0], #4
 80058c4:	e7f4      	b.n	80058b0 <__copybits+0x30>

080058c6 <__any_on>:
 80058c6:	f100 0214 	add.w	r2, r0, #20
 80058ca:	6900      	ldr	r0, [r0, #16]
 80058cc:	114b      	asrs	r3, r1, #5
 80058ce:	4298      	cmp	r0, r3
 80058d0:	b510      	push	{r4, lr}
 80058d2:	db11      	blt.n	80058f8 <__any_on+0x32>
 80058d4:	dd0a      	ble.n	80058ec <__any_on+0x26>
 80058d6:	f011 011f 	ands.w	r1, r1, #31
 80058da:	d007      	beq.n	80058ec <__any_on+0x26>
 80058dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80058e0:	fa24 f001 	lsr.w	r0, r4, r1
 80058e4:	fa00 f101 	lsl.w	r1, r0, r1
 80058e8:	428c      	cmp	r4, r1
 80058ea:	d10b      	bne.n	8005904 <__any_on+0x3e>
 80058ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d803      	bhi.n	80058fc <__any_on+0x36>
 80058f4:	2000      	movs	r0, #0
 80058f6:	bd10      	pop	{r4, pc}
 80058f8:	4603      	mov	r3, r0
 80058fa:	e7f7      	b.n	80058ec <__any_on+0x26>
 80058fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005900:	2900      	cmp	r1, #0
 8005902:	d0f5      	beq.n	80058f0 <__any_on+0x2a>
 8005904:	2001      	movs	r0, #1
 8005906:	e7f6      	b.n	80058f6 <__any_on+0x30>

08005908 <sulp>:
 8005908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800590c:	460f      	mov	r7, r1
 800590e:	4690      	mov	r8, r2
 8005910:	f7ff fec6 	bl	80056a0 <__ulp>
 8005914:	4604      	mov	r4, r0
 8005916:	460d      	mov	r5, r1
 8005918:	f1b8 0f00 	cmp.w	r8, #0
 800591c:	d011      	beq.n	8005942 <sulp+0x3a>
 800591e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005922:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005926:	2b00      	cmp	r3, #0
 8005928:	dd0b      	ble.n	8005942 <sulp+0x3a>
 800592a:	2400      	movs	r4, #0
 800592c:	051b      	lsls	r3, r3, #20
 800592e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005932:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005936:	4622      	mov	r2, r4
 8005938:	462b      	mov	r3, r5
 800593a:	f7fa fdcd 	bl	80004d8 <__aeabi_dmul>
 800593e:	4604      	mov	r4, r0
 8005940:	460d      	mov	r5, r1
 8005942:	4620      	mov	r0, r4
 8005944:	4629      	mov	r1, r5
 8005946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800594a:	0000      	movs	r0, r0
 800594c:	0000      	movs	r0, r0
	...

08005950 <_strtod_l>:
 8005950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005954:	b09f      	sub	sp, #124	@ 0x7c
 8005956:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005958:	2200      	movs	r2, #0
 800595a:	460c      	mov	r4, r1
 800595c:	921a      	str	r2, [sp, #104]	@ 0x68
 800595e:	f04f 0a00 	mov.w	sl, #0
 8005962:	f04f 0b00 	mov.w	fp, #0
 8005966:	460a      	mov	r2, r1
 8005968:	9005      	str	r0, [sp, #20]
 800596a:	9219      	str	r2, [sp, #100]	@ 0x64
 800596c:	7811      	ldrb	r1, [r2, #0]
 800596e:	292b      	cmp	r1, #43	@ 0x2b
 8005970:	d048      	beq.n	8005a04 <_strtod_l+0xb4>
 8005972:	d836      	bhi.n	80059e2 <_strtod_l+0x92>
 8005974:	290d      	cmp	r1, #13
 8005976:	d830      	bhi.n	80059da <_strtod_l+0x8a>
 8005978:	2908      	cmp	r1, #8
 800597a:	d830      	bhi.n	80059de <_strtod_l+0x8e>
 800597c:	2900      	cmp	r1, #0
 800597e:	d039      	beq.n	80059f4 <_strtod_l+0xa4>
 8005980:	2200      	movs	r2, #0
 8005982:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005984:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005986:	782a      	ldrb	r2, [r5, #0]
 8005988:	2a30      	cmp	r2, #48	@ 0x30
 800598a:	f040 80b1 	bne.w	8005af0 <_strtod_l+0x1a0>
 800598e:	786a      	ldrb	r2, [r5, #1]
 8005990:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005994:	2a58      	cmp	r2, #88	@ 0x58
 8005996:	d16c      	bne.n	8005a72 <_strtod_l+0x122>
 8005998:	9302      	str	r3, [sp, #8]
 800599a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800599c:	4a8e      	ldr	r2, [pc, #568]	@ (8005bd8 <_strtod_l+0x288>)
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	ab1a      	add	r3, sp, #104	@ 0x68
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	9805      	ldr	r0, [sp, #20]
 80059a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80059a8:	a919      	add	r1, sp, #100	@ 0x64
 80059aa:	f001 f915 	bl	8006bd8 <__gethex>
 80059ae:	f010 060f 	ands.w	r6, r0, #15
 80059b2:	4604      	mov	r4, r0
 80059b4:	d005      	beq.n	80059c2 <_strtod_l+0x72>
 80059b6:	2e06      	cmp	r6, #6
 80059b8:	d126      	bne.n	8005a08 <_strtod_l+0xb8>
 80059ba:	2300      	movs	r3, #0
 80059bc:	3501      	adds	r5, #1
 80059be:	9519      	str	r5, [sp, #100]	@ 0x64
 80059c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f040 8584 	bne.w	80064d2 <_strtod_l+0xb82>
 80059ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059cc:	b1bb      	cbz	r3, 80059fe <_strtod_l+0xae>
 80059ce:	4650      	mov	r0, sl
 80059d0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80059d4:	b01f      	add	sp, #124	@ 0x7c
 80059d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059da:	2920      	cmp	r1, #32
 80059dc:	d1d0      	bne.n	8005980 <_strtod_l+0x30>
 80059de:	3201      	adds	r2, #1
 80059e0:	e7c3      	b.n	800596a <_strtod_l+0x1a>
 80059e2:	292d      	cmp	r1, #45	@ 0x2d
 80059e4:	d1cc      	bne.n	8005980 <_strtod_l+0x30>
 80059e6:	2101      	movs	r1, #1
 80059e8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80059ea:	1c51      	adds	r1, r2, #1
 80059ec:	9119      	str	r1, [sp, #100]	@ 0x64
 80059ee:	7852      	ldrb	r2, [r2, #1]
 80059f0:	2a00      	cmp	r2, #0
 80059f2:	d1c7      	bne.n	8005984 <_strtod_l+0x34>
 80059f4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80059f6:	9419      	str	r4, [sp, #100]	@ 0x64
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f040 8568 	bne.w	80064ce <_strtod_l+0xb7e>
 80059fe:	4650      	mov	r0, sl
 8005a00:	4659      	mov	r1, fp
 8005a02:	e7e7      	b.n	80059d4 <_strtod_l+0x84>
 8005a04:	2100      	movs	r1, #0
 8005a06:	e7ef      	b.n	80059e8 <_strtod_l+0x98>
 8005a08:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005a0a:	b13a      	cbz	r2, 8005a1c <_strtod_l+0xcc>
 8005a0c:	2135      	movs	r1, #53	@ 0x35
 8005a0e:	a81c      	add	r0, sp, #112	@ 0x70
 8005a10:	f7ff ff36 	bl	8005880 <__copybits>
 8005a14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005a16:	9805      	ldr	r0, [sp, #20]
 8005a18:	f7ff fb10 	bl	800503c <_Bfree>
 8005a1c:	3e01      	subs	r6, #1
 8005a1e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005a20:	2e04      	cmp	r6, #4
 8005a22:	d806      	bhi.n	8005a32 <_strtod_l+0xe2>
 8005a24:	e8df f006 	tbb	[pc, r6]
 8005a28:	201d0314 	.word	0x201d0314
 8005a2c:	14          	.byte	0x14
 8005a2d:	00          	.byte	0x00
 8005a2e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005a32:	05e1      	lsls	r1, r4, #23
 8005a34:	bf48      	it	mi
 8005a36:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005a3a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005a3e:	0d1b      	lsrs	r3, r3, #20
 8005a40:	051b      	lsls	r3, r3, #20
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1bd      	bne.n	80059c2 <_strtod_l+0x72>
 8005a46:	f7fe fb29 	bl	800409c <__errno>
 8005a4a:	2322      	movs	r3, #34	@ 0x22
 8005a4c:	6003      	str	r3, [r0, #0]
 8005a4e:	e7b8      	b.n	80059c2 <_strtod_l+0x72>
 8005a50:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005a54:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005a58:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005a5c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005a60:	e7e7      	b.n	8005a32 <_strtod_l+0xe2>
 8005a62:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005bdc <_strtod_l+0x28c>
 8005a66:	e7e4      	b.n	8005a32 <_strtod_l+0xe2>
 8005a68:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005a6c:	f04f 3aff 	mov.w	sl, #4294967295
 8005a70:	e7df      	b.n	8005a32 <_strtod_l+0xe2>
 8005a72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a74:	1c5a      	adds	r2, r3, #1
 8005a76:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a78:	785b      	ldrb	r3, [r3, #1]
 8005a7a:	2b30      	cmp	r3, #48	@ 0x30
 8005a7c:	d0f9      	beq.n	8005a72 <_strtod_l+0x122>
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d09f      	beq.n	80059c2 <_strtod_l+0x72>
 8005a82:	2301      	movs	r3, #1
 8005a84:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a88:	220a      	movs	r2, #10
 8005a8a:	930c      	str	r3, [sp, #48]	@ 0x30
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	461f      	mov	r7, r3
 8005a90:	9308      	str	r3, [sp, #32]
 8005a92:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a94:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005a96:	7805      	ldrb	r5, [r0, #0]
 8005a98:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005a9c:	b2d9      	uxtb	r1, r3
 8005a9e:	2909      	cmp	r1, #9
 8005aa0:	d928      	bls.n	8005af4 <_strtod_l+0x1a4>
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	494e      	ldr	r1, [pc, #312]	@ (8005be0 <_strtod_l+0x290>)
 8005aa6:	f000 ffc7 	bl	8006a38 <strncmp>
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	d032      	beq.n	8005b14 <_strtod_l+0x1c4>
 8005aae:	2000      	movs	r0, #0
 8005ab0:	462a      	mov	r2, r5
 8005ab2:	4681      	mov	r9, r0
 8005ab4:	463d      	mov	r5, r7
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2a65      	cmp	r2, #101	@ 0x65
 8005aba:	d001      	beq.n	8005ac0 <_strtod_l+0x170>
 8005abc:	2a45      	cmp	r2, #69	@ 0x45
 8005abe:	d114      	bne.n	8005aea <_strtod_l+0x19a>
 8005ac0:	b91d      	cbnz	r5, 8005aca <_strtod_l+0x17a>
 8005ac2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ac4:	4302      	orrs	r2, r0
 8005ac6:	d095      	beq.n	80059f4 <_strtod_l+0xa4>
 8005ac8:	2500      	movs	r5, #0
 8005aca:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005acc:	1c62      	adds	r2, r4, #1
 8005ace:	9219      	str	r2, [sp, #100]	@ 0x64
 8005ad0:	7862      	ldrb	r2, [r4, #1]
 8005ad2:	2a2b      	cmp	r2, #43	@ 0x2b
 8005ad4:	d077      	beq.n	8005bc6 <_strtod_l+0x276>
 8005ad6:	2a2d      	cmp	r2, #45	@ 0x2d
 8005ad8:	d07b      	beq.n	8005bd2 <_strtod_l+0x282>
 8005ada:	f04f 0c00 	mov.w	ip, #0
 8005ade:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005ae2:	2909      	cmp	r1, #9
 8005ae4:	f240 8082 	bls.w	8005bec <_strtod_l+0x29c>
 8005ae8:	9419      	str	r4, [sp, #100]	@ 0x64
 8005aea:	f04f 0800 	mov.w	r8, #0
 8005aee:	e0a2      	b.n	8005c36 <_strtod_l+0x2e6>
 8005af0:	2300      	movs	r3, #0
 8005af2:	e7c7      	b.n	8005a84 <_strtod_l+0x134>
 8005af4:	2f08      	cmp	r7, #8
 8005af6:	bfd5      	itete	le
 8005af8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005afa:	9908      	ldrgt	r1, [sp, #32]
 8005afc:	fb02 3301 	mlale	r3, r2, r1, r3
 8005b00:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005b04:	f100 0001 	add.w	r0, r0, #1
 8005b08:	bfd4      	ite	le
 8005b0a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005b0c:	9308      	strgt	r3, [sp, #32]
 8005b0e:	3701      	adds	r7, #1
 8005b10:	9019      	str	r0, [sp, #100]	@ 0x64
 8005b12:	e7bf      	b.n	8005a94 <_strtod_l+0x144>
 8005b14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b1a:	785a      	ldrb	r2, [r3, #1]
 8005b1c:	b37f      	cbz	r7, 8005b7e <_strtod_l+0x22e>
 8005b1e:	4681      	mov	r9, r0
 8005b20:	463d      	mov	r5, r7
 8005b22:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005b26:	2b09      	cmp	r3, #9
 8005b28:	d912      	bls.n	8005b50 <_strtod_l+0x200>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e7c4      	b.n	8005ab8 <_strtod_l+0x168>
 8005b2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b30:	3001      	adds	r0, #1
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b36:	785a      	ldrb	r2, [r3, #1]
 8005b38:	2a30      	cmp	r2, #48	@ 0x30
 8005b3a:	d0f8      	beq.n	8005b2e <_strtod_l+0x1de>
 8005b3c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	f200 84cb 	bhi.w	80064dc <_strtod_l+0xb8c>
 8005b46:	4681      	mov	r9, r0
 8005b48:	2000      	movs	r0, #0
 8005b4a:	4605      	mov	r5, r0
 8005b4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b4e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005b50:	3a30      	subs	r2, #48	@ 0x30
 8005b52:	f100 0301 	add.w	r3, r0, #1
 8005b56:	d02a      	beq.n	8005bae <_strtod_l+0x25e>
 8005b58:	4499      	add	r9, r3
 8005b5a:	210a      	movs	r1, #10
 8005b5c:	462b      	mov	r3, r5
 8005b5e:	eb00 0c05 	add.w	ip, r0, r5
 8005b62:	4563      	cmp	r3, ip
 8005b64:	d10d      	bne.n	8005b82 <_strtod_l+0x232>
 8005b66:	1c69      	adds	r1, r5, #1
 8005b68:	4401      	add	r1, r0
 8005b6a:	4428      	add	r0, r5
 8005b6c:	2808      	cmp	r0, #8
 8005b6e:	dc16      	bgt.n	8005b9e <_strtod_l+0x24e>
 8005b70:	230a      	movs	r3, #10
 8005b72:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005b74:	fb03 2300 	mla	r3, r3, r0, r2
 8005b78:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e018      	b.n	8005bb0 <_strtod_l+0x260>
 8005b7e:	4638      	mov	r0, r7
 8005b80:	e7da      	b.n	8005b38 <_strtod_l+0x1e8>
 8005b82:	2b08      	cmp	r3, #8
 8005b84:	f103 0301 	add.w	r3, r3, #1
 8005b88:	dc03      	bgt.n	8005b92 <_strtod_l+0x242>
 8005b8a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005b8c:	434e      	muls	r6, r1
 8005b8e:	960a      	str	r6, [sp, #40]	@ 0x28
 8005b90:	e7e7      	b.n	8005b62 <_strtod_l+0x212>
 8005b92:	2b10      	cmp	r3, #16
 8005b94:	bfde      	ittt	le
 8005b96:	9e08      	ldrle	r6, [sp, #32]
 8005b98:	434e      	mulle	r6, r1
 8005b9a:	9608      	strle	r6, [sp, #32]
 8005b9c:	e7e1      	b.n	8005b62 <_strtod_l+0x212>
 8005b9e:	280f      	cmp	r0, #15
 8005ba0:	dceb      	bgt.n	8005b7a <_strtod_l+0x22a>
 8005ba2:	230a      	movs	r3, #10
 8005ba4:	9808      	ldr	r0, [sp, #32]
 8005ba6:	fb03 2300 	mla	r3, r3, r0, r2
 8005baa:	9308      	str	r3, [sp, #32]
 8005bac:	e7e5      	b.n	8005b7a <_strtod_l+0x22a>
 8005bae:	4629      	mov	r1, r5
 8005bb0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005bb2:	460d      	mov	r5, r1
 8005bb4:	1c50      	adds	r0, r2, #1
 8005bb6:	9019      	str	r0, [sp, #100]	@ 0x64
 8005bb8:	7852      	ldrb	r2, [r2, #1]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	e7b1      	b.n	8005b22 <_strtod_l+0x1d2>
 8005bbe:	f04f 0900 	mov.w	r9, #0
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e77d      	b.n	8005ac2 <_strtod_l+0x172>
 8005bc6:	f04f 0c00 	mov.w	ip, #0
 8005bca:	1ca2      	adds	r2, r4, #2
 8005bcc:	9219      	str	r2, [sp, #100]	@ 0x64
 8005bce:	78a2      	ldrb	r2, [r4, #2]
 8005bd0:	e785      	b.n	8005ade <_strtod_l+0x18e>
 8005bd2:	f04f 0c01 	mov.w	ip, #1
 8005bd6:	e7f8      	b.n	8005bca <_strtod_l+0x27a>
 8005bd8:	08007a08 	.word	0x08007a08
 8005bdc:	7ff00000 	.word	0x7ff00000
 8005be0:	080079f0 	.word	0x080079f0
 8005be4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005be6:	1c51      	adds	r1, r2, #1
 8005be8:	9119      	str	r1, [sp, #100]	@ 0x64
 8005bea:	7852      	ldrb	r2, [r2, #1]
 8005bec:	2a30      	cmp	r2, #48	@ 0x30
 8005bee:	d0f9      	beq.n	8005be4 <_strtod_l+0x294>
 8005bf0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005bf4:	2908      	cmp	r1, #8
 8005bf6:	f63f af78 	bhi.w	8005aea <_strtod_l+0x19a>
 8005bfa:	f04f 080a 	mov.w	r8, #10
 8005bfe:	3a30      	subs	r2, #48	@ 0x30
 8005c00:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005c04:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005c06:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005c08:	1c56      	adds	r6, r2, #1
 8005c0a:	9619      	str	r6, [sp, #100]	@ 0x64
 8005c0c:	7852      	ldrb	r2, [r2, #1]
 8005c0e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005c12:	f1be 0f09 	cmp.w	lr, #9
 8005c16:	d939      	bls.n	8005c8c <_strtod_l+0x33c>
 8005c18:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005c1a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005c1e:	1a76      	subs	r6, r6, r1
 8005c20:	2e08      	cmp	r6, #8
 8005c22:	dc03      	bgt.n	8005c2c <_strtod_l+0x2dc>
 8005c24:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005c26:	4588      	cmp	r8, r1
 8005c28:	bfa8      	it	ge
 8005c2a:	4688      	movge	r8, r1
 8005c2c:	f1bc 0f00 	cmp.w	ip, #0
 8005c30:	d001      	beq.n	8005c36 <_strtod_l+0x2e6>
 8005c32:	f1c8 0800 	rsb	r8, r8, #0
 8005c36:	2d00      	cmp	r5, #0
 8005c38:	d14e      	bne.n	8005cd8 <_strtod_l+0x388>
 8005c3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c3c:	4308      	orrs	r0, r1
 8005c3e:	f47f aec0 	bne.w	80059c2 <_strtod_l+0x72>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f47f aed6 	bne.w	80059f4 <_strtod_l+0xa4>
 8005c48:	2a69      	cmp	r2, #105	@ 0x69
 8005c4a:	d028      	beq.n	8005c9e <_strtod_l+0x34e>
 8005c4c:	dc25      	bgt.n	8005c9a <_strtod_l+0x34a>
 8005c4e:	2a49      	cmp	r2, #73	@ 0x49
 8005c50:	d025      	beq.n	8005c9e <_strtod_l+0x34e>
 8005c52:	2a4e      	cmp	r2, #78	@ 0x4e
 8005c54:	f47f aece 	bne.w	80059f4 <_strtod_l+0xa4>
 8005c58:	499a      	ldr	r1, [pc, #616]	@ (8005ec4 <_strtod_l+0x574>)
 8005c5a:	a819      	add	r0, sp, #100	@ 0x64
 8005c5c:	f001 f9de 	bl	800701c <__match>
 8005c60:	2800      	cmp	r0, #0
 8005c62:	f43f aec7 	beq.w	80059f4 <_strtod_l+0xa4>
 8005c66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b28      	cmp	r3, #40	@ 0x28
 8005c6c:	d12e      	bne.n	8005ccc <_strtod_l+0x37c>
 8005c6e:	4996      	ldr	r1, [pc, #600]	@ (8005ec8 <_strtod_l+0x578>)
 8005c70:	aa1c      	add	r2, sp, #112	@ 0x70
 8005c72:	a819      	add	r0, sp, #100	@ 0x64
 8005c74:	f001 f9e6 	bl	8007044 <__hexnan>
 8005c78:	2805      	cmp	r0, #5
 8005c7a:	d127      	bne.n	8005ccc <_strtod_l+0x37c>
 8005c7c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005c7e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005c82:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005c86:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005c8a:	e69a      	b.n	80059c2 <_strtod_l+0x72>
 8005c8c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005c8e:	fb08 2101 	mla	r1, r8, r1, r2
 8005c92:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005c96:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c98:	e7b5      	b.n	8005c06 <_strtod_l+0x2b6>
 8005c9a:	2a6e      	cmp	r2, #110	@ 0x6e
 8005c9c:	e7da      	b.n	8005c54 <_strtod_l+0x304>
 8005c9e:	498b      	ldr	r1, [pc, #556]	@ (8005ecc <_strtod_l+0x57c>)
 8005ca0:	a819      	add	r0, sp, #100	@ 0x64
 8005ca2:	f001 f9bb 	bl	800701c <__match>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	f43f aea4 	beq.w	80059f4 <_strtod_l+0xa4>
 8005cac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005cae:	4988      	ldr	r1, [pc, #544]	@ (8005ed0 <_strtod_l+0x580>)
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	a819      	add	r0, sp, #100	@ 0x64
 8005cb4:	9319      	str	r3, [sp, #100]	@ 0x64
 8005cb6:	f001 f9b1 	bl	800701c <__match>
 8005cba:	b910      	cbnz	r0, 8005cc2 <_strtod_l+0x372>
 8005cbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	9319      	str	r3, [sp, #100]	@ 0x64
 8005cc2:	f04f 0a00 	mov.w	sl, #0
 8005cc6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8005ed4 <_strtod_l+0x584>
 8005cca:	e67a      	b.n	80059c2 <_strtod_l+0x72>
 8005ccc:	4882      	ldr	r0, [pc, #520]	@ (8005ed8 <_strtod_l+0x588>)
 8005cce:	f000 fee3 	bl	8006a98 <nan>
 8005cd2:	4682      	mov	sl, r0
 8005cd4:	468b      	mov	fp, r1
 8005cd6:	e674      	b.n	80059c2 <_strtod_l+0x72>
 8005cd8:	eba8 0309 	sub.w	r3, r8, r9
 8005cdc:	2f00      	cmp	r7, #0
 8005cde:	bf08      	it	eq
 8005ce0:	462f      	moveq	r7, r5
 8005ce2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005ce4:	2d10      	cmp	r5, #16
 8005ce6:	462c      	mov	r4, r5
 8005ce8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cea:	bfa8      	it	ge
 8005cec:	2410      	movge	r4, #16
 8005cee:	f7fa fb79 	bl	80003e4 <__aeabi_ui2d>
 8005cf2:	2d09      	cmp	r5, #9
 8005cf4:	4682      	mov	sl, r0
 8005cf6:	468b      	mov	fp, r1
 8005cf8:	dc11      	bgt.n	8005d1e <_strtod_l+0x3ce>
 8005cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f43f ae60 	beq.w	80059c2 <_strtod_l+0x72>
 8005d02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d04:	dd76      	ble.n	8005df4 <_strtod_l+0x4a4>
 8005d06:	2b16      	cmp	r3, #22
 8005d08:	dc5d      	bgt.n	8005dc6 <_strtod_l+0x476>
 8005d0a:	4974      	ldr	r1, [pc, #464]	@ (8005edc <_strtod_l+0x58c>)
 8005d0c:	4652      	mov	r2, sl
 8005d0e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d12:	465b      	mov	r3, fp
 8005d14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d18:	f7fa fbde 	bl	80004d8 <__aeabi_dmul>
 8005d1c:	e7d9      	b.n	8005cd2 <_strtod_l+0x382>
 8005d1e:	4b6f      	ldr	r3, [pc, #444]	@ (8005edc <_strtod_l+0x58c>)
 8005d20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005d24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005d28:	f7fa fbd6 	bl	80004d8 <__aeabi_dmul>
 8005d2c:	4682      	mov	sl, r0
 8005d2e:	9808      	ldr	r0, [sp, #32]
 8005d30:	468b      	mov	fp, r1
 8005d32:	f7fa fb57 	bl	80003e4 <__aeabi_ui2d>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4650      	mov	r0, sl
 8005d3c:	4659      	mov	r1, fp
 8005d3e:	f7fa fa15 	bl	800016c <__adddf3>
 8005d42:	2d0f      	cmp	r5, #15
 8005d44:	4682      	mov	sl, r0
 8005d46:	468b      	mov	fp, r1
 8005d48:	ddd7      	ble.n	8005cfa <_strtod_l+0x3aa>
 8005d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d4c:	1b2c      	subs	r4, r5, r4
 8005d4e:	441c      	add	r4, r3
 8005d50:	2c00      	cmp	r4, #0
 8005d52:	f340 8096 	ble.w	8005e82 <_strtod_l+0x532>
 8005d56:	f014 030f 	ands.w	r3, r4, #15
 8005d5a:	d00a      	beq.n	8005d72 <_strtod_l+0x422>
 8005d5c:	495f      	ldr	r1, [pc, #380]	@ (8005edc <_strtod_l+0x58c>)
 8005d5e:	4652      	mov	r2, sl
 8005d60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d68:	465b      	mov	r3, fp
 8005d6a:	f7fa fbb5 	bl	80004d8 <__aeabi_dmul>
 8005d6e:	4682      	mov	sl, r0
 8005d70:	468b      	mov	fp, r1
 8005d72:	f034 040f 	bics.w	r4, r4, #15
 8005d76:	d073      	beq.n	8005e60 <_strtod_l+0x510>
 8005d78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005d7c:	dd48      	ble.n	8005e10 <_strtod_l+0x4c0>
 8005d7e:	2400      	movs	r4, #0
 8005d80:	46a0      	mov	r8, r4
 8005d82:	46a1      	mov	r9, r4
 8005d84:	940a      	str	r4, [sp, #40]	@ 0x28
 8005d86:	2322      	movs	r3, #34	@ 0x22
 8005d88:	f04f 0a00 	mov.w	sl, #0
 8005d8c:	9a05      	ldr	r2, [sp, #20]
 8005d8e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8005ed4 <_strtod_l+0x584>
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f43f ae13 	beq.w	80059c2 <_strtod_l+0x72>
 8005d9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005d9e:	9805      	ldr	r0, [sp, #20]
 8005da0:	f7ff f94c 	bl	800503c <_Bfree>
 8005da4:	4649      	mov	r1, r9
 8005da6:	9805      	ldr	r0, [sp, #20]
 8005da8:	f7ff f948 	bl	800503c <_Bfree>
 8005dac:	4641      	mov	r1, r8
 8005dae:	9805      	ldr	r0, [sp, #20]
 8005db0:	f7ff f944 	bl	800503c <_Bfree>
 8005db4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005db6:	9805      	ldr	r0, [sp, #20]
 8005db8:	f7ff f940 	bl	800503c <_Bfree>
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	9805      	ldr	r0, [sp, #20]
 8005dc0:	f7ff f93c 	bl	800503c <_Bfree>
 8005dc4:	e5fd      	b.n	80059c2 <_strtod_l+0x72>
 8005dc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dc8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	dbbc      	blt.n	8005d4a <_strtod_l+0x3fa>
 8005dd0:	4c42      	ldr	r4, [pc, #264]	@ (8005edc <_strtod_l+0x58c>)
 8005dd2:	f1c5 050f 	rsb	r5, r5, #15
 8005dd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005dda:	4652      	mov	r2, sl
 8005ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005de0:	465b      	mov	r3, fp
 8005de2:	f7fa fb79 	bl	80004d8 <__aeabi_dmul>
 8005de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005de8:	1b5d      	subs	r5, r3, r5
 8005dea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005dee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005df2:	e791      	b.n	8005d18 <_strtod_l+0x3c8>
 8005df4:	3316      	adds	r3, #22
 8005df6:	dba8      	blt.n	8005d4a <_strtod_l+0x3fa>
 8005df8:	4b38      	ldr	r3, [pc, #224]	@ (8005edc <_strtod_l+0x58c>)
 8005dfa:	eba9 0808 	sub.w	r8, r9, r8
 8005dfe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005e02:	4650      	mov	r0, sl
 8005e04:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005e08:	4659      	mov	r1, fp
 8005e0a:	f7fa fc8f 	bl	800072c <__aeabi_ddiv>
 8005e0e:	e760      	b.n	8005cd2 <_strtod_l+0x382>
 8005e10:	4b33      	ldr	r3, [pc, #204]	@ (8005ee0 <_strtod_l+0x590>)
 8005e12:	4650      	mov	r0, sl
 8005e14:	9308      	str	r3, [sp, #32]
 8005e16:	2300      	movs	r3, #0
 8005e18:	4659      	mov	r1, fp
 8005e1a:	461e      	mov	r6, r3
 8005e1c:	1124      	asrs	r4, r4, #4
 8005e1e:	2c01      	cmp	r4, #1
 8005e20:	dc21      	bgt.n	8005e66 <_strtod_l+0x516>
 8005e22:	b10b      	cbz	r3, 8005e28 <_strtod_l+0x4d8>
 8005e24:	4682      	mov	sl, r0
 8005e26:	468b      	mov	fp, r1
 8005e28:	492d      	ldr	r1, [pc, #180]	@ (8005ee0 <_strtod_l+0x590>)
 8005e2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005e2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005e32:	4652      	mov	r2, sl
 8005e34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e38:	465b      	mov	r3, fp
 8005e3a:	f7fa fb4d 	bl	80004d8 <__aeabi_dmul>
 8005e3e:	4b25      	ldr	r3, [pc, #148]	@ (8005ed4 <_strtod_l+0x584>)
 8005e40:	460a      	mov	r2, r1
 8005e42:	400b      	ands	r3, r1
 8005e44:	4927      	ldr	r1, [pc, #156]	@ (8005ee4 <_strtod_l+0x594>)
 8005e46:	4682      	mov	sl, r0
 8005e48:	428b      	cmp	r3, r1
 8005e4a:	d898      	bhi.n	8005d7e <_strtod_l+0x42e>
 8005e4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005e50:	428b      	cmp	r3, r1
 8005e52:	bf86      	itte	hi
 8005e54:	f04f 3aff 	movhi.w	sl, #4294967295
 8005e58:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8005ee8 <_strtod_l+0x598>
 8005e5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005e60:	2300      	movs	r3, #0
 8005e62:	9308      	str	r3, [sp, #32]
 8005e64:	e07a      	b.n	8005f5c <_strtod_l+0x60c>
 8005e66:	07e2      	lsls	r2, r4, #31
 8005e68:	d505      	bpl.n	8005e76 <_strtod_l+0x526>
 8005e6a:	9b08      	ldr	r3, [sp, #32]
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	f7fa fb32 	bl	80004d8 <__aeabi_dmul>
 8005e74:	2301      	movs	r3, #1
 8005e76:	9a08      	ldr	r2, [sp, #32]
 8005e78:	3601      	adds	r6, #1
 8005e7a:	3208      	adds	r2, #8
 8005e7c:	1064      	asrs	r4, r4, #1
 8005e7e:	9208      	str	r2, [sp, #32]
 8005e80:	e7cd      	b.n	8005e1e <_strtod_l+0x4ce>
 8005e82:	d0ed      	beq.n	8005e60 <_strtod_l+0x510>
 8005e84:	4264      	negs	r4, r4
 8005e86:	f014 020f 	ands.w	r2, r4, #15
 8005e8a:	d00a      	beq.n	8005ea2 <_strtod_l+0x552>
 8005e8c:	4b13      	ldr	r3, [pc, #76]	@ (8005edc <_strtod_l+0x58c>)
 8005e8e:	4650      	mov	r0, sl
 8005e90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e94:	4659      	mov	r1, fp
 8005e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9a:	f7fa fc47 	bl	800072c <__aeabi_ddiv>
 8005e9e:	4682      	mov	sl, r0
 8005ea0:	468b      	mov	fp, r1
 8005ea2:	1124      	asrs	r4, r4, #4
 8005ea4:	d0dc      	beq.n	8005e60 <_strtod_l+0x510>
 8005ea6:	2c1f      	cmp	r4, #31
 8005ea8:	dd20      	ble.n	8005eec <_strtod_l+0x59c>
 8005eaa:	2400      	movs	r4, #0
 8005eac:	46a0      	mov	r8, r4
 8005eae:	46a1      	mov	r9, r4
 8005eb0:	940a      	str	r4, [sp, #40]	@ 0x28
 8005eb2:	2322      	movs	r3, #34	@ 0x22
 8005eb4:	9a05      	ldr	r2, [sp, #20]
 8005eb6:	f04f 0a00 	mov.w	sl, #0
 8005eba:	f04f 0b00 	mov.w	fp, #0
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	e768      	b.n	8005d94 <_strtod_l+0x444>
 8005ec2:	bf00      	nop
 8005ec4:	080077df 	.word	0x080077df
 8005ec8:	080079f4 	.word	0x080079f4
 8005ecc:	080077d7 	.word	0x080077d7
 8005ed0:	0800780e 	.word	0x0800780e
 8005ed4:	7ff00000 	.word	0x7ff00000
 8005ed8:	08007b9d 	.word	0x08007b9d
 8005edc:	08007928 	.word	0x08007928
 8005ee0:	08007900 	.word	0x08007900
 8005ee4:	7ca00000 	.word	0x7ca00000
 8005ee8:	7fefffff 	.word	0x7fefffff
 8005eec:	f014 0310 	ands.w	r3, r4, #16
 8005ef0:	bf18      	it	ne
 8005ef2:	236a      	movne	r3, #106	@ 0x6a
 8005ef4:	4650      	mov	r0, sl
 8005ef6:	9308      	str	r3, [sp, #32]
 8005ef8:	4659      	mov	r1, fp
 8005efa:	2300      	movs	r3, #0
 8005efc:	4ea9      	ldr	r6, [pc, #676]	@ (80061a4 <_strtod_l+0x854>)
 8005efe:	07e2      	lsls	r2, r4, #31
 8005f00:	d504      	bpl.n	8005f0c <_strtod_l+0x5bc>
 8005f02:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f06:	f7fa fae7 	bl	80004d8 <__aeabi_dmul>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	1064      	asrs	r4, r4, #1
 8005f0e:	f106 0608 	add.w	r6, r6, #8
 8005f12:	d1f4      	bne.n	8005efe <_strtod_l+0x5ae>
 8005f14:	b10b      	cbz	r3, 8005f1a <_strtod_l+0x5ca>
 8005f16:	4682      	mov	sl, r0
 8005f18:	468b      	mov	fp, r1
 8005f1a:	9b08      	ldr	r3, [sp, #32]
 8005f1c:	b1b3      	cbz	r3, 8005f4c <_strtod_l+0x5fc>
 8005f1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005f22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	4659      	mov	r1, fp
 8005f2a:	dd0f      	ble.n	8005f4c <_strtod_l+0x5fc>
 8005f2c:	2b1f      	cmp	r3, #31
 8005f2e:	dd57      	ble.n	8005fe0 <_strtod_l+0x690>
 8005f30:	2b34      	cmp	r3, #52	@ 0x34
 8005f32:	bfd8      	it	le
 8005f34:	f04f 33ff 	movle.w	r3, #4294967295
 8005f38:	f04f 0a00 	mov.w	sl, #0
 8005f3c:	bfcf      	iteee	gt
 8005f3e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005f42:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005f46:	4093      	lslle	r3, r2
 8005f48:	ea03 0b01 	andle.w	fp, r3, r1
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2300      	movs	r3, #0
 8005f50:	4650      	mov	r0, sl
 8005f52:	4659      	mov	r1, fp
 8005f54:	f7fa fd28 	bl	80009a8 <__aeabi_dcmpeq>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d1a6      	bne.n	8005eaa <_strtod_l+0x55a>
 8005f5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f5e:	463a      	mov	r2, r7
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005f64:	462b      	mov	r3, r5
 8005f66:	9805      	ldr	r0, [sp, #20]
 8005f68:	f7ff f8d0 	bl	800510c <__s2b>
 8005f6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	f43f af05 	beq.w	8005d7e <_strtod_l+0x42e>
 8005f74:	2400      	movs	r4, #0
 8005f76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f78:	eba9 0308 	sub.w	r3, r9, r8
 8005f7c:	2a00      	cmp	r2, #0
 8005f7e:	bfa8      	it	ge
 8005f80:	2300      	movge	r3, #0
 8005f82:	46a0      	mov	r8, r4
 8005f84:	9312      	str	r3, [sp, #72]	@ 0x48
 8005f86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005f8a:	9316      	str	r3, [sp, #88]	@ 0x58
 8005f8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f8e:	9805      	ldr	r0, [sp, #20]
 8005f90:	6859      	ldr	r1, [r3, #4]
 8005f92:	f7ff f813 	bl	8004fbc <_Balloc>
 8005f96:	4681      	mov	r9, r0
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	f43f aef4 	beq.w	8005d86 <_strtod_l+0x436>
 8005f9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fa0:	300c      	adds	r0, #12
 8005fa2:	691a      	ldr	r2, [r3, #16]
 8005fa4:	f103 010c 	add.w	r1, r3, #12
 8005fa8:	3202      	adds	r2, #2
 8005faa:	0092      	lsls	r2, r2, #2
 8005fac:	f000 fd66 	bl	8006a7c <memcpy>
 8005fb0:	ab1c      	add	r3, sp, #112	@ 0x70
 8005fb2:	9301      	str	r3, [sp, #4]
 8005fb4:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	4652      	mov	r2, sl
 8005fba:	465b      	mov	r3, fp
 8005fbc:	9805      	ldr	r0, [sp, #20]
 8005fbe:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005fc2:	f7ff fbd5 	bl	8005770 <__d2b>
 8005fc6:	901a      	str	r0, [sp, #104]	@ 0x68
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	f43f aedc 	beq.w	8005d86 <_strtod_l+0x436>
 8005fce:	2101      	movs	r1, #1
 8005fd0:	9805      	ldr	r0, [sp, #20]
 8005fd2:	f7ff f931 	bl	8005238 <__i2b>
 8005fd6:	4680      	mov	r8, r0
 8005fd8:	b948      	cbnz	r0, 8005fee <_strtod_l+0x69e>
 8005fda:	f04f 0800 	mov.w	r8, #0
 8005fde:	e6d2      	b.n	8005d86 <_strtod_l+0x436>
 8005fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe8:	ea03 0a0a 	and.w	sl, r3, sl
 8005fec:	e7ae      	b.n	8005f4c <_strtod_l+0x5fc>
 8005fee:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005ff0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005ff2:	2d00      	cmp	r5, #0
 8005ff4:	bfab      	itete	ge
 8005ff6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005ff8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005ffa:	18ef      	addge	r7, r5, r3
 8005ffc:	1b5e      	sublt	r6, r3, r5
 8005ffe:	9b08      	ldr	r3, [sp, #32]
 8006000:	bfa8      	it	ge
 8006002:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006004:	eba5 0503 	sub.w	r5, r5, r3
 8006008:	4415      	add	r5, r2
 800600a:	4b67      	ldr	r3, [pc, #412]	@ (80061a8 <_strtod_l+0x858>)
 800600c:	f105 35ff 	add.w	r5, r5, #4294967295
 8006010:	bfb8      	it	lt
 8006012:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006014:	429d      	cmp	r5, r3
 8006016:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800601a:	da50      	bge.n	80060be <_strtod_l+0x76e>
 800601c:	1b5b      	subs	r3, r3, r5
 800601e:	2b1f      	cmp	r3, #31
 8006020:	f04f 0101 	mov.w	r1, #1
 8006024:	eba2 0203 	sub.w	r2, r2, r3
 8006028:	dc3d      	bgt.n	80060a6 <_strtod_l+0x756>
 800602a:	fa01 f303 	lsl.w	r3, r1, r3
 800602e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006030:	2300      	movs	r3, #0
 8006032:	9310      	str	r3, [sp, #64]	@ 0x40
 8006034:	18bd      	adds	r5, r7, r2
 8006036:	9b08      	ldr	r3, [sp, #32]
 8006038:	42af      	cmp	r7, r5
 800603a:	4416      	add	r6, r2
 800603c:	441e      	add	r6, r3
 800603e:	463b      	mov	r3, r7
 8006040:	bfa8      	it	ge
 8006042:	462b      	movge	r3, r5
 8006044:	42b3      	cmp	r3, r6
 8006046:	bfa8      	it	ge
 8006048:	4633      	movge	r3, r6
 800604a:	2b00      	cmp	r3, #0
 800604c:	bfc2      	ittt	gt
 800604e:	1aed      	subgt	r5, r5, r3
 8006050:	1af6      	subgt	r6, r6, r3
 8006052:	1aff      	subgt	r7, r7, r3
 8006054:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006056:	2b00      	cmp	r3, #0
 8006058:	dd16      	ble.n	8006088 <_strtod_l+0x738>
 800605a:	4641      	mov	r1, r8
 800605c:	461a      	mov	r2, r3
 800605e:	9805      	ldr	r0, [sp, #20]
 8006060:	f7ff f9a8 	bl	80053b4 <__pow5mult>
 8006064:	4680      	mov	r8, r0
 8006066:	2800      	cmp	r0, #0
 8006068:	d0b7      	beq.n	8005fda <_strtod_l+0x68a>
 800606a:	4601      	mov	r1, r0
 800606c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800606e:	9805      	ldr	r0, [sp, #20]
 8006070:	f7ff f8f8 	bl	8005264 <__multiply>
 8006074:	900e      	str	r0, [sp, #56]	@ 0x38
 8006076:	2800      	cmp	r0, #0
 8006078:	f43f ae85 	beq.w	8005d86 <_strtod_l+0x436>
 800607c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800607e:	9805      	ldr	r0, [sp, #20]
 8006080:	f7fe ffdc 	bl	800503c <_Bfree>
 8006084:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006086:	931a      	str	r3, [sp, #104]	@ 0x68
 8006088:	2d00      	cmp	r5, #0
 800608a:	dc1d      	bgt.n	80060c8 <_strtod_l+0x778>
 800608c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800608e:	2b00      	cmp	r3, #0
 8006090:	dd23      	ble.n	80060da <_strtod_l+0x78a>
 8006092:	4649      	mov	r1, r9
 8006094:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006096:	9805      	ldr	r0, [sp, #20]
 8006098:	f7ff f98c 	bl	80053b4 <__pow5mult>
 800609c:	4681      	mov	r9, r0
 800609e:	b9e0      	cbnz	r0, 80060da <_strtod_l+0x78a>
 80060a0:	f04f 0900 	mov.w	r9, #0
 80060a4:	e66f      	b.n	8005d86 <_strtod_l+0x436>
 80060a6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80060aa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80060ae:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80060b2:	35e2      	adds	r5, #226	@ 0xe2
 80060b4:	fa01 f305 	lsl.w	r3, r1, r5
 80060b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80060ba:	9113      	str	r1, [sp, #76]	@ 0x4c
 80060bc:	e7ba      	b.n	8006034 <_strtod_l+0x6e4>
 80060be:	2300      	movs	r3, #0
 80060c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80060c2:	2301      	movs	r3, #1
 80060c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80060c6:	e7b5      	b.n	8006034 <_strtod_l+0x6e4>
 80060c8:	462a      	mov	r2, r5
 80060ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80060cc:	9805      	ldr	r0, [sp, #20]
 80060ce:	f7ff f9cb 	bl	8005468 <__lshift>
 80060d2:	901a      	str	r0, [sp, #104]	@ 0x68
 80060d4:	2800      	cmp	r0, #0
 80060d6:	d1d9      	bne.n	800608c <_strtod_l+0x73c>
 80060d8:	e655      	b.n	8005d86 <_strtod_l+0x436>
 80060da:	2e00      	cmp	r6, #0
 80060dc:	dd07      	ble.n	80060ee <_strtod_l+0x79e>
 80060de:	4649      	mov	r1, r9
 80060e0:	4632      	mov	r2, r6
 80060e2:	9805      	ldr	r0, [sp, #20]
 80060e4:	f7ff f9c0 	bl	8005468 <__lshift>
 80060e8:	4681      	mov	r9, r0
 80060ea:	2800      	cmp	r0, #0
 80060ec:	d0d8      	beq.n	80060a0 <_strtod_l+0x750>
 80060ee:	2f00      	cmp	r7, #0
 80060f0:	dd08      	ble.n	8006104 <_strtod_l+0x7b4>
 80060f2:	4641      	mov	r1, r8
 80060f4:	463a      	mov	r2, r7
 80060f6:	9805      	ldr	r0, [sp, #20]
 80060f8:	f7ff f9b6 	bl	8005468 <__lshift>
 80060fc:	4680      	mov	r8, r0
 80060fe:	2800      	cmp	r0, #0
 8006100:	f43f ae41 	beq.w	8005d86 <_strtod_l+0x436>
 8006104:	464a      	mov	r2, r9
 8006106:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006108:	9805      	ldr	r0, [sp, #20]
 800610a:	f7ff fa35 	bl	8005578 <__mdiff>
 800610e:	4604      	mov	r4, r0
 8006110:	2800      	cmp	r0, #0
 8006112:	f43f ae38 	beq.w	8005d86 <_strtod_l+0x436>
 8006116:	68c3      	ldr	r3, [r0, #12]
 8006118:	4641      	mov	r1, r8
 800611a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800611c:	2300      	movs	r3, #0
 800611e:	60c3      	str	r3, [r0, #12]
 8006120:	f7ff fa0e 	bl	8005540 <__mcmp>
 8006124:	2800      	cmp	r0, #0
 8006126:	da45      	bge.n	80061b4 <_strtod_l+0x864>
 8006128:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800612a:	ea53 030a 	orrs.w	r3, r3, sl
 800612e:	d16b      	bne.n	8006208 <_strtod_l+0x8b8>
 8006130:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006134:	2b00      	cmp	r3, #0
 8006136:	d167      	bne.n	8006208 <_strtod_l+0x8b8>
 8006138:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800613c:	0d1b      	lsrs	r3, r3, #20
 800613e:	051b      	lsls	r3, r3, #20
 8006140:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006144:	d960      	bls.n	8006208 <_strtod_l+0x8b8>
 8006146:	6963      	ldr	r3, [r4, #20]
 8006148:	b913      	cbnz	r3, 8006150 <_strtod_l+0x800>
 800614a:	6923      	ldr	r3, [r4, #16]
 800614c:	2b01      	cmp	r3, #1
 800614e:	dd5b      	ble.n	8006208 <_strtod_l+0x8b8>
 8006150:	4621      	mov	r1, r4
 8006152:	2201      	movs	r2, #1
 8006154:	9805      	ldr	r0, [sp, #20]
 8006156:	f7ff f987 	bl	8005468 <__lshift>
 800615a:	4641      	mov	r1, r8
 800615c:	4604      	mov	r4, r0
 800615e:	f7ff f9ef 	bl	8005540 <__mcmp>
 8006162:	2800      	cmp	r0, #0
 8006164:	dd50      	ble.n	8006208 <_strtod_l+0x8b8>
 8006166:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800616a:	9a08      	ldr	r2, [sp, #32]
 800616c:	0d1b      	lsrs	r3, r3, #20
 800616e:	051b      	lsls	r3, r3, #20
 8006170:	2a00      	cmp	r2, #0
 8006172:	d06a      	beq.n	800624a <_strtod_l+0x8fa>
 8006174:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006178:	d867      	bhi.n	800624a <_strtod_l+0x8fa>
 800617a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800617e:	f67f ae98 	bls.w	8005eb2 <_strtod_l+0x562>
 8006182:	4650      	mov	r0, sl
 8006184:	4659      	mov	r1, fp
 8006186:	4b09      	ldr	r3, [pc, #36]	@ (80061ac <_strtod_l+0x85c>)
 8006188:	2200      	movs	r2, #0
 800618a:	f7fa f9a5 	bl	80004d8 <__aeabi_dmul>
 800618e:	4b08      	ldr	r3, [pc, #32]	@ (80061b0 <_strtod_l+0x860>)
 8006190:	4682      	mov	sl, r0
 8006192:	400b      	ands	r3, r1
 8006194:	468b      	mov	fp, r1
 8006196:	2b00      	cmp	r3, #0
 8006198:	f47f ae00 	bne.w	8005d9c <_strtod_l+0x44c>
 800619c:	2322      	movs	r3, #34	@ 0x22
 800619e:	9a05      	ldr	r2, [sp, #20]
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	e5fb      	b.n	8005d9c <_strtod_l+0x44c>
 80061a4:	08007a20 	.word	0x08007a20
 80061a8:	fffffc02 	.word	0xfffffc02
 80061ac:	39500000 	.word	0x39500000
 80061b0:	7ff00000 	.word	0x7ff00000
 80061b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80061b8:	d165      	bne.n	8006286 <_strtod_l+0x936>
 80061ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80061bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061c0:	b35a      	cbz	r2, 800621a <_strtod_l+0x8ca>
 80061c2:	4a99      	ldr	r2, [pc, #612]	@ (8006428 <_strtod_l+0xad8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d12b      	bne.n	8006220 <_strtod_l+0x8d0>
 80061c8:	9b08      	ldr	r3, [sp, #32]
 80061ca:	4651      	mov	r1, sl
 80061cc:	b303      	cbz	r3, 8006210 <_strtod_l+0x8c0>
 80061ce:	465a      	mov	r2, fp
 80061d0:	4b96      	ldr	r3, [pc, #600]	@ (800642c <_strtod_l+0xadc>)
 80061d2:	4013      	ands	r3, r2
 80061d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80061d8:	f04f 32ff 	mov.w	r2, #4294967295
 80061dc:	d81b      	bhi.n	8006216 <_strtod_l+0x8c6>
 80061de:	0d1b      	lsrs	r3, r3, #20
 80061e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80061e4:	fa02 f303 	lsl.w	r3, r2, r3
 80061e8:	4299      	cmp	r1, r3
 80061ea:	d119      	bne.n	8006220 <_strtod_l+0x8d0>
 80061ec:	4b90      	ldr	r3, [pc, #576]	@ (8006430 <_strtod_l+0xae0>)
 80061ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d102      	bne.n	80061fa <_strtod_l+0x8aa>
 80061f4:	3101      	adds	r1, #1
 80061f6:	f43f adc6 	beq.w	8005d86 <_strtod_l+0x436>
 80061fa:	f04f 0a00 	mov.w	sl, #0
 80061fe:	4b8b      	ldr	r3, [pc, #556]	@ (800642c <_strtod_l+0xadc>)
 8006200:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006202:	401a      	ands	r2, r3
 8006204:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006208:	9b08      	ldr	r3, [sp, #32]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1b9      	bne.n	8006182 <_strtod_l+0x832>
 800620e:	e5c5      	b.n	8005d9c <_strtod_l+0x44c>
 8006210:	f04f 33ff 	mov.w	r3, #4294967295
 8006214:	e7e8      	b.n	80061e8 <_strtod_l+0x898>
 8006216:	4613      	mov	r3, r2
 8006218:	e7e6      	b.n	80061e8 <_strtod_l+0x898>
 800621a:	ea53 030a 	orrs.w	r3, r3, sl
 800621e:	d0a2      	beq.n	8006166 <_strtod_l+0x816>
 8006220:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006222:	b1db      	cbz	r3, 800625c <_strtod_l+0x90c>
 8006224:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006226:	4213      	tst	r3, r2
 8006228:	d0ee      	beq.n	8006208 <_strtod_l+0x8b8>
 800622a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800622c:	4650      	mov	r0, sl
 800622e:	4659      	mov	r1, fp
 8006230:	9a08      	ldr	r2, [sp, #32]
 8006232:	b1bb      	cbz	r3, 8006264 <_strtod_l+0x914>
 8006234:	f7ff fb68 	bl	8005908 <sulp>
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006240:	f7f9 ff94 	bl	800016c <__adddf3>
 8006244:	4682      	mov	sl, r0
 8006246:	468b      	mov	fp, r1
 8006248:	e7de      	b.n	8006208 <_strtod_l+0x8b8>
 800624a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800624e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006252:	f04f 3aff 	mov.w	sl, #4294967295
 8006256:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800625a:	e7d5      	b.n	8006208 <_strtod_l+0x8b8>
 800625c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800625e:	ea13 0f0a 	tst.w	r3, sl
 8006262:	e7e1      	b.n	8006228 <_strtod_l+0x8d8>
 8006264:	f7ff fb50 	bl	8005908 <sulp>
 8006268:	4602      	mov	r2, r0
 800626a:	460b      	mov	r3, r1
 800626c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006270:	f7f9 ff7a 	bl	8000168 <__aeabi_dsub>
 8006274:	2200      	movs	r2, #0
 8006276:	2300      	movs	r3, #0
 8006278:	4682      	mov	sl, r0
 800627a:	468b      	mov	fp, r1
 800627c:	f7fa fb94 	bl	80009a8 <__aeabi_dcmpeq>
 8006280:	2800      	cmp	r0, #0
 8006282:	d0c1      	beq.n	8006208 <_strtod_l+0x8b8>
 8006284:	e615      	b.n	8005eb2 <_strtod_l+0x562>
 8006286:	4641      	mov	r1, r8
 8006288:	4620      	mov	r0, r4
 800628a:	f7ff fac9 	bl	8005820 <__ratio>
 800628e:	2200      	movs	r2, #0
 8006290:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006294:	4606      	mov	r6, r0
 8006296:	460f      	mov	r7, r1
 8006298:	f7fa fb9a 	bl	80009d0 <__aeabi_dcmple>
 800629c:	2800      	cmp	r0, #0
 800629e:	d06d      	beq.n	800637c <_strtod_l+0xa2c>
 80062a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d178      	bne.n	8006398 <_strtod_l+0xa48>
 80062a6:	f1ba 0f00 	cmp.w	sl, #0
 80062aa:	d156      	bne.n	800635a <_strtod_l+0xa0a>
 80062ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d158      	bne.n	8006368 <_strtod_l+0xa18>
 80062b6:	2200      	movs	r2, #0
 80062b8:	4630      	mov	r0, r6
 80062ba:	4639      	mov	r1, r7
 80062bc:	4b5d      	ldr	r3, [pc, #372]	@ (8006434 <_strtod_l+0xae4>)
 80062be:	f7fa fb7d 	bl	80009bc <__aeabi_dcmplt>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	d157      	bne.n	8006376 <_strtod_l+0xa26>
 80062c6:	4630      	mov	r0, r6
 80062c8:	4639      	mov	r1, r7
 80062ca:	2200      	movs	r2, #0
 80062cc:	4b5a      	ldr	r3, [pc, #360]	@ (8006438 <_strtod_l+0xae8>)
 80062ce:	f7fa f903 	bl	80004d8 <__aeabi_dmul>
 80062d2:	4606      	mov	r6, r0
 80062d4:	460f      	mov	r7, r1
 80062d6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80062da:	9606      	str	r6, [sp, #24]
 80062dc:	9307      	str	r3, [sp, #28]
 80062de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062e2:	4d52      	ldr	r5, [pc, #328]	@ (800642c <_strtod_l+0xadc>)
 80062e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80062e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062ea:	401d      	ands	r5, r3
 80062ec:	4b53      	ldr	r3, [pc, #332]	@ (800643c <_strtod_l+0xaec>)
 80062ee:	429d      	cmp	r5, r3
 80062f0:	f040 80aa 	bne.w	8006448 <_strtod_l+0xaf8>
 80062f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062f6:	4650      	mov	r0, sl
 80062f8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80062fc:	4659      	mov	r1, fp
 80062fe:	f7ff f9cf 	bl	80056a0 <__ulp>
 8006302:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006306:	f7fa f8e7 	bl	80004d8 <__aeabi_dmul>
 800630a:	4652      	mov	r2, sl
 800630c:	465b      	mov	r3, fp
 800630e:	f7f9 ff2d 	bl	800016c <__adddf3>
 8006312:	460b      	mov	r3, r1
 8006314:	4945      	ldr	r1, [pc, #276]	@ (800642c <_strtod_l+0xadc>)
 8006316:	4a4a      	ldr	r2, [pc, #296]	@ (8006440 <_strtod_l+0xaf0>)
 8006318:	4019      	ands	r1, r3
 800631a:	4291      	cmp	r1, r2
 800631c:	4682      	mov	sl, r0
 800631e:	d942      	bls.n	80063a6 <_strtod_l+0xa56>
 8006320:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006322:	4b43      	ldr	r3, [pc, #268]	@ (8006430 <_strtod_l+0xae0>)
 8006324:	429a      	cmp	r2, r3
 8006326:	d103      	bne.n	8006330 <_strtod_l+0x9e0>
 8006328:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800632a:	3301      	adds	r3, #1
 800632c:	f43f ad2b 	beq.w	8005d86 <_strtod_l+0x436>
 8006330:	f04f 3aff 	mov.w	sl, #4294967295
 8006334:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006430 <_strtod_l+0xae0>
 8006338:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800633a:	9805      	ldr	r0, [sp, #20]
 800633c:	f7fe fe7e 	bl	800503c <_Bfree>
 8006340:	4649      	mov	r1, r9
 8006342:	9805      	ldr	r0, [sp, #20]
 8006344:	f7fe fe7a 	bl	800503c <_Bfree>
 8006348:	4641      	mov	r1, r8
 800634a:	9805      	ldr	r0, [sp, #20]
 800634c:	f7fe fe76 	bl	800503c <_Bfree>
 8006350:	4621      	mov	r1, r4
 8006352:	9805      	ldr	r0, [sp, #20]
 8006354:	f7fe fe72 	bl	800503c <_Bfree>
 8006358:	e618      	b.n	8005f8c <_strtod_l+0x63c>
 800635a:	f1ba 0f01 	cmp.w	sl, #1
 800635e:	d103      	bne.n	8006368 <_strtod_l+0xa18>
 8006360:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006362:	2b00      	cmp	r3, #0
 8006364:	f43f ada5 	beq.w	8005eb2 <_strtod_l+0x562>
 8006368:	2200      	movs	r2, #0
 800636a:	4b36      	ldr	r3, [pc, #216]	@ (8006444 <_strtod_l+0xaf4>)
 800636c:	2600      	movs	r6, #0
 800636e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006372:	4f30      	ldr	r7, [pc, #192]	@ (8006434 <_strtod_l+0xae4>)
 8006374:	e7b3      	b.n	80062de <_strtod_l+0x98e>
 8006376:	2600      	movs	r6, #0
 8006378:	4f2f      	ldr	r7, [pc, #188]	@ (8006438 <_strtod_l+0xae8>)
 800637a:	e7ac      	b.n	80062d6 <_strtod_l+0x986>
 800637c:	4630      	mov	r0, r6
 800637e:	4639      	mov	r1, r7
 8006380:	4b2d      	ldr	r3, [pc, #180]	@ (8006438 <_strtod_l+0xae8>)
 8006382:	2200      	movs	r2, #0
 8006384:	f7fa f8a8 	bl	80004d8 <__aeabi_dmul>
 8006388:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800638a:	4606      	mov	r6, r0
 800638c:	460f      	mov	r7, r1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0a1      	beq.n	80062d6 <_strtod_l+0x986>
 8006392:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006396:	e7a2      	b.n	80062de <_strtod_l+0x98e>
 8006398:	2200      	movs	r2, #0
 800639a:	4b26      	ldr	r3, [pc, #152]	@ (8006434 <_strtod_l+0xae4>)
 800639c:	4616      	mov	r6, r2
 800639e:	461f      	mov	r7, r3
 80063a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80063a4:	e79b      	b.n	80062de <_strtod_l+0x98e>
 80063a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80063aa:	9b08      	ldr	r3, [sp, #32]
 80063ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1c1      	bne.n	8006338 <_strtod_l+0x9e8>
 80063b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80063b8:	0d1b      	lsrs	r3, r3, #20
 80063ba:	051b      	lsls	r3, r3, #20
 80063bc:	429d      	cmp	r5, r3
 80063be:	d1bb      	bne.n	8006338 <_strtod_l+0x9e8>
 80063c0:	4630      	mov	r0, r6
 80063c2:	4639      	mov	r1, r7
 80063c4:	f7fa fbd0 	bl	8000b68 <__aeabi_d2lz>
 80063c8:	f7fa f858 	bl	800047c <__aeabi_l2d>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4630      	mov	r0, r6
 80063d2:	4639      	mov	r1, r7
 80063d4:	f7f9 fec8 	bl	8000168 <__aeabi_dsub>
 80063d8:	460b      	mov	r3, r1
 80063da:	4602      	mov	r2, r0
 80063dc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80063e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80063e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063e6:	ea46 060a 	orr.w	r6, r6, sl
 80063ea:	431e      	orrs	r6, r3
 80063ec:	d069      	beq.n	80064c2 <_strtod_l+0xb72>
 80063ee:	a30a      	add	r3, pc, #40	@ (adr r3, 8006418 <_strtod_l+0xac8>)
 80063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f4:	f7fa fae2 	bl	80009bc <__aeabi_dcmplt>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	f47f accf 	bne.w	8005d9c <_strtod_l+0x44c>
 80063fe:	a308      	add	r3, pc, #32	@ (adr r3, 8006420 <_strtod_l+0xad0>)
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006408:	f7fa faf6 	bl	80009f8 <__aeabi_dcmpgt>
 800640c:	2800      	cmp	r0, #0
 800640e:	d093      	beq.n	8006338 <_strtod_l+0x9e8>
 8006410:	e4c4      	b.n	8005d9c <_strtod_l+0x44c>
 8006412:	bf00      	nop
 8006414:	f3af 8000 	nop.w
 8006418:	94a03595 	.word	0x94a03595
 800641c:	3fdfffff 	.word	0x3fdfffff
 8006420:	35afe535 	.word	0x35afe535
 8006424:	3fe00000 	.word	0x3fe00000
 8006428:	000fffff 	.word	0x000fffff
 800642c:	7ff00000 	.word	0x7ff00000
 8006430:	7fefffff 	.word	0x7fefffff
 8006434:	3ff00000 	.word	0x3ff00000
 8006438:	3fe00000 	.word	0x3fe00000
 800643c:	7fe00000 	.word	0x7fe00000
 8006440:	7c9fffff 	.word	0x7c9fffff
 8006444:	bff00000 	.word	0xbff00000
 8006448:	9b08      	ldr	r3, [sp, #32]
 800644a:	b323      	cbz	r3, 8006496 <_strtod_l+0xb46>
 800644c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006450:	d821      	bhi.n	8006496 <_strtod_l+0xb46>
 8006452:	a327      	add	r3, pc, #156	@ (adr r3, 80064f0 <_strtod_l+0xba0>)
 8006454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006458:	4630      	mov	r0, r6
 800645a:	4639      	mov	r1, r7
 800645c:	f7fa fab8 	bl	80009d0 <__aeabi_dcmple>
 8006460:	b1a0      	cbz	r0, 800648c <_strtod_l+0xb3c>
 8006462:	4639      	mov	r1, r7
 8006464:	4630      	mov	r0, r6
 8006466:	f7fa fb0f 	bl	8000a88 <__aeabi_d2uiz>
 800646a:	2801      	cmp	r0, #1
 800646c:	bf38      	it	cc
 800646e:	2001      	movcc	r0, #1
 8006470:	f7f9 ffb8 	bl	80003e4 <__aeabi_ui2d>
 8006474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006476:	4606      	mov	r6, r0
 8006478:	460f      	mov	r7, r1
 800647a:	b9fb      	cbnz	r3, 80064bc <_strtod_l+0xb6c>
 800647c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006480:	9014      	str	r0, [sp, #80]	@ 0x50
 8006482:	9315      	str	r3, [sp, #84]	@ 0x54
 8006484:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006488:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800648c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800648e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006492:	1b5b      	subs	r3, r3, r5
 8006494:	9311      	str	r3, [sp, #68]	@ 0x44
 8006496:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800649a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800649e:	f7ff f8ff 	bl	80056a0 <__ulp>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4650      	mov	r0, sl
 80064a8:	4659      	mov	r1, fp
 80064aa:	f7fa f815 	bl	80004d8 <__aeabi_dmul>
 80064ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80064b2:	f7f9 fe5b 	bl	800016c <__adddf3>
 80064b6:	4682      	mov	sl, r0
 80064b8:	468b      	mov	fp, r1
 80064ba:	e776      	b.n	80063aa <_strtod_l+0xa5a>
 80064bc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80064c0:	e7e0      	b.n	8006484 <_strtod_l+0xb34>
 80064c2:	a30d      	add	r3, pc, #52	@ (adr r3, 80064f8 <_strtod_l+0xba8>)
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f7fa fa78 	bl	80009bc <__aeabi_dcmplt>
 80064cc:	e79e      	b.n	800640c <_strtod_l+0xabc>
 80064ce:	2300      	movs	r3, #0
 80064d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80064d4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	f7ff ba77 	b.w	80059ca <_strtod_l+0x7a>
 80064dc:	2a65      	cmp	r2, #101	@ 0x65
 80064de:	f43f ab6e 	beq.w	8005bbe <_strtod_l+0x26e>
 80064e2:	2a45      	cmp	r2, #69	@ 0x45
 80064e4:	f43f ab6b 	beq.w	8005bbe <_strtod_l+0x26e>
 80064e8:	2301      	movs	r3, #1
 80064ea:	f7ff bba6 	b.w	8005c3a <_strtod_l+0x2ea>
 80064ee:	bf00      	nop
 80064f0:	ffc00000 	.word	0xffc00000
 80064f4:	41dfffff 	.word	0x41dfffff
 80064f8:	94a03595 	.word	0x94a03595
 80064fc:	3fcfffff 	.word	0x3fcfffff

08006500 <_strtod_r>:
 8006500:	4b01      	ldr	r3, [pc, #4]	@ (8006508 <_strtod_r+0x8>)
 8006502:	f7ff ba25 	b.w	8005950 <_strtod_l>
 8006506:	bf00      	nop
 8006508:	20000068 	.word	0x20000068

0800650c <_strtol_l.constprop.0>:
 800650c:	2b24      	cmp	r3, #36	@ 0x24
 800650e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006512:	4686      	mov	lr, r0
 8006514:	4690      	mov	r8, r2
 8006516:	d801      	bhi.n	800651c <_strtol_l.constprop.0+0x10>
 8006518:	2b01      	cmp	r3, #1
 800651a:	d106      	bne.n	800652a <_strtol_l.constprop.0+0x1e>
 800651c:	f7fd fdbe 	bl	800409c <__errno>
 8006520:	2316      	movs	r3, #22
 8006522:	6003      	str	r3, [r0, #0]
 8006524:	2000      	movs	r0, #0
 8006526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800652a:	460d      	mov	r5, r1
 800652c:	4833      	ldr	r0, [pc, #204]	@ (80065fc <_strtol_l.constprop.0+0xf0>)
 800652e:	462a      	mov	r2, r5
 8006530:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006534:	5d06      	ldrb	r6, [r0, r4]
 8006536:	f016 0608 	ands.w	r6, r6, #8
 800653a:	d1f8      	bne.n	800652e <_strtol_l.constprop.0+0x22>
 800653c:	2c2d      	cmp	r4, #45	@ 0x2d
 800653e:	d12d      	bne.n	800659c <_strtol_l.constprop.0+0x90>
 8006540:	2601      	movs	r6, #1
 8006542:	782c      	ldrb	r4, [r5, #0]
 8006544:	1c95      	adds	r5, r2, #2
 8006546:	f033 0210 	bics.w	r2, r3, #16
 800654a:	d109      	bne.n	8006560 <_strtol_l.constprop.0+0x54>
 800654c:	2c30      	cmp	r4, #48	@ 0x30
 800654e:	d12a      	bne.n	80065a6 <_strtol_l.constprop.0+0x9a>
 8006550:	782a      	ldrb	r2, [r5, #0]
 8006552:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006556:	2a58      	cmp	r2, #88	@ 0x58
 8006558:	d125      	bne.n	80065a6 <_strtol_l.constprop.0+0x9a>
 800655a:	2310      	movs	r3, #16
 800655c:	786c      	ldrb	r4, [r5, #1]
 800655e:	3502      	adds	r5, #2
 8006560:	2200      	movs	r2, #0
 8006562:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006566:	f10c 3cff 	add.w	ip, ip, #4294967295
 800656a:	fbbc f9f3 	udiv	r9, ip, r3
 800656e:	4610      	mov	r0, r2
 8006570:	fb03 ca19 	mls	sl, r3, r9, ip
 8006574:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006578:	2f09      	cmp	r7, #9
 800657a:	d81b      	bhi.n	80065b4 <_strtol_l.constprop.0+0xa8>
 800657c:	463c      	mov	r4, r7
 800657e:	42a3      	cmp	r3, r4
 8006580:	dd27      	ble.n	80065d2 <_strtol_l.constprop.0+0xc6>
 8006582:	1c57      	adds	r7, r2, #1
 8006584:	d007      	beq.n	8006596 <_strtol_l.constprop.0+0x8a>
 8006586:	4581      	cmp	r9, r0
 8006588:	d320      	bcc.n	80065cc <_strtol_l.constprop.0+0xc0>
 800658a:	d101      	bne.n	8006590 <_strtol_l.constprop.0+0x84>
 800658c:	45a2      	cmp	sl, r4
 800658e:	db1d      	blt.n	80065cc <_strtol_l.constprop.0+0xc0>
 8006590:	2201      	movs	r2, #1
 8006592:	fb00 4003 	mla	r0, r0, r3, r4
 8006596:	f815 4b01 	ldrb.w	r4, [r5], #1
 800659a:	e7eb      	b.n	8006574 <_strtol_l.constprop.0+0x68>
 800659c:	2c2b      	cmp	r4, #43	@ 0x2b
 800659e:	bf04      	itt	eq
 80065a0:	782c      	ldrbeq	r4, [r5, #0]
 80065a2:	1c95      	addeq	r5, r2, #2
 80065a4:	e7cf      	b.n	8006546 <_strtol_l.constprop.0+0x3a>
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1da      	bne.n	8006560 <_strtol_l.constprop.0+0x54>
 80065aa:	2c30      	cmp	r4, #48	@ 0x30
 80065ac:	bf0c      	ite	eq
 80065ae:	2308      	moveq	r3, #8
 80065b0:	230a      	movne	r3, #10
 80065b2:	e7d5      	b.n	8006560 <_strtol_l.constprop.0+0x54>
 80065b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80065b8:	2f19      	cmp	r7, #25
 80065ba:	d801      	bhi.n	80065c0 <_strtol_l.constprop.0+0xb4>
 80065bc:	3c37      	subs	r4, #55	@ 0x37
 80065be:	e7de      	b.n	800657e <_strtol_l.constprop.0+0x72>
 80065c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80065c4:	2f19      	cmp	r7, #25
 80065c6:	d804      	bhi.n	80065d2 <_strtol_l.constprop.0+0xc6>
 80065c8:	3c57      	subs	r4, #87	@ 0x57
 80065ca:	e7d8      	b.n	800657e <_strtol_l.constprop.0+0x72>
 80065cc:	f04f 32ff 	mov.w	r2, #4294967295
 80065d0:	e7e1      	b.n	8006596 <_strtol_l.constprop.0+0x8a>
 80065d2:	1c53      	adds	r3, r2, #1
 80065d4:	d108      	bne.n	80065e8 <_strtol_l.constprop.0+0xdc>
 80065d6:	2322      	movs	r3, #34	@ 0x22
 80065d8:	4660      	mov	r0, ip
 80065da:	f8ce 3000 	str.w	r3, [lr]
 80065de:	f1b8 0f00 	cmp.w	r8, #0
 80065e2:	d0a0      	beq.n	8006526 <_strtol_l.constprop.0+0x1a>
 80065e4:	1e69      	subs	r1, r5, #1
 80065e6:	e006      	b.n	80065f6 <_strtol_l.constprop.0+0xea>
 80065e8:	b106      	cbz	r6, 80065ec <_strtol_l.constprop.0+0xe0>
 80065ea:	4240      	negs	r0, r0
 80065ec:	f1b8 0f00 	cmp.w	r8, #0
 80065f0:	d099      	beq.n	8006526 <_strtol_l.constprop.0+0x1a>
 80065f2:	2a00      	cmp	r2, #0
 80065f4:	d1f6      	bne.n	80065e4 <_strtol_l.constprop.0+0xd8>
 80065f6:	f8c8 1000 	str.w	r1, [r8]
 80065fa:	e794      	b.n	8006526 <_strtol_l.constprop.0+0x1a>
 80065fc:	08007a49 	.word	0x08007a49

08006600 <_strtol_r>:
 8006600:	f7ff bf84 	b.w	800650c <_strtol_l.constprop.0>

08006604 <__ssputs_r>:
 8006604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006608:	461f      	mov	r7, r3
 800660a:	688e      	ldr	r6, [r1, #8]
 800660c:	4682      	mov	sl, r0
 800660e:	42be      	cmp	r6, r7
 8006610:	460c      	mov	r4, r1
 8006612:	4690      	mov	r8, r2
 8006614:	680b      	ldr	r3, [r1, #0]
 8006616:	d82d      	bhi.n	8006674 <__ssputs_r+0x70>
 8006618:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800661c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006620:	d026      	beq.n	8006670 <__ssputs_r+0x6c>
 8006622:	6965      	ldr	r5, [r4, #20]
 8006624:	6909      	ldr	r1, [r1, #16]
 8006626:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800662a:	eba3 0901 	sub.w	r9, r3, r1
 800662e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006632:	1c7b      	adds	r3, r7, #1
 8006634:	444b      	add	r3, r9
 8006636:	106d      	asrs	r5, r5, #1
 8006638:	429d      	cmp	r5, r3
 800663a:	bf38      	it	cc
 800663c:	461d      	movcc	r5, r3
 800663e:	0553      	lsls	r3, r2, #21
 8006640:	d527      	bpl.n	8006692 <__ssputs_r+0x8e>
 8006642:	4629      	mov	r1, r5
 8006644:	f7fe fc2e 	bl	8004ea4 <_malloc_r>
 8006648:	4606      	mov	r6, r0
 800664a:	b360      	cbz	r0, 80066a6 <__ssputs_r+0xa2>
 800664c:	464a      	mov	r2, r9
 800664e:	6921      	ldr	r1, [r4, #16]
 8006650:	f000 fa14 	bl	8006a7c <memcpy>
 8006654:	89a3      	ldrh	r3, [r4, #12]
 8006656:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800665a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800665e:	81a3      	strh	r3, [r4, #12]
 8006660:	6126      	str	r6, [r4, #16]
 8006662:	444e      	add	r6, r9
 8006664:	6026      	str	r6, [r4, #0]
 8006666:	463e      	mov	r6, r7
 8006668:	6165      	str	r5, [r4, #20]
 800666a:	eba5 0509 	sub.w	r5, r5, r9
 800666e:	60a5      	str	r5, [r4, #8]
 8006670:	42be      	cmp	r6, r7
 8006672:	d900      	bls.n	8006676 <__ssputs_r+0x72>
 8006674:	463e      	mov	r6, r7
 8006676:	4632      	mov	r2, r6
 8006678:	4641      	mov	r1, r8
 800667a:	6820      	ldr	r0, [r4, #0]
 800667c:	f000 f9c2 	bl	8006a04 <memmove>
 8006680:	2000      	movs	r0, #0
 8006682:	68a3      	ldr	r3, [r4, #8]
 8006684:	1b9b      	subs	r3, r3, r6
 8006686:	60a3      	str	r3, [r4, #8]
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	4433      	add	r3, r6
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006692:	462a      	mov	r2, r5
 8006694:	f000 fd83 	bl	800719e <_realloc_r>
 8006698:	4606      	mov	r6, r0
 800669a:	2800      	cmp	r0, #0
 800669c:	d1e0      	bne.n	8006660 <__ssputs_r+0x5c>
 800669e:	4650      	mov	r0, sl
 80066a0:	6921      	ldr	r1, [r4, #16]
 80066a2:	f7fe fb8d 	bl	8004dc0 <_free_r>
 80066a6:	230c      	movs	r3, #12
 80066a8:	f8ca 3000 	str.w	r3, [sl]
 80066ac:	89a3      	ldrh	r3, [r4, #12]
 80066ae:	f04f 30ff 	mov.w	r0, #4294967295
 80066b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066b6:	81a3      	strh	r3, [r4, #12]
 80066b8:	e7e9      	b.n	800668e <__ssputs_r+0x8a>
	...

080066bc <_svfiprintf_r>:
 80066bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c0:	4698      	mov	r8, r3
 80066c2:	898b      	ldrh	r3, [r1, #12]
 80066c4:	4607      	mov	r7, r0
 80066c6:	061b      	lsls	r3, r3, #24
 80066c8:	460d      	mov	r5, r1
 80066ca:	4614      	mov	r4, r2
 80066cc:	b09d      	sub	sp, #116	@ 0x74
 80066ce:	d510      	bpl.n	80066f2 <_svfiprintf_r+0x36>
 80066d0:	690b      	ldr	r3, [r1, #16]
 80066d2:	b973      	cbnz	r3, 80066f2 <_svfiprintf_r+0x36>
 80066d4:	2140      	movs	r1, #64	@ 0x40
 80066d6:	f7fe fbe5 	bl	8004ea4 <_malloc_r>
 80066da:	6028      	str	r0, [r5, #0]
 80066dc:	6128      	str	r0, [r5, #16]
 80066de:	b930      	cbnz	r0, 80066ee <_svfiprintf_r+0x32>
 80066e0:	230c      	movs	r3, #12
 80066e2:	603b      	str	r3, [r7, #0]
 80066e4:	f04f 30ff 	mov.w	r0, #4294967295
 80066e8:	b01d      	add	sp, #116	@ 0x74
 80066ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ee:	2340      	movs	r3, #64	@ 0x40
 80066f0:	616b      	str	r3, [r5, #20]
 80066f2:	2300      	movs	r3, #0
 80066f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066f6:	2320      	movs	r3, #32
 80066f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066fc:	2330      	movs	r3, #48	@ 0x30
 80066fe:	f04f 0901 	mov.w	r9, #1
 8006702:	f8cd 800c 	str.w	r8, [sp, #12]
 8006706:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80068a0 <_svfiprintf_r+0x1e4>
 800670a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800670e:	4623      	mov	r3, r4
 8006710:	469a      	mov	sl, r3
 8006712:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006716:	b10a      	cbz	r2, 800671c <_svfiprintf_r+0x60>
 8006718:	2a25      	cmp	r2, #37	@ 0x25
 800671a:	d1f9      	bne.n	8006710 <_svfiprintf_r+0x54>
 800671c:	ebba 0b04 	subs.w	fp, sl, r4
 8006720:	d00b      	beq.n	800673a <_svfiprintf_r+0x7e>
 8006722:	465b      	mov	r3, fp
 8006724:	4622      	mov	r2, r4
 8006726:	4629      	mov	r1, r5
 8006728:	4638      	mov	r0, r7
 800672a:	f7ff ff6b 	bl	8006604 <__ssputs_r>
 800672e:	3001      	adds	r0, #1
 8006730:	f000 80a7 	beq.w	8006882 <_svfiprintf_r+0x1c6>
 8006734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006736:	445a      	add	r2, fp
 8006738:	9209      	str	r2, [sp, #36]	@ 0x24
 800673a:	f89a 3000 	ldrb.w	r3, [sl]
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 809f 	beq.w	8006882 <_svfiprintf_r+0x1c6>
 8006744:	2300      	movs	r3, #0
 8006746:	f04f 32ff 	mov.w	r2, #4294967295
 800674a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800674e:	f10a 0a01 	add.w	sl, sl, #1
 8006752:	9304      	str	r3, [sp, #16]
 8006754:	9307      	str	r3, [sp, #28]
 8006756:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800675a:	931a      	str	r3, [sp, #104]	@ 0x68
 800675c:	4654      	mov	r4, sl
 800675e:	2205      	movs	r2, #5
 8006760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006764:	484e      	ldr	r0, [pc, #312]	@ (80068a0 <_svfiprintf_r+0x1e4>)
 8006766:	f7fd fcc6 	bl	80040f6 <memchr>
 800676a:	9a04      	ldr	r2, [sp, #16]
 800676c:	b9d8      	cbnz	r0, 80067a6 <_svfiprintf_r+0xea>
 800676e:	06d0      	lsls	r0, r2, #27
 8006770:	bf44      	itt	mi
 8006772:	2320      	movmi	r3, #32
 8006774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006778:	0711      	lsls	r1, r2, #28
 800677a:	bf44      	itt	mi
 800677c:	232b      	movmi	r3, #43	@ 0x2b
 800677e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006782:	f89a 3000 	ldrb.w	r3, [sl]
 8006786:	2b2a      	cmp	r3, #42	@ 0x2a
 8006788:	d015      	beq.n	80067b6 <_svfiprintf_r+0xfa>
 800678a:	4654      	mov	r4, sl
 800678c:	2000      	movs	r0, #0
 800678e:	f04f 0c0a 	mov.w	ip, #10
 8006792:	9a07      	ldr	r2, [sp, #28]
 8006794:	4621      	mov	r1, r4
 8006796:	f811 3b01 	ldrb.w	r3, [r1], #1
 800679a:	3b30      	subs	r3, #48	@ 0x30
 800679c:	2b09      	cmp	r3, #9
 800679e:	d94b      	bls.n	8006838 <_svfiprintf_r+0x17c>
 80067a0:	b1b0      	cbz	r0, 80067d0 <_svfiprintf_r+0x114>
 80067a2:	9207      	str	r2, [sp, #28]
 80067a4:	e014      	b.n	80067d0 <_svfiprintf_r+0x114>
 80067a6:	eba0 0308 	sub.w	r3, r0, r8
 80067aa:	fa09 f303 	lsl.w	r3, r9, r3
 80067ae:	4313      	orrs	r3, r2
 80067b0:	46a2      	mov	sl, r4
 80067b2:	9304      	str	r3, [sp, #16]
 80067b4:	e7d2      	b.n	800675c <_svfiprintf_r+0xa0>
 80067b6:	9b03      	ldr	r3, [sp, #12]
 80067b8:	1d19      	adds	r1, r3, #4
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	9103      	str	r1, [sp, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	bfbb      	ittet	lt
 80067c2:	425b      	neglt	r3, r3
 80067c4:	f042 0202 	orrlt.w	r2, r2, #2
 80067c8:	9307      	strge	r3, [sp, #28]
 80067ca:	9307      	strlt	r3, [sp, #28]
 80067cc:	bfb8      	it	lt
 80067ce:	9204      	strlt	r2, [sp, #16]
 80067d0:	7823      	ldrb	r3, [r4, #0]
 80067d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80067d4:	d10a      	bne.n	80067ec <_svfiprintf_r+0x130>
 80067d6:	7863      	ldrb	r3, [r4, #1]
 80067d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80067da:	d132      	bne.n	8006842 <_svfiprintf_r+0x186>
 80067dc:	9b03      	ldr	r3, [sp, #12]
 80067de:	3402      	adds	r4, #2
 80067e0:	1d1a      	adds	r2, r3, #4
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	9203      	str	r2, [sp, #12]
 80067e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067ea:	9305      	str	r3, [sp, #20]
 80067ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80068a4 <_svfiprintf_r+0x1e8>
 80067f0:	2203      	movs	r2, #3
 80067f2:	4650      	mov	r0, sl
 80067f4:	7821      	ldrb	r1, [r4, #0]
 80067f6:	f7fd fc7e 	bl	80040f6 <memchr>
 80067fa:	b138      	cbz	r0, 800680c <_svfiprintf_r+0x150>
 80067fc:	2240      	movs	r2, #64	@ 0x40
 80067fe:	9b04      	ldr	r3, [sp, #16]
 8006800:	eba0 000a 	sub.w	r0, r0, sl
 8006804:	4082      	lsls	r2, r0
 8006806:	4313      	orrs	r3, r2
 8006808:	3401      	adds	r4, #1
 800680a:	9304      	str	r3, [sp, #16]
 800680c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006810:	2206      	movs	r2, #6
 8006812:	4825      	ldr	r0, [pc, #148]	@ (80068a8 <_svfiprintf_r+0x1ec>)
 8006814:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006818:	f7fd fc6d 	bl	80040f6 <memchr>
 800681c:	2800      	cmp	r0, #0
 800681e:	d036      	beq.n	800688e <_svfiprintf_r+0x1d2>
 8006820:	4b22      	ldr	r3, [pc, #136]	@ (80068ac <_svfiprintf_r+0x1f0>)
 8006822:	bb1b      	cbnz	r3, 800686c <_svfiprintf_r+0x1b0>
 8006824:	9b03      	ldr	r3, [sp, #12]
 8006826:	3307      	adds	r3, #7
 8006828:	f023 0307 	bic.w	r3, r3, #7
 800682c:	3308      	adds	r3, #8
 800682e:	9303      	str	r3, [sp, #12]
 8006830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006832:	4433      	add	r3, r6
 8006834:	9309      	str	r3, [sp, #36]	@ 0x24
 8006836:	e76a      	b.n	800670e <_svfiprintf_r+0x52>
 8006838:	460c      	mov	r4, r1
 800683a:	2001      	movs	r0, #1
 800683c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006840:	e7a8      	b.n	8006794 <_svfiprintf_r+0xd8>
 8006842:	2300      	movs	r3, #0
 8006844:	f04f 0c0a 	mov.w	ip, #10
 8006848:	4619      	mov	r1, r3
 800684a:	3401      	adds	r4, #1
 800684c:	9305      	str	r3, [sp, #20]
 800684e:	4620      	mov	r0, r4
 8006850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006854:	3a30      	subs	r2, #48	@ 0x30
 8006856:	2a09      	cmp	r2, #9
 8006858:	d903      	bls.n	8006862 <_svfiprintf_r+0x1a6>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d0c6      	beq.n	80067ec <_svfiprintf_r+0x130>
 800685e:	9105      	str	r1, [sp, #20]
 8006860:	e7c4      	b.n	80067ec <_svfiprintf_r+0x130>
 8006862:	4604      	mov	r4, r0
 8006864:	2301      	movs	r3, #1
 8006866:	fb0c 2101 	mla	r1, ip, r1, r2
 800686a:	e7f0      	b.n	800684e <_svfiprintf_r+0x192>
 800686c:	ab03      	add	r3, sp, #12
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	462a      	mov	r2, r5
 8006872:	4638      	mov	r0, r7
 8006874:	4b0e      	ldr	r3, [pc, #56]	@ (80068b0 <_svfiprintf_r+0x1f4>)
 8006876:	a904      	add	r1, sp, #16
 8006878:	f7fc fcca 	bl	8003210 <_printf_float>
 800687c:	1c42      	adds	r2, r0, #1
 800687e:	4606      	mov	r6, r0
 8006880:	d1d6      	bne.n	8006830 <_svfiprintf_r+0x174>
 8006882:	89ab      	ldrh	r3, [r5, #12]
 8006884:	065b      	lsls	r3, r3, #25
 8006886:	f53f af2d 	bmi.w	80066e4 <_svfiprintf_r+0x28>
 800688a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800688c:	e72c      	b.n	80066e8 <_svfiprintf_r+0x2c>
 800688e:	ab03      	add	r3, sp, #12
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	462a      	mov	r2, r5
 8006894:	4638      	mov	r0, r7
 8006896:	4b06      	ldr	r3, [pc, #24]	@ (80068b0 <_svfiprintf_r+0x1f4>)
 8006898:	a904      	add	r1, sp, #16
 800689a:	f7fc ff57 	bl	800374c <_printf_i>
 800689e:	e7ed      	b.n	800687c <_svfiprintf_r+0x1c0>
 80068a0:	08007b49 	.word	0x08007b49
 80068a4:	08007b4f 	.word	0x08007b4f
 80068a8:	08007b53 	.word	0x08007b53
 80068ac:	08003211 	.word	0x08003211
 80068b0:	08006605 	.word	0x08006605

080068b4 <__sflush_r>:
 80068b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ba:	0716      	lsls	r6, r2, #28
 80068bc:	4605      	mov	r5, r0
 80068be:	460c      	mov	r4, r1
 80068c0:	d454      	bmi.n	800696c <__sflush_r+0xb8>
 80068c2:	684b      	ldr	r3, [r1, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	dc02      	bgt.n	80068ce <__sflush_r+0x1a>
 80068c8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	dd48      	ble.n	8006960 <__sflush_r+0xac>
 80068ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068d0:	2e00      	cmp	r6, #0
 80068d2:	d045      	beq.n	8006960 <__sflush_r+0xac>
 80068d4:	2300      	movs	r3, #0
 80068d6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80068da:	682f      	ldr	r7, [r5, #0]
 80068dc:	6a21      	ldr	r1, [r4, #32]
 80068de:	602b      	str	r3, [r5, #0]
 80068e0:	d030      	beq.n	8006944 <__sflush_r+0x90>
 80068e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80068e4:	89a3      	ldrh	r3, [r4, #12]
 80068e6:	0759      	lsls	r1, r3, #29
 80068e8:	d505      	bpl.n	80068f6 <__sflush_r+0x42>
 80068ea:	6863      	ldr	r3, [r4, #4]
 80068ec:	1ad2      	subs	r2, r2, r3
 80068ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80068f0:	b10b      	cbz	r3, 80068f6 <__sflush_r+0x42>
 80068f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80068f4:	1ad2      	subs	r2, r2, r3
 80068f6:	2300      	movs	r3, #0
 80068f8:	4628      	mov	r0, r5
 80068fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068fc:	6a21      	ldr	r1, [r4, #32]
 80068fe:	47b0      	blx	r6
 8006900:	1c43      	adds	r3, r0, #1
 8006902:	89a3      	ldrh	r3, [r4, #12]
 8006904:	d106      	bne.n	8006914 <__sflush_r+0x60>
 8006906:	6829      	ldr	r1, [r5, #0]
 8006908:	291d      	cmp	r1, #29
 800690a:	d82b      	bhi.n	8006964 <__sflush_r+0xb0>
 800690c:	4a28      	ldr	r2, [pc, #160]	@ (80069b0 <__sflush_r+0xfc>)
 800690e:	410a      	asrs	r2, r1
 8006910:	07d6      	lsls	r6, r2, #31
 8006912:	d427      	bmi.n	8006964 <__sflush_r+0xb0>
 8006914:	2200      	movs	r2, #0
 8006916:	6062      	str	r2, [r4, #4]
 8006918:	6922      	ldr	r2, [r4, #16]
 800691a:	04d9      	lsls	r1, r3, #19
 800691c:	6022      	str	r2, [r4, #0]
 800691e:	d504      	bpl.n	800692a <__sflush_r+0x76>
 8006920:	1c42      	adds	r2, r0, #1
 8006922:	d101      	bne.n	8006928 <__sflush_r+0x74>
 8006924:	682b      	ldr	r3, [r5, #0]
 8006926:	b903      	cbnz	r3, 800692a <__sflush_r+0x76>
 8006928:	6560      	str	r0, [r4, #84]	@ 0x54
 800692a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800692c:	602f      	str	r7, [r5, #0]
 800692e:	b1b9      	cbz	r1, 8006960 <__sflush_r+0xac>
 8006930:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006934:	4299      	cmp	r1, r3
 8006936:	d002      	beq.n	800693e <__sflush_r+0x8a>
 8006938:	4628      	mov	r0, r5
 800693a:	f7fe fa41 	bl	8004dc0 <_free_r>
 800693e:	2300      	movs	r3, #0
 8006940:	6363      	str	r3, [r4, #52]	@ 0x34
 8006942:	e00d      	b.n	8006960 <__sflush_r+0xac>
 8006944:	2301      	movs	r3, #1
 8006946:	4628      	mov	r0, r5
 8006948:	47b0      	blx	r6
 800694a:	4602      	mov	r2, r0
 800694c:	1c50      	adds	r0, r2, #1
 800694e:	d1c9      	bne.n	80068e4 <__sflush_r+0x30>
 8006950:	682b      	ldr	r3, [r5, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d0c6      	beq.n	80068e4 <__sflush_r+0x30>
 8006956:	2b1d      	cmp	r3, #29
 8006958:	d001      	beq.n	800695e <__sflush_r+0xaa>
 800695a:	2b16      	cmp	r3, #22
 800695c:	d11d      	bne.n	800699a <__sflush_r+0xe6>
 800695e:	602f      	str	r7, [r5, #0]
 8006960:	2000      	movs	r0, #0
 8006962:	e021      	b.n	80069a8 <__sflush_r+0xf4>
 8006964:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006968:	b21b      	sxth	r3, r3
 800696a:	e01a      	b.n	80069a2 <__sflush_r+0xee>
 800696c:	690f      	ldr	r7, [r1, #16]
 800696e:	2f00      	cmp	r7, #0
 8006970:	d0f6      	beq.n	8006960 <__sflush_r+0xac>
 8006972:	0793      	lsls	r3, r2, #30
 8006974:	bf18      	it	ne
 8006976:	2300      	movne	r3, #0
 8006978:	680e      	ldr	r6, [r1, #0]
 800697a:	bf08      	it	eq
 800697c:	694b      	ldreq	r3, [r1, #20]
 800697e:	1bf6      	subs	r6, r6, r7
 8006980:	600f      	str	r7, [r1, #0]
 8006982:	608b      	str	r3, [r1, #8]
 8006984:	2e00      	cmp	r6, #0
 8006986:	ddeb      	ble.n	8006960 <__sflush_r+0xac>
 8006988:	4633      	mov	r3, r6
 800698a:	463a      	mov	r2, r7
 800698c:	4628      	mov	r0, r5
 800698e:	6a21      	ldr	r1, [r4, #32]
 8006990:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006994:	47e0      	blx	ip
 8006996:	2800      	cmp	r0, #0
 8006998:	dc07      	bgt.n	80069aa <__sflush_r+0xf6>
 800699a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800699e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069a2:	f04f 30ff 	mov.w	r0, #4294967295
 80069a6:	81a3      	strh	r3, [r4, #12]
 80069a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069aa:	4407      	add	r7, r0
 80069ac:	1a36      	subs	r6, r6, r0
 80069ae:	e7e9      	b.n	8006984 <__sflush_r+0xd0>
 80069b0:	dfbffffe 	.word	0xdfbffffe

080069b4 <_fflush_r>:
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	690b      	ldr	r3, [r1, #16]
 80069b8:	4605      	mov	r5, r0
 80069ba:	460c      	mov	r4, r1
 80069bc:	b913      	cbnz	r3, 80069c4 <_fflush_r+0x10>
 80069be:	2500      	movs	r5, #0
 80069c0:	4628      	mov	r0, r5
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	b118      	cbz	r0, 80069ce <_fflush_r+0x1a>
 80069c6:	6a03      	ldr	r3, [r0, #32]
 80069c8:	b90b      	cbnz	r3, 80069ce <_fflush_r+0x1a>
 80069ca:	f7fd fa7b 	bl	8003ec4 <__sinit>
 80069ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d0f3      	beq.n	80069be <_fflush_r+0xa>
 80069d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80069d8:	07d0      	lsls	r0, r2, #31
 80069da:	d404      	bmi.n	80069e6 <_fflush_r+0x32>
 80069dc:	0599      	lsls	r1, r3, #22
 80069de:	d402      	bmi.n	80069e6 <_fflush_r+0x32>
 80069e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069e2:	f7fd fb86 	bl	80040f2 <__retarget_lock_acquire_recursive>
 80069e6:	4628      	mov	r0, r5
 80069e8:	4621      	mov	r1, r4
 80069ea:	f7ff ff63 	bl	80068b4 <__sflush_r>
 80069ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069f0:	4605      	mov	r5, r0
 80069f2:	07da      	lsls	r2, r3, #31
 80069f4:	d4e4      	bmi.n	80069c0 <_fflush_r+0xc>
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	059b      	lsls	r3, r3, #22
 80069fa:	d4e1      	bmi.n	80069c0 <_fflush_r+0xc>
 80069fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069fe:	f7fd fb79 	bl	80040f4 <__retarget_lock_release_recursive>
 8006a02:	e7dd      	b.n	80069c0 <_fflush_r+0xc>

08006a04 <memmove>:
 8006a04:	4288      	cmp	r0, r1
 8006a06:	b510      	push	{r4, lr}
 8006a08:	eb01 0402 	add.w	r4, r1, r2
 8006a0c:	d902      	bls.n	8006a14 <memmove+0x10>
 8006a0e:	4284      	cmp	r4, r0
 8006a10:	4623      	mov	r3, r4
 8006a12:	d807      	bhi.n	8006a24 <memmove+0x20>
 8006a14:	1e43      	subs	r3, r0, #1
 8006a16:	42a1      	cmp	r1, r4
 8006a18:	d008      	beq.n	8006a2c <memmove+0x28>
 8006a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a22:	e7f8      	b.n	8006a16 <memmove+0x12>
 8006a24:	4601      	mov	r1, r0
 8006a26:	4402      	add	r2, r0
 8006a28:	428a      	cmp	r2, r1
 8006a2a:	d100      	bne.n	8006a2e <memmove+0x2a>
 8006a2c:	bd10      	pop	{r4, pc}
 8006a2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a36:	e7f7      	b.n	8006a28 <memmove+0x24>

08006a38 <strncmp>:
 8006a38:	b510      	push	{r4, lr}
 8006a3a:	b16a      	cbz	r2, 8006a58 <strncmp+0x20>
 8006a3c:	3901      	subs	r1, #1
 8006a3e:	1884      	adds	r4, r0, r2
 8006a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a44:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d103      	bne.n	8006a54 <strncmp+0x1c>
 8006a4c:	42a0      	cmp	r0, r4
 8006a4e:	d001      	beq.n	8006a54 <strncmp+0x1c>
 8006a50:	2a00      	cmp	r2, #0
 8006a52:	d1f5      	bne.n	8006a40 <strncmp+0x8>
 8006a54:	1ad0      	subs	r0, r2, r3
 8006a56:	bd10      	pop	{r4, pc}
 8006a58:	4610      	mov	r0, r2
 8006a5a:	e7fc      	b.n	8006a56 <strncmp+0x1e>

08006a5c <_sbrk_r>:
 8006a5c:	b538      	push	{r3, r4, r5, lr}
 8006a5e:	2300      	movs	r3, #0
 8006a60:	4d05      	ldr	r5, [pc, #20]	@ (8006a78 <_sbrk_r+0x1c>)
 8006a62:	4604      	mov	r4, r0
 8006a64:	4608      	mov	r0, r1
 8006a66:	602b      	str	r3, [r5, #0]
 8006a68:	f7fa fac4 	bl	8000ff4 <_sbrk>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d102      	bne.n	8006a76 <_sbrk_r+0x1a>
 8006a70:	682b      	ldr	r3, [r5, #0]
 8006a72:	b103      	cbz	r3, 8006a76 <_sbrk_r+0x1a>
 8006a74:	6023      	str	r3, [r4, #0]
 8006a76:	bd38      	pop	{r3, r4, r5, pc}
 8006a78:	2000038c 	.word	0x2000038c

08006a7c <memcpy>:
 8006a7c:	440a      	add	r2, r1
 8006a7e:	4291      	cmp	r1, r2
 8006a80:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a84:	d100      	bne.n	8006a88 <memcpy+0xc>
 8006a86:	4770      	bx	lr
 8006a88:	b510      	push	{r4, lr}
 8006a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a8e:	4291      	cmp	r1, r2
 8006a90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a94:	d1f9      	bne.n	8006a8a <memcpy+0xe>
 8006a96:	bd10      	pop	{r4, pc}

08006a98 <nan>:
 8006a98:	2000      	movs	r0, #0
 8006a9a:	4901      	ldr	r1, [pc, #4]	@ (8006aa0 <nan+0x8>)
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	7ff80000 	.word	0x7ff80000

08006aa4 <__assert_func>:
 8006aa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006aa6:	4614      	mov	r4, r2
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	4b09      	ldr	r3, [pc, #36]	@ (8006ad0 <__assert_func+0x2c>)
 8006aac:	4605      	mov	r5, r0
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68d8      	ldr	r0, [r3, #12]
 8006ab2:	b954      	cbnz	r4, 8006aca <__assert_func+0x26>
 8006ab4:	4b07      	ldr	r3, [pc, #28]	@ (8006ad4 <__assert_func+0x30>)
 8006ab6:	461c      	mov	r4, r3
 8006ab8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006abc:	9100      	str	r1, [sp, #0]
 8006abe:	462b      	mov	r3, r5
 8006ac0:	4905      	ldr	r1, [pc, #20]	@ (8006ad8 <__assert_func+0x34>)
 8006ac2:	f000 fba7 	bl	8007214 <fiprintf>
 8006ac6:	f000 fbb7 	bl	8007238 <abort>
 8006aca:	4b04      	ldr	r3, [pc, #16]	@ (8006adc <__assert_func+0x38>)
 8006acc:	e7f4      	b.n	8006ab8 <__assert_func+0x14>
 8006ace:	bf00      	nop
 8006ad0:	20000018 	.word	0x20000018
 8006ad4:	08007b9d 	.word	0x08007b9d
 8006ad8:	08007b6f 	.word	0x08007b6f
 8006adc:	08007b62 	.word	0x08007b62

08006ae0 <_calloc_r>:
 8006ae0:	b570      	push	{r4, r5, r6, lr}
 8006ae2:	fba1 5402 	umull	r5, r4, r1, r2
 8006ae6:	b93c      	cbnz	r4, 8006af8 <_calloc_r+0x18>
 8006ae8:	4629      	mov	r1, r5
 8006aea:	f7fe f9db 	bl	8004ea4 <_malloc_r>
 8006aee:	4606      	mov	r6, r0
 8006af0:	b928      	cbnz	r0, 8006afe <_calloc_r+0x1e>
 8006af2:	2600      	movs	r6, #0
 8006af4:	4630      	mov	r0, r6
 8006af6:	bd70      	pop	{r4, r5, r6, pc}
 8006af8:	220c      	movs	r2, #12
 8006afa:	6002      	str	r2, [r0, #0]
 8006afc:	e7f9      	b.n	8006af2 <_calloc_r+0x12>
 8006afe:	462a      	mov	r2, r5
 8006b00:	4621      	mov	r1, r4
 8006b02:	f7fd fa78 	bl	8003ff6 <memset>
 8006b06:	e7f5      	b.n	8006af4 <_calloc_r+0x14>

08006b08 <rshift>:
 8006b08:	6903      	ldr	r3, [r0, #16]
 8006b0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b0e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006b12:	f100 0414 	add.w	r4, r0, #20
 8006b16:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006b1a:	dd46      	ble.n	8006baa <rshift+0xa2>
 8006b1c:	f011 011f 	ands.w	r1, r1, #31
 8006b20:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006b24:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006b28:	d10c      	bne.n	8006b44 <rshift+0x3c>
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	f100 0710 	add.w	r7, r0, #16
 8006b30:	42b1      	cmp	r1, r6
 8006b32:	d335      	bcc.n	8006ba0 <rshift+0x98>
 8006b34:	1a9b      	subs	r3, r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	1eea      	subs	r2, r5, #3
 8006b3a:	4296      	cmp	r6, r2
 8006b3c:	bf38      	it	cc
 8006b3e:	2300      	movcc	r3, #0
 8006b40:	4423      	add	r3, r4
 8006b42:	e015      	b.n	8006b70 <rshift+0x68>
 8006b44:	46a1      	mov	r9, r4
 8006b46:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006b4a:	f1c1 0820 	rsb	r8, r1, #32
 8006b4e:	40cf      	lsrs	r7, r1
 8006b50:	f105 0e04 	add.w	lr, r5, #4
 8006b54:	4576      	cmp	r6, lr
 8006b56:	46f4      	mov	ip, lr
 8006b58:	d816      	bhi.n	8006b88 <rshift+0x80>
 8006b5a:	1a9a      	subs	r2, r3, r2
 8006b5c:	0092      	lsls	r2, r2, #2
 8006b5e:	3a04      	subs	r2, #4
 8006b60:	3501      	adds	r5, #1
 8006b62:	42ae      	cmp	r6, r5
 8006b64:	bf38      	it	cc
 8006b66:	2200      	movcc	r2, #0
 8006b68:	18a3      	adds	r3, r4, r2
 8006b6a:	50a7      	str	r7, [r4, r2]
 8006b6c:	b107      	cbz	r7, 8006b70 <rshift+0x68>
 8006b6e:	3304      	adds	r3, #4
 8006b70:	42a3      	cmp	r3, r4
 8006b72:	eba3 0204 	sub.w	r2, r3, r4
 8006b76:	bf08      	it	eq
 8006b78:	2300      	moveq	r3, #0
 8006b7a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006b7e:	6102      	str	r2, [r0, #16]
 8006b80:	bf08      	it	eq
 8006b82:	6143      	streq	r3, [r0, #20]
 8006b84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b88:	f8dc c000 	ldr.w	ip, [ip]
 8006b8c:	fa0c fc08 	lsl.w	ip, ip, r8
 8006b90:	ea4c 0707 	orr.w	r7, ip, r7
 8006b94:	f849 7b04 	str.w	r7, [r9], #4
 8006b98:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006b9c:	40cf      	lsrs	r7, r1
 8006b9e:	e7d9      	b.n	8006b54 <rshift+0x4c>
 8006ba0:	f851 cb04 	ldr.w	ip, [r1], #4
 8006ba4:	f847 cf04 	str.w	ip, [r7, #4]!
 8006ba8:	e7c2      	b.n	8006b30 <rshift+0x28>
 8006baa:	4623      	mov	r3, r4
 8006bac:	e7e0      	b.n	8006b70 <rshift+0x68>

08006bae <__hexdig_fun>:
 8006bae:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006bb2:	2b09      	cmp	r3, #9
 8006bb4:	d802      	bhi.n	8006bbc <__hexdig_fun+0xe>
 8006bb6:	3820      	subs	r0, #32
 8006bb8:	b2c0      	uxtb	r0, r0
 8006bba:	4770      	bx	lr
 8006bbc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006bc0:	2b05      	cmp	r3, #5
 8006bc2:	d801      	bhi.n	8006bc8 <__hexdig_fun+0x1a>
 8006bc4:	3847      	subs	r0, #71	@ 0x47
 8006bc6:	e7f7      	b.n	8006bb8 <__hexdig_fun+0xa>
 8006bc8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006bcc:	2b05      	cmp	r3, #5
 8006bce:	d801      	bhi.n	8006bd4 <__hexdig_fun+0x26>
 8006bd0:	3827      	subs	r0, #39	@ 0x27
 8006bd2:	e7f1      	b.n	8006bb8 <__hexdig_fun+0xa>
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	4770      	bx	lr

08006bd8 <__gethex>:
 8006bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bdc:	468a      	mov	sl, r1
 8006bde:	4690      	mov	r8, r2
 8006be0:	b085      	sub	sp, #20
 8006be2:	9302      	str	r3, [sp, #8]
 8006be4:	680b      	ldr	r3, [r1, #0]
 8006be6:	9001      	str	r0, [sp, #4]
 8006be8:	1c9c      	adds	r4, r3, #2
 8006bea:	46a1      	mov	r9, r4
 8006bec:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006bf0:	2830      	cmp	r0, #48	@ 0x30
 8006bf2:	d0fa      	beq.n	8006bea <__gethex+0x12>
 8006bf4:	eba9 0303 	sub.w	r3, r9, r3
 8006bf8:	f1a3 0b02 	sub.w	fp, r3, #2
 8006bfc:	f7ff ffd7 	bl	8006bae <__hexdig_fun>
 8006c00:	4605      	mov	r5, r0
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d168      	bne.n	8006cd8 <__gethex+0x100>
 8006c06:	2201      	movs	r2, #1
 8006c08:	4648      	mov	r0, r9
 8006c0a:	499f      	ldr	r1, [pc, #636]	@ (8006e88 <__gethex+0x2b0>)
 8006c0c:	f7ff ff14 	bl	8006a38 <strncmp>
 8006c10:	4607      	mov	r7, r0
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d167      	bne.n	8006ce6 <__gethex+0x10e>
 8006c16:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006c1a:	4626      	mov	r6, r4
 8006c1c:	f7ff ffc7 	bl	8006bae <__hexdig_fun>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d062      	beq.n	8006cea <__gethex+0x112>
 8006c24:	4623      	mov	r3, r4
 8006c26:	7818      	ldrb	r0, [r3, #0]
 8006c28:	4699      	mov	r9, r3
 8006c2a:	2830      	cmp	r0, #48	@ 0x30
 8006c2c:	f103 0301 	add.w	r3, r3, #1
 8006c30:	d0f9      	beq.n	8006c26 <__gethex+0x4e>
 8006c32:	f7ff ffbc 	bl	8006bae <__hexdig_fun>
 8006c36:	fab0 f580 	clz	r5, r0
 8006c3a:	f04f 0b01 	mov.w	fp, #1
 8006c3e:	096d      	lsrs	r5, r5, #5
 8006c40:	464a      	mov	r2, r9
 8006c42:	4616      	mov	r6, r2
 8006c44:	7830      	ldrb	r0, [r6, #0]
 8006c46:	3201      	adds	r2, #1
 8006c48:	f7ff ffb1 	bl	8006bae <__hexdig_fun>
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d1f8      	bne.n	8006c42 <__gethex+0x6a>
 8006c50:	2201      	movs	r2, #1
 8006c52:	4630      	mov	r0, r6
 8006c54:	498c      	ldr	r1, [pc, #560]	@ (8006e88 <__gethex+0x2b0>)
 8006c56:	f7ff feef 	bl	8006a38 <strncmp>
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	d13f      	bne.n	8006cde <__gethex+0x106>
 8006c5e:	b944      	cbnz	r4, 8006c72 <__gethex+0x9a>
 8006c60:	1c74      	adds	r4, r6, #1
 8006c62:	4622      	mov	r2, r4
 8006c64:	4616      	mov	r6, r2
 8006c66:	7830      	ldrb	r0, [r6, #0]
 8006c68:	3201      	adds	r2, #1
 8006c6a:	f7ff ffa0 	bl	8006bae <__hexdig_fun>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d1f8      	bne.n	8006c64 <__gethex+0x8c>
 8006c72:	1ba4      	subs	r4, r4, r6
 8006c74:	00a7      	lsls	r7, r4, #2
 8006c76:	7833      	ldrb	r3, [r6, #0]
 8006c78:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006c7c:	2b50      	cmp	r3, #80	@ 0x50
 8006c7e:	d13e      	bne.n	8006cfe <__gethex+0x126>
 8006c80:	7873      	ldrb	r3, [r6, #1]
 8006c82:	2b2b      	cmp	r3, #43	@ 0x2b
 8006c84:	d033      	beq.n	8006cee <__gethex+0x116>
 8006c86:	2b2d      	cmp	r3, #45	@ 0x2d
 8006c88:	d034      	beq.n	8006cf4 <__gethex+0x11c>
 8006c8a:	2400      	movs	r4, #0
 8006c8c:	1c71      	adds	r1, r6, #1
 8006c8e:	7808      	ldrb	r0, [r1, #0]
 8006c90:	f7ff ff8d 	bl	8006bae <__hexdig_fun>
 8006c94:	1e43      	subs	r3, r0, #1
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b18      	cmp	r3, #24
 8006c9a:	d830      	bhi.n	8006cfe <__gethex+0x126>
 8006c9c:	f1a0 0210 	sub.w	r2, r0, #16
 8006ca0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006ca4:	f7ff ff83 	bl	8006bae <__hexdig_fun>
 8006ca8:	f100 3cff 	add.w	ip, r0, #4294967295
 8006cac:	fa5f fc8c 	uxtb.w	ip, ip
 8006cb0:	f1bc 0f18 	cmp.w	ip, #24
 8006cb4:	f04f 030a 	mov.w	r3, #10
 8006cb8:	d91e      	bls.n	8006cf8 <__gethex+0x120>
 8006cba:	b104      	cbz	r4, 8006cbe <__gethex+0xe6>
 8006cbc:	4252      	negs	r2, r2
 8006cbe:	4417      	add	r7, r2
 8006cc0:	f8ca 1000 	str.w	r1, [sl]
 8006cc4:	b1ed      	cbz	r5, 8006d02 <__gethex+0x12a>
 8006cc6:	f1bb 0f00 	cmp.w	fp, #0
 8006cca:	bf0c      	ite	eq
 8006ccc:	2506      	moveq	r5, #6
 8006cce:	2500      	movne	r5, #0
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	b005      	add	sp, #20
 8006cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd8:	2500      	movs	r5, #0
 8006cda:	462c      	mov	r4, r5
 8006cdc:	e7b0      	b.n	8006c40 <__gethex+0x68>
 8006cde:	2c00      	cmp	r4, #0
 8006ce0:	d1c7      	bne.n	8006c72 <__gethex+0x9a>
 8006ce2:	4627      	mov	r7, r4
 8006ce4:	e7c7      	b.n	8006c76 <__gethex+0x9e>
 8006ce6:	464e      	mov	r6, r9
 8006ce8:	462f      	mov	r7, r5
 8006cea:	2501      	movs	r5, #1
 8006cec:	e7c3      	b.n	8006c76 <__gethex+0x9e>
 8006cee:	2400      	movs	r4, #0
 8006cf0:	1cb1      	adds	r1, r6, #2
 8006cf2:	e7cc      	b.n	8006c8e <__gethex+0xb6>
 8006cf4:	2401      	movs	r4, #1
 8006cf6:	e7fb      	b.n	8006cf0 <__gethex+0x118>
 8006cf8:	fb03 0002 	mla	r0, r3, r2, r0
 8006cfc:	e7ce      	b.n	8006c9c <__gethex+0xc4>
 8006cfe:	4631      	mov	r1, r6
 8006d00:	e7de      	b.n	8006cc0 <__gethex+0xe8>
 8006d02:	4629      	mov	r1, r5
 8006d04:	eba6 0309 	sub.w	r3, r6, r9
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	2b07      	cmp	r3, #7
 8006d0c:	dc0a      	bgt.n	8006d24 <__gethex+0x14c>
 8006d0e:	9801      	ldr	r0, [sp, #4]
 8006d10:	f7fe f954 	bl	8004fbc <_Balloc>
 8006d14:	4604      	mov	r4, r0
 8006d16:	b940      	cbnz	r0, 8006d2a <__gethex+0x152>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	21e4      	movs	r1, #228	@ 0xe4
 8006d1c:	4b5b      	ldr	r3, [pc, #364]	@ (8006e8c <__gethex+0x2b4>)
 8006d1e:	485c      	ldr	r0, [pc, #368]	@ (8006e90 <__gethex+0x2b8>)
 8006d20:	f7ff fec0 	bl	8006aa4 <__assert_func>
 8006d24:	3101      	adds	r1, #1
 8006d26:	105b      	asrs	r3, r3, #1
 8006d28:	e7ef      	b.n	8006d0a <__gethex+0x132>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f100 0a14 	add.w	sl, r0, #20
 8006d30:	4655      	mov	r5, sl
 8006d32:	469b      	mov	fp, r3
 8006d34:	45b1      	cmp	r9, r6
 8006d36:	d337      	bcc.n	8006da8 <__gethex+0x1d0>
 8006d38:	f845 bb04 	str.w	fp, [r5], #4
 8006d3c:	eba5 050a 	sub.w	r5, r5, sl
 8006d40:	10ad      	asrs	r5, r5, #2
 8006d42:	6125      	str	r5, [r4, #16]
 8006d44:	4658      	mov	r0, fp
 8006d46:	f7fe fa2b 	bl	80051a0 <__hi0bits>
 8006d4a:	016d      	lsls	r5, r5, #5
 8006d4c:	f8d8 6000 	ldr.w	r6, [r8]
 8006d50:	1a2d      	subs	r5, r5, r0
 8006d52:	42b5      	cmp	r5, r6
 8006d54:	dd54      	ble.n	8006e00 <__gethex+0x228>
 8006d56:	1bad      	subs	r5, r5, r6
 8006d58:	4629      	mov	r1, r5
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f7fe fdb3 	bl	80058c6 <__any_on>
 8006d60:	4681      	mov	r9, r0
 8006d62:	b178      	cbz	r0, 8006d84 <__gethex+0x1ac>
 8006d64:	f04f 0901 	mov.w	r9, #1
 8006d68:	1e6b      	subs	r3, r5, #1
 8006d6a:	1159      	asrs	r1, r3, #5
 8006d6c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006d70:	f003 021f 	and.w	r2, r3, #31
 8006d74:	fa09 f202 	lsl.w	r2, r9, r2
 8006d78:	420a      	tst	r2, r1
 8006d7a:	d003      	beq.n	8006d84 <__gethex+0x1ac>
 8006d7c:	454b      	cmp	r3, r9
 8006d7e:	dc36      	bgt.n	8006dee <__gethex+0x216>
 8006d80:	f04f 0902 	mov.w	r9, #2
 8006d84:	4629      	mov	r1, r5
 8006d86:	4620      	mov	r0, r4
 8006d88:	f7ff febe 	bl	8006b08 <rshift>
 8006d8c:	442f      	add	r7, r5
 8006d8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d92:	42bb      	cmp	r3, r7
 8006d94:	da42      	bge.n	8006e1c <__gethex+0x244>
 8006d96:	4621      	mov	r1, r4
 8006d98:	9801      	ldr	r0, [sp, #4]
 8006d9a:	f7fe f94f 	bl	800503c <_Bfree>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006da2:	25a3      	movs	r5, #163	@ 0xa3
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	e793      	b.n	8006cd0 <__gethex+0xf8>
 8006da8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006dac:	2a2e      	cmp	r2, #46	@ 0x2e
 8006dae:	d012      	beq.n	8006dd6 <__gethex+0x1fe>
 8006db0:	2b20      	cmp	r3, #32
 8006db2:	d104      	bne.n	8006dbe <__gethex+0x1e6>
 8006db4:	f845 bb04 	str.w	fp, [r5], #4
 8006db8:	f04f 0b00 	mov.w	fp, #0
 8006dbc:	465b      	mov	r3, fp
 8006dbe:	7830      	ldrb	r0, [r6, #0]
 8006dc0:	9303      	str	r3, [sp, #12]
 8006dc2:	f7ff fef4 	bl	8006bae <__hexdig_fun>
 8006dc6:	9b03      	ldr	r3, [sp, #12]
 8006dc8:	f000 000f 	and.w	r0, r0, #15
 8006dcc:	4098      	lsls	r0, r3
 8006dce:	ea4b 0b00 	orr.w	fp, fp, r0
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	e7ae      	b.n	8006d34 <__gethex+0x15c>
 8006dd6:	45b1      	cmp	r9, r6
 8006dd8:	d8ea      	bhi.n	8006db0 <__gethex+0x1d8>
 8006dda:	2201      	movs	r2, #1
 8006ddc:	4630      	mov	r0, r6
 8006dde:	492a      	ldr	r1, [pc, #168]	@ (8006e88 <__gethex+0x2b0>)
 8006de0:	9303      	str	r3, [sp, #12]
 8006de2:	f7ff fe29 	bl	8006a38 <strncmp>
 8006de6:	9b03      	ldr	r3, [sp, #12]
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d1e1      	bne.n	8006db0 <__gethex+0x1d8>
 8006dec:	e7a2      	b.n	8006d34 <__gethex+0x15c>
 8006dee:	4620      	mov	r0, r4
 8006df0:	1ea9      	subs	r1, r5, #2
 8006df2:	f7fe fd68 	bl	80058c6 <__any_on>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d0c2      	beq.n	8006d80 <__gethex+0x1a8>
 8006dfa:	f04f 0903 	mov.w	r9, #3
 8006dfe:	e7c1      	b.n	8006d84 <__gethex+0x1ac>
 8006e00:	da09      	bge.n	8006e16 <__gethex+0x23e>
 8006e02:	1b75      	subs	r5, r6, r5
 8006e04:	4621      	mov	r1, r4
 8006e06:	462a      	mov	r2, r5
 8006e08:	9801      	ldr	r0, [sp, #4]
 8006e0a:	f7fe fb2d 	bl	8005468 <__lshift>
 8006e0e:	4604      	mov	r4, r0
 8006e10:	1b7f      	subs	r7, r7, r5
 8006e12:	f100 0a14 	add.w	sl, r0, #20
 8006e16:	f04f 0900 	mov.w	r9, #0
 8006e1a:	e7b8      	b.n	8006d8e <__gethex+0x1b6>
 8006e1c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006e20:	42bd      	cmp	r5, r7
 8006e22:	dd6f      	ble.n	8006f04 <__gethex+0x32c>
 8006e24:	1bed      	subs	r5, r5, r7
 8006e26:	42ae      	cmp	r6, r5
 8006e28:	dc34      	bgt.n	8006e94 <__gethex+0x2bc>
 8006e2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d022      	beq.n	8006e78 <__gethex+0x2a0>
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d024      	beq.n	8006e80 <__gethex+0x2a8>
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d115      	bne.n	8006e66 <__gethex+0x28e>
 8006e3a:	42ae      	cmp	r6, r5
 8006e3c:	d113      	bne.n	8006e66 <__gethex+0x28e>
 8006e3e:	2e01      	cmp	r6, #1
 8006e40:	d10b      	bne.n	8006e5a <__gethex+0x282>
 8006e42:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006e46:	9a02      	ldr	r2, [sp, #8]
 8006e48:	2562      	movs	r5, #98	@ 0x62
 8006e4a:	6013      	str	r3, [r2, #0]
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	6123      	str	r3, [r4, #16]
 8006e50:	f8ca 3000 	str.w	r3, [sl]
 8006e54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e56:	601c      	str	r4, [r3, #0]
 8006e58:	e73a      	b.n	8006cd0 <__gethex+0xf8>
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	1e71      	subs	r1, r6, #1
 8006e5e:	f7fe fd32 	bl	80058c6 <__any_on>
 8006e62:	2800      	cmp	r0, #0
 8006e64:	d1ed      	bne.n	8006e42 <__gethex+0x26a>
 8006e66:	4621      	mov	r1, r4
 8006e68:	9801      	ldr	r0, [sp, #4]
 8006e6a:	f7fe f8e7 	bl	800503c <_Bfree>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e72:	2550      	movs	r5, #80	@ 0x50
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	e72b      	b.n	8006cd0 <__gethex+0xf8>
 8006e78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1f3      	bne.n	8006e66 <__gethex+0x28e>
 8006e7e:	e7e0      	b.n	8006e42 <__gethex+0x26a>
 8006e80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1dd      	bne.n	8006e42 <__gethex+0x26a>
 8006e86:	e7ee      	b.n	8006e66 <__gethex+0x28e>
 8006e88:	080079f0 	.word	0x080079f0
 8006e8c:	08007887 	.word	0x08007887
 8006e90:	08007b9e 	.word	0x08007b9e
 8006e94:	1e6f      	subs	r7, r5, #1
 8006e96:	f1b9 0f00 	cmp.w	r9, #0
 8006e9a:	d130      	bne.n	8006efe <__gethex+0x326>
 8006e9c:	b127      	cbz	r7, 8006ea8 <__gethex+0x2d0>
 8006e9e:	4639      	mov	r1, r7
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f7fe fd10 	bl	80058c6 <__any_on>
 8006ea6:	4681      	mov	r9, r0
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	4629      	mov	r1, r5
 8006eac:	1b76      	subs	r6, r6, r5
 8006eae:	2502      	movs	r5, #2
 8006eb0:	117a      	asrs	r2, r7, #5
 8006eb2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006eb6:	f007 071f 	and.w	r7, r7, #31
 8006eba:	40bb      	lsls	r3, r7
 8006ebc:	4213      	tst	r3, r2
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	bf18      	it	ne
 8006ec2:	f049 0902 	orrne.w	r9, r9, #2
 8006ec6:	f7ff fe1f 	bl	8006b08 <rshift>
 8006eca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006ece:	f1b9 0f00 	cmp.w	r9, #0
 8006ed2:	d047      	beq.n	8006f64 <__gethex+0x38c>
 8006ed4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d015      	beq.n	8006f08 <__gethex+0x330>
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	d017      	beq.n	8006f10 <__gethex+0x338>
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d109      	bne.n	8006ef8 <__gethex+0x320>
 8006ee4:	f019 0f02 	tst.w	r9, #2
 8006ee8:	d006      	beq.n	8006ef8 <__gethex+0x320>
 8006eea:	f8da 3000 	ldr.w	r3, [sl]
 8006eee:	ea49 0903 	orr.w	r9, r9, r3
 8006ef2:	f019 0f01 	tst.w	r9, #1
 8006ef6:	d10e      	bne.n	8006f16 <__gethex+0x33e>
 8006ef8:	f045 0510 	orr.w	r5, r5, #16
 8006efc:	e032      	b.n	8006f64 <__gethex+0x38c>
 8006efe:	f04f 0901 	mov.w	r9, #1
 8006f02:	e7d1      	b.n	8006ea8 <__gethex+0x2d0>
 8006f04:	2501      	movs	r5, #1
 8006f06:	e7e2      	b.n	8006ece <__gethex+0x2f6>
 8006f08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f0a:	f1c3 0301 	rsb	r3, r3, #1
 8006f0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0f0      	beq.n	8006ef8 <__gethex+0x320>
 8006f16:	f04f 0c00 	mov.w	ip, #0
 8006f1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006f1e:	f104 0314 	add.w	r3, r4, #20
 8006f22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006f26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f30:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006f34:	d01b      	beq.n	8006f6e <__gethex+0x396>
 8006f36:	3201      	adds	r2, #1
 8006f38:	6002      	str	r2, [r0, #0]
 8006f3a:	2d02      	cmp	r5, #2
 8006f3c:	f104 0314 	add.w	r3, r4, #20
 8006f40:	d13c      	bne.n	8006fbc <__gethex+0x3e4>
 8006f42:	f8d8 2000 	ldr.w	r2, [r8]
 8006f46:	3a01      	subs	r2, #1
 8006f48:	42b2      	cmp	r2, r6
 8006f4a:	d109      	bne.n	8006f60 <__gethex+0x388>
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	1171      	asrs	r1, r6, #5
 8006f50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006f54:	f006 061f 	and.w	r6, r6, #31
 8006f58:	fa02 f606 	lsl.w	r6, r2, r6
 8006f5c:	421e      	tst	r6, r3
 8006f5e:	d13a      	bne.n	8006fd6 <__gethex+0x3fe>
 8006f60:	f045 0520 	orr.w	r5, r5, #32
 8006f64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f66:	601c      	str	r4, [r3, #0]
 8006f68:	9b02      	ldr	r3, [sp, #8]
 8006f6a:	601f      	str	r7, [r3, #0]
 8006f6c:	e6b0      	b.n	8006cd0 <__gethex+0xf8>
 8006f6e:	4299      	cmp	r1, r3
 8006f70:	f843 cc04 	str.w	ip, [r3, #-4]
 8006f74:	d8d9      	bhi.n	8006f2a <__gethex+0x352>
 8006f76:	68a3      	ldr	r3, [r4, #8]
 8006f78:	459b      	cmp	fp, r3
 8006f7a:	db17      	blt.n	8006fac <__gethex+0x3d4>
 8006f7c:	6861      	ldr	r1, [r4, #4]
 8006f7e:	9801      	ldr	r0, [sp, #4]
 8006f80:	3101      	adds	r1, #1
 8006f82:	f7fe f81b 	bl	8004fbc <_Balloc>
 8006f86:	4681      	mov	r9, r0
 8006f88:	b918      	cbnz	r0, 8006f92 <__gethex+0x3ba>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	2184      	movs	r1, #132	@ 0x84
 8006f8e:	4b19      	ldr	r3, [pc, #100]	@ (8006ff4 <__gethex+0x41c>)
 8006f90:	e6c5      	b.n	8006d1e <__gethex+0x146>
 8006f92:	6922      	ldr	r2, [r4, #16]
 8006f94:	f104 010c 	add.w	r1, r4, #12
 8006f98:	3202      	adds	r2, #2
 8006f9a:	0092      	lsls	r2, r2, #2
 8006f9c:	300c      	adds	r0, #12
 8006f9e:	f7ff fd6d 	bl	8006a7c <memcpy>
 8006fa2:	4621      	mov	r1, r4
 8006fa4:	9801      	ldr	r0, [sp, #4]
 8006fa6:	f7fe f849 	bl	800503c <_Bfree>
 8006faa:	464c      	mov	r4, r9
 8006fac:	6923      	ldr	r3, [r4, #16]
 8006fae:	1c5a      	adds	r2, r3, #1
 8006fb0:	6122      	str	r2, [r4, #16]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006fb8:	615a      	str	r2, [r3, #20]
 8006fba:	e7be      	b.n	8006f3a <__gethex+0x362>
 8006fbc:	6922      	ldr	r2, [r4, #16]
 8006fbe:	455a      	cmp	r2, fp
 8006fc0:	dd0b      	ble.n	8006fda <__gethex+0x402>
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f7ff fd9f 	bl	8006b08 <rshift>
 8006fca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006fce:	3701      	adds	r7, #1
 8006fd0:	42bb      	cmp	r3, r7
 8006fd2:	f6ff aee0 	blt.w	8006d96 <__gethex+0x1be>
 8006fd6:	2501      	movs	r5, #1
 8006fd8:	e7c2      	b.n	8006f60 <__gethex+0x388>
 8006fda:	f016 061f 	ands.w	r6, r6, #31
 8006fde:	d0fa      	beq.n	8006fd6 <__gethex+0x3fe>
 8006fe0:	4453      	add	r3, sl
 8006fe2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006fe6:	f7fe f8db 	bl	80051a0 <__hi0bits>
 8006fea:	f1c6 0620 	rsb	r6, r6, #32
 8006fee:	42b0      	cmp	r0, r6
 8006ff0:	dbe7      	blt.n	8006fc2 <__gethex+0x3ea>
 8006ff2:	e7f0      	b.n	8006fd6 <__gethex+0x3fe>
 8006ff4:	08007887 	.word	0x08007887

08006ff8 <L_shift>:
 8006ff8:	f1c2 0208 	rsb	r2, r2, #8
 8006ffc:	0092      	lsls	r2, r2, #2
 8006ffe:	b570      	push	{r4, r5, r6, lr}
 8007000:	f1c2 0620 	rsb	r6, r2, #32
 8007004:	6843      	ldr	r3, [r0, #4]
 8007006:	6804      	ldr	r4, [r0, #0]
 8007008:	fa03 f506 	lsl.w	r5, r3, r6
 800700c:	432c      	orrs	r4, r5
 800700e:	40d3      	lsrs	r3, r2
 8007010:	6004      	str	r4, [r0, #0]
 8007012:	f840 3f04 	str.w	r3, [r0, #4]!
 8007016:	4288      	cmp	r0, r1
 8007018:	d3f4      	bcc.n	8007004 <L_shift+0xc>
 800701a:	bd70      	pop	{r4, r5, r6, pc}

0800701c <__match>:
 800701c:	b530      	push	{r4, r5, lr}
 800701e:	6803      	ldr	r3, [r0, #0]
 8007020:	3301      	adds	r3, #1
 8007022:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007026:	b914      	cbnz	r4, 800702e <__match+0x12>
 8007028:	6003      	str	r3, [r0, #0]
 800702a:	2001      	movs	r0, #1
 800702c:	bd30      	pop	{r4, r5, pc}
 800702e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007032:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007036:	2d19      	cmp	r5, #25
 8007038:	bf98      	it	ls
 800703a:	3220      	addls	r2, #32
 800703c:	42a2      	cmp	r2, r4
 800703e:	d0f0      	beq.n	8007022 <__match+0x6>
 8007040:	2000      	movs	r0, #0
 8007042:	e7f3      	b.n	800702c <__match+0x10>

08007044 <__hexnan>:
 8007044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007048:	2500      	movs	r5, #0
 800704a:	680b      	ldr	r3, [r1, #0]
 800704c:	4682      	mov	sl, r0
 800704e:	115e      	asrs	r6, r3, #5
 8007050:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007054:	f013 031f 	ands.w	r3, r3, #31
 8007058:	bf18      	it	ne
 800705a:	3604      	addne	r6, #4
 800705c:	1f37      	subs	r7, r6, #4
 800705e:	4690      	mov	r8, r2
 8007060:	46b9      	mov	r9, r7
 8007062:	463c      	mov	r4, r7
 8007064:	46ab      	mov	fp, r5
 8007066:	b087      	sub	sp, #28
 8007068:	6801      	ldr	r1, [r0, #0]
 800706a:	9301      	str	r3, [sp, #4]
 800706c:	f846 5c04 	str.w	r5, [r6, #-4]
 8007070:	9502      	str	r5, [sp, #8]
 8007072:	784a      	ldrb	r2, [r1, #1]
 8007074:	1c4b      	adds	r3, r1, #1
 8007076:	9303      	str	r3, [sp, #12]
 8007078:	b342      	cbz	r2, 80070cc <__hexnan+0x88>
 800707a:	4610      	mov	r0, r2
 800707c:	9105      	str	r1, [sp, #20]
 800707e:	9204      	str	r2, [sp, #16]
 8007080:	f7ff fd95 	bl	8006bae <__hexdig_fun>
 8007084:	2800      	cmp	r0, #0
 8007086:	d151      	bne.n	800712c <__hexnan+0xe8>
 8007088:	9a04      	ldr	r2, [sp, #16]
 800708a:	9905      	ldr	r1, [sp, #20]
 800708c:	2a20      	cmp	r2, #32
 800708e:	d818      	bhi.n	80070c2 <__hexnan+0x7e>
 8007090:	9b02      	ldr	r3, [sp, #8]
 8007092:	459b      	cmp	fp, r3
 8007094:	dd13      	ble.n	80070be <__hexnan+0x7a>
 8007096:	454c      	cmp	r4, r9
 8007098:	d206      	bcs.n	80070a8 <__hexnan+0x64>
 800709a:	2d07      	cmp	r5, #7
 800709c:	dc04      	bgt.n	80070a8 <__hexnan+0x64>
 800709e:	462a      	mov	r2, r5
 80070a0:	4649      	mov	r1, r9
 80070a2:	4620      	mov	r0, r4
 80070a4:	f7ff ffa8 	bl	8006ff8 <L_shift>
 80070a8:	4544      	cmp	r4, r8
 80070aa:	d952      	bls.n	8007152 <__hexnan+0x10e>
 80070ac:	2300      	movs	r3, #0
 80070ae:	f1a4 0904 	sub.w	r9, r4, #4
 80070b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80070b6:	461d      	mov	r5, r3
 80070b8:	464c      	mov	r4, r9
 80070ba:	f8cd b008 	str.w	fp, [sp, #8]
 80070be:	9903      	ldr	r1, [sp, #12]
 80070c0:	e7d7      	b.n	8007072 <__hexnan+0x2e>
 80070c2:	2a29      	cmp	r2, #41	@ 0x29
 80070c4:	d157      	bne.n	8007176 <__hexnan+0x132>
 80070c6:	3102      	adds	r1, #2
 80070c8:	f8ca 1000 	str.w	r1, [sl]
 80070cc:	f1bb 0f00 	cmp.w	fp, #0
 80070d0:	d051      	beq.n	8007176 <__hexnan+0x132>
 80070d2:	454c      	cmp	r4, r9
 80070d4:	d206      	bcs.n	80070e4 <__hexnan+0xa0>
 80070d6:	2d07      	cmp	r5, #7
 80070d8:	dc04      	bgt.n	80070e4 <__hexnan+0xa0>
 80070da:	462a      	mov	r2, r5
 80070dc:	4649      	mov	r1, r9
 80070de:	4620      	mov	r0, r4
 80070e0:	f7ff ff8a 	bl	8006ff8 <L_shift>
 80070e4:	4544      	cmp	r4, r8
 80070e6:	d936      	bls.n	8007156 <__hexnan+0x112>
 80070e8:	4623      	mov	r3, r4
 80070ea:	f1a8 0204 	sub.w	r2, r8, #4
 80070ee:	f853 1b04 	ldr.w	r1, [r3], #4
 80070f2:	429f      	cmp	r7, r3
 80070f4:	f842 1f04 	str.w	r1, [r2, #4]!
 80070f8:	d2f9      	bcs.n	80070ee <__hexnan+0xaa>
 80070fa:	1b3b      	subs	r3, r7, r4
 80070fc:	f023 0303 	bic.w	r3, r3, #3
 8007100:	3304      	adds	r3, #4
 8007102:	3401      	adds	r4, #1
 8007104:	3e03      	subs	r6, #3
 8007106:	42b4      	cmp	r4, r6
 8007108:	bf88      	it	hi
 800710a:	2304      	movhi	r3, #4
 800710c:	2200      	movs	r2, #0
 800710e:	4443      	add	r3, r8
 8007110:	f843 2b04 	str.w	r2, [r3], #4
 8007114:	429f      	cmp	r7, r3
 8007116:	d2fb      	bcs.n	8007110 <__hexnan+0xcc>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	b91b      	cbnz	r3, 8007124 <__hexnan+0xe0>
 800711c:	4547      	cmp	r7, r8
 800711e:	d128      	bne.n	8007172 <__hexnan+0x12e>
 8007120:	2301      	movs	r3, #1
 8007122:	603b      	str	r3, [r7, #0]
 8007124:	2005      	movs	r0, #5
 8007126:	b007      	add	sp, #28
 8007128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712c:	3501      	adds	r5, #1
 800712e:	2d08      	cmp	r5, #8
 8007130:	f10b 0b01 	add.w	fp, fp, #1
 8007134:	dd06      	ble.n	8007144 <__hexnan+0x100>
 8007136:	4544      	cmp	r4, r8
 8007138:	d9c1      	bls.n	80070be <__hexnan+0x7a>
 800713a:	2300      	movs	r3, #0
 800713c:	2501      	movs	r5, #1
 800713e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007142:	3c04      	subs	r4, #4
 8007144:	6822      	ldr	r2, [r4, #0]
 8007146:	f000 000f 	and.w	r0, r0, #15
 800714a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800714e:	6020      	str	r0, [r4, #0]
 8007150:	e7b5      	b.n	80070be <__hexnan+0x7a>
 8007152:	2508      	movs	r5, #8
 8007154:	e7b3      	b.n	80070be <__hexnan+0x7a>
 8007156:	9b01      	ldr	r3, [sp, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0dd      	beq.n	8007118 <__hexnan+0xd4>
 800715c:	f04f 32ff 	mov.w	r2, #4294967295
 8007160:	f1c3 0320 	rsb	r3, r3, #32
 8007164:	40da      	lsrs	r2, r3
 8007166:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800716a:	4013      	ands	r3, r2
 800716c:	f846 3c04 	str.w	r3, [r6, #-4]
 8007170:	e7d2      	b.n	8007118 <__hexnan+0xd4>
 8007172:	3f04      	subs	r7, #4
 8007174:	e7d0      	b.n	8007118 <__hexnan+0xd4>
 8007176:	2004      	movs	r0, #4
 8007178:	e7d5      	b.n	8007126 <__hexnan+0xe2>

0800717a <__ascii_mbtowc>:
 800717a:	b082      	sub	sp, #8
 800717c:	b901      	cbnz	r1, 8007180 <__ascii_mbtowc+0x6>
 800717e:	a901      	add	r1, sp, #4
 8007180:	b142      	cbz	r2, 8007194 <__ascii_mbtowc+0x1a>
 8007182:	b14b      	cbz	r3, 8007198 <__ascii_mbtowc+0x1e>
 8007184:	7813      	ldrb	r3, [r2, #0]
 8007186:	600b      	str	r3, [r1, #0]
 8007188:	7812      	ldrb	r2, [r2, #0]
 800718a:	1e10      	subs	r0, r2, #0
 800718c:	bf18      	it	ne
 800718e:	2001      	movne	r0, #1
 8007190:	b002      	add	sp, #8
 8007192:	4770      	bx	lr
 8007194:	4610      	mov	r0, r2
 8007196:	e7fb      	b.n	8007190 <__ascii_mbtowc+0x16>
 8007198:	f06f 0001 	mvn.w	r0, #1
 800719c:	e7f8      	b.n	8007190 <__ascii_mbtowc+0x16>

0800719e <_realloc_r>:
 800719e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071a2:	4680      	mov	r8, r0
 80071a4:	4615      	mov	r5, r2
 80071a6:	460c      	mov	r4, r1
 80071a8:	b921      	cbnz	r1, 80071b4 <_realloc_r+0x16>
 80071aa:	4611      	mov	r1, r2
 80071ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071b0:	f7fd be78 	b.w	8004ea4 <_malloc_r>
 80071b4:	b92a      	cbnz	r2, 80071c2 <_realloc_r+0x24>
 80071b6:	f7fd fe03 	bl	8004dc0 <_free_r>
 80071ba:	2400      	movs	r4, #0
 80071bc:	4620      	mov	r0, r4
 80071be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071c2:	f000 f840 	bl	8007246 <_malloc_usable_size_r>
 80071c6:	4285      	cmp	r5, r0
 80071c8:	4606      	mov	r6, r0
 80071ca:	d802      	bhi.n	80071d2 <_realloc_r+0x34>
 80071cc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80071d0:	d8f4      	bhi.n	80071bc <_realloc_r+0x1e>
 80071d2:	4629      	mov	r1, r5
 80071d4:	4640      	mov	r0, r8
 80071d6:	f7fd fe65 	bl	8004ea4 <_malloc_r>
 80071da:	4607      	mov	r7, r0
 80071dc:	2800      	cmp	r0, #0
 80071de:	d0ec      	beq.n	80071ba <_realloc_r+0x1c>
 80071e0:	42b5      	cmp	r5, r6
 80071e2:	462a      	mov	r2, r5
 80071e4:	4621      	mov	r1, r4
 80071e6:	bf28      	it	cs
 80071e8:	4632      	movcs	r2, r6
 80071ea:	f7ff fc47 	bl	8006a7c <memcpy>
 80071ee:	4621      	mov	r1, r4
 80071f0:	4640      	mov	r0, r8
 80071f2:	f7fd fde5 	bl	8004dc0 <_free_r>
 80071f6:	463c      	mov	r4, r7
 80071f8:	e7e0      	b.n	80071bc <_realloc_r+0x1e>

080071fa <__ascii_wctomb>:
 80071fa:	4603      	mov	r3, r0
 80071fc:	4608      	mov	r0, r1
 80071fe:	b141      	cbz	r1, 8007212 <__ascii_wctomb+0x18>
 8007200:	2aff      	cmp	r2, #255	@ 0xff
 8007202:	d904      	bls.n	800720e <__ascii_wctomb+0x14>
 8007204:	228a      	movs	r2, #138	@ 0x8a
 8007206:	f04f 30ff 	mov.w	r0, #4294967295
 800720a:	601a      	str	r2, [r3, #0]
 800720c:	4770      	bx	lr
 800720e:	2001      	movs	r0, #1
 8007210:	700a      	strb	r2, [r1, #0]
 8007212:	4770      	bx	lr

08007214 <fiprintf>:
 8007214:	b40e      	push	{r1, r2, r3}
 8007216:	b503      	push	{r0, r1, lr}
 8007218:	4601      	mov	r1, r0
 800721a:	ab03      	add	r3, sp, #12
 800721c:	4805      	ldr	r0, [pc, #20]	@ (8007234 <fiprintf+0x20>)
 800721e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007222:	6800      	ldr	r0, [r0, #0]
 8007224:	9301      	str	r3, [sp, #4]
 8007226:	f000 f83d 	bl	80072a4 <_vfiprintf_r>
 800722a:	b002      	add	sp, #8
 800722c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007230:	b003      	add	sp, #12
 8007232:	4770      	bx	lr
 8007234:	20000018 	.word	0x20000018

08007238 <abort>:
 8007238:	2006      	movs	r0, #6
 800723a:	b508      	push	{r3, lr}
 800723c:	f000 fa06 	bl	800764c <raise>
 8007240:	2001      	movs	r0, #1
 8007242:	f7f9 fe62 	bl	8000f0a <_exit>

08007246 <_malloc_usable_size_r>:
 8007246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800724a:	1f18      	subs	r0, r3, #4
 800724c:	2b00      	cmp	r3, #0
 800724e:	bfbc      	itt	lt
 8007250:	580b      	ldrlt	r3, [r1, r0]
 8007252:	18c0      	addlt	r0, r0, r3
 8007254:	4770      	bx	lr

08007256 <__sfputc_r>:
 8007256:	6893      	ldr	r3, [r2, #8]
 8007258:	b410      	push	{r4}
 800725a:	3b01      	subs	r3, #1
 800725c:	2b00      	cmp	r3, #0
 800725e:	6093      	str	r3, [r2, #8]
 8007260:	da07      	bge.n	8007272 <__sfputc_r+0x1c>
 8007262:	6994      	ldr	r4, [r2, #24]
 8007264:	42a3      	cmp	r3, r4
 8007266:	db01      	blt.n	800726c <__sfputc_r+0x16>
 8007268:	290a      	cmp	r1, #10
 800726a:	d102      	bne.n	8007272 <__sfputc_r+0x1c>
 800726c:	bc10      	pop	{r4}
 800726e:	f000 b931 	b.w	80074d4 <__swbuf_r>
 8007272:	6813      	ldr	r3, [r2, #0]
 8007274:	1c58      	adds	r0, r3, #1
 8007276:	6010      	str	r0, [r2, #0]
 8007278:	7019      	strb	r1, [r3, #0]
 800727a:	4608      	mov	r0, r1
 800727c:	bc10      	pop	{r4}
 800727e:	4770      	bx	lr

08007280 <__sfputs_r>:
 8007280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007282:	4606      	mov	r6, r0
 8007284:	460f      	mov	r7, r1
 8007286:	4614      	mov	r4, r2
 8007288:	18d5      	adds	r5, r2, r3
 800728a:	42ac      	cmp	r4, r5
 800728c:	d101      	bne.n	8007292 <__sfputs_r+0x12>
 800728e:	2000      	movs	r0, #0
 8007290:	e007      	b.n	80072a2 <__sfputs_r+0x22>
 8007292:	463a      	mov	r2, r7
 8007294:	4630      	mov	r0, r6
 8007296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800729a:	f7ff ffdc 	bl	8007256 <__sfputc_r>
 800729e:	1c43      	adds	r3, r0, #1
 80072a0:	d1f3      	bne.n	800728a <__sfputs_r+0xa>
 80072a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072a4 <_vfiprintf_r>:
 80072a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a8:	460d      	mov	r5, r1
 80072aa:	4614      	mov	r4, r2
 80072ac:	4698      	mov	r8, r3
 80072ae:	4606      	mov	r6, r0
 80072b0:	b09d      	sub	sp, #116	@ 0x74
 80072b2:	b118      	cbz	r0, 80072bc <_vfiprintf_r+0x18>
 80072b4:	6a03      	ldr	r3, [r0, #32]
 80072b6:	b90b      	cbnz	r3, 80072bc <_vfiprintf_r+0x18>
 80072b8:	f7fc fe04 	bl	8003ec4 <__sinit>
 80072bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072be:	07d9      	lsls	r1, r3, #31
 80072c0:	d405      	bmi.n	80072ce <_vfiprintf_r+0x2a>
 80072c2:	89ab      	ldrh	r3, [r5, #12]
 80072c4:	059a      	lsls	r2, r3, #22
 80072c6:	d402      	bmi.n	80072ce <_vfiprintf_r+0x2a>
 80072c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072ca:	f7fc ff12 	bl	80040f2 <__retarget_lock_acquire_recursive>
 80072ce:	89ab      	ldrh	r3, [r5, #12]
 80072d0:	071b      	lsls	r3, r3, #28
 80072d2:	d501      	bpl.n	80072d8 <_vfiprintf_r+0x34>
 80072d4:	692b      	ldr	r3, [r5, #16]
 80072d6:	b99b      	cbnz	r3, 8007300 <_vfiprintf_r+0x5c>
 80072d8:	4629      	mov	r1, r5
 80072da:	4630      	mov	r0, r6
 80072dc:	f000 f938 	bl	8007550 <__swsetup_r>
 80072e0:	b170      	cbz	r0, 8007300 <_vfiprintf_r+0x5c>
 80072e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072e4:	07dc      	lsls	r4, r3, #31
 80072e6:	d504      	bpl.n	80072f2 <_vfiprintf_r+0x4e>
 80072e8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ec:	b01d      	add	sp, #116	@ 0x74
 80072ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f2:	89ab      	ldrh	r3, [r5, #12]
 80072f4:	0598      	lsls	r0, r3, #22
 80072f6:	d4f7      	bmi.n	80072e8 <_vfiprintf_r+0x44>
 80072f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072fa:	f7fc fefb 	bl	80040f4 <__retarget_lock_release_recursive>
 80072fe:	e7f3      	b.n	80072e8 <_vfiprintf_r+0x44>
 8007300:	2300      	movs	r3, #0
 8007302:	9309      	str	r3, [sp, #36]	@ 0x24
 8007304:	2320      	movs	r3, #32
 8007306:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800730a:	2330      	movs	r3, #48	@ 0x30
 800730c:	f04f 0901 	mov.w	r9, #1
 8007310:	f8cd 800c 	str.w	r8, [sp, #12]
 8007314:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80074c0 <_vfiprintf_r+0x21c>
 8007318:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800731c:	4623      	mov	r3, r4
 800731e:	469a      	mov	sl, r3
 8007320:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007324:	b10a      	cbz	r2, 800732a <_vfiprintf_r+0x86>
 8007326:	2a25      	cmp	r2, #37	@ 0x25
 8007328:	d1f9      	bne.n	800731e <_vfiprintf_r+0x7a>
 800732a:	ebba 0b04 	subs.w	fp, sl, r4
 800732e:	d00b      	beq.n	8007348 <_vfiprintf_r+0xa4>
 8007330:	465b      	mov	r3, fp
 8007332:	4622      	mov	r2, r4
 8007334:	4629      	mov	r1, r5
 8007336:	4630      	mov	r0, r6
 8007338:	f7ff ffa2 	bl	8007280 <__sfputs_r>
 800733c:	3001      	adds	r0, #1
 800733e:	f000 80a7 	beq.w	8007490 <_vfiprintf_r+0x1ec>
 8007342:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007344:	445a      	add	r2, fp
 8007346:	9209      	str	r2, [sp, #36]	@ 0x24
 8007348:	f89a 3000 	ldrb.w	r3, [sl]
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 809f 	beq.w	8007490 <_vfiprintf_r+0x1ec>
 8007352:	2300      	movs	r3, #0
 8007354:	f04f 32ff 	mov.w	r2, #4294967295
 8007358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800735c:	f10a 0a01 	add.w	sl, sl, #1
 8007360:	9304      	str	r3, [sp, #16]
 8007362:	9307      	str	r3, [sp, #28]
 8007364:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007368:	931a      	str	r3, [sp, #104]	@ 0x68
 800736a:	4654      	mov	r4, sl
 800736c:	2205      	movs	r2, #5
 800736e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007372:	4853      	ldr	r0, [pc, #332]	@ (80074c0 <_vfiprintf_r+0x21c>)
 8007374:	f7fc febf 	bl	80040f6 <memchr>
 8007378:	9a04      	ldr	r2, [sp, #16]
 800737a:	b9d8      	cbnz	r0, 80073b4 <_vfiprintf_r+0x110>
 800737c:	06d1      	lsls	r1, r2, #27
 800737e:	bf44      	itt	mi
 8007380:	2320      	movmi	r3, #32
 8007382:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007386:	0713      	lsls	r3, r2, #28
 8007388:	bf44      	itt	mi
 800738a:	232b      	movmi	r3, #43	@ 0x2b
 800738c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007390:	f89a 3000 	ldrb.w	r3, [sl]
 8007394:	2b2a      	cmp	r3, #42	@ 0x2a
 8007396:	d015      	beq.n	80073c4 <_vfiprintf_r+0x120>
 8007398:	4654      	mov	r4, sl
 800739a:	2000      	movs	r0, #0
 800739c:	f04f 0c0a 	mov.w	ip, #10
 80073a0:	9a07      	ldr	r2, [sp, #28]
 80073a2:	4621      	mov	r1, r4
 80073a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073a8:	3b30      	subs	r3, #48	@ 0x30
 80073aa:	2b09      	cmp	r3, #9
 80073ac:	d94b      	bls.n	8007446 <_vfiprintf_r+0x1a2>
 80073ae:	b1b0      	cbz	r0, 80073de <_vfiprintf_r+0x13a>
 80073b0:	9207      	str	r2, [sp, #28]
 80073b2:	e014      	b.n	80073de <_vfiprintf_r+0x13a>
 80073b4:	eba0 0308 	sub.w	r3, r0, r8
 80073b8:	fa09 f303 	lsl.w	r3, r9, r3
 80073bc:	4313      	orrs	r3, r2
 80073be:	46a2      	mov	sl, r4
 80073c0:	9304      	str	r3, [sp, #16]
 80073c2:	e7d2      	b.n	800736a <_vfiprintf_r+0xc6>
 80073c4:	9b03      	ldr	r3, [sp, #12]
 80073c6:	1d19      	adds	r1, r3, #4
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	9103      	str	r1, [sp, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	bfbb      	ittet	lt
 80073d0:	425b      	neglt	r3, r3
 80073d2:	f042 0202 	orrlt.w	r2, r2, #2
 80073d6:	9307      	strge	r3, [sp, #28]
 80073d8:	9307      	strlt	r3, [sp, #28]
 80073da:	bfb8      	it	lt
 80073dc:	9204      	strlt	r2, [sp, #16]
 80073de:	7823      	ldrb	r3, [r4, #0]
 80073e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80073e2:	d10a      	bne.n	80073fa <_vfiprintf_r+0x156>
 80073e4:	7863      	ldrb	r3, [r4, #1]
 80073e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80073e8:	d132      	bne.n	8007450 <_vfiprintf_r+0x1ac>
 80073ea:	9b03      	ldr	r3, [sp, #12]
 80073ec:	3402      	adds	r4, #2
 80073ee:	1d1a      	adds	r2, r3, #4
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	9203      	str	r2, [sp, #12]
 80073f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073f8:	9305      	str	r3, [sp, #20]
 80073fa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80074c4 <_vfiprintf_r+0x220>
 80073fe:	2203      	movs	r2, #3
 8007400:	4650      	mov	r0, sl
 8007402:	7821      	ldrb	r1, [r4, #0]
 8007404:	f7fc fe77 	bl	80040f6 <memchr>
 8007408:	b138      	cbz	r0, 800741a <_vfiprintf_r+0x176>
 800740a:	2240      	movs	r2, #64	@ 0x40
 800740c:	9b04      	ldr	r3, [sp, #16]
 800740e:	eba0 000a 	sub.w	r0, r0, sl
 8007412:	4082      	lsls	r2, r0
 8007414:	4313      	orrs	r3, r2
 8007416:	3401      	adds	r4, #1
 8007418:	9304      	str	r3, [sp, #16]
 800741a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800741e:	2206      	movs	r2, #6
 8007420:	4829      	ldr	r0, [pc, #164]	@ (80074c8 <_vfiprintf_r+0x224>)
 8007422:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007426:	f7fc fe66 	bl	80040f6 <memchr>
 800742a:	2800      	cmp	r0, #0
 800742c:	d03f      	beq.n	80074ae <_vfiprintf_r+0x20a>
 800742e:	4b27      	ldr	r3, [pc, #156]	@ (80074cc <_vfiprintf_r+0x228>)
 8007430:	bb1b      	cbnz	r3, 800747a <_vfiprintf_r+0x1d6>
 8007432:	9b03      	ldr	r3, [sp, #12]
 8007434:	3307      	adds	r3, #7
 8007436:	f023 0307 	bic.w	r3, r3, #7
 800743a:	3308      	adds	r3, #8
 800743c:	9303      	str	r3, [sp, #12]
 800743e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007440:	443b      	add	r3, r7
 8007442:	9309      	str	r3, [sp, #36]	@ 0x24
 8007444:	e76a      	b.n	800731c <_vfiprintf_r+0x78>
 8007446:	460c      	mov	r4, r1
 8007448:	2001      	movs	r0, #1
 800744a:	fb0c 3202 	mla	r2, ip, r2, r3
 800744e:	e7a8      	b.n	80073a2 <_vfiprintf_r+0xfe>
 8007450:	2300      	movs	r3, #0
 8007452:	f04f 0c0a 	mov.w	ip, #10
 8007456:	4619      	mov	r1, r3
 8007458:	3401      	adds	r4, #1
 800745a:	9305      	str	r3, [sp, #20]
 800745c:	4620      	mov	r0, r4
 800745e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007462:	3a30      	subs	r2, #48	@ 0x30
 8007464:	2a09      	cmp	r2, #9
 8007466:	d903      	bls.n	8007470 <_vfiprintf_r+0x1cc>
 8007468:	2b00      	cmp	r3, #0
 800746a:	d0c6      	beq.n	80073fa <_vfiprintf_r+0x156>
 800746c:	9105      	str	r1, [sp, #20]
 800746e:	e7c4      	b.n	80073fa <_vfiprintf_r+0x156>
 8007470:	4604      	mov	r4, r0
 8007472:	2301      	movs	r3, #1
 8007474:	fb0c 2101 	mla	r1, ip, r1, r2
 8007478:	e7f0      	b.n	800745c <_vfiprintf_r+0x1b8>
 800747a:	ab03      	add	r3, sp, #12
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	462a      	mov	r2, r5
 8007480:	4630      	mov	r0, r6
 8007482:	4b13      	ldr	r3, [pc, #76]	@ (80074d0 <_vfiprintf_r+0x22c>)
 8007484:	a904      	add	r1, sp, #16
 8007486:	f7fb fec3 	bl	8003210 <_printf_float>
 800748a:	4607      	mov	r7, r0
 800748c:	1c78      	adds	r0, r7, #1
 800748e:	d1d6      	bne.n	800743e <_vfiprintf_r+0x19a>
 8007490:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007492:	07d9      	lsls	r1, r3, #31
 8007494:	d405      	bmi.n	80074a2 <_vfiprintf_r+0x1fe>
 8007496:	89ab      	ldrh	r3, [r5, #12]
 8007498:	059a      	lsls	r2, r3, #22
 800749a:	d402      	bmi.n	80074a2 <_vfiprintf_r+0x1fe>
 800749c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800749e:	f7fc fe29 	bl	80040f4 <__retarget_lock_release_recursive>
 80074a2:	89ab      	ldrh	r3, [r5, #12]
 80074a4:	065b      	lsls	r3, r3, #25
 80074a6:	f53f af1f 	bmi.w	80072e8 <_vfiprintf_r+0x44>
 80074aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074ac:	e71e      	b.n	80072ec <_vfiprintf_r+0x48>
 80074ae:	ab03      	add	r3, sp, #12
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	462a      	mov	r2, r5
 80074b4:	4630      	mov	r0, r6
 80074b6:	4b06      	ldr	r3, [pc, #24]	@ (80074d0 <_vfiprintf_r+0x22c>)
 80074b8:	a904      	add	r1, sp, #16
 80074ba:	f7fc f947 	bl	800374c <_printf_i>
 80074be:	e7e4      	b.n	800748a <_vfiprintf_r+0x1e6>
 80074c0:	08007b49 	.word	0x08007b49
 80074c4:	08007b4f 	.word	0x08007b4f
 80074c8:	08007b53 	.word	0x08007b53
 80074cc:	08003211 	.word	0x08003211
 80074d0:	08007281 	.word	0x08007281

080074d4 <__swbuf_r>:
 80074d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d6:	460e      	mov	r6, r1
 80074d8:	4614      	mov	r4, r2
 80074da:	4605      	mov	r5, r0
 80074dc:	b118      	cbz	r0, 80074e6 <__swbuf_r+0x12>
 80074de:	6a03      	ldr	r3, [r0, #32]
 80074e0:	b90b      	cbnz	r3, 80074e6 <__swbuf_r+0x12>
 80074e2:	f7fc fcef 	bl	8003ec4 <__sinit>
 80074e6:	69a3      	ldr	r3, [r4, #24]
 80074e8:	60a3      	str	r3, [r4, #8]
 80074ea:	89a3      	ldrh	r3, [r4, #12]
 80074ec:	071a      	lsls	r2, r3, #28
 80074ee:	d501      	bpl.n	80074f4 <__swbuf_r+0x20>
 80074f0:	6923      	ldr	r3, [r4, #16]
 80074f2:	b943      	cbnz	r3, 8007506 <__swbuf_r+0x32>
 80074f4:	4621      	mov	r1, r4
 80074f6:	4628      	mov	r0, r5
 80074f8:	f000 f82a 	bl	8007550 <__swsetup_r>
 80074fc:	b118      	cbz	r0, 8007506 <__swbuf_r+0x32>
 80074fe:	f04f 37ff 	mov.w	r7, #4294967295
 8007502:	4638      	mov	r0, r7
 8007504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	6922      	ldr	r2, [r4, #16]
 800750a:	b2f6      	uxtb	r6, r6
 800750c:	1a98      	subs	r0, r3, r2
 800750e:	6963      	ldr	r3, [r4, #20]
 8007510:	4637      	mov	r7, r6
 8007512:	4283      	cmp	r3, r0
 8007514:	dc05      	bgt.n	8007522 <__swbuf_r+0x4e>
 8007516:	4621      	mov	r1, r4
 8007518:	4628      	mov	r0, r5
 800751a:	f7ff fa4b 	bl	80069b4 <_fflush_r>
 800751e:	2800      	cmp	r0, #0
 8007520:	d1ed      	bne.n	80074fe <__swbuf_r+0x2a>
 8007522:	68a3      	ldr	r3, [r4, #8]
 8007524:	3b01      	subs	r3, #1
 8007526:	60a3      	str	r3, [r4, #8]
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	6022      	str	r2, [r4, #0]
 800752e:	701e      	strb	r6, [r3, #0]
 8007530:	6962      	ldr	r2, [r4, #20]
 8007532:	1c43      	adds	r3, r0, #1
 8007534:	429a      	cmp	r2, r3
 8007536:	d004      	beq.n	8007542 <__swbuf_r+0x6e>
 8007538:	89a3      	ldrh	r3, [r4, #12]
 800753a:	07db      	lsls	r3, r3, #31
 800753c:	d5e1      	bpl.n	8007502 <__swbuf_r+0x2e>
 800753e:	2e0a      	cmp	r6, #10
 8007540:	d1df      	bne.n	8007502 <__swbuf_r+0x2e>
 8007542:	4621      	mov	r1, r4
 8007544:	4628      	mov	r0, r5
 8007546:	f7ff fa35 	bl	80069b4 <_fflush_r>
 800754a:	2800      	cmp	r0, #0
 800754c:	d0d9      	beq.n	8007502 <__swbuf_r+0x2e>
 800754e:	e7d6      	b.n	80074fe <__swbuf_r+0x2a>

08007550 <__swsetup_r>:
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	4b29      	ldr	r3, [pc, #164]	@ (80075f8 <__swsetup_r+0xa8>)
 8007554:	4605      	mov	r5, r0
 8007556:	6818      	ldr	r0, [r3, #0]
 8007558:	460c      	mov	r4, r1
 800755a:	b118      	cbz	r0, 8007564 <__swsetup_r+0x14>
 800755c:	6a03      	ldr	r3, [r0, #32]
 800755e:	b90b      	cbnz	r3, 8007564 <__swsetup_r+0x14>
 8007560:	f7fc fcb0 	bl	8003ec4 <__sinit>
 8007564:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007568:	0719      	lsls	r1, r3, #28
 800756a:	d422      	bmi.n	80075b2 <__swsetup_r+0x62>
 800756c:	06da      	lsls	r2, r3, #27
 800756e:	d407      	bmi.n	8007580 <__swsetup_r+0x30>
 8007570:	2209      	movs	r2, #9
 8007572:	602a      	str	r2, [r5, #0]
 8007574:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007578:	f04f 30ff 	mov.w	r0, #4294967295
 800757c:	81a3      	strh	r3, [r4, #12]
 800757e:	e033      	b.n	80075e8 <__swsetup_r+0x98>
 8007580:	0758      	lsls	r0, r3, #29
 8007582:	d512      	bpl.n	80075aa <__swsetup_r+0x5a>
 8007584:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007586:	b141      	cbz	r1, 800759a <__swsetup_r+0x4a>
 8007588:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800758c:	4299      	cmp	r1, r3
 800758e:	d002      	beq.n	8007596 <__swsetup_r+0x46>
 8007590:	4628      	mov	r0, r5
 8007592:	f7fd fc15 	bl	8004dc0 <_free_r>
 8007596:	2300      	movs	r3, #0
 8007598:	6363      	str	r3, [r4, #52]	@ 0x34
 800759a:	89a3      	ldrh	r3, [r4, #12]
 800759c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80075a0:	81a3      	strh	r3, [r4, #12]
 80075a2:	2300      	movs	r3, #0
 80075a4:	6063      	str	r3, [r4, #4]
 80075a6:	6923      	ldr	r3, [r4, #16]
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	89a3      	ldrh	r3, [r4, #12]
 80075ac:	f043 0308 	orr.w	r3, r3, #8
 80075b0:	81a3      	strh	r3, [r4, #12]
 80075b2:	6923      	ldr	r3, [r4, #16]
 80075b4:	b94b      	cbnz	r3, 80075ca <__swsetup_r+0x7a>
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80075bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075c0:	d003      	beq.n	80075ca <__swsetup_r+0x7a>
 80075c2:	4621      	mov	r1, r4
 80075c4:	4628      	mov	r0, r5
 80075c6:	f000 f882 	bl	80076ce <__smakebuf_r>
 80075ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ce:	f013 0201 	ands.w	r2, r3, #1
 80075d2:	d00a      	beq.n	80075ea <__swsetup_r+0x9a>
 80075d4:	2200      	movs	r2, #0
 80075d6:	60a2      	str	r2, [r4, #8]
 80075d8:	6962      	ldr	r2, [r4, #20]
 80075da:	4252      	negs	r2, r2
 80075dc:	61a2      	str	r2, [r4, #24]
 80075de:	6922      	ldr	r2, [r4, #16]
 80075e0:	b942      	cbnz	r2, 80075f4 <__swsetup_r+0xa4>
 80075e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80075e6:	d1c5      	bne.n	8007574 <__swsetup_r+0x24>
 80075e8:	bd38      	pop	{r3, r4, r5, pc}
 80075ea:	0799      	lsls	r1, r3, #30
 80075ec:	bf58      	it	pl
 80075ee:	6962      	ldrpl	r2, [r4, #20]
 80075f0:	60a2      	str	r2, [r4, #8]
 80075f2:	e7f4      	b.n	80075de <__swsetup_r+0x8e>
 80075f4:	2000      	movs	r0, #0
 80075f6:	e7f7      	b.n	80075e8 <__swsetup_r+0x98>
 80075f8:	20000018 	.word	0x20000018

080075fc <_raise_r>:
 80075fc:	291f      	cmp	r1, #31
 80075fe:	b538      	push	{r3, r4, r5, lr}
 8007600:	4605      	mov	r5, r0
 8007602:	460c      	mov	r4, r1
 8007604:	d904      	bls.n	8007610 <_raise_r+0x14>
 8007606:	2316      	movs	r3, #22
 8007608:	6003      	str	r3, [r0, #0]
 800760a:	f04f 30ff 	mov.w	r0, #4294967295
 800760e:	bd38      	pop	{r3, r4, r5, pc}
 8007610:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007612:	b112      	cbz	r2, 800761a <_raise_r+0x1e>
 8007614:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007618:	b94b      	cbnz	r3, 800762e <_raise_r+0x32>
 800761a:	4628      	mov	r0, r5
 800761c:	f000 f830 	bl	8007680 <_getpid_r>
 8007620:	4622      	mov	r2, r4
 8007622:	4601      	mov	r1, r0
 8007624:	4628      	mov	r0, r5
 8007626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800762a:	f000 b817 	b.w	800765c <_kill_r>
 800762e:	2b01      	cmp	r3, #1
 8007630:	d00a      	beq.n	8007648 <_raise_r+0x4c>
 8007632:	1c59      	adds	r1, r3, #1
 8007634:	d103      	bne.n	800763e <_raise_r+0x42>
 8007636:	2316      	movs	r3, #22
 8007638:	6003      	str	r3, [r0, #0]
 800763a:	2001      	movs	r0, #1
 800763c:	e7e7      	b.n	800760e <_raise_r+0x12>
 800763e:	2100      	movs	r1, #0
 8007640:	4620      	mov	r0, r4
 8007642:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007646:	4798      	blx	r3
 8007648:	2000      	movs	r0, #0
 800764a:	e7e0      	b.n	800760e <_raise_r+0x12>

0800764c <raise>:
 800764c:	4b02      	ldr	r3, [pc, #8]	@ (8007658 <raise+0xc>)
 800764e:	4601      	mov	r1, r0
 8007650:	6818      	ldr	r0, [r3, #0]
 8007652:	f7ff bfd3 	b.w	80075fc <_raise_r>
 8007656:	bf00      	nop
 8007658:	20000018 	.word	0x20000018

0800765c <_kill_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	2300      	movs	r3, #0
 8007660:	4d06      	ldr	r5, [pc, #24]	@ (800767c <_kill_r+0x20>)
 8007662:	4604      	mov	r4, r0
 8007664:	4608      	mov	r0, r1
 8007666:	4611      	mov	r1, r2
 8007668:	602b      	str	r3, [r5, #0]
 800766a:	f7f9 fc3e 	bl	8000eea <_kill>
 800766e:	1c43      	adds	r3, r0, #1
 8007670:	d102      	bne.n	8007678 <_kill_r+0x1c>
 8007672:	682b      	ldr	r3, [r5, #0]
 8007674:	b103      	cbz	r3, 8007678 <_kill_r+0x1c>
 8007676:	6023      	str	r3, [r4, #0]
 8007678:	bd38      	pop	{r3, r4, r5, pc}
 800767a:	bf00      	nop
 800767c:	2000038c 	.word	0x2000038c

08007680 <_getpid_r>:
 8007680:	f7f9 bc2c 	b.w	8000edc <_getpid>

08007684 <__swhatbuf_r>:
 8007684:	b570      	push	{r4, r5, r6, lr}
 8007686:	460c      	mov	r4, r1
 8007688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800768c:	4615      	mov	r5, r2
 800768e:	2900      	cmp	r1, #0
 8007690:	461e      	mov	r6, r3
 8007692:	b096      	sub	sp, #88	@ 0x58
 8007694:	da0c      	bge.n	80076b0 <__swhatbuf_r+0x2c>
 8007696:	89a3      	ldrh	r3, [r4, #12]
 8007698:	2100      	movs	r1, #0
 800769a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800769e:	bf14      	ite	ne
 80076a0:	2340      	movne	r3, #64	@ 0x40
 80076a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80076a6:	2000      	movs	r0, #0
 80076a8:	6031      	str	r1, [r6, #0]
 80076aa:	602b      	str	r3, [r5, #0]
 80076ac:	b016      	add	sp, #88	@ 0x58
 80076ae:	bd70      	pop	{r4, r5, r6, pc}
 80076b0:	466a      	mov	r2, sp
 80076b2:	f000 f849 	bl	8007748 <_fstat_r>
 80076b6:	2800      	cmp	r0, #0
 80076b8:	dbed      	blt.n	8007696 <__swhatbuf_r+0x12>
 80076ba:	9901      	ldr	r1, [sp, #4]
 80076bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80076c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80076c4:	4259      	negs	r1, r3
 80076c6:	4159      	adcs	r1, r3
 80076c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80076cc:	e7eb      	b.n	80076a6 <__swhatbuf_r+0x22>

080076ce <__smakebuf_r>:
 80076ce:	898b      	ldrh	r3, [r1, #12]
 80076d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076d2:	079d      	lsls	r5, r3, #30
 80076d4:	4606      	mov	r6, r0
 80076d6:	460c      	mov	r4, r1
 80076d8:	d507      	bpl.n	80076ea <__smakebuf_r+0x1c>
 80076da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80076de:	6023      	str	r3, [r4, #0]
 80076e0:	6123      	str	r3, [r4, #16]
 80076e2:	2301      	movs	r3, #1
 80076e4:	6163      	str	r3, [r4, #20]
 80076e6:	b003      	add	sp, #12
 80076e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ea:	466a      	mov	r2, sp
 80076ec:	ab01      	add	r3, sp, #4
 80076ee:	f7ff ffc9 	bl	8007684 <__swhatbuf_r>
 80076f2:	9f00      	ldr	r7, [sp, #0]
 80076f4:	4605      	mov	r5, r0
 80076f6:	4639      	mov	r1, r7
 80076f8:	4630      	mov	r0, r6
 80076fa:	f7fd fbd3 	bl	8004ea4 <_malloc_r>
 80076fe:	b948      	cbnz	r0, 8007714 <__smakebuf_r+0x46>
 8007700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007704:	059a      	lsls	r2, r3, #22
 8007706:	d4ee      	bmi.n	80076e6 <__smakebuf_r+0x18>
 8007708:	f023 0303 	bic.w	r3, r3, #3
 800770c:	f043 0302 	orr.w	r3, r3, #2
 8007710:	81a3      	strh	r3, [r4, #12]
 8007712:	e7e2      	b.n	80076da <__smakebuf_r+0xc>
 8007714:	89a3      	ldrh	r3, [r4, #12]
 8007716:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800771a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800771e:	81a3      	strh	r3, [r4, #12]
 8007720:	9b01      	ldr	r3, [sp, #4]
 8007722:	6020      	str	r0, [r4, #0]
 8007724:	b15b      	cbz	r3, 800773e <__smakebuf_r+0x70>
 8007726:	4630      	mov	r0, r6
 8007728:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800772c:	f000 f81e 	bl	800776c <_isatty_r>
 8007730:	b128      	cbz	r0, 800773e <__smakebuf_r+0x70>
 8007732:	89a3      	ldrh	r3, [r4, #12]
 8007734:	f023 0303 	bic.w	r3, r3, #3
 8007738:	f043 0301 	orr.w	r3, r3, #1
 800773c:	81a3      	strh	r3, [r4, #12]
 800773e:	89a3      	ldrh	r3, [r4, #12]
 8007740:	431d      	orrs	r5, r3
 8007742:	81a5      	strh	r5, [r4, #12]
 8007744:	e7cf      	b.n	80076e6 <__smakebuf_r+0x18>
	...

08007748 <_fstat_r>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	2300      	movs	r3, #0
 800774c:	4d06      	ldr	r5, [pc, #24]	@ (8007768 <_fstat_r+0x20>)
 800774e:	4604      	mov	r4, r0
 8007750:	4608      	mov	r0, r1
 8007752:	4611      	mov	r1, r2
 8007754:	602b      	str	r3, [r5, #0]
 8007756:	f7f9 fc27 	bl	8000fa8 <_fstat>
 800775a:	1c43      	adds	r3, r0, #1
 800775c:	d102      	bne.n	8007764 <_fstat_r+0x1c>
 800775e:	682b      	ldr	r3, [r5, #0]
 8007760:	b103      	cbz	r3, 8007764 <_fstat_r+0x1c>
 8007762:	6023      	str	r3, [r4, #0]
 8007764:	bd38      	pop	{r3, r4, r5, pc}
 8007766:	bf00      	nop
 8007768:	2000038c 	.word	0x2000038c

0800776c <_isatty_r>:
 800776c:	b538      	push	{r3, r4, r5, lr}
 800776e:	2300      	movs	r3, #0
 8007770:	4d05      	ldr	r5, [pc, #20]	@ (8007788 <_isatty_r+0x1c>)
 8007772:	4604      	mov	r4, r0
 8007774:	4608      	mov	r0, r1
 8007776:	602b      	str	r3, [r5, #0]
 8007778:	f7f9 fc25 	bl	8000fc6 <_isatty>
 800777c:	1c43      	adds	r3, r0, #1
 800777e:	d102      	bne.n	8007786 <_isatty_r+0x1a>
 8007780:	682b      	ldr	r3, [r5, #0]
 8007782:	b103      	cbz	r3, 8007786 <_isatty_r+0x1a>
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	bd38      	pop	{r3, r4, r5, pc}
 8007788:	2000038c 	.word	0x2000038c

0800778c <_init>:
 800778c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778e:	bf00      	nop
 8007790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007792:	bc08      	pop	{r3}
 8007794:	469e      	mov	lr, r3
 8007796:	4770      	bx	lr

08007798 <_fini>:
 8007798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779a:	bf00      	nop
 800779c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800779e:	bc08      	pop	{r3}
 80077a0:	469e      	mov	lr, r3
 80077a2:	4770      	bx	lr
