
ltc2959_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008670  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08008780  08008780  00009780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c48  08008c48  0000a1e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008c48  08008c48  00009c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c50  08008c50  0000a1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c50  08008c50  00009c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c54  08008c54  00009c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08008c58  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  200001e0  08008e38  0000a1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08008e38  0000a49c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9dd  00000000  00000000  0000a209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002299  00000000  00000000  00015be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00017e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b7  00000000  00000000  000189d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b38  00000000  00000000  00019287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8b8  00000000  00000000  00031dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008772f  00000000  00000000  00041677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8da6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004260  00000000  00000000  000c8dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000cd04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008768 	.word	0x08008768

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008768 	.word	0x08008768

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <MX_DMA_Init+0x38>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4a0b      	ldr	r2, [pc, #44]	@ (8000c0c <MX_DMA_Init+0x38>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6153      	str	r3, [r2, #20]
 8000be6:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <MX_DMA_Init+0x38>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2010      	movs	r0, #16
 8000bf8:	f000 fd6f 	bl	80016da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000bfc:	2010      	movs	r0, #16
 8000bfe:	f000 fd88 	bl	8001712 <HAL_NVIC_EnableIRQ>

}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40021000 	.word	0x40021000

08000c10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c24:	4b24      	ldr	r3, [pc, #144]	@ (8000cb8 <MX_GPIO_Init+0xa8>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a23      	ldr	r2, [pc, #140]	@ (8000cb8 <MX_GPIO_Init+0xa8>)
 8000c2a:	f043 0310 	orr.w	r3, r3, #16
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b21      	ldr	r3, [pc, #132]	@ (8000cb8 <MX_GPIO_Init+0xa8>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0310 	and.w	r3, r3, #16
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb8 <MX_GPIO_Init+0xa8>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a1d      	ldr	r2, [pc, #116]	@ (8000cb8 <MX_GPIO_Init+0xa8>)
 8000c42:	f043 0320 	orr.w	r3, r3, #32
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb8 <MX_GPIO_Init+0xa8>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0320 	and.w	r3, r3, #32
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <MX_GPIO_Init+0xa8>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a17      	ldr	r2, [pc, #92]	@ (8000cb8 <MX_GPIO_Init+0xa8>)
 8000c5a:	f043 0304 	orr.w	r3, r3, #4
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <MX_GPIO_Init+0xa8>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <MX_GPIO_Init+0xa8>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a11      	ldr	r2, [pc, #68]	@ (8000cb8 <MX_GPIO_Init+0xa8>)
 8000c72:	f043 0308 	orr.w	r3, r3, #8
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <MX_GPIO_Init+0xa8>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0308 	and.w	r3, r3, #8
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c8a:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <MX_GPIO_Init+0xac>)
 8000c8c:	f001 f840 	bl	8001d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 0310 	add.w	r3, r7, #16
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4804      	ldr	r0, [pc, #16]	@ (8000cbc <MX_GPIO_Init+0xac>)
 8000caa:	f000 fead 	bl	8001a08 <HAL_GPIO_Init>

}
 8000cae:	bf00      	nop
 8000cb0:	3720      	adds	r7, #32
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40011000 	.word	0x40011000

08000cc0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cc6:	4a13      	ldr	r2, [pc, #76]	@ (8000d14 <MX_I2C1_Init+0x54>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000ccc:	4a12      	ldr	r2, [pc, #72]	@ (8000d18 <MX_I2C1_Init+0x58>)
 8000cce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cde:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ce2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cfc:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <MX_I2C1_Init+0x50>)
 8000cfe:	f001 f839 	bl	8001d74 <HAL_I2C_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d08:	f000 f9b9 	bl	800107e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200001fc 	.word	0x200001fc
 8000d14:	40005400 	.word	0x40005400
 8000d18:	00061a80 	.word	0x00061a80

08000d1c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <MX_I2C2_Init+0x50>)
 8000d22:	4a13      	ldr	r2, [pc, #76]	@ (8000d70 <MX_I2C2_Init+0x54>)
 8000d24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000d26:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <MX_I2C2_Init+0x50>)
 8000d28:	4a12      	ldr	r2, [pc, #72]	@ (8000d74 <MX_I2C2_Init+0x58>)
 8000d2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <MX_I2C2_Init+0x50>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <MX_I2C2_Init+0x50>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <MX_I2C2_Init+0x50>)
 8000d3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d3e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <MX_I2C2_Init+0x50>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d46:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_I2C2_Init+0x50>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <MX_I2C2_Init+0x50>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <MX_I2C2_Init+0x50>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d58:	4804      	ldr	r0, [pc, #16]	@ (8000d6c <MX_I2C2_Init+0x50>)
 8000d5a:	f001 f80b 	bl	8001d74 <HAL_I2C_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d64:	f000 f98b 	bl	800107e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000250 	.word	0x20000250
 8000d70:	40005800 	.word	0x40005800
 8000d74:	00061a80 	.word	0x00061a80

08000d78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	@ 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0318 	add.w	r3, r7, #24
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a3e      	ldr	r2, [pc, #248]	@ (8000e8c <HAL_I2C_MspInit+0x114>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d14a      	bne.n	8000e2e <HAL_I2C_MspInit+0xb6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d98:	4b3d      	ldr	r3, [pc, #244]	@ (8000e90 <HAL_I2C_MspInit+0x118>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4a3c      	ldr	r2, [pc, #240]	@ (8000e90 <HAL_I2C_MspInit+0x118>)
 8000d9e:	f043 0308 	orr.w	r3, r3, #8
 8000da2:	6193      	str	r3, [r2, #24]
 8000da4:	4b3a      	ldr	r3, [pc, #232]	@ (8000e90 <HAL_I2C_MspInit+0x118>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f003 0308 	and.w	r3, r3, #8
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db0:	23c0      	movs	r3, #192	@ 0xc0
 8000db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db4:	2312      	movs	r3, #18
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f107 0318 	add.w	r3, r7, #24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4834      	ldr	r0, [pc, #208]	@ (8000e94 <HAL_I2C_MspInit+0x11c>)
 8000dc4:	f000 fe20 	bl	8001a08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dc8:	4b31      	ldr	r3, [pc, #196]	@ (8000e90 <HAL_I2C_MspInit+0x118>)
 8000dca:	69db      	ldr	r3, [r3, #28]
 8000dcc:	4a30      	ldr	r2, [pc, #192]	@ (8000e90 <HAL_I2C_MspInit+0x118>)
 8000dce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dd2:	61d3      	str	r3, [r2, #28]
 8000dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8000e90 <HAL_I2C_MspInit+0x118>)
 8000dd6:	69db      	ldr	r3, [r3, #28]
 8000dd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000de0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e98 <HAL_I2C_MspInit+0x120>)
 8000de2:	4a2e      	ldr	r2, [pc, #184]	@ (8000e9c <HAL_I2C_MspInit+0x124>)
 8000de4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000de6:	4b2c      	ldr	r3, [pc, #176]	@ (8000e98 <HAL_I2C_MspInit+0x120>)
 8000de8:	2210      	movs	r2, #16
 8000dea:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dec:	4b2a      	ldr	r3, [pc, #168]	@ (8000e98 <HAL_I2C_MspInit+0x120>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000df2:	4b29      	ldr	r3, [pc, #164]	@ (8000e98 <HAL_I2C_MspInit+0x120>)
 8000df4:	2280      	movs	r2, #128	@ 0x80
 8000df6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000df8:	4b27      	ldr	r3, [pc, #156]	@ (8000e98 <HAL_I2C_MspInit+0x120>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dfe:	4b26      	ldr	r3, [pc, #152]	@ (8000e98 <HAL_I2C_MspInit+0x120>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000e04:	4b24      	ldr	r3, [pc, #144]	@ (8000e98 <HAL_I2C_MspInit+0x120>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e0a:	4b23      	ldr	r3, [pc, #140]	@ (8000e98 <HAL_I2C_MspInit+0x120>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000e10:	4821      	ldr	r0, [pc, #132]	@ (8000e98 <HAL_I2C_MspInit+0x120>)
 8000e12:	f000 fc99 	bl	8001748 <HAL_DMA_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8000e1c:	f000 f92f 	bl	800107e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a1d      	ldr	r2, [pc, #116]	@ (8000e98 <HAL_I2C_MspInit+0x120>)
 8000e24:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e26:	4a1c      	ldr	r2, [pc, #112]	@ (8000e98 <HAL_I2C_MspInit+0x120>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000e2c:	e029      	b.n	8000e82 <HAL_I2C_MspInit+0x10a>
  else if(i2cHandle->Instance==I2C2)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea0 <HAL_I2C_MspInit+0x128>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d124      	bne.n	8000e82 <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e38:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <HAL_I2C_MspInit+0x118>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a14      	ldr	r2, [pc, #80]	@ (8000e90 <HAL_I2C_MspInit+0x118>)
 8000e3e:	f043 0308 	orr.w	r3, r3, #8
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <HAL_I2C_MspInit+0x118>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0308 	and.w	r3, r3, #8
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e50:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e56:	2312      	movs	r3, #18
 8000e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5e:	f107 0318 	add.w	r3, r7, #24
 8000e62:	4619      	mov	r1, r3
 8000e64:	480b      	ldr	r0, [pc, #44]	@ (8000e94 <HAL_I2C_MspInit+0x11c>)
 8000e66:	f000 fdcf 	bl	8001a08 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e6a:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <HAL_I2C_MspInit+0x118>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a08      	ldr	r2, [pc, #32]	@ (8000e90 <HAL_I2C_MspInit+0x118>)
 8000e70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e74:	61d3      	str	r3, [r2, #28]
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <HAL_I2C_MspInit+0x118>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	@ 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40005400 	.word	0x40005400
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40010c00 	.word	0x40010c00
 8000e98:	200002a4 	.word	0x200002a4
 8000e9c:	4002006c 	.word	0x4002006c
 8000ea0:	40005800 	.word	0x40005800

08000ea4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 1000);
 8000eac:	1d39      	adds	r1, r7, #4
 8000eae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4803      	ldr	r0, [pc, #12]	@ (8000ec4 <__io_putchar+0x20>)
 8000eb6:	f002 fd51 	bl	800395c <HAL_UART_Transmit>
  return ch;
 8000eba:	687b      	ldr	r3, [r7, #4]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000304 	.word	0x20000304

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ecc:	f000 faa8 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed0:	f000 f890 	bl	8000ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed4:	f7ff fe9c 	bl	8000c10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ed8:	f7ff fe7c 	bl	8000bd4 <MX_DMA_Init>
  MX_I2C2_Init();
 8000edc:	f7ff ff1e 	bl	8000d1c <MX_I2C2_Init>
  MX_I2C1_Init();
 8000ee0:	f7ff feee 	bl	8000cc0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000ee4:	f000 fa02 	bl	80012ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("LTC2959 Begin\n\r");
 8000ee8:	4833      	ldr	r0, [pc, #204]	@ (8000fb8 <main+0xf0>)
 8000eea:	f003 fffd 	bl	8004ee8 <iprintf>
  while(HAL_I2C_IsDeviceReady(&LTC2959_I2C_PORT, LTC2959_I2C_ADDR, 100, 1000) != HAL_OK);	// wait for it to come alive
 8000eee:	bf00      	nop
 8000ef0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef4:	2264      	movs	r2, #100	@ 0x64
 8000ef6:	21c6      	movs	r1, #198	@ 0xc6
 8000ef8:	4830      	ldr	r0, [pc, #192]	@ (8000fbc <main+0xf4>)
 8000efa:	f001 fbed 	bl	80026d8 <HAL_I2C_IsDeviceReady>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1f5      	bne.n	8000ef0 <main+0x28>
  LTC2959_Init(&ltc2959);
 8000f04:	482e      	ldr	r0, [pc, #184]	@ (8000fc0 <main+0xf8>)
 8000f06:	f002 ffea 	bl	8003ede <LTC2959_Init>
  HAL_Delay(10);
 8000f0a:	200a      	movs	r0, #10
 8000f0c:	f000 faea 	bl	80014e4 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  tick = HAL_GetTick();
 8000f10:	f000 fade 	bl	80014d0 <HAL_GetTick>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a2b      	ldr	r2, [pc, #172]	@ (8000fc4 <main+0xfc>)
 8000f18:	6013      	str	r3, [r2, #0]

	  if(tick - prev_tick >= blink_delay){
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc4 <main+0xfc>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc8 <main+0x100>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	4a29      	ldr	r2, [pc, #164]	@ (8000fcc <main+0x104>)
 8000f26:	8812      	ldrh	r2, [r2, #0]
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d308      	bcc.n	8000f3e <main+0x76>
		  prev_tick = tick;
 8000f2c:	4b25      	ldr	r3, [pc, #148]	@ (8000fc4 <main+0xfc>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a25      	ldr	r2, [pc, #148]	@ (8000fc8 <main+0x100>)
 8000f32:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000f34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f38:	4825      	ldr	r0, [pc, #148]	@ (8000fd0 <main+0x108>)
 8000f3a:	f000 ff01 	bl	8001d40 <HAL_GPIO_TogglePin>
	  }
	  if(tick - prev_print_delay >= print_delay){
 8000f3e:	4b21      	ldr	r3, [pc, #132]	@ (8000fc4 <main+0xfc>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4b24      	ldr	r3, [pc, #144]	@ (8000fd4 <main+0x10c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	1ad2      	subs	r2, r2, r3
 8000f48:	4b23      	ldr	r3, [pc, #140]	@ (8000fd8 <main+0x110>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d325      	bcc.n	8000f9c <main+0xd4>
		  voltage = LTC2959_Get_Voltage();
 8000f50:	f003 f838 	bl	8003fc4 <LTC2959_Get_Voltage>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b20      	ldr	r3, [pc, #128]	@ (8000fdc <main+0x114>)
 8000f5a:	601a      	str	r2, [r3, #0]
		  printf("LTC2959_Voltage = %ld\n\r", voltage);
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fdc <main+0x114>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	481f      	ldr	r0, [pc, #124]	@ (8000fe0 <main+0x118>)
 8000f64:	f003 ffc0 	bl	8004ee8 <iprintf>
		  current = LTC2959_Get_Current();
 8000f68:	f003 f856 	bl	8004018 <LTC2959_Get_Current>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe4 <main+0x11c>)
 8000f70:	6013      	str	r3, [r2, #0]
		  printf("LTC2959_current = %ld\n\r", current);
 8000f72:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <main+0x11c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4619      	mov	r1, r3
 8000f78:	481b      	ldr	r0, [pc, #108]	@ (8000fe8 <main+0x120>)
 8000f7a:	f003 ffb5 	bl	8004ee8 <iprintf>
		  charge = LTC2959_Get_Acc_Charge();
 8000f7e:	f002 ffd7 	bl	8003f30 <LTC2959_Get_Acc_Charge>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a19      	ldr	r2, [pc, #100]	@ (8000fec <main+0x124>)
 8000f86:	6013      	str	r3, [r2, #0]
		  printf("LTC2959_charge = %lu \n\r\v", charge);
 8000f88:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <main+0x124>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4818      	ldr	r0, [pc, #96]	@ (8000ff0 <main+0x128>)
 8000f90:	f003 ffaa 	bl	8004ee8 <iprintf>

		  prev_print_delay = tick;
 8000f94:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <main+0xfc>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd4 <main+0x10c>)
 8000f9a:	6013      	str	r3, [r2, #0]
	  }
#ifdef TEST_ACC
	  if(tick >= TEST_TIME_MS){
 8000f9c:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <main+0xfc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d9b3      	bls.n	8000f10 <main+0x48>
//		  printf("tick %ld\n\r", tick);
		  LTC2959_Set_Do_Not_Count(false); 	// Stop the counting after
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f002 ff6c 	bl	8003e86 <LTC2959_Set_Do_Not_Count>
		  HAL_Delay(1000);
 8000fae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fb2:	f000 fa97 	bl	80014e4 <HAL_Delay>
	  tick = HAL_GetTick();
 8000fb6:	e7ab      	b.n	8000f10 <main+0x48>
 8000fb8:	08008780 	.word	0x08008780
 8000fbc:	20000250 	.word	0x20000250
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	200002e8 	.word	0x200002e8
 8000fc8:	200002ec 	.word	0x200002ec
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	40011000 	.word	0x40011000
 8000fd4:	200002f0 	.word	0x200002f0
 8000fd8:	20000004 	.word	0x20000004
 8000fdc:	200002fc 	.word	0x200002fc
 8000fe0:	08008790 	.word	0x08008790
 8000fe4:	200002f8 	.word	0x200002f8
 8000fe8:	080087a8 	.word	0x080087a8
 8000fec:	200002f4 	.word	0x200002f4
 8000ff0:	080087c0 	.word	0x080087c0

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b090      	sub	sp, #64	@ 0x40
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	2228      	movs	r2, #40	@ 0x28
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f003 ffff 	bl	8005006 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001016:	2301      	movs	r3, #1
 8001018:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800101a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800101e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001024:	2301      	movs	r3, #1
 8001026:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001028:	2302      	movs	r3, #2
 800102a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001030:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001032:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001036:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001038:	f107 0318 	add.w	r3, r7, #24
 800103c:	4618      	mov	r0, r3
 800103e:	f002 f82d 	bl	800309c <HAL_RCC_OscConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001048:	f000 f819 	bl	800107e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104c:	230f      	movs	r3, #15
 800104e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001050:	2302      	movs	r3, #2
 8001052:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001058:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800105c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2102      	movs	r1, #2
 8001066:	4618      	mov	r0, r3
 8001068:	f002 fa9a 	bl	80035a0 <HAL_RCC_ClockConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001072:	f000 f804 	bl	800107e <Error_Handler>
  }
}
 8001076:	bf00      	nop
 8001078:	3740      	adds	r7, #64	@ 0x40
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001082:	b672      	cpsid	i
}
 8001084:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001086:	bf00      	nop
 8001088:	e7fd      	b.n	8001086 <Error_Handler+0x8>
	...

0800108c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_MspInit+0x5c>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	4a14      	ldr	r2, [pc, #80]	@ (80010e8 <HAL_MspInit+0x5c>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6193      	str	r3, [r2, #24]
 800109e:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <HAL_MspInit+0x5c>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <HAL_MspInit+0x5c>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	4a0e      	ldr	r2, [pc, #56]	@ (80010e8 <HAL_MspInit+0x5c>)
 80010b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b4:	61d3      	str	r3, [r2, #28]
 80010b6:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <HAL_MspInit+0x5c>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010c2:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <HAL_MspInit+0x60>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <HAL_MspInit+0x60>)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40010000 	.word	0x40010000

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <NMI_Handler+0x4>

080010f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <MemManage_Handler+0x4>

08001108 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <UsageFault_Handler+0x4>

08001118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001140:	f000 f9b4 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800114c:	4802      	ldr	r0, [pc, #8]	@ (8001158 <DMA1_Channel6_IRQHandler+0x10>)
 800114e:	f000 fb55 	bl	80017fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200002a4 	.word	0x200002a4

0800115c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return 1;
 8001160:	2301      	movs	r3, #1
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr

0800116a <_kill>:

int _kill(int pid, int sig)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001174:	f003 ff9a 	bl	80050ac <__errno>
 8001178:	4603      	mov	r3, r0
 800117a:	2216      	movs	r2, #22
 800117c:	601a      	str	r2, [r3, #0]
  return -1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <_exit>:

void _exit (int status)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001192:	f04f 31ff 	mov.w	r1, #4294967295
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ffe7 	bl	800116a <_kill>
  while (1) {}    /* Make sure we hang here */
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <_exit+0x12>

080011a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	e00a      	b.n	80011c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011b2:	f3af 8000 	nop.w
 80011b6:	4601      	mov	r1, r0
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	60ba      	str	r2, [r7, #8]
 80011be:	b2ca      	uxtb	r2, r1
 80011c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	3301      	adds	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dbf0      	blt.n	80011b2 <_read+0x12>
  }

  return len;
 80011d0:	687b      	ldr	r3, [r7, #4]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	60f8      	str	r0, [r7, #12]
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	e009      	b.n	8001200 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	60ba      	str	r2, [r7, #8]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fe55 	bl	8000ea4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3301      	adds	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	429a      	cmp	r2, r3
 8001206:	dbf1      	blt.n	80011ec <_write+0x12>
  }
  return len;
 8001208:	687b      	ldr	r3, [r7, #4]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <_close>:

int _close(int file)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001238:	605a      	str	r2, [r3, #4]
  return 0;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr

08001246 <_isatty>:

int _isatty(int file)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800125a:	b480      	push	{r7}
 800125c:	b085      	sub	sp, #20
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
	...

08001274 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800127c:	4a14      	ldr	r2, [pc, #80]	@ (80012d0 <_sbrk+0x5c>)
 800127e:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <_sbrk+0x60>)
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001288:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <_sbrk+0x64>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d102      	bne.n	8001296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <_sbrk+0x64>)
 8001292:	4a12      	ldr	r2, [pc, #72]	@ (80012dc <_sbrk+0x68>)
 8001294:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001296:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <_sbrk+0x64>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d207      	bcs.n	80012b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a4:	f003 ff02 	bl	80050ac <__errno>
 80012a8:	4603      	mov	r3, r0
 80012aa:	220c      	movs	r2, #12
 80012ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	e009      	b.n	80012c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b4:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ba:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	4a05      	ldr	r2, [pc, #20]	@ (80012d8 <_sbrk+0x64>)
 80012c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012c6:	68fb      	ldr	r3, [r7, #12]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20005000 	.word	0x20005000
 80012d4:	00000400 	.word	0x00000400
 80012d8:	20000300 	.word	0x20000300
 80012dc:	200004a0 	.word	0x200004a0

080012e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f0:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	@ (800133c <MX_USART2_UART_Init+0x50>)
 80012f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 80012f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800130a:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001310:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 8001312:	2208      	movs	r2, #8
 8001314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001322:	4805      	ldr	r0, [pc, #20]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 8001324:	f002 faca 	bl	80038bc <HAL_UART_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800132e:	f7ff fea6 	bl	800107e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000304 	.word	0x20000304
 800133c:	40004400 	.word	0x40004400

08001340 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a1b      	ldr	r2, [pc, #108]	@ (80013c8 <HAL_UART_MspInit+0x88>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d12f      	bne.n	80013c0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001360:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <HAL_UART_MspInit+0x8c>)
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	4a19      	ldr	r2, [pc, #100]	@ (80013cc <HAL_UART_MspInit+0x8c>)
 8001366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800136a:	61d3      	str	r3, [r2, #28]
 800136c:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <HAL_UART_MspInit+0x8c>)
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <HAL_UART_MspInit+0x8c>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a13      	ldr	r2, [pc, #76]	@ (80013cc <HAL_UART_MspInit+0x8c>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <HAL_UART_MspInit+0x8c>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001390:	2304      	movs	r3, #4
 8001392:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	480b      	ldr	r0, [pc, #44]	@ (80013d0 <HAL_UART_MspInit+0x90>)
 80013a4:	f000 fb30 	bl	8001a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013a8:	2308      	movs	r3, #8
 80013aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4619      	mov	r1, r3
 80013ba:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <HAL_UART_MspInit+0x90>)
 80013bc:	f000 fb24 	bl	8001a08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013c0:	bf00      	nop
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40004400 	.word	0x40004400
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010800 	.word	0x40010800

080013d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013d4:	f7ff ff84 	bl	80012e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d8:	480b      	ldr	r0, [pc, #44]	@ (8001408 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013da:	490c      	ldr	r1, [pc, #48]	@ (800140c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001410 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e0:	e002      	b.n	80013e8 <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e6:	3304      	adds	r3, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ec:	d3f9      	bcc.n	80013e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ee:	4a09      	ldr	r2, [pc, #36]	@ (8001414 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013f0:	4c09      	ldr	r4, [pc, #36]	@ (8001418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f4:	e001      	b.n	80013fa <LoopFillZerobss>

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f8:	3204      	adds	r2, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fe:	f003 fe5b 	bl	80050b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001402:	f7ff fd61 	bl	8000ec8 <main>
  bx lr
 8001406:	4770      	bx	lr
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001410:	08008c58 	.word	0x08008c58
  ldr r2, =_sbss
 8001414:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001418:	2000049c 	.word	0x2000049c

0800141c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_2_IRQHandler>
	...

08001420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <HAL_Init+0x28>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a07      	ldr	r2, [pc, #28]	@ (8001448 <HAL_Init+0x28>)
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f000 f947 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001436:	200f      	movs	r0, #15
 8001438:	f000 f808 	bl	800144c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143c:	f7ff fe26 	bl	800108c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40022000 	.word	0x40022000

0800144c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_InitTick+0x54>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <HAL_InitTick+0x58>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001462:	fbb3 f3f1 	udiv	r3, r3, r1
 8001466:	fbb2 f3f3 	udiv	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f95f 	bl	800172e <HAL_SYSTICK_Config>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e00e      	b.n	8001498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d80a      	bhi.n	8001496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f000 f927 	bl	80016da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800148c:	4a06      	ldr	r2, [pc, #24]	@ (80014a8 <HAL_InitTick+0x5c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2000000c 	.word	0x2000000c
 80014a4:	20000014 	.word	0x20000014
 80014a8:	20000010 	.word	0x20000010

080014ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <HAL_IncTick+0x1c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <HAL_IncTick+0x20>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a03      	ldr	r2, [pc, #12]	@ (80014cc <HAL_IncTick+0x20>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	20000014 	.word	0x20000014
 80014cc:	2000034c 	.word	0x2000034c

080014d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b02      	ldr	r3, [pc, #8]	@ (80014e0 <HAL_GetTick+0x10>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	2000034c 	.word	0x2000034c

080014e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff fff0 	bl	80014d0 <HAL_GetTick>
 80014f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fc:	d005      	beq.n	800150a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <HAL_Delay+0x44>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150a:	bf00      	nop
 800150c:	f7ff ffe0 	bl	80014d0 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d8f7      	bhi.n	800150c <HAL_Delay+0x28>
  {
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000014 	.word	0x20000014

0800152c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800153c:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001548:	4013      	ands	r3, r2
 800154a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001554:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800155c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155e:	4a04      	ldr	r2, [pc, #16]	@ (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	60d3      	str	r3, [r2, #12]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001578:	4b04      	ldr	r3, [pc, #16]	@ (800158c <__NVIC_GetPriorityGrouping+0x18>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	0a1b      	lsrs	r3, r3, #8
 800157e:	f003 0307 	and.w	r3, r3, #7
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	db0b      	blt.n	80015ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	f003 021f 	and.w	r2, r3, #31
 80015a8:	4906      	ldr	r1, [pc, #24]	@ (80015c4 <__NVIC_EnableIRQ+0x34>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	095b      	lsrs	r3, r3, #5
 80015b0:	2001      	movs	r0, #1
 80015b2:	fa00 f202 	lsl.w	r2, r0, r2
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	@ (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	@ (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	@ 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	@ 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001690:	d301      	bcc.n	8001696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001692:	2301      	movs	r3, #1
 8001694:	e00f      	b.n	80016b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001696:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <SysTick_Config+0x40>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169e:	210f      	movs	r1, #15
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f7ff ff90 	bl	80015c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <SysTick_Config+0x40>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ae:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <SysTick_Config+0x40>)
 80016b0:	2207      	movs	r2, #7
 80016b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff2d 	bl	800152c <__NVIC_SetPriorityGrouping>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ec:	f7ff ff42 	bl	8001574 <__NVIC_GetPriorityGrouping>
 80016f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	6978      	ldr	r0, [r7, #20]
 80016f8:	f7ff ff90 	bl	800161c <NVIC_EncodePriority>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff5f 	bl	80015c8 <__NVIC_SetPriority>
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff35 	bl	8001590 <__NVIC_EnableIRQ>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffa2 	bl	8001680 <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e043      	b.n	80017e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	4b22      	ldr	r3, [pc, #136]	@ (80017f0 <HAL_DMA_Init+0xa8>)
 8001766:	4413      	add	r3, r2
 8001768:	4a22      	ldr	r2, [pc, #136]	@ (80017f4 <HAL_DMA_Init+0xac>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	091b      	lsrs	r3, r3, #4
 8001770:	009a      	lsls	r2, r3, #2
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a1f      	ldr	r2, [pc, #124]	@ (80017f8 <HAL_DMA_Init+0xb0>)
 800177a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2202      	movs	r2, #2
 8001780:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001792:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001796:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	bffdfff8 	.word	0xbffdfff8
 80017f4:	cccccccd 	.word	0xcccccccd
 80017f8:	40020000 	.word	0x40020000

080017fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001818:	2204      	movs	r2, #4
 800181a:	409a      	lsls	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d04f      	beq.n	80018c4 <HAL_DMA_IRQHandler+0xc8>
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	2b00      	cmp	r3, #0
 800182c:	d04a      	beq.n	80018c4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0320 	and.w	r3, r3, #32
 8001838:	2b00      	cmp	r3, #0
 800183a:	d107      	bne.n	800184c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0204 	bic.w	r2, r2, #4
 800184a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a66      	ldr	r2, [pc, #408]	@ (80019ec <HAL_DMA_IRQHandler+0x1f0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d029      	beq.n	80018aa <HAL_DMA_IRQHandler+0xae>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a65      	ldr	r2, [pc, #404]	@ (80019f0 <HAL_DMA_IRQHandler+0x1f4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d022      	beq.n	80018a6 <HAL_DMA_IRQHandler+0xaa>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a63      	ldr	r2, [pc, #396]	@ (80019f4 <HAL_DMA_IRQHandler+0x1f8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d01a      	beq.n	80018a0 <HAL_DMA_IRQHandler+0xa4>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a62      	ldr	r2, [pc, #392]	@ (80019f8 <HAL_DMA_IRQHandler+0x1fc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d012      	beq.n	800189a <HAL_DMA_IRQHandler+0x9e>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a60      	ldr	r2, [pc, #384]	@ (80019fc <HAL_DMA_IRQHandler+0x200>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d00a      	beq.n	8001894 <HAL_DMA_IRQHandler+0x98>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a5f      	ldr	r2, [pc, #380]	@ (8001a00 <HAL_DMA_IRQHandler+0x204>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d102      	bne.n	800188e <HAL_DMA_IRQHandler+0x92>
 8001888:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800188c:	e00e      	b.n	80018ac <HAL_DMA_IRQHandler+0xb0>
 800188e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001892:	e00b      	b.n	80018ac <HAL_DMA_IRQHandler+0xb0>
 8001894:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001898:	e008      	b.n	80018ac <HAL_DMA_IRQHandler+0xb0>
 800189a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800189e:	e005      	b.n	80018ac <HAL_DMA_IRQHandler+0xb0>
 80018a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018a4:	e002      	b.n	80018ac <HAL_DMA_IRQHandler+0xb0>
 80018a6:	2340      	movs	r3, #64	@ 0x40
 80018a8:	e000      	b.n	80018ac <HAL_DMA_IRQHandler+0xb0>
 80018aa:	2304      	movs	r3, #4
 80018ac:	4a55      	ldr	r2, [pc, #340]	@ (8001a04 <HAL_DMA_IRQHandler+0x208>)
 80018ae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 8094 	beq.w	80019e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80018c2:	e08e      	b.n	80019e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	2202      	movs	r2, #2
 80018ca:	409a      	lsls	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d056      	beq.n	8001982 <HAL_DMA_IRQHandler+0x186>
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d051      	beq.n	8001982 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0320 	and.w	r3, r3, #32
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10b      	bne.n	8001904 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 020a 	bic.w	r2, r2, #10
 80018fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a38      	ldr	r2, [pc, #224]	@ (80019ec <HAL_DMA_IRQHandler+0x1f0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d029      	beq.n	8001962 <HAL_DMA_IRQHandler+0x166>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a37      	ldr	r2, [pc, #220]	@ (80019f0 <HAL_DMA_IRQHandler+0x1f4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d022      	beq.n	800195e <HAL_DMA_IRQHandler+0x162>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a35      	ldr	r2, [pc, #212]	@ (80019f4 <HAL_DMA_IRQHandler+0x1f8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d01a      	beq.n	8001958 <HAL_DMA_IRQHandler+0x15c>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a34      	ldr	r2, [pc, #208]	@ (80019f8 <HAL_DMA_IRQHandler+0x1fc>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d012      	beq.n	8001952 <HAL_DMA_IRQHandler+0x156>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a32      	ldr	r2, [pc, #200]	@ (80019fc <HAL_DMA_IRQHandler+0x200>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00a      	beq.n	800194c <HAL_DMA_IRQHandler+0x150>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a31      	ldr	r2, [pc, #196]	@ (8001a00 <HAL_DMA_IRQHandler+0x204>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d102      	bne.n	8001946 <HAL_DMA_IRQHandler+0x14a>
 8001940:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001944:	e00e      	b.n	8001964 <HAL_DMA_IRQHandler+0x168>
 8001946:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800194a:	e00b      	b.n	8001964 <HAL_DMA_IRQHandler+0x168>
 800194c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001950:	e008      	b.n	8001964 <HAL_DMA_IRQHandler+0x168>
 8001952:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001956:	e005      	b.n	8001964 <HAL_DMA_IRQHandler+0x168>
 8001958:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800195c:	e002      	b.n	8001964 <HAL_DMA_IRQHandler+0x168>
 800195e:	2320      	movs	r3, #32
 8001960:	e000      	b.n	8001964 <HAL_DMA_IRQHandler+0x168>
 8001962:	2302      	movs	r3, #2
 8001964:	4a27      	ldr	r2, [pc, #156]	@ (8001a04 <HAL_DMA_IRQHandler+0x208>)
 8001966:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001974:	2b00      	cmp	r3, #0
 8001976:	d034      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001980:	e02f      	b.n	80019e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	2208      	movs	r2, #8
 8001988:	409a      	lsls	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d028      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x1e8>
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b00      	cmp	r3, #0
 800199a:	d023      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 020e 	bic.w	r2, r2, #14
 80019aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019b4:	2101      	movs	r1, #1
 80019b6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d004      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	4798      	blx	r3
    }
  }
  return;
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
}
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40020008 	.word	0x40020008
 80019f0:	4002001c 	.word	0x4002001c
 80019f4:	40020030 	.word	0x40020030
 80019f8:	40020044 	.word	0x40020044
 80019fc:	40020058 	.word	0x40020058
 8001a00:	4002006c 	.word	0x4002006c
 8001a04:	40020000 	.word	0x40020000

08001a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b08b      	sub	sp, #44	@ 0x2c
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a1a:	e169      	b.n	8001cf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	f040 8158 	bne.w	8001cea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4a9a      	ldr	r2, [pc, #616]	@ (8001ca8 <HAL_GPIO_Init+0x2a0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d05e      	beq.n	8001b02 <HAL_GPIO_Init+0xfa>
 8001a44:	4a98      	ldr	r2, [pc, #608]	@ (8001ca8 <HAL_GPIO_Init+0x2a0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d875      	bhi.n	8001b36 <HAL_GPIO_Init+0x12e>
 8001a4a:	4a98      	ldr	r2, [pc, #608]	@ (8001cac <HAL_GPIO_Init+0x2a4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d058      	beq.n	8001b02 <HAL_GPIO_Init+0xfa>
 8001a50:	4a96      	ldr	r2, [pc, #600]	@ (8001cac <HAL_GPIO_Init+0x2a4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d86f      	bhi.n	8001b36 <HAL_GPIO_Init+0x12e>
 8001a56:	4a96      	ldr	r2, [pc, #600]	@ (8001cb0 <HAL_GPIO_Init+0x2a8>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d052      	beq.n	8001b02 <HAL_GPIO_Init+0xfa>
 8001a5c:	4a94      	ldr	r2, [pc, #592]	@ (8001cb0 <HAL_GPIO_Init+0x2a8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d869      	bhi.n	8001b36 <HAL_GPIO_Init+0x12e>
 8001a62:	4a94      	ldr	r2, [pc, #592]	@ (8001cb4 <HAL_GPIO_Init+0x2ac>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d04c      	beq.n	8001b02 <HAL_GPIO_Init+0xfa>
 8001a68:	4a92      	ldr	r2, [pc, #584]	@ (8001cb4 <HAL_GPIO_Init+0x2ac>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d863      	bhi.n	8001b36 <HAL_GPIO_Init+0x12e>
 8001a6e:	4a92      	ldr	r2, [pc, #584]	@ (8001cb8 <HAL_GPIO_Init+0x2b0>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d046      	beq.n	8001b02 <HAL_GPIO_Init+0xfa>
 8001a74:	4a90      	ldr	r2, [pc, #576]	@ (8001cb8 <HAL_GPIO_Init+0x2b0>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d85d      	bhi.n	8001b36 <HAL_GPIO_Init+0x12e>
 8001a7a:	2b12      	cmp	r3, #18
 8001a7c:	d82a      	bhi.n	8001ad4 <HAL_GPIO_Init+0xcc>
 8001a7e:	2b12      	cmp	r3, #18
 8001a80:	d859      	bhi.n	8001b36 <HAL_GPIO_Init+0x12e>
 8001a82:	a201      	add	r2, pc, #4	@ (adr r2, 8001a88 <HAL_GPIO_Init+0x80>)
 8001a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a88:	08001b03 	.word	0x08001b03
 8001a8c:	08001add 	.word	0x08001add
 8001a90:	08001aef 	.word	0x08001aef
 8001a94:	08001b31 	.word	0x08001b31
 8001a98:	08001b37 	.word	0x08001b37
 8001a9c:	08001b37 	.word	0x08001b37
 8001aa0:	08001b37 	.word	0x08001b37
 8001aa4:	08001b37 	.word	0x08001b37
 8001aa8:	08001b37 	.word	0x08001b37
 8001aac:	08001b37 	.word	0x08001b37
 8001ab0:	08001b37 	.word	0x08001b37
 8001ab4:	08001b37 	.word	0x08001b37
 8001ab8:	08001b37 	.word	0x08001b37
 8001abc:	08001b37 	.word	0x08001b37
 8001ac0:	08001b37 	.word	0x08001b37
 8001ac4:	08001b37 	.word	0x08001b37
 8001ac8:	08001b37 	.word	0x08001b37
 8001acc:	08001ae5 	.word	0x08001ae5
 8001ad0:	08001af9 	.word	0x08001af9
 8001ad4:	4a79      	ldr	r2, [pc, #484]	@ (8001cbc <HAL_GPIO_Init+0x2b4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ada:	e02c      	b.n	8001b36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	623b      	str	r3, [r7, #32]
          break;
 8001ae2:	e029      	b.n	8001b38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	623b      	str	r3, [r7, #32]
          break;
 8001aec:	e024      	b.n	8001b38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	3308      	adds	r3, #8
 8001af4:	623b      	str	r3, [r7, #32]
          break;
 8001af6:	e01f      	b.n	8001b38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	330c      	adds	r3, #12
 8001afe:	623b      	str	r3, [r7, #32]
          break;
 8001b00:	e01a      	b.n	8001b38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d102      	bne.n	8001b10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	623b      	str	r3, [r7, #32]
          break;
 8001b0e:	e013      	b.n	8001b38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d105      	bne.n	8001b24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b18:	2308      	movs	r3, #8
 8001b1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	611a      	str	r2, [r3, #16]
          break;
 8001b22:	e009      	b.n	8001b38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b24:	2308      	movs	r3, #8
 8001b26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69fa      	ldr	r2, [r7, #28]
 8001b2c:	615a      	str	r2, [r3, #20]
          break;
 8001b2e:	e003      	b.n	8001b38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b30:	2300      	movs	r3, #0
 8001b32:	623b      	str	r3, [r7, #32]
          break;
 8001b34:	e000      	b.n	8001b38 <HAL_GPIO_Init+0x130>
          break;
 8001b36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	2bff      	cmp	r3, #255	@ 0xff
 8001b3c:	d801      	bhi.n	8001b42 <HAL_GPIO_Init+0x13a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	e001      	b.n	8001b46 <HAL_GPIO_Init+0x13e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3304      	adds	r3, #4
 8001b46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	2bff      	cmp	r3, #255	@ 0xff
 8001b4c:	d802      	bhi.n	8001b54 <HAL_GPIO_Init+0x14c>
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	e002      	b.n	8001b5a <HAL_GPIO_Init+0x152>
 8001b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b56:	3b08      	subs	r3, #8
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	210f      	movs	r1, #15
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	fa01 f303 	lsl.w	r3, r1, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	6a39      	ldr	r1, [r7, #32]
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	fa01 f303 	lsl.w	r3, r1, r3
 8001b74:	431a      	orrs	r2, r3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 80b1 	beq.w	8001cea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b88:	4b4d      	ldr	r3, [pc, #308]	@ (8001cc0 <HAL_GPIO_Init+0x2b8>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a4c      	ldr	r2, [pc, #304]	@ (8001cc0 <HAL_GPIO_Init+0x2b8>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6193      	str	r3, [r2, #24]
 8001b94:	4b4a      	ldr	r3, [pc, #296]	@ (8001cc0 <HAL_GPIO_Init+0x2b8>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ba0:	4a48      	ldr	r2, [pc, #288]	@ (8001cc4 <HAL_GPIO_Init+0x2bc>)
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	089b      	lsrs	r3, r3, #2
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a40      	ldr	r2, [pc, #256]	@ (8001cc8 <HAL_GPIO_Init+0x2c0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d013      	beq.n	8001bf4 <HAL_GPIO_Init+0x1ec>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a3f      	ldr	r2, [pc, #252]	@ (8001ccc <HAL_GPIO_Init+0x2c4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d00d      	beq.n	8001bf0 <HAL_GPIO_Init+0x1e8>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a3e      	ldr	r2, [pc, #248]	@ (8001cd0 <HAL_GPIO_Init+0x2c8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d007      	beq.n	8001bec <HAL_GPIO_Init+0x1e4>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a3d      	ldr	r2, [pc, #244]	@ (8001cd4 <HAL_GPIO_Init+0x2cc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d101      	bne.n	8001be8 <HAL_GPIO_Init+0x1e0>
 8001be4:	2303      	movs	r3, #3
 8001be6:	e006      	b.n	8001bf6 <HAL_GPIO_Init+0x1ee>
 8001be8:	2304      	movs	r3, #4
 8001bea:	e004      	b.n	8001bf6 <HAL_GPIO_Init+0x1ee>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e002      	b.n	8001bf6 <HAL_GPIO_Init+0x1ee>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <HAL_GPIO_Init+0x1ee>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bf8:	f002 0203 	and.w	r2, r2, #3
 8001bfc:	0092      	lsls	r2, r2, #2
 8001bfe:	4093      	lsls	r3, r2
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c06:	492f      	ldr	r1, [pc, #188]	@ (8001cc4 <HAL_GPIO_Init+0x2bc>)
 8001c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d006      	beq.n	8001c2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c20:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	492c      	ldr	r1, [pc, #176]	@ (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]
 8001c2c:	e006      	b.n	8001c3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	4928      	ldr	r1, [pc, #160]	@ (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d006      	beq.n	8001c56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c48:	4b23      	ldr	r3, [pc, #140]	@ (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	4922      	ldr	r1, [pc, #136]	@ (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	60cb      	str	r3, [r1, #12]
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c56:	4b20      	ldr	r3, [pc, #128]	@ (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	491e      	ldr	r1, [pc, #120]	@ (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d006      	beq.n	8001c7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c70:	4b19      	ldr	r3, [pc, #100]	@ (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4918      	ldr	r1, [pc, #96]	@ (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
 8001c7c:	e006      	b.n	8001c8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c7e:	4b16      	ldr	r3, [pc, #88]	@ (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	4914      	ldr	r1, [pc, #80]	@ (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d021      	beq.n	8001cdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c98:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	490e      	ldr	r1, [pc, #56]	@ (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	600b      	str	r3, [r1, #0]
 8001ca4:	e021      	b.n	8001cea <HAL_GPIO_Init+0x2e2>
 8001ca6:	bf00      	nop
 8001ca8:	10320000 	.word	0x10320000
 8001cac:	10310000 	.word	0x10310000
 8001cb0:	10220000 	.word	0x10220000
 8001cb4:	10210000 	.word	0x10210000
 8001cb8:	10120000 	.word	0x10120000
 8001cbc:	10110000 	.word	0x10110000
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40010000 	.word	0x40010000
 8001cc8:	40010800 	.word	0x40010800
 8001ccc:	40010c00 	.word	0x40010c00
 8001cd0:	40011000 	.word	0x40011000
 8001cd4:	40011400 	.word	0x40011400
 8001cd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <HAL_GPIO_Init+0x304>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	4909      	ldr	r1, [pc, #36]	@ (8001d0c <HAL_GPIO_Init+0x304>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	3301      	adds	r3, #1
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f47f ae8e 	bne.w	8001a1c <HAL_GPIO_Init+0x14>
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	372c      	adds	r7, #44	@ 0x2c
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	40010400 	.word	0x40010400

08001d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	807b      	strh	r3, [r7, #2]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d20:	787b      	ldrb	r3, [r7, #1]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d26:	887a      	ldrh	r2, [r7, #2]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d2c:	e003      	b.n	8001d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d2e:	887b      	ldrh	r3, [r7, #2]
 8001d30:	041a      	lsls	r2, r3, #16
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	611a      	str	r2, [r3, #16]
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d52:	887a      	ldrh	r2, [r7, #2]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4013      	ands	r3, r2
 8001d58:	041a      	lsls	r2, r3, #16
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	43d9      	mvns	r1, r3
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	400b      	ands	r3, r1
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	611a      	str	r2, [r3, #16]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
	...

08001d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e12b      	b.n	8001fde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe ffec 	bl	8000d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2224      	movs	r2, #36	@ 0x24
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001dc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dd8:	f001 fd2a 	bl	8003830 <HAL_RCC_GetPCLK1Freq>
 8001ddc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4a81      	ldr	r2, [pc, #516]	@ (8001fe8 <HAL_I2C_Init+0x274>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d807      	bhi.n	8001df8 <HAL_I2C_Init+0x84>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4a80      	ldr	r2, [pc, #512]	@ (8001fec <HAL_I2C_Init+0x278>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	bf94      	ite	ls
 8001df0:	2301      	movls	r3, #1
 8001df2:	2300      	movhi	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	e006      	b.n	8001e06 <HAL_I2C_Init+0x92>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4a7d      	ldr	r2, [pc, #500]	@ (8001ff0 <HAL_I2C_Init+0x27c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	bf94      	ite	ls
 8001e00:	2301      	movls	r3, #1
 8001e02:	2300      	movhi	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e0e7      	b.n	8001fde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4a78      	ldr	r2, [pc, #480]	@ (8001ff4 <HAL_I2C_Init+0x280>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	0c9b      	lsrs	r3, r3, #18
 8001e18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4a6a      	ldr	r2, [pc, #424]	@ (8001fe8 <HAL_I2C_Init+0x274>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d802      	bhi.n	8001e48 <HAL_I2C_Init+0xd4>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	3301      	adds	r3, #1
 8001e46:	e009      	b.n	8001e5c <HAL_I2C_Init+0xe8>
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e4e:	fb02 f303 	mul.w	r3, r2, r3
 8001e52:	4a69      	ldr	r2, [pc, #420]	@ (8001ff8 <HAL_I2C_Init+0x284>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	099b      	lsrs	r3, r3, #6
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e6e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	495c      	ldr	r1, [pc, #368]	@ (8001fe8 <HAL_I2C_Init+0x274>)
 8001e78:	428b      	cmp	r3, r1
 8001e7a:	d819      	bhi.n	8001eb0 <HAL_I2C_Init+0x13c>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1e59      	subs	r1, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e8a:	1c59      	adds	r1, r3, #1
 8001e8c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e90:	400b      	ands	r3, r1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00a      	beq.n	8001eac <HAL_I2C_Init+0x138>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1e59      	subs	r1, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eaa:	e051      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001eac:	2304      	movs	r3, #4
 8001eae:	e04f      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d111      	bne.n	8001edc <HAL_I2C_Init+0x168>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1e58      	subs	r0, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	440b      	add	r3, r1
 8001ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	e012      	b.n	8001f02 <HAL_I2C_Init+0x18e>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1e58      	subs	r0, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	0099      	lsls	r1, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_I2C_Init+0x196>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e022      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10e      	bne.n	8001f30 <HAL_I2C_Init+0x1bc>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1e58      	subs	r0, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6859      	ldr	r1, [r3, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	440b      	add	r3, r1
 8001f20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f24:	3301      	adds	r3, #1
 8001f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f2e:	e00f      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1e58      	subs	r0, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	0099      	lsls	r1, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f46:	3301      	adds	r3, #1
 8001f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	6809      	ldr	r1, [r1, #0]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69da      	ldr	r2, [r3, #28]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6911      	ldr	r1, [r2, #16]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68d2      	ldr	r2, [r2, #12]
 8001f8a:	4311      	orrs	r1, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	430b      	orrs	r3, r1
 8001f92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	000186a0 	.word	0x000186a0
 8001fec:	001e847f 	.word	0x001e847f
 8001ff0:	003d08ff 	.word	0x003d08ff
 8001ff4:	431bde83 	.word	0x431bde83
 8001ff8:	10624dd3 	.word	0x10624dd3

08001ffc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	4608      	mov	r0, r1
 8002006:	4611      	mov	r1, r2
 8002008:	461a      	mov	r2, r3
 800200a:	4603      	mov	r3, r0
 800200c:	817b      	strh	r3, [r7, #10]
 800200e:	460b      	mov	r3, r1
 8002010:	813b      	strh	r3, [r7, #8]
 8002012:	4613      	mov	r3, r2
 8002014:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002016:	f7ff fa5b 	bl	80014d0 <HAL_GetTick>
 800201a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b20      	cmp	r3, #32
 8002026:	f040 80d9 	bne.w	80021dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2319      	movs	r3, #25
 8002030:	2201      	movs	r2, #1
 8002032:	496d      	ldr	r1, [pc, #436]	@ (80021e8 <HAL_I2C_Mem_Write+0x1ec>)
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 fdfb 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002040:	2302      	movs	r3, #2
 8002042:	e0cc      	b.n	80021de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_I2C_Mem_Write+0x56>
 800204e:	2302      	movs	r3, #2
 8002050:	e0c5      	b.n	80021de <HAL_I2C_Mem_Write+0x1e2>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b01      	cmp	r3, #1
 8002066:	d007      	beq.n	8002078 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002086:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2221      	movs	r2, #33	@ 0x21
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2240      	movs	r2, #64	@ 0x40
 8002094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6a3a      	ldr	r2, [r7, #32]
 80020a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80020a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4a4d      	ldr	r2, [pc, #308]	@ (80021ec <HAL_I2C_Mem_Write+0x1f0>)
 80020b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020ba:	88f8      	ldrh	r0, [r7, #6]
 80020bc:	893a      	ldrh	r2, [r7, #8]
 80020be:	8979      	ldrh	r1, [r7, #10]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	9301      	str	r3, [sp, #4]
 80020c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	4603      	mov	r3, r0
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fc32 	bl	8002934 <I2C_RequestMemoryWrite>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d052      	beq.n	800217c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e081      	b.n	80021de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 fec0 	bl	8002e64 <I2C_WaitOnTXEFlagUntilTimeout>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00d      	beq.n	8002106 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d107      	bne.n	8002102 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002100:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e06b      	b.n	80021de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210a:	781a      	ldrb	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800212c:	b29b      	uxth	r3, r3
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b04      	cmp	r3, #4
 8002142:	d11b      	bne.n	800217c <HAL_I2C_Mem_Write+0x180>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002148:	2b00      	cmp	r3, #0
 800214a:	d017      	beq.n	800217c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002150:	781a      	ldrb	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002172:	b29b      	uxth	r3, r3
 8002174:	3b01      	subs	r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1aa      	bne.n	80020da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 feb3 	bl	8002ef4 <I2C_WaitOnBTFFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00d      	beq.n	80021b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002198:	2b04      	cmp	r3, #4
 800219a:	d107      	bne.n	80021ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e016      	b.n	80021de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	e000      	b.n	80021de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021dc:	2302      	movs	r3, #2
  }
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	00100002 	.word	0x00100002
 80021ec:	ffff0000 	.word	0xffff0000

080021f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08c      	sub	sp, #48	@ 0x30
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	4608      	mov	r0, r1
 80021fa:	4611      	mov	r1, r2
 80021fc:	461a      	mov	r2, r3
 80021fe:	4603      	mov	r3, r0
 8002200:	817b      	strh	r3, [r7, #10]
 8002202:	460b      	mov	r3, r1
 8002204:	813b      	strh	r3, [r7, #8]
 8002206:	4613      	mov	r3, r2
 8002208:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800220e:	f7ff f95f 	bl	80014d0 <HAL_GetTick>
 8002212:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b20      	cmp	r3, #32
 800221e:	f040 8250 	bne.w	80026c2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	2319      	movs	r3, #25
 8002228:	2201      	movs	r2, #1
 800222a:	4982      	ldr	r1, [pc, #520]	@ (8002434 <HAL_I2C_Mem_Read+0x244>)
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 fcff 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002238:	2302      	movs	r3, #2
 800223a:	e243      	b.n	80026c4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_I2C_Mem_Read+0x5a>
 8002246:	2302      	movs	r3, #2
 8002248:	e23c      	b.n	80026c4 <HAL_I2C_Mem_Read+0x4d4>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b01      	cmp	r3, #1
 800225e:	d007      	beq.n	8002270 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800227e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2222      	movs	r2, #34	@ 0x22
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2240      	movs	r2, #64	@ 0x40
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800229a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80022a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4a62      	ldr	r2, [pc, #392]	@ (8002438 <HAL_I2C_Mem_Read+0x248>)
 80022b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022b2:	88f8      	ldrh	r0, [r7, #6]
 80022b4:	893a      	ldrh	r2, [r7, #8]
 80022b6:	8979      	ldrh	r1, [r7, #10]
 80022b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	4603      	mov	r3, r0
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 fbcc 	bl	8002a60 <I2C_RequestMemoryRead>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e1f8      	b.n	80026c4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d113      	bne.n	8002302 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	e1cc      	b.n	800269c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002306:	2b01      	cmp	r3, #1
 8002308:	d11e      	bne.n	8002348 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002318:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800231a:	b672      	cpsid	i
}
 800231c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002342:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002344:	b662      	cpsie	i
}
 8002346:	e035      	b.n	80023b4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234c:	2b02      	cmp	r3, #2
 800234e:	d11e      	bne.n	800238e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800235e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002360:	b672      	cpsid	i
}
 8002362:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002388:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800238a:	b662      	cpsie	i
}
 800238c:	e012      	b.n	80023b4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800239c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80023b4:	e172      	b.n	800269c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	f200 811f 	bhi.w	80025fe <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d123      	bne.n	8002410 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 fdd9 	bl	8002f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e173      	b.n	80026c4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800240e:	e145      	b.n	800269c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002414:	2b02      	cmp	r3, #2
 8002416:	d152      	bne.n	80024be <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800241e:	2200      	movs	r2, #0
 8002420:	4906      	ldr	r1, [pc, #24]	@ (800243c <HAL_I2C_Mem_Read+0x24c>)
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 fc04 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e148      	b.n	80026c4 <HAL_I2C_Mem_Read+0x4d4>
 8002432:	bf00      	nop
 8002434:	00100002 	.word	0x00100002
 8002438:	ffff0000 	.word	0xffff0000
 800243c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002440:	b672      	cpsid	i
}
 8002442:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002452:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002486:	b662      	cpsie	i
}
 8002488:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024bc:	e0ee      	b.n	800269c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c4:	2200      	movs	r2, #0
 80024c6:	4981      	ldr	r1, [pc, #516]	@ (80026cc <HAL_I2C_Mem_Read+0x4dc>)
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 fbb1 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0f5      	b.n	80026c4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024e8:	b672      	cpsid	i
}
 80024ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002508:	3b01      	subs	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800251e:	4b6c      	ldr	r3, [pc, #432]	@ (80026d0 <HAL_I2C_Mem_Read+0x4e0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	08db      	lsrs	r3, r3, #3
 8002524:	4a6b      	ldr	r2, [pc, #428]	@ (80026d4 <HAL_I2C_Mem_Read+0x4e4>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	0a1a      	lsrs	r2, r3, #8
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	00da      	lsls	r2, r3, #3
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	3b01      	subs	r3, #1
 800253c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d118      	bne.n	8002576 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	f043 0220 	orr.w	r2, r3, #32
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002566:	b662      	cpsie	i
}
 8002568:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e0a6      	b.n	80026c4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b04      	cmp	r3, #4
 8002582:	d1d9      	bne.n	8002538 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002592:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80025c6:	b662      	cpsie	i
}
 80025c8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e6:	3b01      	subs	r3, #1
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025fc:	e04e      	b.n	800269c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002600:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 fcbe 	bl	8002f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e058      	b.n	80026c4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b04      	cmp	r3, #4
 8002650:	d124      	bne.n	800269c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002656:	2b03      	cmp	r3, #3
 8002658:	d107      	bne.n	800266a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002668:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f47f ae88 	bne.w	80023b6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2220      	movs	r2, #32
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e000      	b.n	80026c4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80026c2:	2302      	movs	r3, #2
  }
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3728      	adds	r7, #40	@ 0x28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	00010004 	.word	0x00010004
 80026d0:	2000000c 	.word	0x2000000c
 80026d4:	14f8b589 	.word	0x14f8b589

080026d8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	@ 0x28
 80026dc:	af02      	add	r7, sp, #8
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	460b      	mov	r3, r1
 80026e6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80026e8:	f7fe fef2 	bl	80014d0 <HAL_GetTick>
 80026ec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b20      	cmp	r3, #32
 80026fc:	f040 8111 	bne.w	8002922 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	2319      	movs	r3, #25
 8002706:	2201      	movs	r2, #1
 8002708:	4988      	ldr	r1, [pc, #544]	@ (800292c <HAL_I2C_IsDeviceReady+0x254>)
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 fa90 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002716:	2302      	movs	r3, #2
 8002718:	e104      	b.n	8002924 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_I2C_IsDeviceReady+0x50>
 8002724:	2302      	movs	r3, #2
 8002726:	e0fd      	b.n	8002924 <HAL_I2C_IsDeviceReady+0x24c>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b01      	cmp	r3, #1
 800273c:	d007      	beq.n	800274e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0201 	orr.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800275c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2224      	movs	r2, #36	@ 0x24
 8002762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4a70      	ldr	r2, [pc, #448]	@ (8002930 <HAL_I2C_IsDeviceReady+0x258>)
 8002770:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002780:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2200      	movs	r2, #0
 800278a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 fa4e 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00d      	beq.n	80027b6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027a8:	d103      	bne.n	80027b2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027b0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e0b6      	b.n	8002924 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027b6:	897b      	ldrh	r3, [r7, #10]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027c4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80027c6:	f7fe fe83 	bl	80014d0 <HAL_GetTick>
 80027ca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	bf0c      	ite	eq
 80027da:	2301      	moveq	r3, #1
 80027dc:	2300      	movne	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027f0:	bf0c      	ite	eq
 80027f2:	2301      	moveq	r3, #1
 80027f4:	2300      	movne	r3, #0
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027fa:	e025      	b.n	8002848 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027fc:	f7fe fe68 	bl	80014d0 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d302      	bcc.n	8002812 <HAL_I2C_IsDeviceReady+0x13a>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d103      	bne.n	800281a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	22a0      	movs	r2, #160	@ 0xa0
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b02      	cmp	r3, #2
 8002826:	bf0c      	ite	eq
 8002828:	2301      	moveq	r3, #1
 800282a:	2300      	movne	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2ba0      	cmp	r3, #160	@ 0xa0
 8002852:	d005      	beq.n	8002860 <HAL_I2C_IsDeviceReady+0x188>
 8002854:	7dfb      	ldrb	r3, [r7, #23]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d102      	bne.n	8002860 <HAL_I2C_IsDeviceReady+0x188>
 800285a:	7dbb      	ldrb	r3, [r7, #22]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0cd      	beq.n	80027fc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b02      	cmp	r3, #2
 8002874:	d129      	bne.n	80028ca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002884:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	2319      	movs	r3, #25
 80028a2:	2201      	movs	r2, #1
 80028a4:	4921      	ldr	r1, [pc, #132]	@ (800292c <HAL_I2C_IsDeviceReady+0x254>)
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f9c2 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e036      	b.n	8002924 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e02c      	b.n	8002924 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028d8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028e2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	2319      	movs	r3, #25
 80028ea:	2201      	movs	r2, #1
 80028ec:	490f      	ldr	r1, [pc, #60]	@ (800292c <HAL_I2C_IsDeviceReady+0x254>)
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f99e 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e012      	b.n	8002924 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	3301      	adds	r3, #1
 8002902:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	429a      	cmp	r2, r3
 800290a:	f4ff af32 	bcc.w	8002772 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2220      	movs	r2, #32
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002922:	2302      	movs	r3, #2
  }
}
 8002924:	4618      	mov	r0, r3
 8002926:	3720      	adds	r7, #32
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	00100002 	.word	0x00100002
 8002930:	ffff0000 	.word	0xffff0000

08002934 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af02      	add	r7, sp, #8
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	4608      	mov	r0, r1
 800293e:	4611      	mov	r1, r2
 8002940:	461a      	mov	r2, r3
 8002942:	4603      	mov	r3, r0
 8002944:	817b      	strh	r3, [r7, #10]
 8002946:	460b      	mov	r3, r1
 8002948:	813b      	strh	r3, [r7, #8]
 800294a:	4613      	mov	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800295c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	2200      	movs	r2, #0
 8002966:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f960 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00d      	beq.n	8002992 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002984:	d103      	bne.n	800298e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800298c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e05f      	b.n	8002a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002992:	897b      	ldrh	r3, [r7, #10]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	6a3a      	ldr	r2, [r7, #32]
 80029a6:	492d      	ldr	r1, [pc, #180]	@ (8002a5c <I2C_RequestMemoryWrite+0x128>)
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f9bb 	bl	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e04c      	b.n	8002a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d0:	6a39      	ldr	r1, [r7, #32]
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 fa46 	bl	8002e64 <I2C_WaitOnTXEFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00d      	beq.n	80029fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d107      	bne.n	80029f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e02b      	b.n	8002a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d105      	bne.n	8002a0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a00:	893b      	ldrh	r3, [r7, #8]
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	611a      	str	r2, [r3, #16]
 8002a0a:	e021      	b.n	8002a50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a0c:	893b      	ldrh	r3, [r7, #8]
 8002a0e:	0a1b      	lsrs	r3, r3, #8
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a1c:	6a39      	ldr	r1, [r7, #32]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fa20 	bl	8002e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00d      	beq.n	8002a46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d107      	bne.n	8002a42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e005      	b.n	8002a52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a46:	893b      	ldrh	r3, [r7, #8]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	00010002 	.word	0x00010002

08002a60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	4608      	mov	r0, r1
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	817b      	strh	r3, [r7, #10]
 8002a72:	460b      	mov	r3, r1
 8002a74:	813b      	strh	r3, [r7, #8]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f8c2 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ac0:	d103      	bne.n	8002aca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ac8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e0aa      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ace:	897b      	ldrh	r3, [r7, #10]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002adc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae0:	6a3a      	ldr	r2, [r7, #32]
 8002ae2:	4952      	ldr	r1, [pc, #328]	@ (8002c2c <I2C_RequestMemoryRead+0x1cc>)
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f91d 	bl	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e097      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b0c:	6a39      	ldr	r1, [r7, #32]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f9a8 	bl	8002e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00d      	beq.n	8002b36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d107      	bne.n	8002b32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e076      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b3c:	893b      	ldrh	r3, [r7, #8]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	611a      	str	r2, [r3, #16]
 8002b46:	e021      	b.n	8002b8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b48:	893b      	ldrh	r3, [r7, #8]
 8002b4a:	0a1b      	lsrs	r3, r3, #8
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b58:	6a39      	ldr	r1, [r7, #32]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f982 	bl	8002e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00d      	beq.n	8002b82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d107      	bne.n	8002b7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e050      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b82:	893b      	ldrh	r3, [r7, #8]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b8e:	6a39      	ldr	r1, [r7, #32]
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f967 	bl	8002e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00d      	beq.n	8002bb8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d107      	bne.n	8002bb4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e035      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f82b 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00d      	beq.n	8002bfc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bee:	d103      	bne.n	8002bf8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bf6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e013      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bfc:	897b      	ldrh	r3, [r7, #10]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	6a3a      	ldr	r2, [r7, #32]
 8002c10:	4906      	ldr	r1, [pc, #24]	@ (8002c2c <I2C_RequestMemoryRead+0x1cc>)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f886 	bl	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	00010002 	.word	0x00010002

08002c30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c40:	e048      	b.n	8002cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d044      	beq.n	8002cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4a:	f7fe fc41 	bl	80014d0 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d302      	bcc.n	8002c60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d139      	bne.n	8002cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	0c1b      	lsrs	r3, r3, #16
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d10d      	bne.n	8002c86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	43da      	mvns	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	4013      	ands	r3, r2
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	e00c      	b.n	8002ca0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	43da      	mvns	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4013      	ands	r3, r2
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d116      	bne.n	8002cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e023      	b.n	8002d1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	0c1b      	lsrs	r3, r3, #16
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d10d      	bne.n	8002cfa <I2C_WaitOnFlagUntilTimeout+0xca>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf0c      	ite	eq
 8002cf0:	2301      	moveq	r3, #1
 8002cf2:	2300      	movne	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	e00c      	b.n	8002d14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	43da      	mvns	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	4013      	ands	r3, r2
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	bf0c      	ite	eq
 8002d0c:	2301      	moveq	r3, #1
 8002d0e:	2300      	movne	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	461a      	mov	r2, r3
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d093      	beq.n	8002c42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d32:	e071      	b.n	8002e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d42:	d123      	bne.n	8002d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d78:	f043 0204 	orr.w	r2, r3, #4
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e067      	b.n	8002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d92:	d041      	beq.n	8002e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d94:	f7fe fb9c 	bl	80014d0 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d302      	bcc.n	8002daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d136      	bne.n	8002e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	0c1b      	lsrs	r3, r3, #16
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d10c      	bne.n	8002dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	43da      	mvns	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	bf14      	ite	ne
 8002dc6:	2301      	movne	r3, #1
 8002dc8:	2300      	moveq	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	e00b      	b.n	8002de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	43da      	mvns	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d016      	beq.n	8002e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e04:	f043 0220 	orr.w	r2, r3, #32
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e021      	b.n	8002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	0c1b      	lsrs	r3, r3, #16
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d10c      	bne.n	8002e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	43da      	mvns	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	bf14      	ite	ne
 8002e34:	2301      	movne	r3, #1
 8002e36:	2300      	moveq	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	e00b      	b.n	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	43da      	mvns	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4013      	ands	r3, r2
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	bf14      	ite	ne
 8002e4e:	2301      	movne	r3, #1
 8002e50:	2300      	moveq	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f47f af6d 	bne.w	8002d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e70:	e034      	b.n	8002edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f8e3 	bl	800303e <I2C_IsAcknowledgeFailed>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e034      	b.n	8002eec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d028      	beq.n	8002edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8a:	f7fe fb21 	bl	80014d0 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d11d      	bne.n	8002edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eaa:	2b80      	cmp	r3, #128	@ 0x80
 8002eac:	d016      	beq.n	8002edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e007      	b.n	8002eec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee6:	2b80      	cmp	r3, #128	@ 0x80
 8002ee8:	d1c3      	bne.n	8002e72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f00:	e034      	b.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f89b 	bl	800303e <I2C_IsAcknowledgeFailed>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e034      	b.n	8002f7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d028      	beq.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1a:	f7fe fad9 	bl	80014d0 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d302      	bcc.n	8002f30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d11d      	bne.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d016      	beq.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e007      	b.n	8002f7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d1c3      	bne.n	8002f02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f90:	e049      	b.n	8003026 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d119      	bne.n	8002fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0210 	mvn.w	r2, #16
 8002fa8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e030      	b.n	8003036 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd4:	f7fe fa7c 	bl	80014d0 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d302      	bcc.n	8002fea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d11d      	bne.n	8003026 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff4:	2b40      	cmp	r3, #64	@ 0x40
 8002ff6:	d016      	beq.n	8003026 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	f043 0220 	orr.w	r2, r3, #32
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e007      	b.n	8003036 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003030:	2b40      	cmp	r3, #64	@ 0x40
 8003032:	d1ae      	bne.n	8002f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003054:	d11b      	bne.n	800308e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800305e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	f043 0204 	orr.w	r2, r3, #4
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
	...

0800309c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e272      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 8087 	beq.w	80031ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030bc:	4b92      	ldr	r3, [pc, #584]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 030c 	and.w	r3, r3, #12
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d00c      	beq.n	80030e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030c8:	4b8f      	ldr	r3, [pc, #572]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d112      	bne.n	80030fa <HAL_RCC_OscConfig+0x5e>
 80030d4:	4b8c      	ldr	r3, [pc, #560]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e0:	d10b      	bne.n	80030fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e2:	4b89      	ldr	r3, [pc, #548]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d06c      	beq.n	80031c8 <HAL_RCC_OscConfig+0x12c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d168      	bne.n	80031c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e24c      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003102:	d106      	bne.n	8003112 <HAL_RCC_OscConfig+0x76>
 8003104:	4b80      	ldr	r3, [pc, #512]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a7f      	ldr	r2, [pc, #508]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 800310a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	e02e      	b.n	8003170 <HAL_RCC_OscConfig+0xd4>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x98>
 800311a:	4b7b      	ldr	r3, [pc, #492]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a7a      	ldr	r2, [pc, #488]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003120:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	4b78      	ldr	r3, [pc, #480]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a77      	ldr	r2, [pc, #476]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 800312c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	e01d      	b.n	8003170 <HAL_RCC_OscConfig+0xd4>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800313c:	d10c      	bne.n	8003158 <HAL_RCC_OscConfig+0xbc>
 800313e:	4b72      	ldr	r3, [pc, #456]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a71      	ldr	r2, [pc, #452]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	4b6f      	ldr	r3, [pc, #444]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a6e      	ldr	r2, [pc, #440]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	e00b      	b.n	8003170 <HAL_RCC_OscConfig+0xd4>
 8003158:	4b6b      	ldr	r3, [pc, #428]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a6a      	ldr	r2, [pc, #424]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 800315e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003162:	6013      	str	r3, [r2, #0]
 8003164:	4b68      	ldr	r3, [pc, #416]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a67      	ldr	r2, [pc, #412]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 800316a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800316e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d013      	beq.n	80031a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7fe f9aa 	bl	80014d0 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003180:	f7fe f9a6 	bl	80014d0 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	@ 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e200      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003192:	4b5d      	ldr	r3, [pc, #372]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0xe4>
 800319e:	e014      	b.n	80031ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a0:	f7fe f996 	bl	80014d0 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a8:	f7fe f992 	bl	80014d0 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b64      	cmp	r3, #100	@ 0x64
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e1ec      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ba:	4b53      	ldr	r3, [pc, #332]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x10c>
 80031c6:	e000      	b.n	80031ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d063      	beq.n	800329e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031d6:	4b4c      	ldr	r3, [pc, #304]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00b      	beq.n	80031fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031e2:	4b49      	ldr	r3, [pc, #292]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d11c      	bne.n	8003228 <HAL_RCC_OscConfig+0x18c>
 80031ee:	4b46      	ldr	r3, [pc, #280]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d116      	bne.n	8003228 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fa:	4b43      	ldr	r3, [pc, #268]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d005      	beq.n	8003212 <HAL_RCC_OscConfig+0x176>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d001      	beq.n	8003212 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e1c0      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003212:	4b3d      	ldr	r3, [pc, #244]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4939      	ldr	r1, [pc, #228]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003222:	4313      	orrs	r3, r2
 8003224:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003226:	e03a      	b.n	800329e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d020      	beq.n	8003272 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003230:	4b36      	ldr	r3, [pc, #216]	@ (800330c <HAL_RCC_OscConfig+0x270>)
 8003232:	2201      	movs	r2, #1
 8003234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003236:	f7fe f94b 	bl	80014d0 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800323e:	f7fe f947 	bl	80014d0 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e1a1      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003250:	4b2d      	ldr	r3, [pc, #180]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f0      	beq.n	800323e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325c:	4b2a      	ldr	r3, [pc, #168]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	4927      	ldr	r1, [pc, #156]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 800326c:	4313      	orrs	r3, r2
 800326e:	600b      	str	r3, [r1, #0]
 8003270:	e015      	b.n	800329e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003272:	4b26      	ldr	r3, [pc, #152]	@ (800330c <HAL_RCC_OscConfig+0x270>)
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7fe f92a 	bl	80014d0 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003280:	f7fe f926 	bl	80014d0 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e180      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003292:	4b1d      	ldr	r3, [pc, #116]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d03a      	beq.n	8003320 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d019      	beq.n	80032e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032b2:	4b17      	ldr	r3, [pc, #92]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b8:	f7fe f90a 	bl	80014d0 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c0:	f7fe f906 	bl	80014d0 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e160      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003308 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032de:	2001      	movs	r0, #1
 80032e0:	f000 face 	bl	8003880 <RCC_Delay>
 80032e4:	e01c      	b.n	8003320 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ec:	f7fe f8f0 	bl	80014d0 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f2:	e00f      	b.n	8003314 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f4:	f7fe f8ec 	bl	80014d0 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d908      	bls.n	8003314 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e146      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	42420000 	.word	0x42420000
 8003310:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003314:	4b92      	ldr	r3, [pc, #584]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1e9      	bne.n	80032f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80a6 	beq.w	800347a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332e:	2300      	movs	r3, #0
 8003330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003332:	4b8b      	ldr	r3, [pc, #556]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10d      	bne.n	800335a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333e:	4b88      	ldr	r3, [pc, #544]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	4a87      	ldr	r2, [pc, #540]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003348:	61d3      	str	r3, [r2, #28]
 800334a:	4b85      	ldr	r3, [pc, #532]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003356:	2301      	movs	r3, #1
 8003358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335a:	4b82      	ldr	r3, [pc, #520]	@ (8003564 <HAL_RCC_OscConfig+0x4c8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d118      	bne.n	8003398 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003366:	4b7f      	ldr	r3, [pc, #508]	@ (8003564 <HAL_RCC_OscConfig+0x4c8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a7e      	ldr	r2, [pc, #504]	@ (8003564 <HAL_RCC_OscConfig+0x4c8>)
 800336c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003372:	f7fe f8ad 	bl	80014d0 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337a:	f7fe f8a9 	bl	80014d0 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b64      	cmp	r3, #100	@ 0x64
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e103      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338c:	4b75      	ldr	r3, [pc, #468]	@ (8003564 <HAL_RCC_OscConfig+0x4c8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d106      	bne.n	80033ae <HAL_RCC_OscConfig+0x312>
 80033a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	4a6e      	ldr	r2, [pc, #440]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6213      	str	r3, [r2, #32]
 80033ac:	e02d      	b.n	800340a <HAL_RCC_OscConfig+0x36e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x334>
 80033b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	4a69      	ldr	r2, [pc, #420]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	f023 0301 	bic.w	r3, r3, #1
 80033c0:	6213      	str	r3, [r2, #32]
 80033c2:	4b67      	ldr	r3, [pc, #412]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	4a66      	ldr	r2, [pc, #408]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033c8:	f023 0304 	bic.w	r3, r3, #4
 80033cc:	6213      	str	r3, [r2, #32]
 80033ce:	e01c      	b.n	800340a <HAL_RCC_OscConfig+0x36e>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b05      	cmp	r3, #5
 80033d6:	d10c      	bne.n	80033f2 <HAL_RCC_OscConfig+0x356>
 80033d8:	4b61      	ldr	r3, [pc, #388]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	4a60      	ldr	r2, [pc, #384]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033de:	f043 0304 	orr.w	r3, r3, #4
 80033e2:	6213      	str	r3, [r2, #32]
 80033e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	4a5d      	ldr	r2, [pc, #372]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6213      	str	r3, [r2, #32]
 80033f0:	e00b      	b.n	800340a <HAL_RCC_OscConfig+0x36e>
 80033f2:	4b5b      	ldr	r3, [pc, #364]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4a5a      	ldr	r2, [pc, #360]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6213      	str	r3, [r2, #32]
 80033fe:	4b58      	ldr	r3, [pc, #352]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4a57      	ldr	r2, [pc, #348]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	f023 0304 	bic.w	r3, r3, #4
 8003408:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d015      	beq.n	800343e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003412:	f7fe f85d 	bl	80014d0 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003418:	e00a      	b.n	8003430 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341a:	f7fe f859 	bl	80014d0 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003428:	4293      	cmp	r3, r2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e0b1      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003430:	4b4b      	ldr	r3, [pc, #300]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0ee      	beq.n	800341a <HAL_RCC_OscConfig+0x37e>
 800343c:	e014      	b.n	8003468 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343e:	f7fe f847 	bl	80014d0 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003444:	e00a      	b.n	800345c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003446:	f7fe f843 	bl	80014d0 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003454:	4293      	cmp	r3, r2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e09b      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800345c:	4b40      	ldr	r3, [pc, #256]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ee      	bne.n	8003446 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d105      	bne.n	800347a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346e:	4b3c      	ldr	r3, [pc, #240]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	4a3b      	ldr	r2, [pc, #236]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003474:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003478:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 8087 	beq.w	8003592 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003484:	4b36      	ldr	r3, [pc, #216]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b08      	cmp	r3, #8
 800348e:	d061      	beq.n	8003554 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d146      	bne.n	8003526 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003498:	4b33      	ldr	r3, [pc, #204]	@ (8003568 <HAL_RCC_OscConfig+0x4cc>)
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349e:	f7fe f817 	bl	80014d0 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a6:	f7fe f813 	bl	80014d0 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e06d      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b8:	4b29      	ldr	r3, [pc, #164]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f0      	bne.n	80034a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034cc:	d108      	bne.n	80034e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034ce:	4b24      	ldr	r3, [pc, #144]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	4921      	ldr	r1, [pc, #132]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a19      	ldr	r1, [r3, #32]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f0:	430b      	orrs	r3, r1
 80034f2:	491b      	ldr	r1, [pc, #108]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003568 <HAL_RCC_OscConfig+0x4cc>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fe:	f7fd ffe7 	bl	80014d0 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003506:	f7fd ffe3 	bl	80014d0 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e03d      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003518:	4b11      	ldr	r3, [pc, #68]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x46a>
 8003524:	e035      	b.n	8003592 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003526:	4b10      	ldr	r3, [pc, #64]	@ (8003568 <HAL_RCC_OscConfig+0x4cc>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fd ffd0 	bl	80014d0 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003534:	f7fd ffcc 	bl	80014d0 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e026      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003546:	4b06      	ldr	r3, [pc, #24]	@ (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x498>
 8003552:	e01e      	b.n	8003592 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d107      	bne.n	800356c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e019      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
 8003560:	40021000 	.word	0x40021000
 8003564:	40007000 	.word	0x40007000
 8003568:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800356c:	4b0b      	ldr	r3, [pc, #44]	@ (800359c <HAL_RCC_OscConfig+0x500>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	429a      	cmp	r2, r3
 800357e:	d106      	bne.n	800358e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358a:	429a      	cmp	r2, r3
 800358c:	d001      	beq.n	8003592 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40021000 	.word	0x40021000

080035a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0d0      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d910      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b67      	ldr	r3, [pc, #412]	@ (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 0207 	bic.w	r2, r3, #7
 80035ca:	4965      	ldr	r1, [pc, #404]	@ (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b63      	ldr	r3, [pc, #396]	@ (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0b8      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d020      	beq.n	8003632 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035fc:	4b59      	ldr	r3, [pc, #356]	@ (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	4a58      	ldr	r2, [pc, #352]	@ (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003602:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003606:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003614:	4b53      	ldr	r3, [pc, #332]	@ (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	4a52      	ldr	r2, [pc, #328]	@ (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 800361a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800361e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003620:	4b50      	ldr	r3, [pc, #320]	@ (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	494d      	ldr	r1, [pc, #308]	@ (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 800362e:	4313      	orrs	r3, r2
 8003630:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d040      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	4b47      	ldr	r3, [pc, #284]	@ (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d115      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e07f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365e:	4b41      	ldr	r3, [pc, #260]	@ (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e073      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366e:	4b3d      	ldr	r3, [pc, #244]	@ (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e06b      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800367e:	4b39      	ldr	r3, [pc, #228]	@ (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f023 0203 	bic.w	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4936      	ldr	r1, [pc, #216]	@ (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003690:	f7fd ff1e 	bl	80014d0 <HAL_GetTick>
 8003694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	e00a      	b.n	80036ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003698:	f7fd ff1a 	bl	80014d0 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e053      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 020c 	and.w	r2, r3, #12
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	429a      	cmp	r2, r3
 80036be:	d1eb      	bne.n	8003698 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036c0:	4b27      	ldr	r3, [pc, #156]	@ (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d210      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b24      	ldr	r3, [pc, #144]	@ (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 0207 	bic.w	r2, r3, #7
 80036d6:	4922      	ldr	r1, [pc, #136]	@ (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b20      	ldr	r3, [pc, #128]	@ (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e032      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036fc:	4b19      	ldr	r3, [pc, #100]	@ (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4916      	ldr	r1, [pc, #88]	@ (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	4313      	orrs	r3, r2
 800370c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800371a:	4b12      	ldr	r3, [pc, #72]	@ (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	490e      	ldr	r1, [pc, #56]	@ (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800372e:	f000 f821 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 8003732:	4602      	mov	r2, r0
 8003734:	4b0b      	ldr	r3, [pc, #44]	@ (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	490a      	ldr	r1, [pc, #40]	@ (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 8003740:	5ccb      	ldrb	r3, [r1, r3]
 8003742:	fa22 f303 	lsr.w	r3, r2, r3
 8003746:	4a09      	ldr	r2, [pc, #36]	@ (800376c <HAL_RCC_ClockConfig+0x1cc>)
 8003748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800374a:	4b09      	ldr	r3, [pc, #36]	@ (8003770 <HAL_RCC_ClockConfig+0x1d0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fd fe7c 	bl	800144c <HAL_InitTick>

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40022000 	.word	0x40022000
 8003764:	40021000 	.word	0x40021000
 8003768:	080087ec 	.word	0x080087ec
 800376c:	2000000c 	.word	0x2000000c
 8003770:	20000010 	.word	0x20000010

08003774 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	2300      	movs	r3, #0
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	2300      	movs	r3, #0
 8003788:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800378e:	4b1e      	ldr	r3, [pc, #120]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x94>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b04      	cmp	r3, #4
 800379c:	d002      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0x30>
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d003      	beq.n	80037aa <HAL_RCC_GetSysClockFreq+0x36>
 80037a2:	e027      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037a4:	4b19      	ldr	r3, [pc, #100]	@ (800380c <HAL_RCC_GetSysClockFreq+0x98>)
 80037a6:	613b      	str	r3, [r7, #16]
      break;
 80037a8:	e027      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	0c9b      	lsrs	r3, r3, #18
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	4a17      	ldr	r2, [pc, #92]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037b4:	5cd3      	ldrb	r3, [r2, r3]
 80037b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d010      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037c2:	4b11      	ldr	r3, [pc, #68]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x94>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	0c5b      	lsrs	r3, r3, #17
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	4a11      	ldr	r2, [pc, #68]	@ (8003814 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037ce:	5cd3      	ldrb	r3, [r2, r3]
 80037d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a0d      	ldr	r2, [pc, #52]	@ (800380c <HAL_RCC_GetSysClockFreq+0x98>)
 80037d6:	fb03 f202 	mul.w	r2, r3, r2
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	e004      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003818 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037e8:	fb02 f303 	mul.w	r3, r2, r3
 80037ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	613b      	str	r3, [r7, #16]
      break;
 80037f2:	e002      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037f4:	4b05      	ldr	r3, [pc, #20]	@ (800380c <HAL_RCC_GetSysClockFreq+0x98>)
 80037f6:	613b      	str	r3, [r7, #16]
      break;
 80037f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037fa:	693b      	ldr	r3, [r7, #16]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	371c      	adds	r7, #28
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40021000 	.word	0x40021000
 800380c:	007a1200 	.word	0x007a1200
 8003810:	08008804 	.word	0x08008804
 8003814:	08008814 	.word	0x08008814
 8003818:	003d0900 	.word	0x003d0900

0800381c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003820:	4b02      	ldr	r3, [pc, #8]	@ (800382c <HAL_RCC_GetHCLKFreq+0x10>)
 8003822:	681b      	ldr	r3, [r3, #0]
}
 8003824:	4618      	mov	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr
 800382c:	2000000c 	.word	0x2000000c

08003830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003834:	f7ff fff2 	bl	800381c <HAL_RCC_GetHCLKFreq>
 8003838:	4602      	mov	r2, r0
 800383a:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	0a1b      	lsrs	r3, r3, #8
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	4903      	ldr	r1, [pc, #12]	@ (8003854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003846:	5ccb      	ldrb	r3, [r1, r3]
 8003848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800384c:	4618      	mov	r0, r3
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40021000 	.word	0x40021000
 8003854:	080087fc 	.word	0x080087fc

08003858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800385c:	f7ff ffde 	bl	800381c <HAL_RCC_GetHCLKFreq>
 8003860:	4602      	mov	r2, r0
 8003862:	4b05      	ldr	r3, [pc, #20]	@ (8003878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	0adb      	lsrs	r3, r3, #11
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	4903      	ldr	r1, [pc, #12]	@ (800387c <HAL_RCC_GetPCLK2Freq+0x24>)
 800386e:	5ccb      	ldrb	r3, [r1, r3]
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000
 800387c:	080087fc 	.word	0x080087fc

08003880 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003888:	4b0a      	ldr	r3, [pc, #40]	@ (80038b4 <RCC_Delay+0x34>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a0a      	ldr	r2, [pc, #40]	@ (80038b8 <RCC_Delay+0x38>)
 800388e:	fba2 2303 	umull	r2, r3, r2, r3
 8003892:	0a5b      	lsrs	r3, r3, #9
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800389c:	bf00      	nop
  }
  while (Delay --);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	1e5a      	subs	r2, r3, #1
 80038a2:	60fa      	str	r2, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f9      	bne.n	800389c <RCC_Delay+0x1c>
}
 80038a8:	bf00      	nop
 80038aa:	bf00      	nop
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	2000000c 	.word	0x2000000c
 80038b8:	10624dd3 	.word	0x10624dd3

080038bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e042      	b.n	8003954 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d106      	bne.n	80038e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fd fd2c 	bl	8001340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2224      	movs	r2, #36	@ 0x24
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f971 	bl	8003be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003914:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003924:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003934:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08a      	sub	sp, #40	@ 0x28
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	4613      	mov	r3, r2
 800396a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b20      	cmp	r3, #32
 800397a:	d175      	bne.n	8003a68 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_UART_Transmit+0x2c>
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e06e      	b.n	8003a6a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2221      	movs	r2, #33	@ 0x21
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800399a:	f7fd fd99 	bl	80014d0 <HAL_GetTick>
 800399e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	88fa      	ldrh	r2, [r7, #6]
 80039a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	88fa      	ldrh	r2, [r7, #6]
 80039aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039b4:	d108      	bne.n	80039c8 <HAL_UART_Transmit+0x6c>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d104      	bne.n	80039c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	e003      	b.n	80039d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039cc:	2300      	movs	r3, #0
 80039ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039d0:	e02e      	b.n	8003a30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2200      	movs	r2, #0
 80039da:	2180      	movs	r1, #128	@ 0x80
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f848 	bl	8003a72 <UART_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e03a      	b.n	8003a6a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10b      	bne.n	8003a12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	3302      	adds	r3, #2
 8003a0e:	61bb      	str	r3, [r7, #24]
 8003a10:	e007      	b.n	8003a22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	781a      	ldrb	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1cb      	bne.n	80039d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2200      	movs	r2, #0
 8003a42:	2140      	movs	r1, #64	@ 0x40
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f814 	bl	8003a72 <UART_WaitOnFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e006      	b.n	8003a6a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	e000      	b.n	8003a6a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
  }
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3720      	adds	r7, #32
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b086      	sub	sp, #24
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a82:	e03b      	b.n	8003afc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d037      	beq.n	8003afc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8c:	f7fd fd20 	bl	80014d0 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	6a3a      	ldr	r2, [r7, #32]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d302      	bcc.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e03a      	b.n	8003b1c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d023      	beq.n	8003afc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b80      	cmp	r3, #128	@ 0x80
 8003ab8:	d020      	beq.n	8003afc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b40      	cmp	r3, #64	@ 0x40
 8003abe:	d01d      	beq.n	8003afc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d116      	bne.n	8003afc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f81d 	bl	8003b24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2208      	movs	r2, #8
 8003aee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e00f      	b.n	8003b1c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	4013      	ands	r3, r2
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	bf0c      	ite	eq
 8003b0c:	2301      	moveq	r3, #1
 8003b0e:	2300      	movne	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	461a      	mov	r2, r3
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d0b4      	beq.n	8003a84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b095      	sub	sp, #84	@ 0x54
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	330c      	adds	r3, #12
 8003b32:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b36:	e853 3f00 	ldrex	r3, [r3]
 8003b3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	330c      	adds	r3, #12
 8003b4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b4c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b54:	e841 2300 	strex	r3, r2, [r1]
 8003b58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e5      	bne.n	8003b2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3314      	adds	r3, #20
 8003b66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f023 0301 	bic.w	r3, r3, #1
 8003b76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3314      	adds	r3, #20
 8003b7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b88:	e841 2300 	strex	r3, r2, [r1]
 8003b8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1e5      	bne.n	8003b60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d119      	bne.n	8003bd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f023 0310 	bic.w	r3, r3, #16
 8003bb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	330c      	adds	r3, #12
 8003bba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bbc:	61ba      	str	r2, [r7, #24]
 8003bbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	6979      	ldr	r1, [r7, #20]
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e5      	bne.n	8003b9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003bde:	bf00      	nop
 8003be0:	3754      	adds	r7, #84	@ 0x54
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr

08003be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003c22:	f023 030c 	bic.w	r3, r3, #12
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6812      	ldr	r2, [r2, #0]
 8003c2a:	68b9      	ldr	r1, [r7, #8]
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a2c      	ldr	r2, [pc, #176]	@ (8003cfc <UART_SetConfig+0x114>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d103      	bne.n	8003c58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c50:	f7ff fe02 	bl	8003858 <HAL_RCC_GetPCLK2Freq>
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	e002      	b.n	8003c5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c58:	f7ff fdea 	bl	8003830 <HAL_RCC_GetPCLK1Freq>
 8003c5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	009a      	lsls	r2, r3, #2
 8003c68:	441a      	add	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c74:	4a22      	ldr	r2, [pc, #136]	@ (8003d00 <UART_SetConfig+0x118>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	0119      	lsls	r1, r3, #4
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	009a      	lsls	r2, r3, #2
 8003c88:	441a      	add	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c94:	4b1a      	ldr	r3, [pc, #104]	@ (8003d00 <UART_SetConfig+0x118>)
 8003c96:	fba3 0302 	umull	r0, r3, r3, r2
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	2064      	movs	r0, #100	@ 0x64
 8003c9e:	fb00 f303 	mul.w	r3, r0, r3
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	3332      	adds	r3, #50	@ 0x32
 8003ca8:	4a15      	ldr	r2, [pc, #84]	@ (8003d00 <UART_SetConfig+0x118>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cb4:	4419      	add	r1, r3
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009a      	lsls	r2, r3, #2
 8003cc0:	441a      	add	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8003d00 <UART_SetConfig+0x118>)
 8003cce:	fba3 0302 	umull	r0, r3, r3, r2
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	2064      	movs	r0, #100	@ 0x64
 8003cd6:	fb00 f303 	mul.w	r3, r0, r3
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	3332      	adds	r3, #50	@ 0x32
 8003ce0:	4a07      	ldr	r2, [pc, #28]	@ (8003d00 <UART_SetConfig+0x118>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	f003 020f 	and.w	r2, r3, #15
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	440a      	add	r2, r1
 8003cf2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cf4:	bf00      	nop
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40013800 	.word	0x40013800
 8003d00:	51eb851f 	.word	0x51eb851f

08003d04 <Write_Reg>:
 * @param  reg    The register address to write to.
 * @param  value  The value to write to the register.
 *
 * @retval HAL_StatusTypeDef  Returns HAL_OK on success, or HAL_ERROR if the write operation fails.
 */
static HAL_StatusTypeDef Write_Reg(uint8_t reg, uint8_t value) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af04      	add	r7, sp, #16
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	460a      	mov	r2, r1
 8003d0e:	71fb      	strb	r3, [r7, #7]
 8003d10:	4613      	mov	r3, r2
 8003d12:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[1] = {value}, status;
 8003d14:	79bb      	ldrb	r3, [r7, #6]
 8003d16:	733b      	strb	r3, [r7, #12]

	status = HAL_I2C_Mem_Write(&LTC2959_I2C_PORT, LTC2959_I2C_ADDR, reg, 1, &buf[0], 1, 100);
 8003d18:	79fb      	ldrb	r3, [r7, #7]
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	2364      	movs	r3, #100	@ 0x64
 8003d1e:	9302      	str	r3, [sp, #8]
 8003d20:	2301      	movs	r3, #1
 8003d22:	9301      	str	r3, [sp, #4]
 8003d24:	f107 030c 	add.w	r3, r7, #12
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	21c6      	movs	r1, #198	@ 0xc6
 8003d2e:	4805      	ldr	r0, [pc, #20]	@ (8003d44 <Write_Reg+0x40>)
 8003d30:	f7fe f964 	bl	8001ffc <HAL_I2C_Mem_Write>
 8003d34:	4603      	mov	r3, r0
 8003d36:	73fb      	strb	r3, [r7, #15]
	return status;
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000250 	.word	0x20000250

08003d48 <Read_Reg>:
 *
 * @param  reg  The register address to read from.
 *
 * @retval uint8_t  Returns the value read from the register.
 */
static uint8_t Read_Reg(uint8_t reg){
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af04      	add	r7, sp, #16
 8003d4e:	4603      	mov	r3, r0
 8003d50:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	HAL_I2C_Mem_Read(&LTC2959_I2C_PORT, LTC2959_I2C_ADDR, reg, 1, &value, 1, 100);
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	2364      	movs	r3, #100	@ 0x64
 8003d58:	9302      	str	r3, [sp, #8]
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	f107 030f 	add.w	r3, r7, #15
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	2301      	movs	r3, #1
 8003d66:	21c6      	movs	r1, #198	@ 0xc6
 8003d68:	4803      	ldr	r0, [pc, #12]	@ (8003d78 <Read_Reg+0x30>)
 8003d6a:	f7fe fa41 	bl	80021f0 <HAL_I2C_Mem_Read>
	return value;
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	20000250 	.word	0x20000250

08003d7c <Set_ADC_Mode>:
 * This function writes the specified ADC mode to the ADC control register.
 *
 * @param  mode  This parameter can be a value of @ref ADC_MODE.
 * Specifies the ADC mode to be set.
 */
static HAL_StatusTypeDef Set_ADC_Mode(uint8_t mode){
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
    uint8_t value = Read_Reg(REG_ADC_CONTROL);
 8003d86:	2001      	movs	r0, #1
 8003d88:	f7ff ffde 	bl	8003d48 <Read_Reg>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	73fb      	strb	r3, [r7, #15]
    MODIFY_REG(value, CTRL_ADC_MODE_MASK, mode);
 8003d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	b25a      	sxtb	r2, r3
 8003d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	b25b      	sxtb	r3, r3
 8003da2:	73fb      	strb	r3, [r7, #15]
    return Write_Reg(REG_ADC_CONTROL, value);
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	4619      	mov	r1, r3
 8003da8:	2001      	movs	r0, #1
 8003daa:	f7ff ffab 	bl	8003d04 <Write_Reg>
 8003dae:	4603      	mov	r3, r0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <Set_GPIO_Configure>:
 * This function configures the GPIO pin to the specified mode.
 *
 * @param  config  This parameter can be a value of @ref GPIO_CONFIG.
 * Specifies the GPIO mode to be set.
 */
static HAL_StatusTypeDef Set_GPIO_Configure(uint8_t config) {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	71fb      	strb	r3, [r7, #7]
    uint8_t value = Read_Reg(REG_ADC_CONTROL);
 8003dc2:	2001      	movs	r0, #1
 8003dc4:	f7ff ffc0 	bl	8003d48 <Read_Reg>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	73fb      	strb	r3, [r7, #15]
    MODIFY_REG(value, CTRL_GPIO_CONFIG_MASK, config);
 8003dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dd0:	f023 0318 	bic.w	r3, r3, #24
 8003dd4:	b25a      	sxtb	r2, r3
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	b25b      	sxtb	r3, r3
 8003dde:	73fb      	strb	r3, [r7, #15]
    return Write_Reg(REG_ADC_CONTROL, value);
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
 8003de2:	4619      	mov	r1, r3
 8003de4:	2001      	movs	r0, #1
 8003de6:	f7ff ff8d 	bl	8003d04 <Write_Reg>
 8003dea:	4603      	mov	r3, r0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <Set_Voltage_Input>:
 * VDD and SENSEN based on the input parameter.
 *
 * @param  input  This parameter can be a value of @ref VOLTAGE_INPUT.
 * Specifies the voltage input pin (VDD or SENSEN).
 */
static HAL_StatusTypeDef Set_Voltage_Input(uint8_t input) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	71fb      	strb	r3, [r7, #7]
    uint8_t value = Read_Reg(REG_ADC_CONTROL);
 8003dfe:	2001      	movs	r0, #1
 8003e00:	f7ff ffa2 	bl	8003d48 <Read_Reg>
 8003e04:	4603      	mov	r3, r0
 8003e06:	73fb      	strb	r3, [r7, #15]
    MODIFY_REG(value, CTRL_CONFIG_VOLTAGE_INPUT_MASK, input);
 8003e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0c:	f023 0304 	bic.w	r3, r3, #4
 8003e10:	b25a      	sxtb	r2, r3
 8003e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	b25b      	sxtb	r3, r3
 8003e1a:	73fb      	strb	r3, [r7, #15]
    return Write_Reg(REG_ADC_CONTROL, value);
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	4619      	mov	r1, r3
 8003e20:	2001      	movs	r0, #1
 8003e22:	f7ff ff6f 	bl	8003d04 <Write_Reg>
 8003e26:	4603      	mov	r3, r0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <Set_Coulomb_Counter_Deadband>:
 * This function sets the deadband for the Coulomb Counter.
 *
 * @param  deadband  This parameter can be a value of @ref COULOMB_COUNTER_DEADBAND.
 * Specifies the deadband value for the Coulomb Counter.
 */
static HAL_StatusTypeDef Set_Coulomb_Counter_Deadband(uint8_t deadband){
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	71fb      	strb	r3, [r7, #7]
	uint8_t value = Read_Reg(REG_COULOMB_COUNTER_CONTROL);
 8003e3a:	2002      	movs	r0, #2
 8003e3c:	f7ff ff84 	bl	8003d48 <Read_Reg>
 8003e40:	4603      	mov	r3, r0
 8003e42:	73fb      	strb	r3, [r7, #15]
    // Set the deadband
	MODIFY_REG(value, CC_CONFIG_DEADBAND_MASK, deadband);
 8003e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e4c:	b25a      	sxtb	r2, r3
 8003e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	b25b      	sxtb	r3, r3
 8003e56:	73fb      	strb	r3, [r7, #15]
	// Ensure reserved bits are set to their default values
	MODIFY_REG(value, CC_CONFIG_RESERVED_54_MASK, CC_CONFIG_RESERVED_54_DEFAULT);
 8003e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e5c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003e60:	b25b      	sxtb	r3, r3
 8003e62:	f043 0310 	orr.w	r3, r3, #16
 8003e66:	b25b      	sxtb	r3, r3
 8003e68:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG(value, CC_CONFIG_RESERVED_20_MASK, CC_CONFIG_RESERVED_20_DEFAULT);
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	f023 0307 	bic.w	r3, r3, #7
 8003e70:	73fb      	strb	r3, [r7, #15]
	return Write_Reg(REG_COULOMB_COUNTER_CONTROL, value);
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	4619      	mov	r1, r3
 8003e76:	2002      	movs	r0, #2
 8003e78:	f7ff ff44 	bl	8003d04 <Write_Reg>
 8003e7c:	4603      	mov	r3, r0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <LTC2959_Set_Do_Not_Count>:
 *
 * @param  dnc  This parameter can be a value of @ref COULOMB_COUNTER_ON_OFF.
 * Controls whether the Coulomb Counter is enabled disabled.
 * Set dnc to "true" to turn off Counting
 */
void LTC2959_Set_Do_Not_Count(bool dnc){
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	71fb      	strb	r3, [r7, #7]
	uint8_t value = Read_Reg(REG_COULOMB_COUNTER_CONTROL);
 8003e90:	2002      	movs	r0, #2
 8003e92:	f7ff ff59 	bl	8003d48 <Read_Reg>
 8003e96:	4603      	mov	r3, r0
 8003e98:	73fb      	strb	r3, [r7, #15]
//	printf("test reg %x\n\r\v", value);
	if(dnc){
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d004      	beq.n	8003eaa <LTC2959_Set_Do_Not_Count+0x24>
	MODIFY_REG(value, CC_CONFIG_DO_NOT_COUNT_MASK, CC_CONFIG_DO_NOT_COUNT_MASK);
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	f043 0308 	orr.w	r3, r3, #8
 8003ea6:	73fb      	strb	r3, [r7, #15]
 8003ea8:	e003      	b.n	8003eb2 <LTC2959_Set_Do_Not_Count+0x2c>
	}else {
		MODIFY_REG(value, CC_CONFIG_DO_NOT_COUNT_MASK, 0b0);
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	f023 0308 	bic.w	r3, r3, #8
 8003eb0:	73fb      	strb	r3, [r7, #15]
	}
	// Ensure reserved bits are set to their default values
	MODIFY_REG(value, CC_CONFIG_RESERVED_54_MASK, CC_CONFIG_RESERVED_54_DEFAULT);
 8003eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003eba:	b25b      	sxtb	r3, r3
 8003ebc:	f043 0310 	orr.w	r3, r3, #16
 8003ec0:	b25b      	sxtb	r3, r3
 8003ec2:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG(value, CC_CONFIG_RESERVED_20_MASK, CC_CONFIG_RESERVED_20_DEFAULT);
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	f023 0307 	bic.w	r3, r3, #7
 8003eca:	73fb      	strb	r3, [r7, #15]
	Write_Reg(REG_COULOMB_COUNTER_CONTROL, value);
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	4619      	mov	r1, r3
 8003ed0:	2002      	movs	r0, #2
 8003ed2:	f7ff ff17 	bl	8003d04 <Write_Reg>
}
 8003ed6:	bf00      	nop
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <LTC2959_Init>:
 * structure provided.
 *
 * @param  config_t  Pointer to a structure of type @ref LTC2959_Config_t containing
 * the initialization parameters for the LTC2959.
 */
void LTC2959_Init(LTC2959_Config_t *config_t){
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
#ifndef _DEBUG
	Set_ADC_Mode(config_t->ADC_mode);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff ff46 	bl	8003d7c <Set_ADC_Mode>
	HAL_Delay(10);
 8003ef0:	200a      	movs	r0, #10
 8003ef2:	f7fd faf7 	bl	80014e4 <HAL_Delay>
	Set_GPIO_Configure(config_t->GPIO_config);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	785b      	ldrb	r3, [r3, #1]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff ff5c 	bl	8003db8 <Set_GPIO_Configure>
	HAL_Delay(10);
 8003f00:	200a      	movs	r0, #10
 8003f02:	f7fd faef 	bl	80014e4 <HAL_Delay>
	Set_Voltage_Input(config_t->voltage_input);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	789b      	ldrb	r3, [r3, #2]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff ff72 	bl	8003df4 <Set_Voltage_Input>
	HAL_Delay(10);
 8003f10:	200a      	movs	r0, #10
 8003f12:	f7fd fae7 	bl	80014e4 <HAL_Delay>
	Set_Coulomb_Counter_Deadband(config_t->CC_deadband);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	78db      	ldrb	r3, [r3, #3]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff ff88 	bl	8003e30 <Set_Coulomb_Counter_Deadband>
	HAL_Delay(10);
 8003f20:	200a      	movs	r0, #10
 8003f22:	f7fd fadf 	bl	80014e4 <HAL_Delay>
	status = Set_Coulomb_Counter_Deadband(config_t->CC_deadband);
	printf("Set_Coulomb_Counter_Deadband = %d\n\r", status);
	HAL_Delay(10);
#endif

}
 8003f26:	bf00      	nop
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <LTC2959_Get_Acc_Charge>:
 * This function reads the accumulated charge register of the LTC2959 and
 * returns the total accumulated charge in mAh (milli-Amp Hour).
 *
 * @return Total accumulated charge in micro-Amp-hour (uAh).
 */
uint32_t LTC2959_Get_Acc_Charge(){
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
	uint8_t buf[4];
	uint32_t charge_raw;
//	float total_charge_mAh;

	// Read the MSB and LSB of the voltage register
	buf[0] = Read_Reg(REG_ACCUMULATED_CHARGE_MSB);
 8003f36:	2003      	movs	r0, #3
 8003f38:	f7ff ff06 	bl	8003d48 <Read_Reg>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	713b      	strb	r3, [r7, #4]
	buf[1] = Read_Reg(REG_ACCUMULATED_CHARGE_23_16);
 8003f40:	2004      	movs	r0, #4
 8003f42:	f7ff ff01 	bl	8003d48 <Read_Reg>
 8003f46:	4603      	mov	r3, r0
 8003f48:	717b      	strb	r3, [r7, #5]
	buf[2] = Read_Reg(REG_ACCUMULATED_CHARGE_15_8);
 8003f4a:	2005      	movs	r0, #5
 8003f4c:	f7ff fefc 	bl	8003d48 <Read_Reg>
 8003f50:	4603      	mov	r3, r0
 8003f52:	71bb      	strb	r3, [r7, #6]
	buf[3] = Read_Reg(REG_ACCUMULATED_CHARGE_LSB);
 8003f54:	2006      	movs	r0, #6
 8003f56:	f7ff fef7 	bl	8003d48 <Read_Reg>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	71fb      	strb	r3, [r7, #7]

	charge_raw = 	((uint32_t)buf[0] << 24) |
 8003f5e:	793b      	ldrb	r3, [r7, #4]
 8003f60:	061a      	lsls	r2, r3, #24
					((uint32_t)buf[1] << 16) |
 8003f62:	797b      	ldrb	r3, [r7, #5]
 8003f64:	041b      	lsls	r3, r3, #16
	charge_raw = 	((uint32_t)buf[0] << 24) |
 8003f66:	431a      	orrs	r2, r3
					((uint32_t)buf[2] << 8)	 |
 8003f68:	79bb      	ldrb	r3, [r7, #6]
 8003f6a:	021b      	lsls	r3, r3, #8
					((uint32_t)buf[1] << 16) |
 8003f6c:	4313      	orrs	r3, r2
					(uint32_t)buf[3];
 8003f6e:	79fa      	ldrb	r2, [r7, #7]
	charge_raw = 	((uint32_t)buf[0] << 24) |
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]

	uint32_t total_charge_mAh = ((ACR_MID_SCALE - charge_raw) * QLSB) / 1000;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f1c3 4300 	rsb	r3, r3, #2147483648	@ 0x80000000
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fc fa32 	bl	80003e4 <__aeabi_ui2d>
 8003f80:	a30d      	add	r3, pc, #52	@ (adr r3, 8003fb8 <LTC2959_Get_Acc_Charge+0x88>)
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	f7fc faa7 	bl	80004d8 <__aeabi_dmul>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4610      	mov	r0, r2
 8003f90:	4619      	mov	r1, r3
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc0 <LTC2959_Get_Acc_Charge+0x90>)
 8003f98:	f7fc fbc8 	bl	800072c <__aeabi_ddiv>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	f7fc fd70 	bl	8000a88 <__aeabi_d2uiz>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	60bb      	str	r3, [r7, #8]

	return total_charge_mAh;
 8003fac:	68bb      	ldr	r3, [r7, #8]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	9f900000 	.word	0x9f900000
 8003fbc:	40c159aa 	.word	0x40c159aa
 8003fc0:	408f4000 	.word	0x408f4000

08003fc4 <LTC2959_Get_Voltage>:
 *
 * This function reads the voltage register and returns the voltage value in volts.
 * VDD or SENSEN (depending on the ADC control settings).
 * @return Voltage in milli-volts.
 */
uint32_t LTC2959_Get_Voltage(){
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
	uint8_t buf[2];
	uint16_t value;
	uint32_t voltage;

	// Read the MSB and LSB of the voltage register
	buf[0] = Read_Reg(REG_VOLTAGE_MSB);
 8003fca:	200f      	movs	r0, #15
 8003fcc:	f7ff febc 	bl	8003d48 <Read_Reg>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	713b      	strb	r3, [r7, #4]
	buf[1] = Read_Reg(REG_VOLTAGE_LSB);
 8003fd4:	2010      	movs	r0, #16
 8003fd6:	f7ff feb7 	bl	8003d48 <Read_Reg>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	717b      	strb	r3, [r7, #5]
	value = (buf[0] << 8) | buf[1];
 8003fde:	793b      	ldrb	r3, [r7, #4]
 8003fe0:	021b      	lsls	r3, r3, #8
 8003fe2:	b21a      	sxth	r2, r3
 8003fe4:	797b      	ldrb	r3, [r7, #5]
 8003fe6:	b21b      	sxth	r3, r3
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	b21b      	sxth	r3, r3
 8003fec:	81fb      	strh	r3, [r7, #14]
//	voltage = 62.6 * ((float)value / 65536.0);
	voltage = value * VOLTAGE_MULTIPLIER / 1000;
 8003fee:	89fb      	ldrh	r3, [r7, #14]
 8003ff0:	f44f 726f 	mov.w	r2, #956	@ 0x3bc
 8003ff4:	fb02 f303 	mul.w	r3, r2, r3
 8003ff8:	4a05      	ldr	r2, [pc, #20]	@ (8004010 <LTC2959_Get_Voltage+0x4c>)
 8003ffa:	fb82 1203 	smull	r1, r2, r2, r3
 8003ffe:	1192      	asrs	r2, r2, #6
 8004000:	17db      	asrs	r3, r3, #31
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	60bb      	str	r3, [r7, #8]
	return voltage;
 8004006:	68bb      	ldr	r3, [r7, #8]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	10624dd3 	.word	0x10624dd3
 8004014:	00000000 	.word	0x00000000

08004018 <LTC2959_Get_Current>:
 * This function reads the current register and calculates the
 * current using the sense resistor value.
 *
 * @return Current in milli-amperes.
 */
int32_t LTC2959_Get_Current(){
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
	uint8_t buf[2];
	int16_t value;

	// Read the MSB and LSB of the current register
	buf[0] = Read_Reg(REG_CURRENT_MSB);
 800401e:	2019      	movs	r0, #25
 8004020:	f7ff fe92 	bl	8003d48 <Read_Reg>
 8004024:	4603      	mov	r3, r0
 8004026:	713b      	strb	r3, [r7, #4]
	buf[1] = Read_Reg(REG_CURRENT_LSB);
 8004028:	201a      	movs	r0, #26
 800402a:	f7ff fe8d 	bl	8003d48 <Read_Reg>
 800402e:	4603      	mov	r3, r0
 8004030:	717b      	strb	r3, [r7, #5]

	// Combine MSB and LSB into 16-bit signed value
	value = (int16_t)((buf[0] << 8) | buf[1]);
 8004032:	793b      	ldrb	r3, [r7, #4]
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	b21a      	sxth	r2, r3
 8004038:	797b      	ldrb	r3, [r7, #5]
 800403a:	b21b      	sxth	r3, r3
 800403c:	4313      	orrs	r3, r2
 800403e:	81fb      	strh	r3, [r7, #14]

	int32_t current_uA = value * CURRENT_MULTIPLIER / 1000;
 8004040:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004044:	4618      	mov	r0, r3
 8004046:	f7fc f9dd 	bl	8000404 <__aeabi_i2d>
 800404a:	a30d      	add	r3, pc, #52	@ (adr r3, 8004080 <LTC2959_Get_Current+0x68>)
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	f7fc fa42 	bl	80004d8 <__aeabi_dmul>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4610      	mov	r0, r2
 800405a:	4619      	mov	r1, r3
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	4b09      	ldr	r3, [pc, #36]	@ (8004088 <LTC2959_Get_Current+0x70>)
 8004062:	f7fc fb63 	bl	800072c <__aeabi_ddiv>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4610      	mov	r0, r2
 800406c:	4619      	mov	r1, r3
 800406e:	f7fc fce3 	bl	8000a38 <__aeabi_d2iz>
 8004072:	4603      	mov	r3, r0
 8004074:	60bb      	str	r3, [r7, #8]

	return current_uA;
 8004076:	68bb      	ldr	r3, [r7, #8]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	00000000 	.word	0x00000000
 8004084:	408efe92 	.word	0x408efe92
 8004088:	408f4000 	.word	0x408f4000

0800408c <__cvt>:
 800408c:	2b00      	cmp	r3, #0
 800408e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004092:	461d      	mov	r5, r3
 8004094:	bfbb      	ittet	lt
 8004096:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800409a:	461d      	movlt	r5, r3
 800409c:	2300      	movge	r3, #0
 800409e:	232d      	movlt	r3, #45	@ 0x2d
 80040a0:	b088      	sub	sp, #32
 80040a2:	4614      	mov	r4, r2
 80040a4:	bfb8      	it	lt
 80040a6:	4614      	movlt	r4, r2
 80040a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80040aa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80040ac:	7013      	strb	r3, [r2, #0]
 80040ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80040b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80040b4:	f023 0820 	bic.w	r8, r3, #32
 80040b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80040bc:	d005      	beq.n	80040ca <__cvt+0x3e>
 80040be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80040c2:	d100      	bne.n	80040c6 <__cvt+0x3a>
 80040c4:	3601      	adds	r6, #1
 80040c6:	2302      	movs	r3, #2
 80040c8:	e000      	b.n	80040cc <__cvt+0x40>
 80040ca:	2303      	movs	r3, #3
 80040cc:	aa07      	add	r2, sp, #28
 80040ce:	9204      	str	r2, [sp, #16]
 80040d0:	aa06      	add	r2, sp, #24
 80040d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80040d6:	e9cd 3600 	strd	r3, r6, [sp]
 80040da:	4622      	mov	r2, r4
 80040dc:	462b      	mov	r3, r5
 80040de:	f001 f8bb 	bl	8005258 <_dtoa_r>
 80040e2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80040e6:	4607      	mov	r7, r0
 80040e8:	d119      	bne.n	800411e <__cvt+0x92>
 80040ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80040ec:	07db      	lsls	r3, r3, #31
 80040ee:	d50e      	bpl.n	800410e <__cvt+0x82>
 80040f0:	eb00 0906 	add.w	r9, r0, r6
 80040f4:	2200      	movs	r2, #0
 80040f6:	2300      	movs	r3, #0
 80040f8:	4620      	mov	r0, r4
 80040fa:	4629      	mov	r1, r5
 80040fc:	f7fc fc54 	bl	80009a8 <__aeabi_dcmpeq>
 8004100:	b108      	cbz	r0, 8004106 <__cvt+0x7a>
 8004102:	f8cd 901c 	str.w	r9, [sp, #28]
 8004106:	2230      	movs	r2, #48	@ 0x30
 8004108:	9b07      	ldr	r3, [sp, #28]
 800410a:	454b      	cmp	r3, r9
 800410c:	d31e      	bcc.n	800414c <__cvt+0xc0>
 800410e:	4638      	mov	r0, r7
 8004110:	9b07      	ldr	r3, [sp, #28]
 8004112:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004114:	1bdb      	subs	r3, r3, r7
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	b008      	add	sp, #32
 800411a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800411e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004122:	eb00 0906 	add.w	r9, r0, r6
 8004126:	d1e5      	bne.n	80040f4 <__cvt+0x68>
 8004128:	7803      	ldrb	r3, [r0, #0]
 800412a:	2b30      	cmp	r3, #48	@ 0x30
 800412c:	d10a      	bne.n	8004144 <__cvt+0xb8>
 800412e:	2200      	movs	r2, #0
 8004130:	2300      	movs	r3, #0
 8004132:	4620      	mov	r0, r4
 8004134:	4629      	mov	r1, r5
 8004136:	f7fc fc37 	bl	80009a8 <__aeabi_dcmpeq>
 800413a:	b918      	cbnz	r0, 8004144 <__cvt+0xb8>
 800413c:	f1c6 0601 	rsb	r6, r6, #1
 8004140:	f8ca 6000 	str.w	r6, [sl]
 8004144:	f8da 3000 	ldr.w	r3, [sl]
 8004148:	4499      	add	r9, r3
 800414a:	e7d3      	b.n	80040f4 <__cvt+0x68>
 800414c:	1c59      	adds	r1, r3, #1
 800414e:	9107      	str	r1, [sp, #28]
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	e7d9      	b.n	8004108 <__cvt+0x7c>

08004154 <__exponent>:
 8004154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004156:	2900      	cmp	r1, #0
 8004158:	bfb6      	itet	lt
 800415a:	232d      	movlt	r3, #45	@ 0x2d
 800415c:	232b      	movge	r3, #43	@ 0x2b
 800415e:	4249      	neglt	r1, r1
 8004160:	2909      	cmp	r1, #9
 8004162:	7002      	strb	r2, [r0, #0]
 8004164:	7043      	strb	r3, [r0, #1]
 8004166:	dd29      	ble.n	80041bc <__exponent+0x68>
 8004168:	f10d 0307 	add.w	r3, sp, #7
 800416c:	461d      	mov	r5, r3
 800416e:	270a      	movs	r7, #10
 8004170:	fbb1 f6f7 	udiv	r6, r1, r7
 8004174:	461a      	mov	r2, r3
 8004176:	fb07 1416 	mls	r4, r7, r6, r1
 800417a:	3430      	adds	r4, #48	@ 0x30
 800417c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004180:	460c      	mov	r4, r1
 8004182:	2c63      	cmp	r4, #99	@ 0x63
 8004184:	4631      	mov	r1, r6
 8004186:	f103 33ff 	add.w	r3, r3, #4294967295
 800418a:	dcf1      	bgt.n	8004170 <__exponent+0x1c>
 800418c:	3130      	adds	r1, #48	@ 0x30
 800418e:	1e94      	subs	r4, r2, #2
 8004190:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004194:	4623      	mov	r3, r4
 8004196:	1c41      	adds	r1, r0, #1
 8004198:	42ab      	cmp	r3, r5
 800419a:	d30a      	bcc.n	80041b2 <__exponent+0x5e>
 800419c:	f10d 0309 	add.w	r3, sp, #9
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	42ac      	cmp	r4, r5
 80041a4:	bf88      	it	hi
 80041a6:	2300      	movhi	r3, #0
 80041a8:	3302      	adds	r3, #2
 80041aa:	4403      	add	r3, r0
 80041ac:	1a18      	subs	r0, r3, r0
 80041ae:	b003      	add	sp, #12
 80041b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80041b6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80041ba:	e7ed      	b.n	8004198 <__exponent+0x44>
 80041bc:	2330      	movs	r3, #48	@ 0x30
 80041be:	3130      	adds	r1, #48	@ 0x30
 80041c0:	7083      	strb	r3, [r0, #2]
 80041c2:	70c1      	strb	r1, [r0, #3]
 80041c4:	1d03      	adds	r3, r0, #4
 80041c6:	e7f1      	b.n	80041ac <__exponent+0x58>

080041c8 <_printf_float>:
 80041c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041cc:	b091      	sub	sp, #68	@ 0x44
 80041ce:	460c      	mov	r4, r1
 80041d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80041d4:	4616      	mov	r6, r2
 80041d6:	461f      	mov	r7, r3
 80041d8:	4605      	mov	r5, r0
 80041da:	f000 ff1d 	bl	8005018 <_localeconv_r>
 80041de:	6803      	ldr	r3, [r0, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	9308      	str	r3, [sp, #32]
 80041e4:	f7fb ffb4 	bl	8000150 <strlen>
 80041e8:	2300      	movs	r3, #0
 80041ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80041ec:	f8d8 3000 	ldr.w	r3, [r8]
 80041f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80041f2:	3307      	adds	r3, #7
 80041f4:	f023 0307 	bic.w	r3, r3, #7
 80041f8:	f103 0208 	add.w	r2, r3, #8
 80041fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004200:	f8d4 b000 	ldr.w	fp, [r4]
 8004204:	f8c8 2000 	str.w	r2, [r8]
 8004208:	e9d3 8900 	ldrd	r8, r9, [r3]
 800420c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004210:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004212:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004216:	f04f 32ff 	mov.w	r2, #4294967295
 800421a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800421e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004222:	4b9c      	ldr	r3, [pc, #624]	@ (8004494 <_printf_float+0x2cc>)
 8004224:	f7fc fbf2 	bl	8000a0c <__aeabi_dcmpun>
 8004228:	bb70      	cbnz	r0, 8004288 <_printf_float+0xc0>
 800422a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800422e:	f04f 32ff 	mov.w	r2, #4294967295
 8004232:	4b98      	ldr	r3, [pc, #608]	@ (8004494 <_printf_float+0x2cc>)
 8004234:	f7fc fbcc 	bl	80009d0 <__aeabi_dcmple>
 8004238:	bb30      	cbnz	r0, 8004288 <_printf_float+0xc0>
 800423a:	2200      	movs	r2, #0
 800423c:	2300      	movs	r3, #0
 800423e:	4640      	mov	r0, r8
 8004240:	4649      	mov	r1, r9
 8004242:	f7fc fbbb 	bl	80009bc <__aeabi_dcmplt>
 8004246:	b110      	cbz	r0, 800424e <_printf_float+0x86>
 8004248:	232d      	movs	r3, #45	@ 0x2d
 800424a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800424e:	4a92      	ldr	r2, [pc, #584]	@ (8004498 <_printf_float+0x2d0>)
 8004250:	4b92      	ldr	r3, [pc, #584]	@ (800449c <_printf_float+0x2d4>)
 8004252:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004256:	bf94      	ite	ls
 8004258:	4690      	movls	r8, r2
 800425a:	4698      	movhi	r8, r3
 800425c:	2303      	movs	r3, #3
 800425e:	f04f 0900 	mov.w	r9, #0
 8004262:	6123      	str	r3, [r4, #16]
 8004264:	f02b 0304 	bic.w	r3, fp, #4
 8004268:	6023      	str	r3, [r4, #0]
 800426a:	4633      	mov	r3, r6
 800426c:	4621      	mov	r1, r4
 800426e:	4628      	mov	r0, r5
 8004270:	9700      	str	r7, [sp, #0]
 8004272:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004274:	f000 f9d4 	bl	8004620 <_printf_common>
 8004278:	3001      	adds	r0, #1
 800427a:	f040 8090 	bne.w	800439e <_printf_float+0x1d6>
 800427e:	f04f 30ff 	mov.w	r0, #4294967295
 8004282:	b011      	add	sp, #68	@ 0x44
 8004284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004288:	4642      	mov	r2, r8
 800428a:	464b      	mov	r3, r9
 800428c:	4640      	mov	r0, r8
 800428e:	4649      	mov	r1, r9
 8004290:	f7fc fbbc 	bl	8000a0c <__aeabi_dcmpun>
 8004294:	b148      	cbz	r0, 80042aa <_printf_float+0xe2>
 8004296:	464b      	mov	r3, r9
 8004298:	2b00      	cmp	r3, #0
 800429a:	bfb8      	it	lt
 800429c:	232d      	movlt	r3, #45	@ 0x2d
 800429e:	4a80      	ldr	r2, [pc, #512]	@ (80044a0 <_printf_float+0x2d8>)
 80042a0:	bfb8      	it	lt
 80042a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80042a6:	4b7f      	ldr	r3, [pc, #508]	@ (80044a4 <_printf_float+0x2dc>)
 80042a8:	e7d3      	b.n	8004252 <_printf_float+0x8a>
 80042aa:	6863      	ldr	r3, [r4, #4]
 80042ac:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	d13f      	bne.n	8004334 <_printf_float+0x16c>
 80042b4:	2306      	movs	r3, #6
 80042b6:	6063      	str	r3, [r4, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80042be:	6023      	str	r3, [r4, #0]
 80042c0:	9206      	str	r2, [sp, #24]
 80042c2:	aa0e      	add	r2, sp, #56	@ 0x38
 80042c4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80042c8:	aa0d      	add	r2, sp, #52	@ 0x34
 80042ca:	9203      	str	r2, [sp, #12]
 80042cc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80042d0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80042d4:	6863      	ldr	r3, [r4, #4]
 80042d6:	4642      	mov	r2, r8
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	4628      	mov	r0, r5
 80042dc:	464b      	mov	r3, r9
 80042de:	910a      	str	r1, [sp, #40]	@ 0x28
 80042e0:	f7ff fed4 	bl	800408c <__cvt>
 80042e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80042e6:	4680      	mov	r8, r0
 80042e8:	2947      	cmp	r1, #71	@ 0x47
 80042ea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80042ec:	d128      	bne.n	8004340 <_printf_float+0x178>
 80042ee:	1cc8      	adds	r0, r1, #3
 80042f0:	db02      	blt.n	80042f8 <_printf_float+0x130>
 80042f2:	6863      	ldr	r3, [r4, #4]
 80042f4:	4299      	cmp	r1, r3
 80042f6:	dd40      	ble.n	800437a <_printf_float+0x1b2>
 80042f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80042fc:	fa5f fa8a 	uxtb.w	sl, sl
 8004300:	4652      	mov	r2, sl
 8004302:	3901      	subs	r1, #1
 8004304:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004308:	910d      	str	r1, [sp, #52]	@ 0x34
 800430a:	f7ff ff23 	bl	8004154 <__exponent>
 800430e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004310:	4681      	mov	r9, r0
 8004312:	1813      	adds	r3, r2, r0
 8004314:	2a01      	cmp	r2, #1
 8004316:	6123      	str	r3, [r4, #16]
 8004318:	dc02      	bgt.n	8004320 <_printf_float+0x158>
 800431a:	6822      	ldr	r2, [r4, #0]
 800431c:	07d2      	lsls	r2, r2, #31
 800431e:	d501      	bpl.n	8004324 <_printf_float+0x15c>
 8004320:	3301      	adds	r3, #1
 8004322:	6123      	str	r3, [r4, #16]
 8004324:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004328:	2b00      	cmp	r3, #0
 800432a:	d09e      	beq.n	800426a <_printf_float+0xa2>
 800432c:	232d      	movs	r3, #45	@ 0x2d
 800432e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004332:	e79a      	b.n	800426a <_printf_float+0xa2>
 8004334:	2947      	cmp	r1, #71	@ 0x47
 8004336:	d1bf      	bne.n	80042b8 <_printf_float+0xf0>
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1bd      	bne.n	80042b8 <_printf_float+0xf0>
 800433c:	2301      	movs	r3, #1
 800433e:	e7ba      	b.n	80042b6 <_printf_float+0xee>
 8004340:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004344:	d9dc      	bls.n	8004300 <_printf_float+0x138>
 8004346:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800434a:	d118      	bne.n	800437e <_printf_float+0x1b6>
 800434c:	2900      	cmp	r1, #0
 800434e:	6863      	ldr	r3, [r4, #4]
 8004350:	dd0b      	ble.n	800436a <_printf_float+0x1a2>
 8004352:	6121      	str	r1, [r4, #16]
 8004354:	b913      	cbnz	r3, 800435c <_printf_float+0x194>
 8004356:	6822      	ldr	r2, [r4, #0]
 8004358:	07d0      	lsls	r0, r2, #31
 800435a:	d502      	bpl.n	8004362 <_printf_float+0x19a>
 800435c:	3301      	adds	r3, #1
 800435e:	440b      	add	r3, r1
 8004360:	6123      	str	r3, [r4, #16]
 8004362:	f04f 0900 	mov.w	r9, #0
 8004366:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004368:	e7dc      	b.n	8004324 <_printf_float+0x15c>
 800436a:	b913      	cbnz	r3, 8004372 <_printf_float+0x1aa>
 800436c:	6822      	ldr	r2, [r4, #0]
 800436e:	07d2      	lsls	r2, r2, #31
 8004370:	d501      	bpl.n	8004376 <_printf_float+0x1ae>
 8004372:	3302      	adds	r3, #2
 8004374:	e7f4      	b.n	8004360 <_printf_float+0x198>
 8004376:	2301      	movs	r3, #1
 8004378:	e7f2      	b.n	8004360 <_printf_float+0x198>
 800437a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800437e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004380:	4299      	cmp	r1, r3
 8004382:	db05      	blt.n	8004390 <_printf_float+0x1c8>
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	6121      	str	r1, [r4, #16]
 8004388:	07d8      	lsls	r0, r3, #31
 800438a:	d5ea      	bpl.n	8004362 <_printf_float+0x19a>
 800438c:	1c4b      	adds	r3, r1, #1
 800438e:	e7e7      	b.n	8004360 <_printf_float+0x198>
 8004390:	2900      	cmp	r1, #0
 8004392:	bfcc      	ite	gt
 8004394:	2201      	movgt	r2, #1
 8004396:	f1c1 0202 	rsble	r2, r1, #2
 800439a:	4413      	add	r3, r2
 800439c:	e7e0      	b.n	8004360 <_printf_float+0x198>
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	055a      	lsls	r2, r3, #21
 80043a2:	d407      	bmi.n	80043b4 <_printf_float+0x1ec>
 80043a4:	6923      	ldr	r3, [r4, #16]
 80043a6:	4642      	mov	r2, r8
 80043a8:	4631      	mov	r1, r6
 80043aa:	4628      	mov	r0, r5
 80043ac:	47b8      	blx	r7
 80043ae:	3001      	adds	r0, #1
 80043b0:	d12b      	bne.n	800440a <_printf_float+0x242>
 80043b2:	e764      	b.n	800427e <_printf_float+0xb6>
 80043b4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80043b8:	f240 80dc 	bls.w	8004574 <_printf_float+0x3ac>
 80043bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80043c0:	2200      	movs	r2, #0
 80043c2:	2300      	movs	r3, #0
 80043c4:	f7fc faf0 	bl	80009a8 <__aeabi_dcmpeq>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d033      	beq.n	8004434 <_printf_float+0x26c>
 80043cc:	2301      	movs	r3, #1
 80043ce:	4631      	mov	r1, r6
 80043d0:	4628      	mov	r0, r5
 80043d2:	4a35      	ldr	r2, [pc, #212]	@ (80044a8 <_printf_float+0x2e0>)
 80043d4:	47b8      	blx	r7
 80043d6:	3001      	adds	r0, #1
 80043d8:	f43f af51 	beq.w	800427e <_printf_float+0xb6>
 80043dc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80043e0:	4543      	cmp	r3, r8
 80043e2:	db02      	blt.n	80043ea <_printf_float+0x222>
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	07d8      	lsls	r0, r3, #31
 80043e8:	d50f      	bpl.n	800440a <_printf_float+0x242>
 80043ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80043ee:	4631      	mov	r1, r6
 80043f0:	4628      	mov	r0, r5
 80043f2:	47b8      	blx	r7
 80043f4:	3001      	adds	r0, #1
 80043f6:	f43f af42 	beq.w	800427e <_printf_float+0xb6>
 80043fa:	f04f 0900 	mov.w	r9, #0
 80043fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8004402:	f104 0a1a 	add.w	sl, r4, #26
 8004406:	45c8      	cmp	r8, r9
 8004408:	dc09      	bgt.n	800441e <_printf_float+0x256>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	079b      	lsls	r3, r3, #30
 800440e:	f100 8102 	bmi.w	8004616 <_printf_float+0x44e>
 8004412:	68e0      	ldr	r0, [r4, #12]
 8004414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004416:	4298      	cmp	r0, r3
 8004418:	bfb8      	it	lt
 800441a:	4618      	movlt	r0, r3
 800441c:	e731      	b.n	8004282 <_printf_float+0xba>
 800441e:	2301      	movs	r3, #1
 8004420:	4652      	mov	r2, sl
 8004422:	4631      	mov	r1, r6
 8004424:	4628      	mov	r0, r5
 8004426:	47b8      	blx	r7
 8004428:	3001      	adds	r0, #1
 800442a:	f43f af28 	beq.w	800427e <_printf_float+0xb6>
 800442e:	f109 0901 	add.w	r9, r9, #1
 8004432:	e7e8      	b.n	8004406 <_printf_float+0x23e>
 8004434:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004436:	2b00      	cmp	r3, #0
 8004438:	dc38      	bgt.n	80044ac <_printf_float+0x2e4>
 800443a:	2301      	movs	r3, #1
 800443c:	4631      	mov	r1, r6
 800443e:	4628      	mov	r0, r5
 8004440:	4a19      	ldr	r2, [pc, #100]	@ (80044a8 <_printf_float+0x2e0>)
 8004442:	47b8      	blx	r7
 8004444:	3001      	adds	r0, #1
 8004446:	f43f af1a 	beq.w	800427e <_printf_float+0xb6>
 800444a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800444e:	ea59 0303 	orrs.w	r3, r9, r3
 8004452:	d102      	bne.n	800445a <_printf_float+0x292>
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	07d9      	lsls	r1, r3, #31
 8004458:	d5d7      	bpl.n	800440a <_printf_float+0x242>
 800445a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800445e:	4631      	mov	r1, r6
 8004460:	4628      	mov	r0, r5
 8004462:	47b8      	blx	r7
 8004464:	3001      	adds	r0, #1
 8004466:	f43f af0a 	beq.w	800427e <_printf_float+0xb6>
 800446a:	f04f 0a00 	mov.w	sl, #0
 800446e:	f104 0b1a 	add.w	fp, r4, #26
 8004472:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004474:	425b      	negs	r3, r3
 8004476:	4553      	cmp	r3, sl
 8004478:	dc01      	bgt.n	800447e <_printf_float+0x2b6>
 800447a:	464b      	mov	r3, r9
 800447c:	e793      	b.n	80043a6 <_printf_float+0x1de>
 800447e:	2301      	movs	r3, #1
 8004480:	465a      	mov	r2, fp
 8004482:	4631      	mov	r1, r6
 8004484:	4628      	mov	r0, r5
 8004486:	47b8      	blx	r7
 8004488:	3001      	adds	r0, #1
 800448a:	f43f aef8 	beq.w	800427e <_printf_float+0xb6>
 800448e:	f10a 0a01 	add.w	sl, sl, #1
 8004492:	e7ee      	b.n	8004472 <_printf_float+0x2aa>
 8004494:	7fefffff 	.word	0x7fefffff
 8004498:	08008816 	.word	0x08008816
 800449c:	0800881a 	.word	0x0800881a
 80044a0:	0800881e 	.word	0x0800881e
 80044a4:	08008822 	.word	0x08008822
 80044a8:	08008826 	.word	0x08008826
 80044ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80044ae:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80044b2:	4553      	cmp	r3, sl
 80044b4:	bfa8      	it	ge
 80044b6:	4653      	movge	r3, sl
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	4699      	mov	r9, r3
 80044bc:	dc36      	bgt.n	800452c <_printf_float+0x364>
 80044be:	f04f 0b00 	mov.w	fp, #0
 80044c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044c6:	f104 021a 	add.w	r2, r4, #26
 80044ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80044cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80044ce:	eba3 0309 	sub.w	r3, r3, r9
 80044d2:	455b      	cmp	r3, fp
 80044d4:	dc31      	bgt.n	800453a <_printf_float+0x372>
 80044d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80044d8:	459a      	cmp	sl, r3
 80044da:	dc3a      	bgt.n	8004552 <_printf_float+0x38a>
 80044dc:	6823      	ldr	r3, [r4, #0]
 80044de:	07da      	lsls	r2, r3, #31
 80044e0:	d437      	bmi.n	8004552 <_printf_float+0x38a>
 80044e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80044e4:	ebaa 0903 	sub.w	r9, sl, r3
 80044e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80044ea:	ebaa 0303 	sub.w	r3, sl, r3
 80044ee:	4599      	cmp	r9, r3
 80044f0:	bfa8      	it	ge
 80044f2:	4699      	movge	r9, r3
 80044f4:	f1b9 0f00 	cmp.w	r9, #0
 80044f8:	dc33      	bgt.n	8004562 <_printf_float+0x39a>
 80044fa:	f04f 0800 	mov.w	r8, #0
 80044fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004502:	f104 0b1a 	add.w	fp, r4, #26
 8004506:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004508:	ebaa 0303 	sub.w	r3, sl, r3
 800450c:	eba3 0309 	sub.w	r3, r3, r9
 8004510:	4543      	cmp	r3, r8
 8004512:	f77f af7a 	ble.w	800440a <_printf_float+0x242>
 8004516:	2301      	movs	r3, #1
 8004518:	465a      	mov	r2, fp
 800451a:	4631      	mov	r1, r6
 800451c:	4628      	mov	r0, r5
 800451e:	47b8      	blx	r7
 8004520:	3001      	adds	r0, #1
 8004522:	f43f aeac 	beq.w	800427e <_printf_float+0xb6>
 8004526:	f108 0801 	add.w	r8, r8, #1
 800452a:	e7ec      	b.n	8004506 <_printf_float+0x33e>
 800452c:	4642      	mov	r2, r8
 800452e:	4631      	mov	r1, r6
 8004530:	4628      	mov	r0, r5
 8004532:	47b8      	blx	r7
 8004534:	3001      	adds	r0, #1
 8004536:	d1c2      	bne.n	80044be <_printf_float+0x2f6>
 8004538:	e6a1      	b.n	800427e <_printf_float+0xb6>
 800453a:	2301      	movs	r3, #1
 800453c:	4631      	mov	r1, r6
 800453e:	4628      	mov	r0, r5
 8004540:	920a      	str	r2, [sp, #40]	@ 0x28
 8004542:	47b8      	blx	r7
 8004544:	3001      	adds	r0, #1
 8004546:	f43f ae9a 	beq.w	800427e <_printf_float+0xb6>
 800454a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800454c:	f10b 0b01 	add.w	fp, fp, #1
 8004550:	e7bb      	b.n	80044ca <_printf_float+0x302>
 8004552:	4631      	mov	r1, r6
 8004554:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004558:	4628      	mov	r0, r5
 800455a:	47b8      	blx	r7
 800455c:	3001      	adds	r0, #1
 800455e:	d1c0      	bne.n	80044e2 <_printf_float+0x31a>
 8004560:	e68d      	b.n	800427e <_printf_float+0xb6>
 8004562:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004564:	464b      	mov	r3, r9
 8004566:	4631      	mov	r1, r6
 8004568:	4628      	mov	r0, r5
 800456a:	4442      	add	r2, r8
 800456c:	47b8      	blx	r7
 800456e:	3001      	adds	r0, #1
 8004570:	d1c3      	bne.n	80044fa <_printf_float+0x332>
 8004572:	e684      	b.n	800427e <_printf_float+0xb6>
 8004574:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004578:	f1ba 0f01 	cmp.w	sl, #1
 800457c:	dc01      	bgt.n	8004582 <_printf_float+0x3ba>
 800457e:	07db      	lsls	r3, r3, #31
 8004580:	d536      	bpl.n	80045f0 <_printf_float+0x428>
 8004582:	2301      	movs	r3, #1
 8004584:	4642      	mov	r2, r8
 8004586:	4631      	mov	r1, r6
 8004588:	4628      	mov	r0, r5
 800458a:	47b8      	blx	r7
 800458c:	3001      	adds	r0, #1
 800458e:	f43f ae76 	beq.w	800427e <_printf_float+0xb6>
 8004592:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004596:	4631      	mov	r1, r6
 8004598:	4628      	mov	r0, r5
 800459a:	47b8      	blx	r7
 800459c:	3001      	adds	r0, #1
 800459e:	f43f ae6e 	beq.w	800427e <_printf_float+0xb6>
 80045a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80045a6:	2200      	movs	r2, #0
 80045a8:	2300      	movs	r3, #0
 80045aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045ae:	f7fc f9fb 	bl	80009a8 <__aeabi_dcmpeq>
 80045b2:	b9c0      	cbnz	r0, 80045e6 <_printf_float+0x41e>
 80045b4:	4653      	mov	r3, sl
 80045b6:	f108 0201 	add.w	r2, r8, #1
 80045ba:	4631      	mov	r1, r6
 80045bc:	4628      	mov	r0, r5
 80045be:	47b8      	blx	r7
 80045c0:	3001      	adds	r0, #1
 80045c2:	d10c      	bne.n	80045de <_printf_float+0x416>
 80045c4:	e65b      	b.n	800427e <_printf_float+0xb6>
 80045c6:	2301      	movs	r3, #1
 80045c8:	465a      	mov	r2, fp
 80045ca:	4631      	mov	r1, r6
 80045cc:	4628      	mov	r0, r5
 80045ce:	47b8      	blx	r7
 80045d0:	3001      	adds	r0, #1
 80045d2:	f43f ae54 	beq.w	800427e <_printf_float+0xb6>
 80045d6:	f108 0801 	add.w	r8, r8, #1
 80045da:	45d0      	cmp	r8, sl
 80045dc:	dbf3      	blt.n	80045c6 <_printf_float+0x3fe>
 80045de:	464b      	mov	r3, r9
 80045e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80045e4:	e6e0      	b.n	80043a8 <_printf_float+0x1e0>
 80045e6:	f04f 0800 	mov.w	r8, #0
 80045ea:	f104 0b1a 	add.w	fp, r4, #26
 80045ee:	e7f4      	b.n	80045da <_printf_float+0x412>
 80045f0:	2301      	movs	r3, #1
 80045f2:	4642      	mov	r2, r8
 80045f4:	e7e1      	b.n	80045ba <_printf_float+0x3f2>
 80045f6:	2301      	movs	r3, #1
 80045f8:	464a      	mov	r2, r9
 80045fa:	4631      	mov	r1, r6
 80045fc:	4628      	mov	r0, r5
 80045fe:	47b8      	blx	r7
 8004600:	3001      	adds	r0, #1
 8004602:	f43f ae3c 	beq.w	800427e <_printf_float+0xb6>
 8004606:	f108 0801 	add.w	r8, r8, #1
 800460a:	68e3      	ldr	r3, [r4, #12]
 800460c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800460e:	1a5b      	subs	r3, r3, r1
 8004610:	4543      	cmp	r3, r8
 8004612:	dcf0      	bgt.n	80045f6 <_printf_float+0x42e>
 8004614:	e6fd      	b.n	8004412 <_printf_float+0x24a>
 8004616:	f04f 0800 	mov.w	r8, #0
 800461a:	f104 0919 	add.w	r9, r4, #25
 800461e:	e7f4      	b.n	800460a <_printf_float+0x442>

08004620 <_printf_common>:
 8004620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004624:	4616      	mov	r6, r2
 8004626:	4698      	mov	r8, r3
 8004628:	688a      	ldr	r2, [r1, #8]
 800462a:	690b      	ldr	r3, [r1, #16]
 800462c:	4607      	mov	r7, r0
 800462e:	4293      	cmp	r3, r2
 8004630:	bfb8      	it	lt
 8004632:	4613      	movlt	r3, r2
 8004634:	6033      	str	r3, [r6, #0]
 8004636:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800463a:	460c      	mov	r4, r1
 800463c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004640:	b10a      	cbz	r2, 8004646 <_printf_common+0x26>
 8004642:	3301      	adds	r3, #1
 8004644:	6033      	str	r3, [r6, #0]
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	0699      	lsls	r1, r3, #26
 800464a:	bf42      	ittt	mi
 800464c:	6833      	ldrmi	r3, [r6, #0]
 800464e:	3302      	addmi	r3, #2
 8004650:	6033      	strmi	r3, [r6, #0]
 8004652:	6825      	ldr	r5, [r4, #0]
 8004654:	f015 0506 	ands.w	r5, r5, #6
 8004658:	d106      	bne.n	8004668 <_printf_common+0x48>
 800465a:	f104 0a19 	add.w	sl, r4, #25
 800465e:	68e3      	ldr	r3, [r4, #12]
 8004660:	6832      	ldr	r2, [r6, #0]
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	42ab      	cmp	r3, r5
 8004666:	dc2b      	bgt.n	80046c0 <_printf_common+0xa0>
 8004668:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800466c:	6822      	ldr	r2, [r4, #0]
 800466e:	3b00      	subs	r3, #0
 8004670:	bf18      	it	ne
 8004672:	2301      	movne	r3, #1
 8004674:	0692      	lsls	r2, r2, #26
 8004676:	d430      	bmi.n	80046da <_printf_common+0xba>
 8004678:	4641      	mov	r1, r8
 800467a:	4638      	mov	r0, r7
 800467c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004680:	47c8      	blx	r9
 8004682:	3001      	adds	r0, #1
 8004684:	d023      	beq.n	80046ce <_printf_common+0xae>
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	6922      	ldr	r2, [r4, #16]
 800468a:	f003 0306 	and.w	r3, r3, #6
 800468e:	2b04      	cmp	r3, #4
 8004690:	bf14      	ite	ne
 8004692:	2500      	movne	r5, #0
 8004694:	6833      	ldreq	r3, [r6, #0]
 8004696:	f04f 0600 	mov.w	r6, #0
 800469a:	bf08      	it	eq
 800469c:	68e5      	ldreq	r5, [r4, #12]
 800469e:	f104 041a 	add.w	r4, r4, #26
 80046a2:	bf08      	it	eq
 80046a4:	1aed      	subeq	r5, r5, r3
 80046a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80046aa:	bf08      	it	eq
 80046ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046b0:	4293      	cmp	r3, r2
 80046b2:	bfc4      	itt	gt
 80046b4:	1a9b      	subgt	r3, r3, r2
 80046b6:	18ed      	addgt	r5, r5, r3
 80046b8:	42b5      	cmp	r5, r6
 80046ba:	d11a      	bne.n	80046f2 <_printf_common+0xd2>
 80046bc:	2000      	movs	r0, #0
 80046be:	e008      	b.n	80046d2 <_printf_common+0xb2>
 80046c0:	2301      	movs	r3, #1
 80046c2:	4652      	mov	r2, sl
 80046c4:	4641      	mov	r1, r8
 80046c6:	4638      	mov	r0, r7
 80046c8:	47c8      	blx	r9
 80046ca:	3001      	adds	r0, #1
 80046cc:	d103      	bne.n	80046d6 <_printf_common+0xb6>
 80046ce:	f04f 30ff 	mov.w	r0, #4294967295
 80046d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046d6:	3501      	adds	r5, #1
 80046d8:	e7c1      	b.n	800465e <_printf_common+0x3e>
 80046da:	2030      	movs	r0, #48	@ 0x30
 80046dc:	18e1      	adds	r1, r4, r3
 80046de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046e8:	4422      	add	r2, r4
 80046ea:	3302      	adds	r3, #2
 80046ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046f0:	e7c2      	b.n	8004678 <_printf_common+0x58>
 80046f2:	2301      	movs	r3, #1
 80046f4:	4622      	mov	r2, r4
 80046f6:	4641      	mov	r1, r8
 80046f8:	4638      	mov	r0, r7
 80046fa:	47c8      	blx	r9
 80046fc:	3001      	adds	r0, #1
 80046fe:	d0e6      	beq.n	80046ce <_printf_common+0xae>
 8004700:	3601      	adds	r6, #1
 8004702:	e7d9      	b.n	80046b8 <_printf_common+0x98>

08004704 <_printf_i>:
 8004704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004708:	7e0f      	ldrb	r7, [r1, #24]
 800470a:	4691      	mov	r9, r2
 800470c:	2f78      	cmp	r7, #120	@ 0x78
 800470e:	4680      	mov	r8, r0
 8004710:	460c      	mov	r4, r1
 8004712:	469a      	mov	sl, r3
 8004714:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004716:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800471a:	d807      	bhi.n	800472c <_printf_i+0x28>
 800471c:	2f62      	cmp	r7, #98	@ 0x62
 800471e:	d80a      	bhi.n	8004736 <_printf_i+0x32>
 8004720:	2f00      	cmp	r7, #0
 8004722:	f000 80d3 	beq.w	80048cc <_printf_i+0x1c8>
 8004726:	2f58      	cmp	r7, #88	@ 0x58
 8004728:	f000 80ba 	beq.w	80048a0 <_printf_i+0x19c>
 800472c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004730:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004734:	e03a      	b.n	80047ac <_printf_i+0xa8>
 8004736:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800473a:	2b15      	cmp	r3, #21
 800473c:	d8f6      	bhi.n	800472c <_printf_i+0x28>
 800473e:	a101      	add	r1, pc, #4	@ (adr r1, 8004744 <_printf_i+0x40>)
 8004740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004744:	0800479d 	.word	0x0800479d
 8004748:	080047b1 	.word	0x080047b1
 800474c:	0800472d 	.word	0x0800472d
 8004750:	0800472d 	.word	0x0800472d
 8004754:	0800472d 	.word	0x0800472d
 8004758:	0800472d 	.word	0x0800472d
 800475c:	080047b1 	.word	0x080047b1
 8004760:	0800472d 	.word	0x0800472d
 8004764:	0800472d 	.word	0x0800472d
 8004768:	0800472d 	.word	0x0800472d
 800476c:	0800472d 	.word	0x0800472d
 8004770:	080048b3 	.word	0x080048b3
 8004774:	080047db 	.word	0x080047db
 8004778:	0800486d 	.word	0x0800486d
 800477c:	0800472d 	.word	0x0800472d
 8004780:	0800472d 	.word	0x0800472d
 8004784:	080048d5 	.word	0x080048d5
 8004788:	0800472d 	.word	0x0800472d
 800478c:	080047db 	.word	0x080047db
 8004790:	0800472d 	.word	0x0800472d
 8004794:	0800472d 	.word	0x0800472d
 8004798:	08004875 	.word	0x08004875
 800479c:	6833      	ldr	r3, [r6, #0]
 800479e:	1d1a      	adds	r2, r3, #4
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6032      	str	r2, [r6, #0]
 80047a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047ac:	2301      	movs	r3, #1
 80047ae:	e09e      	b.n	80048ee <_printf_i+0x1ea>
 80047b0:	6833      	ldr	r3, [r6, #0]
 80047b2:	6820      	ldr	r0, [r4, #0]
 80047b4:	1d19      	adds	r1, r3, #4
 80047b6:	6031      	str	r1, [r6, #0]
 80047b8:	0606      	lsls	r6, r0, #24
 80047ba:	d501      	bpl.n	80047c0 <_printf_i+0xbc>
 80047bc:	681d      	ldr	r5, [r3, #0]
 80047be:	e003      	b.n	80047c8 <_printf_i+0xc4>
 80047c0:	0645      	lsls	r5, r0, #25
 80047c2:	d5fb      	bpl.n	80047bc <_printf_i+0xb8>
 80047c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047c8:	2d00      	cmp	r5, #0
 80047ca:	da03      	bge.n	80047d4 <_printf_i+0xd0>
 80047cc:	232d      	movs	r3, #45	@ 0x2d
 80047ce:	426d      	negs	r5, r5
 80047d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047d4:	230a      	movs	r3, #10
 80047d6:	4859      	ldr	r0, [pc, #356]	@ (800493c <_printf_i+0x238>)
 80047d8:	e011      	b.n	80047fe <_printf_i+0xfa>
 80047da:	6821      	ldr	r1, [r4, #0]
 80047dc:	6833      	ldr	r3, [r6, #0]
 80047de:	0608      	lsls	r0, r1, #24
 80047e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80047e4:	d402      	bmi.n	80047ec <_printf_i+0xe8>
 80047e6:	0649      	lsls	r1, r1, #25
 80047e8:	bf48      	it	mi
 80047ea:	b2ad      	uxthmi	r5, r5
 80047ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80047ee:	6033      	str	r3, [r6, #0]
 80047f0:	bf14      	ite	ne
 80047f2:	230a      	movne	r3, #10
 80047f4:	2308      	moveq	r3, #8
 80047f6:	4851      	ldr	r0, [pc, #324]	@ (800493c <_printf_i+0x238>)
 80047f8:	2100      	movs	r1, #0
 80047fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047fe:	6866      	ldr	r6, [r4, #4]
 8004800:	2e00      	cmp	r6, #0
 8004802:	bfa8      	it	ge
 8004804:	6821      	ldrge	r1, [r4, #0]
 8004806:	60a6      	str	r6, [r4, #8]
 8004808:	bfa4      	itt	ge
 800480a:	f021 0104 	bicge.w	r1, r1, #4
 800480e:	6021      	strge	r1, [r4, #0]
 8004810:	b90d      	cbnz	r5, 8004816 <_printf_i+0x112>
 8004812:	2e00      	cmp	r6, #0
 8004814:	d04b      	beq.n	80048ae <_printf_i+0x1aa>
 8004816:	4616      	mov	r6, r2
 8004818:	fbb5 f1f3 	udiv	r1, r5, r3
 800481c:	fb03 5711 	mls	r7, r3, r1, r5
 8004820:	5dc7      	ldrb	r7, [r0, r7]
 8004822:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004826:	462f      	mov	r7, r5
 8004828:	42bb      	cmp	r3, r7
 800482a:	460d      	mov	r5, r1
 800482c:	d9f4      	bls.n	8004818 <_printf_i+0x114>
 800482e:	2b08      	cmp	r3, #8
 8004830:	d10b      	bne.n	800484a <_printf_i+0x146>
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	07df      	lsls	r7, r3, #31
 8004836:	d508      	bpl.n	800484a <_printf_i+0x146>
 8004838:	6923      	ldr	r3, [r4, #16]
 800483a:	6861      	ldr	r1, [r4, #4]
 800483c:	4299      	cmp	r1, r3
 800483e:	bfde      	ittt	le
 8004840:	2330      	movle	r3, #48	@ 0x30
 8004842:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004846:	f106 36ff 	addle.w	r6, r6, #4294967295
 800484a:	1b92      	subs	r2, r2, r6
 800484c:	6122      	str	r2, [r4, #16]
 800484e:	464b      	mov	r3, r9
 8004850:	4621      	mov	r1, r4
 8004852:	4640      	mov	r0, r8
 8004854:	f8cd a000 	str.w	sl, [sp]
 8004858:	aa03      	add	r2, sp, #12
 800485a:	f7ff fee1 	bl	8004620 <_printf_common>
 800485e:	3001      	adds	r0, #1
 8004860:	d14a      	bne.n	80048f8 <_printf_i+0x1f4>
 8004862:	f04f 30ff 	mov.w	r0, #4294967295
 8004866:	b004      	add	sp, #16
 8004868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	f043 0320 	orr.w	r3, r3, #32
 8004872:	6023      	str	r3, [r4, #0]
 8004874:	2778      	movs	r7, #120	@ 0x78
 8004876:	4832      	ldr	r0, [pc, #200]	@ (8004940 <_printf_i+0x23c>)
 8004878:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	6831      	ldr	r1, [r6, #0]
 8004880:	061f      	lsls	r7, r3, #24
 8004882:	f851 5b04 	ldr.w	r5, [r1], #4
 8004886:	d402      	bmi.n	800488e <_printf_i+0x18a>
 8004888:	065f      	lsls	r7, r3, #25
 800488a:	bf48      	it	mi
 800488c:	b2ad      	uxthmi	r5, r5
 800488e:	6031      	str	r1, [r6, #0]
 8004890:	07d9      	lsls	r1, r3, #31
 8004892:	bf44      	itt	mi
 8004894:	f043 0320 	orrmi.w	r3, r3, #32
 8004898:	6023      	strmi	r3, [r4, #0]
 800489a:	b11d      	cbz	r5, 80048a4 <_printf_i+0x1a0>
 800489c:	2310      	movs	r3, #16
 800489e:	e7ab      	b.n	80047f8 <_printf_i+0xf4>
 80048a0:	4826      	ldr	r0, [pc, #152]	@ (800493c <_printf_i+0x238>)
 80048a2:	e7e9      	b.n	8004878 <_printf_i+0x174>
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	f023 0320 	bic.w	r3, r3, #32
 80048aa:	6023      	str	r3, [r4, #0]
 80048ac:	e7f6      	b.n	800489c <_printf_i+0x198>
 80048ae:	4616      	mov	r6, r2
 80048b0:	e7bd      	b.n	800482e <_printf_i+0x12a>
 80048b2:	6833      	ldr	r3, [r6, #0]
 80048b4:	6825      	ldr	r5, [r4, #0]
 80048b6:	1d18      	adds	r0, r3, #4
 80048b8:	6961      	ldr	r1, [r4, #20]
 80048ba:	6030      	str	r0, [r6, #0]
 80048bc:	062e      	lsls	r6, r5, #24
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	d501      	bpl.n	80048c6 <_printf_i+0x1c2>
 80048c2:	6019      	str	r1, [r3, #0]
 80048c4:	e002      	b.n	80048cc <_printf_i+0x1c8>
 80048c6:	0668      	lsls	r0, r5, #25
 80048c8:	d5fb      	bpl.n	80048c2 <_printf_i+0x1be>
 80048ca:	8019      	strh	r1, [r3, #0]
 80048cc:	2300      	movs	r3, #0
 80048ce:	4616      	mov	r6, r2
 80048d0:	6123      	str	r3, [r4, #16]
 80048d2:	e7bc      	b.n	800484e <_printf_i+0x14a>
 80048d4:	6833      	ldr	r3, [r6, #0]
 80048d6:	2100      	movs	r1, #0
 80048d8:	1d1a      	adds	r2, r3, #4
 80048da:	6032      	str	r2, [r6, #0]
 80048dc:	681e      	ldr	r6, [r3, #0]
 80048de:	6862      	ldr	r2, [r4, #4]
 80048e0:	4630      	mov	r0, r6
 80048e2:	f000 fc10 	bl	8005106 <memchr>
 80048e6:	b108      	cbz	r0, 80048ec <_printf_i+0x1e8>
 80048e8:	1b80      	subs	r0, r0, r6
 80048ea:	6060      	str	r0, [r4, #4]
 80048ec:	6863      	ldr	r3, [r4, #4]
 80048ee:	6123      	str	r3, [r4, #16]
 80048f0:	2300      	movs	r3, #0
 80048f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048f6:	e7aa      	b.n	800484e <_printf_i+0x14a>
 80048f8:	4632      	mov	r2, r6
 80048fa:	4649      	mov	r1, r9
 80048fc:	4640      	mov	r0, r8
 80048fe:	6923      	ldr	r3, [r4, #16]
 8004900:	47d0      	blx	sl
 8004902:	3001      	adds	r0, #1
 8004904:	d0ad      	beq.n	8004862 <_printf_i+0x15e>
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	079b      	lsls	r3, r3, #30
 800490a:	d413      	bmi.n	8004934 <_printf_i+0x230>
 800490c:	68e0      	ldr	r0, [r4, #12]
 800490e:	9b03      	ldr	r3, [sp, #12]
 8004910:	4298      	cmp	r0, r3
 8004912:	bfb8      	it	lt
 8004914:	4618      	movlt	r0, r3
 8004916:	e7a6      	b.n	8004866 <_printf_i+0x162>
 8004918:	2301      	movs	r3, #1
 800491a:	4632      	mov	r2, r6
 800491c:	4649      	mov	r1, r9
 800491e:	4640      	mov	r0, r8
 8004920:	47d0      	blx	sl
 8004922:	3001      	adds	r0, #1
 8004924:	d09d      	beq.n	8004862 <_printf_i+0x15e>
 8004926:	3501      	adds	r5, #1
 8004928:	68e3      	ldr	r3, [r4, #12]
 800492a:	9903      	ldr	r1, [sp, #12]
 800492c:	1a5b      	subs	r3, r3, r1
 800492e:	42ab      	cmp	r3, r5
 8004930:	dcf2      	bgt.n	8004918 <_printf_i+0x214>
 8004932:	e7eb      	b.n	800490c <_printf_i+0x208>
 8004934:	2500      	movs	r5, #0
 8004936:	f104 0619 	add.w	r6, r4, #25
 800493a:	e7f5      	b.n	8004928 <_printf_i+0x224>
 800493c:	08008828 	.word	0x08008828
 8004940:	08008839 	.word	0x08008839

08004944 <_scanf_float>:
 8004944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004948:	b087      	sub	sp, #28
 800494a:	9303      	str	r3, [sp, #12]
 800494c:	688b      	ldr	r3, [r1, #8]
 800494e:	4617      	mov	r7, r2
 8004950:	1e5a      	subs	r2, r3, #1
 8004952:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004956:	bf82      	ittt	hi
 8004958:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800495c:	eb03 0b05 	addhi.w	fp, r3, r5
 8004960:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004964:	460a      	mov	r2, r1
 8004966:	f04f 0500 	mov.w	r5, #0
 800496a:	bf88      	it	hi
 800496c:	608b      	strhi	r3, [r1, #8]
 800496e:	680b      	ldr	r3, [r1, #0]
 8004970:	4680      	mov	r8, r0
 8004972:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004976:	f842 3b1c 	str.w	r3, [r2], #28
 800497a:	460c      	mov	r4, r1
 800497c:	bf98      	it	ls
 800497e:	f04f 0b00 	movls.w	fp, #0
 8004982:	4616      	mov	r6, r2
 8004984:	46aa      	mov	sl, r5
 8004986:	46a9      	mov	r9, r5
 8004988:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800498c:	9201      	str	r2, [sp, #4]
 800498e:	9502      	str	r5, [sp, #8]
 8004990:	68a2      	ldr	r2, [r4, #8]
 8004992:	b152      	cbz	r2, 80049aa <_scanf_float+0x66>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b4e      	cmp	r3, #78	@ 0x4e
 800499a:	d865      	bhi.n	8004a68 <_scanf_float+0x124>
 800499c:	2b40      	cmp	r3, #64	@ 0x40
 800499e:	d83d      	bhi.n	8004a1c <_scanf_float+0xd8>
 80049a0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80049a4:	b2c8      	uxtb	r0, r1
 80049a6:	280e      	cmp	r0, #14
 80049a8:	d93b      	bls.n	8004a22 <_scanf_float+0xde>
 80049aa:	f1b9 0f00 	cmp.w	r9, #0
 80049ae:	d003      	beq.n	80049b8 <_scanf_float+0x74>
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049b6:	6023      	str	r3, [r4, #0]
 80049b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049bc:	f1ba 0f01 	cmp.w	sl, #1
 80049c0:	f200 8118 	bhi.w	8004bf4 <_scanf_float+0x2b0>
 80049c4:	9b01      	ldr	r3, [sp, #4]
 80049c6:	429e      	cmp	r6, r3
 80049c8:	f200 8109 	bhi.w	8004bde <_scanf_float+0x29a>
 80049cc:	2001      	movs	r0, #1
 80049ce:	b007      	add	sp, #28
 80049d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80049d8:	2a0d      	cmp	r2, #13
 80049da:	d8e6      	bhi.n	80049aa <_scanf_float+0x66>
 80049dc:	a101      	add	r1, pc, #4	@ (adr r1, 80049e4 <_scanf_float+0xa0>)
 80049de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80049e2:	bf00      	nop
 80049e4:	08004b2b 	.word	0x08004b2b
 80049e8:	080049ab 	.word	0x080049ab
 80049ec:	080049ab 	.word	0x080049ab
 80049f0:	080049ab 	.word	0x080049ab
 80049f4:	08004b8b 	.word	0x08004b8b
 80049f8:	08004b63 	.word	0x08004b63
 80049fc:	080049ab 	.word	0x080049ab
 8004a00:	080049ab 	.word	0x080049ab
 8004a04:	08004b39 	.word	0x08004b39
 8004a08:	080049ab 	.word	0x080049ab
 8004a0c:	080049ab 	.word	0x080049ab
 8004a10:	080049ab 	.word	0x080049ab
 8004a14:	080049ab 	.word	0x080049ab
 8004a18:	08004af1 	.word	0x08004af1
 8004a1c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004a20:	e7da      	b.n	80049d8 <_scanf_float+0x94>
 8004a22:	290e      	cmp	r1, #14
 8004a24:	d8c1      	bhi.n	80049aa <_scanf_float+0x66>
 8004a26:	a001      	add	r0, pc, #4	@ (adr r0, 8004a2c <_scanf_float+0xe8>)
 8004a28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004a2c:	08004ae1 	.word	0x08004ae1
 8004a30:	080049ab 	.word	0x080049ab
 8004a34:	08004ae1 	.word	0x08004ae1
 8004a38:	08004b77 	.word	0x08004b77
 8004a3c:	080049ab 	.word	0x080049ab
 8004a40:	08004a89 	.word	0x08004a89
 8004a44:	08004ac7 	.word	0x08004ac7
 8004a48:	08004ac7 	.word	0x08004ac7
 8004a4c:	08004ac7 	.word	0x08004ac7
 8004a50:	08004ac7 	.word	0x08004ac7
 8004a54:	08004ac7 	.word	0x08004ac7
 8004a58:	08004ac7 	.word	0x08004ac7
 8004a5c:	08004ac7 	.word	0x08004ac7
 8004a60:	08004ac7 	.word	0x08004ac7
 8004a64:	08004ac7 	.word	0x08004ac7
 8004a68:	2b6e      	cmp	r3, #110	@ 0x6e
 8004a6a:	d809      	bhi.n	8004a80 <_scanf_float+0x13c>
 8004a6c:	2b60      	cmp	r3, #96	@ 0x60
 8004a6e:	d8b1      	bhi.n	80049d4 <_scanf_float+0x90>
 8004a70:	2b54      	cmp	r3, #84	@ 0x54
 8004a72:	d07b      	beq.n	8004b6c <_scanf_float+0x228>
 8004a74:	2b59      	cmp	r3, #89	@ 0x59
 8004a76:	d198      	bne.n	80049aa <_scanf_float+0x66>
 8004a78:	2d07      	cmp	r5, #7
 8004a7a:	d196      	bne.n	80049aa <_scanf_float+0x66>
 8004a7c:	2508      	movs	r5, #8
 8004a7e:	e02c      	b.n	8004ada <_scanf_float+0x196>
 8004a80:	2b74      	cmp	r3, #116	@ 0x74
 8004a82:	d073      	beq.n	8004b6c <_scanf_float+0x228>
 8004a84:	2b79      	cmp	r3, #121	@ 0x79
 8004a86:	e7f6      	b.n	8004a76 <_scanf_float+0x132>
 8004a88:	6821      	ldr	r1, [r4, #0]
 8004a8a:	05c8      	lsls	r0, r1, #23
 8004a8c:	d51b      	bpl.n	8004ac6 <_scanf_float+0x182>
 8004a8e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004a92:	6021      	str	r1, [r4, #0]
 8004a94:	f109 0901 	add.w	r9, r9, #1
 8004a98:	f1bb 0f00 	cmp.w	fp, #0
 8004a9c:	d003      	beq.n	8004aa6 <_scanf_float+0x162>
 8004a9e:	3201      	adds	r2, #1
 8004aa0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004aa4:	60a2      	str	r2, [r4, #8]
 8004aa6:	68a3      	ldr	r3, [r4, #8]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	60a3      	str	r3, [r4, #8]
 8004aac:	6923      	ldr	r3, [r4, #16]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	6123      	str	r3, [r4, #16]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	607b      	str	r3, [r7, #4]
 8004aba:	f340 8087 	ble.w	8004bcc <_scanf_float+0x288>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	e764      	b.n	8004990 <_scanf_float+0x4c>
 8004ac6:	eb1a 0105 	adds.w	r1, sl, r5
 8004aca:	f47f af6e 	bne.w	80049aa <_scanf_float+0x66>
 8004ace:	460d      	mov	r5, r1
 8004ad0:	468a      	mov	sl, r1
 8004ad2:	6822      	ldr	r2, [r4, #0]
 8004ad4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004ad8:	6022      	str	r2, [r4, #0]
 8004ada:	f806 3b01 	strb.w	r3, [r6], #1
 8004ade:	e7e2      	b.n	8004aa6 <_scanf_float+0x162>
 8004ae0:	6822      	ldr	r2, [r4, #0]
 8004ae2:	0610      	lsls	r0, r2, #24
 8004ae4:	f57f af61 	bpl.w	80049aa <_scanf_float+0x66>
 8004ae8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004aec:	6022      	str	r2, [r4, #0]
 8004aee:	e7f4      	b.n	8004ada <_scanf_float+0x196>
 8004af0:	f1ba 0f00 	cmp.w	sl, #0
 8004af4:	d10e      	bne.n	8004b14 <_scanf_float+0x1d0>
 8004af6:	f1b9 0f00 	cmp.w	r9, #0
 8004afa:	d10e      	bne.n	8004b1a <_scanf_float+0x1d6>
 8004afc:	6822      	ldr	r2, [r4, #0]
 8004afe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004b02:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004b06:	d108      	bne.n	8004b1a <_scanf_float+0x1d6>
 8004b08:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004b0c:	f04f 0a01 	mov.w	sl, #1
 8004b10:	6022      	str	r2, [r4, #0]
 8004b12:	e7e2      	b.n	8004ada <_scanf_float+0x196>
 8004b14:	f1ba 0f02 	cmp.w	sl, #2
 8004b18:	d055      	beq.n	8004bc6 <_scanf_float+0x282>
 8004b1a:	2d01      	cmp	r5, #1
 8004b1c:	d002      	beq.n	8004b24 <_scanf_float+0x1e0>
 8004b1e:	2d04      	cmp	r5, #4
 8004b20:	f47f af43 	bne.w	80049aa <_scanf_float+0x66>
 8004b24:	3501      	adds	r5, #1
 8004b26:	b2ed      	uxtb	r5, r5
 8004b28:	e7d7      	b.n	8004ada <_scanf_float+0x196>
 8004b2a:	f1ba 0f01 	cmp.w	sl, #1
 8004b2e:	f47f af3c 	bne.w	80049aa <_scanf_float+0x66>
 8004b32:	f04f 0a02 	mov.w	sl, #2
 8004b36:	e7d0      	b.n	8004ada <_scanf_float+0x196>
 8004b38:	b97d      	cbnz	r5, 8004b5a <_scanf_float+0x216>
 8004b3a:	f1b9 0f00 	cmp.w	r9, #0
 8004b3e:	f47f af37 	bne.w	80049b0 <_scanf_float+0x6c>
 8004b42:	6822      	ldr	r2, [r4, #0]
 8004b44:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004b48:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004b4c:	f040 8103 	bne.w	8004d56 <_scanf_float+0x412>
 8004b50:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004b54:	2501      	movs	r5, #1
 8004b56:	6022      	str	r2, [r4, #0]
 8004b58:	e7bf      	b.n	8004ada <_scanf_float+0x196>
 8004b5a:	2d03      	cmp	r5, #3
 8004b5c:	d0e2      	beq.n	8004b24 <_scanf_float+0x1e0>
 8004b5e:	2d05      	cmp	r5, #5
 8004b60:	e7de      	b.n	8004b20 <_scanf_float+0x1dc>
 8004b62:	2d02      	cmp	r5, #2
 8004b64:	f47f af21 	bne.w	80049aa <_scanf_float+0x66>
 8004b68:	2503      	movs	r5, #3
 8004b6a:	e7b6      	b.n	8004ada <_scanf_float+0x196>
 8004b6c:	2d06      	cmp	r5, #6
 8004b6e:	f47f af1c 	bne.w	80049aa <_scanf_float+0x66>
 8004b72:	2507      	movs	r5, #7
 8004b74:	e7b1      	b.n	8004ada <_scanf_float+0x196>
 8004b76:	6822      	ldr	r2, [r4, #0]
 8004b78:	0591      	lsls	r1, r2, #22
 8004b7a:	f57f af16 	bpl.w	80049aa <_scanf_float+0x66>
 8004b7e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004b82:	6022      	str	r2, [r4, #0]
 8004b84:	f8cd 9008 	str.w	r9, [sp, #8]
 8004b88:	e7a7      	b.n	8004ada <_scanf_float+0x196>
 8004b8a:	6822      	ldr	r2, [r4, #0]
 8004b8c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004b90:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004b94:	d006      	beq.n	8004ba4 <_scanf_float+0x260>
 8004b96:	0550      	lsls	r0, r2, #21
 8004b98:	f57f af07 	bpl.w	80049aa <_scanf_float+0x66>
 8004b9c:	f1b9 0f00 	cmp.w	r9, #0
 8004ba0:	f000 80d9 	beq.w	8004d56 <_scanf_float+0x412>
 8004ba4:	0591      	lsls	r1, r2, #22
 8004ba6:	bf58      	it	pl
 8004ba8:	9902      	ldrpl	r1, [sp, #8]
 8004baa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004bae:	bf58      	it	pl
 8004bb0:	eba9 0101 	subpl.w	r1, r9, r1
 8004bb4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004bb8:	f04f 0900 	mov.w	r9, #0
 8004bbc:	bf58      	it	pl
 8004bbe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004bc2:	6022      	str	r2, [r4, #0]
 8004bc4:	e789      	b.n	8004ada <_scanf_float+0x196>
 8004bc6:	f04f 0a03 	mov.w	sl, #3
 8004bca:	e786      	b.n	8004ada <_scanf_float+0x196>
 8004bcc:	4639      	mov	r1, r7
 8004bce:	4640      	mov	r0, r8
 8004bd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004bd4:	4798      	blx	r3
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	f43f aeda 	beq.w	8004990 <_scanf_float+0x4c>
 8004bdc:	e6e5      	b.n	80049aa <_scanf_float+0x66>
 8004bde:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004be2:	463a      	mov	r2, r7
 8004be4:	4640      	mov	r0, r8
 8004be6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004bea:	4798      	blx	r3
 8004bec:	6923      	ldr	r3, [r4, #16]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	6123      	str	r3, [r4, #16]
 8004bf2:	e6e7      	b.n	80049c4 <_scanf_float+0x80>
 8004bf4:	1e6b      	subs	r3, r5, #1
 8004bf6:	2b06      	cmp	r3, #6
 8004bf8:	d824      	bhi.n	8004c44 <_scanf_float+0x300>
 8004bfa:	2d02      	cmp	r5, #2
 8004bfc:	d836      	bhi.n	8004c6c <_scanf_float+0x328>
 8004bfe:	9b01      	ldr	r3, [sp, #4]
 8004c00:	429e      	cmp	r6, r3
 8004c02:	f67f aee3 	bls.w	80049cc <_scanf_float+0x88>
 8004c06:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c0a:	463a      	mov	r2, r7
 8004c0c:	4640      	mov	r0, r8
 8004c0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c12:	4798      	blx	r3
 8004c14:	6923      	ldr	r3, [r4, #16]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	6123      	str	r3, [r4, #16]
 8004c1a:	e7f0      	b.n	8004bfe <_scanf_float+0x2ba>
 8004c1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c20:	463a      	mov	r2, r7
 8004c22:	4640      	mov	r0, r8
 8004c24:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004c28:	4798      	blx	r3
 8004c2a:	6923      	ldr	r3, [r4, #16]
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	6123      	str	r3, [r4, #16]
 8004c30:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c34:	fa5f fa8a 	uxtb.w	sl, sl
 8004c38:	f1ba 0f02 	cmp.w	sl, #2
 8004c3c:	d1ee      	bne.n	8004c1c <_scanf_float+0x2d8>
 8004c3e:	3d03      	subs	r5, #3
 8004c40:	b2ed      	uxtb	r5, r5
 8004c42:	1b76      	subs	r6, r6, r5
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	05da      	lsls	r2, r3, #23
 8004c48:	d530      	bpl.n	8004cac <_scanf_float+0x368>
 8004c4a:	055b      	lsls	r3, r3, #21
 8004c4c:	d511      	bpl.n	8004c72 <_scanf_float+0x32e>
 8004c4e:	9b01      	ldr	r3, [sp, #4]
 8004c50:	429e      	cmp	r6, r3
 8004c52:	f67f aebb 	bls.w	80049cc <_scanf_float+0x88>
 8004c56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c5a:	463a      	mov	r2, r7
 8004c5c:	4640      	mov	r0, r8
 8004c5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c62:	4798      	blx	r3
 8004c64:	6923      	ldr	r3, [r4, #16]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	6123      	str	r3, [r4, #16]
 8004c6a:	e7f0      	b.n	8004c4e <_scanf_float+0x30a>
 8004c6c:	46aa      	mov	sl, r5
 8004c6e:	46b3      	mov	fp, r6
 8004c70:	e7de      	b.n	8004c30 <_scanf_float+0x2ec>
 8004c72:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004c76:	6923      	ldr	r3, [r4, #16]
 8004c78:	2965      	cmp	r1, #101	@ 0x65
 8004c7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c7e:	f106 35ff 	add.w	r5, r6, #4294967295
 8004c82:	6123      	str	r3, [r4, #16]
 8004c84:	d00c      	beq.n	8004ca0 <_scanf_float+0x35c>
 8004c86:	2945      	cmp	r1, #69	@ 0x45
 8004c88:	d00a      	beq.n	8004ca0 <_scanf_float+0x35c>
 8004c8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c8e:	463a      	mov	r2, r7
 8004c90:	4640      	mov	r0, r8
 8004c92:	4798      	blx	r3
 8004c94:	6923      	ldr	r3, [r4, #16]
 8004c96:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	1eb5      	subs	r5, r6, #2
 8004c9e:	6123      	str	r3, [r4, #16]
 8004ca0:	463a      	mov	r2, r7
 8004ca2:	4640      	mov	r0, r8
 8004ca4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ca8:	4798      	blx	r3
 8004caa:	462e      	mov	r6, r5
 8004cac:	6822      	ldr	r2, [r4, #0]
 8004cae:	f012 0210 	ands.w	r2, r2, #16
 8004cb2:	d001      	beq.n	8004cb8 <_scanf_float+0x374>
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	e68a      	b.n	80049ce <_scanf_float+0x8a>
 8004cb8:	7032      	strb	r2, [r6, #0]
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004cc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc4:	d11c      	bne.n	8004d00 <_scanf_float+0x3bc>
 8004cc6:	9b02      	ldr	r3, [sp, #8]
 8004cc8:	454b      	cmp	r3, r9
 8004cca:	eba3 0209 	sub.w	r2, r3, r9
 8004cce:	d123      	bne.n	8004d18 <_scanf_float+0x3d4>
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	4640      	mov	r0, r8
 8004cd4:	9901      	ldr	r1, [sp, #4]
 8004cd6:	f002 fc27 	bl	8007528 <_strtod_r>
 8004cda:	9b03      	ldr	r3, [sp, #12]
 8004cdc:	6825      	ldr	r5, [r4, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f015 0f02 	tst.w	r5, #2
 8004ce4:	4606      	mov	r6, r0
 8004ce6:	460f      	mov	r7, r1
 8004ce8:	f103 0204 	add.w	r2, r3, #4
 8004cec:	d01f      	beq.n	8004d2e <_scanf_float+0x3ea>
 8004cee:	9903      	ldr	r1, [sp, #12]
 8004cf0:	600a      	str	r2, [r1, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	e9c3 6700 	strd	r6, r7, [r3]
 8004cf8:	68e3      	ldr	r3, [r4, #12]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	60e3      	str	r3, [r4, #12]
 8004cfe:	e7d9      	b.n	8004cb4 <_scanf_float+0x370>
 8004d00:	9b04      	ldr	r3, [sp, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0e4      	beq.n	8004cd0 <_scanf_float+0x38c>
 8004d06:	9905      	ldr	r1, [sp, #20]
 8004d08:	230a      	movs	r3, #10
 8004d0a:	4640      	mov	r0, r8
 8004d0c:	3101      	adds	r1, #1
 8004d0e:	f002 fc8b 	bl	8007628 <_strtol_r>
 8004d12:	9b04      	ldr	r3, [sp, #16]
 8004d14:	9e05      	ldr	r6, [sp, #20]
 8004d16:	1ac2      	subs	r2, r0, r3
 8004d18:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004d1c:	429e      	cmp	r6, r3
 8004d1e:	bf28      	it	cs
 8004d20:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004d24:	4630      	mov	r0, r6
 8004d26:	490d      	ldr	r1, [pc, #52]	@ (8004d5c <_scanf_float+0x418>)
 8004d28:	f000 f8f0 	bl	8004f0c <siprintf>
 8004d2c:	e7d0      	b.n	8004cd0 <_scanf_float+0x38c>
 8004d2e:	076d      	lsls	r5, r5, #29
 8004d30:	d4dd      	bmi.n	8004cee <_scanf_float+0x3aa>
 8004d32:	9d03      	ldr	r5, [sp, #12]
 8004d34:	602a      	str	r2, [r5, #0]
 8004d36:	681d      	ldr	r5, [r3, #0]
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	f7fb fe66 	bl	8000a0c <__aeabi_dcmpun>
 8004d40:	b120      	cbz	r0, 8004d4c <_scanf_float+0x408>
 8004d42:	4807      	ldr	r0, [pc, #28]	@ (8004d60 <_scanf_float+0x41c>)
 8004d44:	f000 f9fc 	bl	8005140 <nanf>
 8004d48:	6028      	str	r0, [r5, #0]
 8004d4a:	e7d5      	b.n	8004cf8 <_scanf_float+0x3b4>
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	4639      	mov	r1, r7
 8004d50:	f7fb feba 	bl	8000ac8 <__aeabi_d2f>
 8004d54:	e7f8      	b.n	8004d48 <_scanf_float+0x404>
 8004d56:	f04f 0900 	mov.w	r9, #0
 8004d5a:	e62d      	b.n	80049b8 <_scanf_float+0x74>
 8004d5c:	0800884a 	.word	0x0800884a
 8004d60:	08008be5 	.word	0x08008be5

08004d64 <std>:
 8004d64:	2300      	movs	r3, #0
 8004d66:	b510      	push	{r4, lr}
 8004d68:	4604      	mov	r4, r0
 8004d6a:	e9c0 3300 	strd	r3, r3, [r0]
 8004d6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d72:	6083      	str	r3, [r0, #8]
 8004d74:	8181      	strh	r1, [r0, #12]
 8004d76:	6643      	str	r3, [r0, #100]	@ 0x64
 8004d78:	81c2      	strh	r2, [r0, #14]
 8004d7a:	6183      	str	r3, [r0, #24]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	2208      	movs	r2, #8
 8004d80:	305c      	adds	r0, #92	@ 0x5c
 8004d82:	f000 f940 	bl	8005006 <memset>
 8004d86:	4b0d      	ldr	r3, [pc, #52]	@ (8004dbc <std+0x58>)
 8004d88:	6224      	str	r4, [r4, #32]
 8004d8a:	6263      	str	r3, [r4, #36]	@ 0x24
 8004d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc0 <std+0x5c>)
 8004d8e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004d90:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc4 <std+0x60>)
 8004d92:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004d94:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc8 <std+0x64>)
 8004d96:	6323      	str	r3, [r4, #48]	@ 0x30
 8004d98:	4b0c      	ldr	r3, [pc, #48]	@ (8004dcc <std+0x68>)
 8004d9a:	429c      	cmp	r4, r3
 8004d9c:	d006      	beq.n	8004dac <std+0x48>
 8004d9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004da2:	4294      	cmp	r4, r2
 8004da4:	d002      	beq.n	8004dac <std+0x48>
 8004da6:	33d0      	adds	r3, #208	@ 0xd0
 8004da8:	429c      	cmp	r4, r3
 8004daa:	d105      	bne.n	8004db8 <std+0x54>
 8004dac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004db4:	f000 b9a4 	b.w	8005100 <__retarget_lock_init_recursive>
 8004db8:	bd10      	pop	{r4, pc}
 8004dba:	bf00      	nop
 8004dbc:	08004f4d 	.word	0x08004f4d
 8004dc0:	08004f6f 	.word	0x08004f6f
 8004dc4:	08004fa7 	.word	0x08004fa7
 8004dc8:	08004fcb 	.word	0x08004fcb
 8004dcc:	20000350 	.word	0x20000350

08004dd0 <stdio_exit_handler>:
 8004dd0:	4a02      	ldr	r2, [pc, #8]	@ (8004ddc <stdio_exit_handler+0xc>)
 8004dd2:	4903      	ldr	r1, [pc, #12]	@ (8004de0 <stdio_exit_handler+0x10>)
 8004dd4:	4803      	ldr	r0, [pc, #12]	@ (8004de4 <stdio_exit_handler+0x14>)
 8004dd6:	f000 b869 	b.w	8004eac <_fwalk_sglue>
 8004dda:	bf00      	nop
 8004ddc:	20000018 	.word	0x20000018
 8004de0:	08007c5d 	.word	0x08007c5d
 8004de4:	20000028 	.word	0x20000028

08004de8 <cleanup_stdio>:
 8004de8:	6841      	ldr	r1, [r0, #4]
 8004dea:	4b0c      	ldr	r3, [pc, #48]	@ (8004e1c <cleanup_stdio+0x34>)
 8004dec:	b510      	push	{r4, lr}
 8004dee:	4299      	cmp	r1, r3
 8004df0:	4604      	mov	r4, r0
 8004df2:	d001      	beq.n	8004df8 <cleanup_stdio+0x10>
 8004df4:	f002 ff32 	bl	8007c5c <_fflush_r>
 8004df8:	68a1      	ldr	r1, [r4, #8]
 8004dfa:	4b09      	ldr	r3, [pc, #36]	@ (8004e20 <cleanup_stdio+0x38>)
 8004dfc:	4299      	cmp	r1, r3
 8004dfe:	d002      	beq.n	8004e06 <cleanup_stdio+0x1e>
 8004e00:	4620      	mov	r0, r4
 8004e02:	f002 ff2b 	bl	8007c5c <_fflush_r>
 8004e06:	68e1      	ldr	r1, [r4, #12]
 8004e08:	4b06      	ldr	r3, [pc, #24]	@ (8004e24 <cleanup_stdio+0x3c>)
 8004e0a:	4299      	cmp	r1, r3
 8004e0c:	d004      	beq.n	8004e18 <cleanup_stdio+0x30>
 8004e0e:	4620      	mov	r0, r4
 8004e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e14:	f002 bf22 	b.w	8007c5c <_fflush_r>
 8004e18:	bd10      	pop	{r4, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20000350 	.word	0x20000350
 8004e20:	200003b8 	.word	0x200003b8
 8004e24:	20000420 	.word	0x20000420

08004e28 <global_stdio_init.part.0>:
 8004e28:	b510      	push	{r4, lr}
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e58 <global_stdio_init.part.0+0x30>)
 8004e2c:	4c0b      	ldr	r4, [pc, #44]	@ (8004e5c <global_stdio_init.part.0+0x34>)
 8004e2e:	4a0c      	ldr	r2, [pc, #48]	@ (8004e60 <global_stdio_init.part.0+0x38>)
 8004e30:	4620      	mov	r0, r4
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	2104      	movs	r1, #4
 8004e36:	2200      	movs	r2, #0
 8004e38:	f7ff ff94 	bl	8004d64 <std>
 8004e3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e40:	2201      	movs	r2, #1
 8004e42:	2109      	movs	r1, #9
 8004e44:	f7ff ff8e 	bl	8004d64 <std>
 8004e48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e52:	2112      	movs	r1, #18
 8004e54:	f7ff bf86 	b.w	8004d64 <std>
 8004e58:	20000488 	.word	0x20000488
 8004e5c:	20000350 	.word	0x20000350
 8004e60:	08004dd1 	.word	0x08004dd1

08004e64 <__sfp_lock_acquire>:
 8004e64:	4801      	ldr	r0, [pc, #4]	@ (8004e6c <__sfp_lock_acquire+0x8>)
 8004e66:	f000 b94c 	b.w	8005102 <__retarget_lock_acquire_recursive>
 8004e6a:	bf00      	nop
 8004e6c:	20000491 	.word	0x20000491

08004e70 <__sfp_lock_release>:
 8004e70:	4801      	ldr	r0, [pc, #4]	@ (8004e78 <__sfp_lock_release+0x8>)
 8004e72:	f000 b947 	b.w	8005104 <__retarget_lock_release_recursive>
 8004e76:	bf00      	nop
 8004e78:	20000491 	.word	0x20000491

08004e7c <__sinit>:
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	4604      	mov	r4, r0
 8004e80:	f7ff fff0 	bl	8004e64 <__sfp_lock_acquire>
 8004e84:	6a23      	ldr	r3, [r4, #32]
 8004e86:	b11b      	cbz	r3, 8004e90 <__sinit+0x14>
 8004e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e8c:	f7ff bff0 	b.w	8004e70 <__sfp_lock_release>
 8004e90:	4b04      	ldr	r3, [pc, #16]	@ (8004ea4 <__sinit+0x28>)
 8004e92:	6223      	str	r3, [r4, #32]
 8004e94:	4b04      	ldr	r3, [pc, #16]	@ (8004ea8 <__sinit+0x2c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1f5      	bne.n	8004e88 <__sinit+0xc>
 8004e9c:	f7ff ffc4 	bl	8004e28 <global_stdio_init.part.0>
 8004ea0:	e7f2      	b.n	8004e88 <__sinit+0xc>
 8004ea2:	bf00      	nop
 8004ea4:	08004de9 	.word	0x08004de9
 8004ea8:	20000488 	.word	0x20000488

08004eac <_fwalk_sglue>:
 8004eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eb0:	4607      	mov	r7, r0
 8004eb2:	4688      	mov	r8, r1
 8004eb4:	4614      	mov	r4, r2
 8004eb6:	2600      	movs	r6, #0
 8004eb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ebc:	f1b9 0901 	subs.w	r9, r9, #1
 8004ec0:	d505      	bpl.n	8004ece <_fwalk_sglue+0x22>
 8004ec2:	6824      	ldr	r4, [r4, #0]
 8004ec4:	2c00      	cmp	r4, #0
 8004ec6:	d1f7      	bne.n	8004eb8 <_fwalk_sglue+0xc>
 8004ec8:	4630      	mov	r0, r6
 8004eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ece:	89ab      	ldrh	r3, [r5, #12]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d907      	bls.n	8004ee4 <_fwalk_sglue+0x38>
 8004ed4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	d003      	beq.n	8004ee4 <_fwalk_sglue+0x38>
 8004edc:	4629      	mov	r1, r5
 8004ede:	4638      	mov	r0, r7
 8004ee0:	47c0      	blx	r8
 8004ee2:	4306      	orrs	r6, r0
 8004ee4:	3568      	adds	r5, #104	@ 0x68
 8004ee6:	e7e9      	b.n	8004ebc <_fwalk_sglue+0x10>

08004ee8 <iprintf>:
 8004ee8:	b40f      	push	{r0, r1, r2, r3}
 8004eea:	b507      	push	{r0, r1, r2, lr}
 8004eec:	4906      	ldr	r1, [pc, #24]	@ (8004f08 <iprintf+0x20>)
 8004eee:	ab04      	add	r3, sp, #16
 8004ef0:	6808      	ldr	r0, [r1, #0]
 8004ef2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ef6:	6881      	ldr	r1, [r0, #8]
 8004ef8:	9301      	str	r3, [sp, #4]
 8004efa:	f002 fd17 	bl	800792c <_vfiprintf_r>
 8004efe:	b003      	add	sp, #12
 8004f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f04:	b004      	add	sp, #16
 8004f06:	4770      	bx	lr
 8004f08:	20000024 	.word	0x20000024

08004f0c <siprintf>:
 8004f0c:	b40e      	push	{r1, r2, r3}
 8004f0e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004f12:	b500      	push	{lr}
 8004f14:	b09c      	sub	sp, #112	@ 0x70
 8004f16:	ab1d      	add	r3, sp, #116	@ 0x74
 8004f18:	9002      	str	r0, [sp, #8]
 8004f1a:	9006      	str	r0, [sp, #24]
 8004f1c:	9107      	str	r1, [sp, #28]
 8004f1e:	9104      	str	r1, [sp, #16]
 8004f20:	4808      	ldr	r0, [pc, #32]	@ (8004f44 <siprintf+0x38>)
 8004f22:	4909      	ldr	r1, [pc, #36]	@ (8004f48 <siprintf+0x3c>)
 8004f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f28:	9105      	str	r1, [sp, #20]
 8004f2a:	6800      	ldr	r0, [r0, #0]
 8004f2c:	a902      	add	r1, sp, #8
 8004f2e:	9301      	str	r3, [sp, #4]
 8004f30:	f002 fbd8 	bl	80076e4 <_svfiprintf_r>
 8004f34:	2200      	movs	r2, #0
 8004f36:	9b02      	ldr	r3, [sp, #8]
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	b01c      	add	sp, #112	@ 0x70
 8004f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f40:	b003      	add	sp, #12
 8004f42:	4770      	bx	lr
 8004f44:	20000024 	.word	0x20000024
 8004f48:	ffff0208 	.word	0xffff0208

08004f4c <__sread>:
 8004f4c:	b510      	push	{r4, lr}
 8004f4e:	460c      	mov	r4, r1
 8004f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f54:	f000 f886 	bl	8005064 <_read_r>
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	bfab      	itete	ge
 8004f5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004f5e:	89a3      	ldrhlt	r3, [r4, #12]
 8004f60:	181b      	addge	r3, r3, r0
 8004f62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004f66:	bfac      	ite	ge
 8004f68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004f6a:	81a3      	strhlt	r3, [r4, #12]
 8004f6c:	bd10      	pop	{r4, pc}

08004f6e <__swrite>:
 8004f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f72:	461f      	mov	r7, r3
 8004f74:	898b      	ldrh	r3, [r1, #12]
 8004f76:	4605      	mov	r5, r0
 8004f78:	05db      	lsls	r3, r3, #23
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	4616      	mov	r6, r2
 8004f7e:	d505      	bpl.n	8004f8c <__swrite+0x1e>
 8004f80:	2302      	movs	r3, #2
 8004f82:	2200      	movs	r2, #0
 8004f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f88:	f000 f85a 	bl	8005040 <_lseek_r>
 8004f8c:	89a3      	ldrh	r3, [r4, #12]
 8004f8e:	4632      	mov	r2, r6
 8004f90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f94:	81a3      	strh	r3, [r4, #12]
 8004f96:	4628      	mov	r0, r5
 8004f98:	463b      	mov	r3, r7
 8004f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fa2:	f000 b871 	b.w	8005088 <_write_r>

08004fa6 <__sseek>:
 8004fa6:	b510      	push	{r4, lr}
 8004fa8:	460c      	mov	r4, r1
 8004faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fae:	f000 f847 	bl	8005040 <_lseek_r>
 8004fb2:	1c43      	adds	r3, r0, #1
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	bf15      	itete	ne
 8004fb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004fba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004fbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004fc2:	81a3      	strheq	r3, [r4, #12]
 8004fc4:	bf18      	it	ne
 8004fc6:	81a3      	strhne	r3, [r4, #12]
 8004fc8:	bd10      	pop	{r4, pc}

08004fca <__sclose>:
 8004fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fce:	f000 b827 	b.w	8005020 <_close_r>

08004fd2 <memmove>:
 8004fd2:	4288      	cmp	r0, r1
 8004fd4:	b510      	push	{r4, lr}
 8004fd6:	eb01 0402 	add.w	r4, r1, r2
 8004fda:	d902      	bls.n	8004fe2 <memmove+0x10>
 8004fdc:	4284      	cmp	r4, r0
 8004fde:	4623      	mov	r3, r4
 8004fe0:	d807      	bhi.n	8004ff2 <memmove+0x20>
 8004fe2:	1e43      	subs	r3, r0, #1
 8004fe4:	42a1      	cmp	r1, r4
 8004fe6:	d008      	beq.n	8004ffa <memmove+0x28>
 8004fe8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fec:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ff0:	e7f8      	b.n	8004fe4 <memmove+0x12>
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	4402      	add	r2, r0
 8004ff6:	428a      	cmp	r2, r1
 8004ff8:	d100      	bne.n	8004ffc <memmove+0x2a>
 8004ffa:	bd10      	pop	{r4, pc}
 8004ffc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005000:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005004:	e7f7      	b.n	8004ff6 <memmove+0x24>

08005006 <memset>:
 8005006:	4603      	mov	r3, r0
 8005008:	4402      	add	r2, r0
 800500a:	4293      	cmp	r3, r2
 800500c:	d100      	bne.n	8005010 <memset+0xa>
 800500e:	4770      	bx	lr
 8005010:	f803 1b01 	strb.w	r1, [r3], #1
 8005014:	e7f9      	b.n	800500a <memset+0x4>
	...

08005018 <_localeconv_r>:
 8005018:	4800      	ldr	r0, [pc, #0]	@ (800501c <_localeconv_r+0x4>)
 800501a:	4770      	bx	lr
 800501c:	20000164 	.word	0x20000164

08005020 <_close_r>:
 8005020:	b538      	push	{r3, r4, r5, lr}
 8005022:	2300      	movs	r3, #0
 8005024:	4d05      	ldr	r5, [pc, #20]	@ (800503c <_close_r+0x1c>)
 8005026:	4604      	mov	r4, r0
 8005028:	4608      	mov	r0, r1
 800502a:	602b      	str	r3, [r5, #0]
 800502c:	f7fc f8f1 	bl	8001212 <_close>
 8005030:	1c43      	adds	r3, r0, #1
 8005032:	d102      	bne.n	800503a <_close_r+0x1a>
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	b103      	cbz	r3, 800503a <_close_r+0x1a>
 8005038:	6023      	str	r3, [r4, #0]
 800503a:	bd38      	pop	{r3, r4, r5, pc}
 800503c:	2000048c 	.word	0x2000048c

08005040 <_lseek_r>:
 8005040:	b538      	push	{r3, r4, r5, lr}
 8005042:	4604      	mov	r4, r0
 8005044:	4608      	mov	r0, r1
 8005046:	4611      	mov	r1, r2
 8005048:	2200      	movs	r2, #0
 800504a:	4d05      	ldr	r5, [pc, #20]	@ (8005060 <_lseek_r+0x20>)
 800504c:	602a      	str	r2, [r5, #0]
 800504e:	461a      	mov	r2, r3
 8005050:	f7fc f903 	bl	800125a <_lseek>
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	d102      	bne.n	800505e <_lseek_r+0x1e>
 8005058:	682b      	ldr	r3, [r5, #0]
 800505a:	b103      	cbz	r3, 800505e <_lseek_r+0x1e>
 800505c:	6023      	str	r3, [r4, #0]
 800505e:	bd38      	pop	{r3, r4, r5, pc}
 8005060:	2000048c 	.word	0x2000048c

08005064 <_read_r>:
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	4604      	mov	r4, r0
 8005068:	4608      	mov	r0, r1
 800506a:	4611      	mov	r1, r2
 800506c:	2200      	movs	r2, #0
 800506e:	4d05      	ldr	r5, [pc, #20]	@ (8005084 <_read_r+0x20>)
 8005070:	602a      	str	r2, [r5, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	f7fc f894 	bl	80011a0 <_read>
 8005078:	1c43      	adds	r3, r0, #1
 800507a:	d102      	bne.n	8005082 <_read_r+0x1e>
 800507c:	682b      	ldr	r3, [r5, #0]
 800507e:	b103      	cbz	r3, 8005082 <_read_r+0x1e>
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	bd38      	pop	{r3, r4, r5, pc}
 8005084:	2000048c 	.word	0x2000048c

08005088 <_write_r>:
 8005088:	b538      	push	{r3, r4, r5, lr}
 800508a:	4604      	mov	r4, r0
 800508c:	4608      	mov	r0, r1
 800508e:	4611      	mov	r1, r2
 8005090:	2200      	movs	r2, #0
 8005092:	4d05      	ldr	r5, [pc, #20]	@ (80050a8 <_write_r+0x20>)
 8005094:	602a      	str	r2, [r5, #0]
 8005096:	461a      	mov	r2, r3
 8005098:	f7fc f89f 	bl	80011da <_write>
 800509c:	1c43      	adds	r3, r0, #1
 800509e:	d102      	bne.n	80050a6 <_write_r+0x1e>
 80050a0:	682b      	ldr	r3, [r5, #0]
 80050a2:	b103      	cbz	r3, 80050a6 <_write_r+0x1e>
 80050a4:	6023      	str	r3, [r4, #0]
 80050a6:	bd38      	pop	{r3, r4, r5, pc}
 80050a8:	2000048c 	.word	0x2000048c

080050ac <__errno>:
 80050ac:	4b01      	ldr	r3, [pc, #4]	@ (80050b4 <__errno+0x8>)
 80050ae:	6818      	ldr	r0, [r3, #0]
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	20000024 	.word	0x20000024

080050b8 <__libc_init_array>:
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	2600      	movs	r6, #0
 80050bc:	4d0c      	ldr	r5, [pc, #48]	@ (80050f0 <__libc_init_array+0x38>)
 80050be:	4c0d      	ldr	r4, [pc, #52]	@ (80050f4 <__libc_init_array+0x3c>)
 80050c0:	1b64      	subs	r4, r4, r5
 80050c2:	10a4      	asrs	r4, r4, #2
 80050c4:	42a6      	cmp	r6, r4
 80050c6:	d109      	bne.n	80050dc <__libc_init_array+0x24>
 80050c8:	f003 fb4e 	bl	8008768 <_init>
 80050cc:	2600      	movs	r6, #0
 80050ce:	4d0a      	ldr	r5, [pc, #40]	@ (80050f8 <__libc_init_array+0x40>)
 80050d0:	4c0a      	ldr	r4, [pc, #40]	@ (80050fc <__libc_init_array+0x44>)
 80050d2:	1b64      	subs	r4, r4, r5
 80050d4:	10a4      	asrs	r4, r4, #2
 80050d6:	42a6      	cmp	r6, r4
 80050d8:	d105      	bne.n	80050e6 <__libc_init_array+0x2e>
 80050da:	bd70      	pop	{r4, r5, r6, pc}
 80050dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e0:	4798      	blx	r3
 80050e2:	3601      	adds	r6, #1
 80050e4:	e7ee      	b.n	80050c4 <__libc_init_array+0xc>
 80050e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ea:	4798      	blx	r3
 80050ec:	3601      	adds	r6, #1
 80050ee:	e7f2      	b.n	80050d6 <__libc_init_array+0x1e>
 80050f0:	08008c50 	.word	0x08008c50
 80050f4:	08008c50 	.word	0x08008c50
 80050f8:	08008c50 	.word	0x08008c50
 80050fc:	08008c54 	.word	0x08008c54

08005100 <__retarget_lock_init_recursive>:
 8005100:	4770      	bx	lr

08005102 <__retarget_lock_acquire_recursive>:
 8005102:	4770      	bx	lr

08005104 <__retarget_lock_release_recursive>:
 8005104:	4770      	bx	lr

08005106 <memchr>:
 8005106:	4603      	mov	r3, r0
 8005108:	b510      	push	{r4, lr}
 800510a:	b2c9      	uxtb	r1, r1
 800510c:	4402      	add	r2, r0
 800510e:	4293      	cmp	r3, r2
 8005110:	4618      	mov	r0, r3
 8005112:	d101      	bne.n	8005118 <memchr+0x12>
 8005114:	2000      	movs	r0, #0
 8005116:	e003      	b.n	8005120 <memchr+0x1a>
 8005118:	7804      	ldrb	r4, [r0, #0]
 800511a:	3301      	adds	r3, #1
 800511c:	428c      	cmp	r4, r1
 800511e:	d1f6      	bne.n	800510e <memchr+0x8>
 8005120:	bd10      	pop	{r4, pc}

08005122 <memcpy>:
 8005122:	440a      	add	r2, r1
 8005124:	4291      	cmp	r1, r2
 8005126:	f100 33ff 	add.w	r3, r0, #4294967295
 800512a:	d100      	bne.n	800512e <memcpy+0xc>
 800512c:	4770      	bx	lr
 800512e:	b510      	push	{r4, lr}
 8005130:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005134:	4291      	cmp	r1, r2
 8005136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800513a:	d1f9      	bne.n	8005130 <memcpy+0xe>
 800513c:	bd10      	pop	{r4, pc}
	...

08005140 <nanf>:
 8005140:	4800      	ldr	r0, [pc, #0]	@ (8005144 <nanf+0x4>)
 8005142:	4770      	bx	lr
 8005144:	7fc00000 	.word	0x7fc00000

08005148 <quorem>:
 8005148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514c:	6903      	ldr	r3, [r0, #16]
 800514e:	690c      	ldr	r4, [r1, #16]
 8005150:	4607      	mov	r7, r0
 8005152:	42a3      	cmp	r3, r4
 8005154:	db7e      	blt.n	8005254 <quorem+0x10c>
 8005156:	3c01      	subs	r4, #1
 8005158:	00a3      	lsls	r3, r4, #2
 800515a:	f100 0514 	add.w	r5, r0, #20
 800515e:	f101 0814 	add.w	r8, r1, #20
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005168:	9301      	str	r3, [sp, #4]
 800516a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800516e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005172:	3301      	adds	r3, #1
 8005174:	429a      	cmp	r2, r3
 8005176:	fbb2 f6f3 	udiv	r6, r2, r3
 800517a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800517e:	d32e      	bcc.n	80051de <quorem+0x96>
 8005180:	f04f 0a00 	mov.w	sl, #0
 8005184:	46c4      	mov	ip, r8
 8005186:	46ae      	mov	lr, r5
 8005188:	46d3      	mov	fp, sl
 800518a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800518e:	b298      	uxth	r0, r3
 8005190:	fb06 a000 	mla	r0, r6, r0, sl
 8005194:	0c1b      	lsrs	r3, r3, #16
 8005196:	0c02      	lsrs	r2, r0, #16
 8005198:	fb06 2303 	mla	r3, r6, r3, r2
 800519c:	f8de 2000 	ldr.w	r2, [lr]
 80051a0:	b280      	uxth	r0, r0
 80051a2:	b292      	uxth	r2, r2
 80051a4:	1a12      	subs	r2, r2, r0
 80051a6:	445a      	add	r2, fp
 80051a8:	f8de 0000 	ldr.w	r0, [lr]
 80051ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80051b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80051ba:	b292      	uxth	r2, r2
 80051bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80051c0:	45e1      	cmp	r9, ip
 80051c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80051c6:	f84e 2b04 	str.w	r2, [lr], #4
 80051ca:	d2de      	bcs.n	800518a <quorem+0x42>
 80051cc:	9b00      	ldr	r3, [sp, #0]
 80051ce:	58eb      	ldr	r3, [r5, r3]
 80051d0:	b92b      	cbnz	r3, 80051de <quorem+0x96>
 80051d2:	9b01      	ldr	r3, [sp, #4]
 80051d4:	3b04      	subs	r3, #4
 80051d6:	429d      	cmp	r5, r3
 80051d8:	461a      	mov	r2, r3
 80051da:	d32f      	bcc.n	800523c <quorem+0xf4>
 80051dc:	613c      	str	r4, [r7, #16]
 80051de:	4638      	mov	r0, r7
 80051e0:	f001 f9c2 	bl	8006568 <__mcmp>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	db25      	blt.n	8005234 <quorem+0xec>
 80051e8:	4629      	mov	r1, r5
 80051ea:	2000      	movs	r0, #0
 80051ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80051f0:	f8d1 c000 	ldr.w	ip, [r1]
 80051f4:	fa1f fe82 	uxth.w	lr, r2
 80051f8:	fa1f f38c 	uxth.w	r3, ip
 80051fc:	eba3 030e 	sub.w	r3, r3, lr
 8005200:	4403      	add	r3, r0
 8005202:	0c12      	lsrs	r2, r2, #16
 8005204:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005208:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800520c:	b29b      	uxth	r3, r3
 800520e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005212:	45c1      	cmp	r9, r8
 8005214:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005218:	f841 3b04 	str.w	r3, [r1], #4
 800521c:	d2e6      	bcs.n	80051ec <quorem+0xa4>
 800521e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005222:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005226:	b922      	cbnz	r2, 8005232 <quorem+0xea>
 8005228:	3b04      	subs	r3, #4
 800522a:	429d      	cmp	r5, r3
 800522c:	461a      	mov	r2, r3
 800522e:	d30b      	bcc.n	8005248 <quorem+0x100>
 8005230:	613c      	str	r4, [r7, #16]
 8005232:	3601      	adds	r6, #1
 8005234:	4630      	mov	r0, r6
 8005236:	b003      	add	sp, #12
 8005238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800523c:	6812      	ldr	r2, [r2, #0]
 800523e:	3b04      	subs	r3, #4
 8005240:	2a00      	cmp	r2, #0
 8005242:	d1cb      	bne.n	80051dc <quorem+0x94>
 8005244:	3c01      	subs	r4, #1
 8005246:	e7c6      	b.n	80051d6 <quorem+0x8e>
 8005248:	6812      	ldr	r2, [r2, #0]
 800524a:	3b04      	subs	r3, #4
 800524c:	2a00      	cmp	r2, #0
 800524e:	d1ef      	bne.n	8005230 <quorem+0xe8>
 8005250:	3c01      	subs	r4, #1
 8005252:	e7ea      	b.n	800522a <quorem+0xe2>
 8005254:	2000      	movs	r0, #0
 8005256:	e7ee      	b.n	8005236 <quorem+0xee>

08005258 <_dtoa_r>:
 8005258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525c:	4614      	mov	r4, r2
 800525e:	461d      	mov	r5, r3
 8005260:	69c7      	ldr	r7, [r0, #28]
 8005262:	b097      	sub	sp, #92	@ 0x5c
 8005264:	4683      	mov	fp, r0
 8005266:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800526a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800526c:	b97f      	cbnz	r7, 800528e <_dtoa_r+0x36>
 800526e:	2010      	movs	r0, #16
 8005270:	f000 fe02 	bl	8005e78 <malloc>
 8005274:	4602      	mov	r2, r0
 8005276:	f8cb 001c 	str.w	r0, [fp, #28]
 800527a:	b920      	cbnz	r0, 8005286 <_dtoa_r+0x2e>
 800527c:	21ef      	movs	r1, #239	@ 0xef
 800527e:	4ba8      	ldr	r3, [pc, #672]	@ (8005520 <_dtoa_r+0x2c8>)
 8005280:	48a8      	ldr	r0, [pc, #672]	@ (8005524 <_dtoa_r+0x2cc>)
 8005282:	f002 fdcf 	bl	8007e24 <__assert_func>
 8005286:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800528a:	6007      	str	r7, [r0, #0]
 800528c:	60c7      	str	r7, [r0, #12]
 800528e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005292:	6819      	ldr	r1, [r3, #0]
 8005294:	b159      	cbz	r1, 80052ae <_dtoa_r+0x56>
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	2301      	movs	r3, #1
 800529a:	4093      	lsls	r3, r2
 800529c:	604a      	str	r2, [r1, #4]
 800529e:	608b      	str	r3, [r1, #8]
 80052a0:	4658      	mov	r0, fp
 80052a2:	f000 fedf 	bl	8006064 <_Bfree>
 80052a6:	2200      	movs	r2, #0
 80052a8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	1e2b      	subs	r3, r5, #0
 80052b0:	bfaf      	iteee	ge
 80052b2:	2300      	movge	r3, #0
 80052b4:	2201      	movlt	r2, #1
 80052b6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80052ba:	9303      	strlt	r3, [sp, #12]
 80052bc:	bfa8      	it	ge
 80052be:	6033      	strge	r3, [r6, #0]
 80052c0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80052c4:	4b98      	ldr	r3, [pc, #608]	@ (8005528 <_dtoa_r+0x2d0>)
 80052c6:	bfb8      	it	lt
 80052c8:	6032      	strlt	r2, [r6, #0]
 80052ca:	ea33 0308 	bics.w	r3, r3, r8
 80052ce:	d112      	bne.n	80052f6 <_dtoa_r+0x9e>
 80052d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80052d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80052dc:	4323      	orrs	r3, r4
 80052de:	f000 8550 	beq.w	8005d82 <_dtoa_r+0xb2a>
 80052e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80052e4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800552c <_dtoa_r+0x2d4>
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 8552 	beq.w	8005d92 <_dtoa_r+0xb3a>
 80052ee:	f10a 0303 	add.w	r3, sl, #3
 80052f2:	f000 bd4c 	b.w	8005d8e <_dtoa_r+0xb36>
 80052f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80052fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005302:	2200      	movs	r2, #0
 8005304:	2300      	movs	r3, #0
 8005306:	f7fb fb4f 	bl	80009a8 <__aeabi_dcmpeq>
 800530a:	4607      	mov	r7, r0
 800530c:	b158      	cbz	r0, 8005326 <_dtoa_r+0xce>
 800530e:	2301      	movs	r3, #1
 8005310:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005316:	b113      	cbz	r3, 800531e <_dtoa_r+0xc6>
 8005318:	4b85      	ldr	r3, [pc, #532]	@ (8005530 <_dtoa_r+0x2d8>)
 800531a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005534 <_dtoa_r+0x2dc>
 8005322:	f000 bd36 	b.w	8005d92 <_dtoa_r+0xb3a>
 8005326:	ab14      	add	r3, sp, #80	@ 0x50
 8005328:	9301      	str	r3, [sp, #4]
 800532a:	ab15      	add	r3, sp, #84	@ 0x54
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	4658      	mov	r0, fp
 8005330:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005334:	f001 fa30 	bl	8006798 <__d2b>
 8005338:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800533c:	4681      	mov	r9, r0
 800533e:	2e00      	cmp	r6, #0
 8005340:	d077      	beq.n	8005432 <_dtoa_r+0x1da>
 8005342:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005346:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005348:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800534c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005350:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005354:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005358:	9712      	str	r7, [sp, #72]	@ 0x48
 800535a:	4619      	mov	r1, r3
 800535c:	2200      	movs	r2, #0
 800535e:	4b76      	ldr	r3, [pc, #472]	@ (8005538 <_dtoa_r+0x2e0>)
 8005360:	f7fa ff02 	bl	8000168 <__aeabi_dsub>
 8005364:	a368      	add	r3, pc, #416	@ (adr r3, 8005508 <_dtoa_r+0x2b0>)
 8005366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536a:	f7fb f8b5 	bl	80004d8 <__aeabi_dmul>
 800536e:	a368      	add	r3, pc, #416	@ (adr r3, 8005510 <_dtoa_r+0x2b8>)
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	f7fa fefa 	bl	800016c <__adddf3>
 8005378:	4604      	mov	r4, r0
 800537a:	4630      	mov	r0, r6
 800537c:	460d      	mov	r5, r1
 800537e:	f7fb f841 	bl	8000404 <__aeabi_i2d>
 8005382:	a365      	add	r3, pc, #404	@ (adr r3, 8005518 <_dtoa_r+0x2c0>)
 8005384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005388:	f7fb f8a6 	bl	80004d8 <__aeabi_dmul>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4620      	mov	r0, r4
 8005392:	4629      	mov	r1, r5
 8005394:	f7fa feea 	bl	800016c <__adddf3>
 8005398:	4604      	mov	r4, r0
 800539a:	460d      	mov	r5, r1
 800539c:	f7fb fb4c 	bl	8000a38 <__aeabi_d2iz>
 80053a0:	2200      	movs	r2, #0
 80053a2:	4607      	mov	r7, r0
 80053a4:	2300      	movs	r3, #0
 80053a6:	4620      	mov	r0, r4
 80053a8:	4629      	mov	r1, r5
 80053aa:	f7fb fb07 	bl	80009bc <__aeabi_dcmplt>
 80053ae:	b140      	cbz	r0, 80053c2 <_dtoa_r+0x16a>
 80053b0:	4638      	mov	r0, r7
 80053b2:	f7fb f827 	bl	8000404 <__aeabi_i2d>
 80053b6:	4622      	mov	r2, r4
 80053b8:	462b      	mov	r3, r5
 80053ba:	f7fb faf5 	bl	80009a8 <__aeabi_dcmpeq>
 80053be:	b900      	cbnz	r0, 80053c2 <_dtoa_r+0x16a>
 80053c0:	3f01      	subs	r7, #1
 80053c2:	2f16      	cmp	r7, #22
 80053c4:	d853      	bhi.n	800546e <_dtoa_r+0x216>
 80053c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80053ca:	4b5c      	ldr	r3, [pc, #368]	@ (800553c <_dtoa_r+0x2e4>)
 80053cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80053d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d4:	f7fb faf2 	bl	80009bc <__aeabi_dcmplt>
 80053d8:	2800      	cmp	r0, #0
 80053da:	d04a      	beq.n	8005472 <_dtoa_r+0x21a>
 80053dc:	2300      	movs	r3, #0
 80053de:	3f01      	subs	r7, #1
 80053e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80053e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80053e4:	1b9b      	subs	r3, r3, r6
 80053e6:	1e5a      	subs	r2, r3, #1
 80053e8:	bf46      	itte	mi
 80053ea:	f1c3 0801 	rsbmi	r8, r3, #1
 80053ee:	2300      	movmi	r3, #0
 80053f0:	f04f 0800 	movpl.w	r8, #0
 80053f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80053f6:	bf48      	it	mi
 80053f8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80053fa:	2f00      	cmp	r7, #0
 80053fc:	db3b      	blt.n	8005476 <_dtoa_r+0x21e>
 80053fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005400:	970e      	str	r7, [sp, #56]	@ 0x38
 8005402:	443b      	add	r3, r7
 8005404:	9309      	str	r3, [sp, #36]	@ 0x24
 8005406:	2300      	movs	r3, #0
 8005408:	930a      	str	r3, [sp, #40]	@ 0x28
 800540a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800540c:	2b09      	cmp	r3, #9
 800540e:	d866      	bhi.n	80054de <_dtoa_r+0x286>
 8005410:	2b05      	cmp	r3, #5
 8005412:	bfc4      	itt	gt
 8005414:	3b04      	subgt	r3, #4
 8005416:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005418:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800541a:	bfc8      	it	gt
 800541c:	2400      	movgt	r4, #0
 800541e:	f1a3 0302 	sub.w	r3, r3, #2
 8005422:	bfd8      	it	le
 8005424:	2401      	movle	r4, #1
 8005426:	2b03      	cmp	r3, #3
 8005428:	d864      	bhi.n	80054f4 <_dtoa_r+0x29c>
 800542a:	e8df f003 	tbb	[pc, r3]
 800542e:	382b      	.short	0x382b
 8005430:	5636      	.short	0x5636
 8005432:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005436:	441e      	add	r6, r3
 8005438:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800543c:	2b20      	cmp	r3, #32
 800543e:	bfc1      	itttt	gt
 8005440:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005444:	fa08 f803 	lslgt.w	r8, r8, r3
 8005448:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800544c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005450:	bfd6      	itet	le
 8005452:	f1c3 0320 	rsble	r3, r3, #32
 8005456:	ea48 0003 	orrgt.w	r0, r8, r3
 800545a:	fa04 f003 	lslle.w	r0, r4, r3
 800545e:	f7fa ffc1 	bl	80003e4 <__aeabi_ui2d>
 8005462:	2201      	movs	r2, #1
 8005464:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005468:	3e01      	subs	r6, #1
 800546a:	9212      	str	r2, [sp, #72]	@ 0x48
 800546c:	e775      	b.n	800535a <_dtoa_r+0x102>
 800546e:	2301      	movs	r3, #1
 8005470:	e7b6      	b.n	80053e0 <_dtoa_r+0x188>
 8005472:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005474:	e7b5      	b.n	80053e2 <_dtoa_r+0x18a>
 8005476:	427b      	negs	r3, r7
 8005478:	930a      	str	r3, [sp, #40]	@ 0x28
 800547a:	2300      	movs	r3, #0
 800547c:	eba8 0807 	sub.w	r8, r8, r7
 8005480:	930e      	str	r3, [sp, #56]	@ 0x38
 8005482:	e7c2      	b.n	800540a <_dtoa_r+0x1b2>
 8005484:	2300      	movs	r3, #0
 8005486:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005488:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800548a:	2b00      	cmp	r3, #0
 800548c:	dc35      	bgt.n	80054fa <_dtoa_r+0x2a2>
 800548e:	2301      	movs	r3, #1
 8005490:	461a      	mov	r2, r3
 8005492:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005496:	9221      	str	r2, [sp, #132]	@ 0x84
 8005498:	e00b      	b.n	80054b2 <_dtoa_r+0x25a>
 800549a:	2301      	movs	r3, #1
 800549c:	e7f3      	b.n	8005486 <_dtoa_r+0x22e>
 800549e:	2300      	movs	r3, #0
 80054a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054a4:	18fb      	adds	r3, r7, r3
 80054a6:	9308      	str	r3, [sp, #32]
 80054a8:	3301      	adds	r3, #1
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	9307      	str	r3, [sp, #28]
 80054ae:	bfb8      	it	lt
 80054b0:	2301      	movlt	r3, #1
 80054b2:	2100      	movs	r1, #0
 80054b4:	2204      	movs	r2, #4
 80054b6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80054ba:	f102 0514 	add.w	r5, r2, #20
 80054be:	429d      	cmp	r5, r3
 80054c0:	d91f      	bls.n	8005502 <_dtoa_r+0x2aa>
 80054c2:	6041      	str	r1, [r0, #4]
 80054c4:	4658      	mov	r0, fp
 80054c6:	f000 fd8d 	bl	8005fe4 <_Balloc>
 80054ca:	4682      	mov	sl, r0
 80054cc:	2800      	cmp	r0, #0
 80054ce:	d139      	bne.n	8005544 <_dtoa_r+0x2ec>
 80054d0:	4602      	mov	r2, r0
 80054d2:	f240 11af 	movw	r1, #431	@ 0x1af
 80054d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005540 <_dtoa_r+0x2e8>)
 80054d8:	e6d2      	b.n	8005280 <_dtoa_r+0x28>
 80054da:	2301      	movs	r3, #1
 80054dc:	e7e0      	b.n	80054a0 <_dtoa_r+0x248>
 80054de:	2401      	movs	r4, #1
 80054e0:	2300      	movs	r3, #0
 80054e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80054e4:	9320      	str	r3, [sp, #128]	@ 0x80
 80054e6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ea:	2200      	movs	r2, #0
 80054ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80054f0:	2312      	movs	r3, #18
 80054f2:	e7d0      	b.n	8005496 <_dtoa_r+0x23e>
 80054f4:	2301      	movs	r3, #1
 80054f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054f8:	e7f5      	b.n	80054e6 <_dtoa_r+0x28e>
 80054fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054fc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005500:	e7d7      	b.n	80054b2 <_dtoa_r+0x25a>
 8005502:	3101      	adds	r1, #1
 8005504:	0052      	lsls	r2, r2, #1
 8005506:	e7d8      	b.n	80054ba <_dtoa_r+0x262>
 8005508:	636f4361 	.word	0x636f4361
 800550c:	3fd287a7 	.word	0x3fd287a7
 8005510:	8b60c8b3 	.word	0x8b60c8b3
 8005514:	3fc68a28 	.word	0x3fc68a28
 8005518:	509f79fb 	.word	0x509f79fb
 800551c:	3fd34413 	.word	0x3fd34413
 8005520:	0800885c 	.word	0x0800885c
 8005524:	08008873 	.word	0x08008873
 8005528:	7ff00000 	.word	0x7ff00000
 800552c:	08008858 	.word	0x08008858
 8005530:	08008827 	.word	0x08008827
 8005534:	08008826 	.word	0x08008826
 8005538:	3ff80000 	.word	0x3ff80000
 800553c:	08008970 	.word	0x08008970
 8005540:	080088cb 	.word	0x080088cb
 8005544:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005548:	6018      	str	r0, [r3, #0]
 800554a:	9b07      	ldr	r3, [sp, #28]
 800554c:	2b0e      	cmp	r3, #14
 800554e:	f200 80a4 	bhi.w	800569a <_dtoa_r+0x442>
 8005552:	2c00      	cmp	r4, #0
 8005554:	f000 80a1 	beq.w	800569a <_dtoa_r+0x442>
 8005558:	2f00      	cmp	r7, #0
 800555a:	dd33      	ble.n	80055c4 <_dtoa_r+0x36c>
 800555c:	4b86      	ldr	r3, [pc, #536]	@ (8005778 <_dtoa_r+0x520>)
 800555e:	f007 020f 	and.w	r2, r7, #15
 8005562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005566:	05f8      	lsls	r0, r7, #23
 8005568:	e9d3 3400 	ldrd	r3, r4, [r3]
 800556c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005570:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005574:	d516      	bpl.n	80055a4 <_dtoa_r+0x34c>
 8005576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800557a:	4b80      	ldr	r3, [pc, #512]	@ (800577c <_dtoa_r+0x524>)
 800557c:	2603      	movs	r6, #3
 800557e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005582:	f7fb f8d3 	bl	800072c <__aeabi_ddiv>
 8005586:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800558a:	f004 040f 	and.w	r4, r4, #15
 800558e:	4d7b      	ldr	r5, [pc, #492]	@ (800577c <_dtoa_r+0x524>)
 8005590:	b954      	cbnz	r4, 80055a8 <_dtoa_r+0x350>
 8005592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800559a:	f7fb f8c7 	bl	800072c <__aeabi_ddiv>
 800559e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055a2:	e028      	b.n	80055f6 <_dtoa_r+0x39e>
 80055a4:	2602      	movs	r6, #2
 80055a6:	e7f2      	b.n	800558e <_dtoa_r+0x336>
 80055a8:	07e1      	lsls	r1, r4, #31
 80055aa:	d508      	bpl.n	80055be <_dtoa_r+0x366>
 80055ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80055b4:	f7fa ff90 	bl	80004d8 <__aeabi_dmul>
 80055b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055bc:	3601      	adds	r6, #1
 80055be:	1064      	asrs	r4, r4, #1
 80055c0:	3508      	adds	r5, #8
 80055c2:	e7e5      	b.n	8005590 <_dtoa_r+0x338>
 80055c4:	f000 80d2 	beq.w	800576c <_dtoa_r+0x514>
 80055c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80055cc:	427c      	negs	r4, r7
 80055ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005778 <_dtoa_r+0x520>)
 80055d0:	f004 020f 	and.w	r2, r4, #15
 80055d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055dc:	f7fa ff7c 	bl	80004d8 <__aeabi_dmul>
 80055e0:	2602      	movs	r6, #2
 80055e2:	2300      	movs	r3, #0
 80055e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055e8:	4d64      	ldr	r5, [pc, #400]	@ (800577c <_dtoa_r+0x524>)
 80055ea:	1124      	asrs	r4, r4, #4
 80055ec:	2c00      	cmp	r4, #0
 80055ee:	f040 80b2 	bne.w	8005756 <_dtoa_r+0x4fe>
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1d3      	bne.n	800559e <_dtoa_r+0x346>
 80055f6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80055fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80b7 	beq.w	8005770 <_dtoa_r+0x518>
 8005602:	2200      	movs	r2, #0
 8005604:	4620      	mov	r0, r4
 8005606:	4629      	mov	r1, r5
 8005608:	4b5d      	ldr	r3, [pc, #372]	@ (8005780 <_dtoa_r+0x528>)
 800560a:	f7fb f9d7 	bl	80009bc <__aeabi_dcmplt>
 800560e:	2800      	cmp	r0, #0
 8005610:	f000 80ae 	beq.w	8005770 <_dtoa_r+0x518>
 8005614:	9b07      	ldr	r3, [sp, #28]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 80aa 	beq.w	8005770 <_dtoa_r+0x518>
 800561c:	9b08      	ldr	r3, [sp, #32]
 800561e:	2b00      	cmp	r3, #0
 8005620:	dd37      	ble.n	8005692 <_dtoa_r+0x43a>
 8005622:	1e7b      	subs	r3, r7, #1
 8005624:	4620      	mov	r0, r4
 8005626:	9304      	str	r3, [sp, #16]
 8005628:	2200      	movs	r2, #0
 800562a:	4629      	mov	r1, r5
 800562c:	4b55      	ldr	r3, [pc, #340]	@ (8005784 <_dtoa_r+0x52c>)
 800562e:	f7fa ff53 	bl	80004d8 <__aeabi_dmul>
 8005632:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005636:	9c08      	ldr	r4, [sp, #32]
 8005638:	3601      	adds	r6, #1
 800563a:	4630      	mov	r0, r6
 800563c:	f7fa fee2 	bl	8000404 <__aeabi_i2d>
 8005640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005644:	f7fa ff48 	bl	80004d8 <__aeabi_dmul>
 8005648:	2200      	movs	r2, #0
 800564a:	4b4f      	ldr	r3, [pc, #316]	@ (8005788 <_dtoa_r+0x530>)
 800564c:	f7fa fd8e 	bl	800016c <__adddf3>
 8005650:	4605      	mov	r5, r0
 8005652:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005656:	2c00      	cmp	r4, #0
 8005658:	f040 809a 	bne.w	8005790 <_dtoa_r+0x538>
 800565c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005660:	2200      	movs	r2, #0
 8005662:	4b4a      	ldr	r3, [pc, #296]	@ (800578c <_dtoa_r+0x534>)
 8005664:	f7fa fd80 	bl	8000168 <__aeabi_dsub>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005670:	462a      	mov	r2, r5
 8005672:	4633      	mov	r3, r6
 8005674:	f7fb f9c0 	bl	80009f8 <__aeabi_dcmpgt>
 8005678:	2800      	cmp	r0, #0
 800567a:	f040 828e 	bne.w	8005b9a <_dtoa_r+0x942>
 800567e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005682:	462a      	mov	r2, r5
 8005684:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005688:	f7fb f998 	bl	80009bc <__aeabi_dcmplt>
 800568c:	2800      	cmp	r0, #0
 800568e:	f040 8127 	bne.w	80058e0 <_dtoa_r+0x688>
 8005692:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005696:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800569a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800569c:	2b00      	cmp	r3, #0
 800569e:	f2c0 8163 	blt.w	8005968 <_dtoa_r+0x710>
 80056a2:	2f0e      	cmp	r7, #14
 80056a4:	f300 8160 	bgt.w	8005968 <_dtoa_r+0x710>
 80056a8:	4b33      	ldr	r3, [pc, #204]	@ (8005778 <_dtoa_r+0x520>)
 80056aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80056ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80056b2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80056b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	da03      	bge.n	80056c4 <_dtoa_r+0x46c>
 80056bc:	9b07      	ldr	r3, [sp, #28]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f340 8100 	ble.w	80058c4 <_dtoa_r+0x66c>
 80056c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80056c8:	4656      	mov	r6, sl
 80056ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056ce:	4620      	mov	r0, r4
 80056d0:	4629      	mov	r1, r5
 80056d2:	f7fb f82b 	bl	800072c <__aeabi_ddiv>
 80056d6:	f7fb f9af 	bl	8000a38 <__aeabi_d2iz>
 80056da:	4680      	mov	r8, r0
 80056dc:	f7fa fe92 	bl	8000404 <__aeabi_i2d>
 80056e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056e4:	f7fa fef8 	bl	80004d8 <__aeabi_dmul>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4620      	mov	r0, r4
 80056ee:	4629      	mov	r1, r5
 80056f0:	f7fa fd3a 	bl	8000168 <__aeabi_dsub>
 80056f4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80056f8:	9d07      	ldr	r5, [sp, #28]
 80056fa:	f806 4b01 	strb.w	r4, [r6], #1
 80056fe:	eba6 040a 	sub.w	r4, r6, sl
 8005702:	42a5      	cmp	r5, r4
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	f040 8116 	bne.w	8005938 <_dtoa_r+0x6e0>
 800570c:	f7fa fd2e 	bl	800016c <__adddf3>
 8005710:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005714:	4604      	mov	r4, r0
 8005716:	460d      	mov	r5, r1
 8005718:	f7fb f96e 	bl	80009f8 <__aeabi_dcmpgt>
 800571c:	2800      	cmp	r0, #0
 800571e:	f040 80f8 	bne.w	8005912 <_dtoa_r+0x6ba>
 8005722:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005726:	4620      	mov	r0, r4
 8005728:	4629      	mov	r1, r5
 800572a:	f7fb f93d 	bl	80009a8 <__aeabi_dcmpeq>
 800572e:	b118      	cbz	r0, 8005738 <_dtoa_r+0x4e0>
 8005730:	f018 0f01 	tst.w	r8, #1
 8005734:	f040 80ed 	bne.w	8005912 <_dtoa_r+0x6ba>
 8005738:	4649      	mov	r1, r9
 800573a:	4658      	mov	r0, fp
 800573c:	f000 fc92 	bl	8006064 <_Bfree>
 8005740:	2300      	movs	r3, #0
 8005742:	7033      	strb	r3, [r6, #0]
 8005744:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005746:	3701      	adds	r7, #1
 8005748:	601f      	str	r7, [r3, #0]
 800574a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 8320 	beq.w	8005d92 <_dtoa_r+0xb3a>
 8005752:	601e      	str	r6, [r3, #0]
 8005754:	e31d      	b.n	8005d92 <_dtoa_r+0xb3a>
 8005756:	07e2      	lsls	r2, r4, #31
 8005758:	d505      	bpl.n	8005766 <_dtoa_r+0x50e>
 800575a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800575e:	f7fa febb 	bl	80004d8 <__aeabi_dmul>
 8005762:	2301      	movs	r3, #1
 8005764:	3601      	adds	r6, #1
 8005766:	1064      	asrs	r4, r4, #1
 8005768:	3508      	adds	r5, #8
 800576a:	e73f      	b.n	80055ec <_dtoa_r+0x394>
 800576c:	2602      	movs	r6, #2
 800576e:	e742      	b.n	80055f6 <_dtoa_r+0x39e>
 8005770:	9c07      	ldr	r4, [sp, #28]
 8005772:	9704      	str	r7, [sp, #16]
 8005774:	e761      	b.n	800563a <_dtoa_r+0x3e2>
 8005776:	bf00      	nop
 8005778:	08008970 	.word	0x08008970
 800577c:	08008948 	.word	0x08008948
 8005780:	3ff00000 	.word	0x3ff00000
 8005784:	40240000 	.word	0x40240000
 8005788:	401c0000 	.word	0x401c0000
 800578c:	40140000 	.word	0x40140000
 8005790:	4b70      	ldr	r3, [pc, #448]	@ (8005954 <_dtoa_r+0x6fc>)
 8005792:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005794:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005798:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800579c:	4454      	add	r4, sl
 800579e:	2900      	cmp	r1, #0
 80057a0:	d045      	beq.n	800582e <_dtoa_r+0x5d6>
 80057a2:	2000      	movs	r0, #0
 80057a4:	496c      	ldr	r1, [pc, #432]	@ (8005958 <_dtoa_r+0x700>)
 80057a6:	f7fa ffc1 	bl	800072c <__aeabi_ddiv>
 80057aa:	4633      	mov	r3, r6
 80057ac:	462a      	mov	r2, r5
 80057ae:	f7fa fcdb 	bl	8000168 <__aeabi_dsub>
 80057b2:	4656      	mov	r6, sl
 80057b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80057b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057bc:	f7fb f93c 	bl	8000a38 <__aeabi_d2iz>
 80057c0:	4605      	mov	r5, r0
 80057c2:	f7fa fe1f 	bl	8000404 <__aeabi_i2d>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057ce:	f7fa fccb 	bl	8000168 <__aeabi_dsub>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	3530      	adds	r5, #48	@ 0x30
 80057d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80057e0:	f806 5b01 	strb.w	r5, [r6], #1
 80057e4:	f7fb f8ea 	bl	80009bc <__aeabi_dcmplt>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	d163      	bne.n	80058b4 <_dtoa_r+0x65c>
 80057ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057f0:	2000      	movs	r0, #0
 80057f2:	495a      	ldr	r1, [pc, #360]	@ (800595c <_dtoa_r+0x704>)
 80057f4:	f7fa fcb8 	bl	8000168 <__aeabi_dsub>
 80057f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80057fc:	f7fb f8de 	bl	80009bc <__aeabi_dcmplt>
 8005800:	2800      	cmp	r0, #0
 8005802:	f040 8087 	bne.w	8005914 <_dtoa_r+0x6bc>
 8005806:	42a6      	cmp	r6, r4
 8005808:	f43f af43 	beq.w	8005692 <_dtoa_r+0x43a>
 800580c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005810:	2200      	movs	r2, #0
 8005812:	4b53      	ldr	r3, [pc, #332]	@ (8005960 <_dtoa_r+0x708>)
 8005814:	f7fa fe60 	bl	80004d8 <__aeabi_dmul>
 8005818:	2200      	movs	r2, #0
 800581a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800581e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005822:	4b4f      	ldr	r3, [pc, #316]	@ (8005960 <_dtoa_r+0x708>)
 8005824:	f7fa fe58 	bl	80004d8 <__aeabi_dmul>
 8005828:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800582c:	e7c4      	b.n	80057b8 <_dtoa_r+0x560>
 800582e:	4631      	mov	r1, r6
 8005830:	4628      	mov	r0, r5
 8005832:	f7fa fe51 	bl	80004d8 <__aeabi_dmul>
 8005836:	4656      	mov	r6, sl
 8005838:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800583c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800583e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005842:	f7fb f8f9 	bl	8000a38 <__aeabi_d2iz>
 8005846:	4605      	mov	r5, r0
 8005848:	f7fa fddc 	bl	8000404 <__aeabi_i2d>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005854:	f7fa fc88 	bl	8000168 <__aeabi_dsub>
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	3530      	adds	r5, #48	@ 0x30
 800585e:	f806 5b01 	strb.w	r5, [r6], #1
 8005862:	42a6      	cmp	r6, r4
 8005864:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	d124      	bne.n	80058b8 <_dtoa_r+0x660>
 800586e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005872:	4b39      	ldr	r3, [pc, #228]	@ (8005958 <_dtoa_r+0x700>)
 8005874:	f7fa fc7a 	bl	800016c <__adddf3>
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005880:	f7fb f8ba 	bl	80009f8 <__aeabi_dcmpgt>
 8005884:	2800      	cmp	r0, #0
 8005886:	d145      	bne.n	8005914 <_dtoa_r+0x6bc>
 8005888:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800588c:	2000      	movs	r0, #0
 800588e:	4932      	ldr	r1, [pc, #200]	@ (8005958 <_dtoa_r+0x700>)
 8005890:	f7fa fc6a 	bl	8000168 <__aeabi_dsub>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800589c:	f7fb f88e 	bl	80009bc <__aeabi_dcmplt>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	f43f aef6 	beq.w	8005692 <_dtoa_r+0x43a>
 80058a6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80058a8:	1e73      	subs	r3, r6, #1
 80058aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80058ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80058b0:	2b30      	cmp	r3, #48	@ 0x30
 80058b2:	d0f8      	beq.n	80058a6 <_dtoa_r+0x64e>
 80058b4:	9f04      	ldr	r7, [sp, #16]
 80058b6:	e73f      	b.n	8005738 <_dtoa_r+0x4e0>
 80058b8:	4b29      	ldr	r3, [pc, #164]	@ (8005960 <_dtoa_r+0x708>)
 80058ba:	f7fa fe0d 	bl	80004d8 <__aeabi_dmul>
 80058be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058c2:	e7bc      	b.n	800583e <_dtoa_r+0x5e6>
 80058c4:	d10c      	bne.n	80058e0 <_dtoa_r+0x688>
 80058c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058ca:	2200      	movs	r2, #0
 80058cc:	4b25      	ldr	r3, [pc, #148]	@ (8005964 <_dtoa_r+0x70c>)
 80058ce:	f7fa fe03 	bl	80004d8 <__aeabi_dmul>
 80058d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058d6:	f7fb f885 	bl	80009e4 <__aeabi_dcmpge>
 80058da:	2800      	cmp	r0, #0
 80058dc:	f000 815b 	beq.w	8005b96 <_dtoa_r+0x93e>
 80058e0:	2400      	movs	r4, #0
 80058e2:	4625      	mov	r5, r4
 80058e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80058e6:	4656      	mov	r6, sl
 80058e8:	43db      	mvns	r3, r3
 80058ea:	9304      	str	r3, [sp, #16]
 80058ec:	2700      	movs	r7, #0
 80058ee:	4621      	mov	r1, r4
 80058f0:	4658      	mov	r0, fp
 80058f2:	f000 fbb7 	bl	8006064 <_Bfree>
 80058f6:	2d00      	cmp	r5, #0
 80058f8:	d0dc      	beq.n	80058b4 <_dtoa_r+0x65c>
 80058fa:	b12f      	cbz	r7, 8005908 <_dtoa_r+0x6b0>
 80058fc:	42af      	cmp	r7, r5
 80058fe:	d003      	beq.n	8005908 <_dtoa_r+0x6b0>
 8005900:	4639      	mov	r1, r7
 8005902:	4658      	mov	r0, fp
 8005904:	f000 fbae 	bl	8006064 <_Bfree>
 8005908:	4629      	mov	r1, r5
 800590a:	4658      	mov	r0, fp
 800590c:	f000 fbaa 	bl	8006064 <_Bfree>
 8005910:	e7d0      	b.n	80058b4 <_dtoa_r+0x65c>
 8005912:	9704      	str	r7, [sp, #16]
 8005914:	4633      	mov	r3, r6
 8005916:	461e      	mov	r6, r3
 8005918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800591c:	2a39      	cmp	r2, #57	@ 0x39
 800591e:	d107      	bne.n	8005930 <_dtoa_r+0x6d8>
 8005920:	459a      	cmp	sl, r3
 8005922:	d1f8      	bne.n	8005916 <_dtoa_r+0x6be>
 8005924:	9a04      	ldr	r2, [sp, #16]
 8005926:	3201      	adds	r2, #1
 8005928:	9204      	str	r2, [sp, #16]
 800592a:	2230      	movs	r2, #48	@ 0x30
 800592c:	f88a 2000 	strb.w	r2, [sl]
 8005930:	781a      	ldrb	r2, [r3, #0]
 8005932:	3201      	adds	r2, #1
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	e7bd      	b.n	80058b4 <_dtoa_r+0x65c>
 8005938:	2200      	movs	r2, #0
 800593a:	4b09      	ldr	r3, [pc, #36]	@ (8005960 <_dtoa_r+0x708>)
 800593c:	f7fa fdcc 	bl	80004d8 <__aeabi_dmul>
 8005940:	2200      	movs	r2, #0
 8005942:	2300      	movs	r3, #0
 8005944:	4604      	mov	r4, r0
 8005946:	460d      	mov	r5, r1
 8005948:	f7fb f82e 	bl	80009a8 <__aeabi_dcmpeq>
 800594c:	2800      	cmp	r0, #0
 800594e:	f43f aebc 	beq.w	80056ca <_dtoa_r+0x472>
 8005952:	e6f1      	b.n	8005738 <_dtoa_r+0x4e0>
 8005954:	08008970 	.word	0x08008970
 8005958:	3fe00000 	.word	0x3fe00000
 800595c:	3ff00000 	.word	0x3ff00000
 8005960:	40240000 	.word	0x40240000
 8005964:	40140000 	.word	0x40140000
 8005968:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800596a:	2a00      	cmp	r2, #0
 800596c:	f000 80db 	beq.w	8005b26 <_dtoa_r+0x8ce>
 8005970:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005972:	2a01      	cmp	r2, #1
 8005974:	f300 80bf 	bgt.w	8005af6 <_dtoa_r+0x89e>
 8005978:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800597a:	2a00      	cmp	r2, #0
 800597c:	f000 80b7 	beq.w	8005aee <_dtoa_r+0x896>
 8005980:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005984:	4646      	mov	r6, r8
 8005986:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005988:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800598a:	2101      	movs	r1, #1
 800598c:	441a      	add	r2, r3
 800598e:	4658      	mov	r0, fp
 8005990:	4498      	add	r8, r3
 8005992:	9209      	str	r2, [sp, #36]	@ 0x24
 8005994:	f000 fc64 	bl	8006260 <__i2b>
 8005998:	4605      	mov	r5, r0
 800599a:	b15e      	cbz	r6, 80059b4 <_dtoa_r+0x75c>
 800599c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800599e:	2b00      	cmp	r3, #0
 80059a0:	dd08      	ble.n	80059b4 <_dtoa_r+0x75c>
 80059a2:	42b3      	cmp	r3, r6
 80059a4:	bfa8      	it	ge
 80059a6:	4633      	movge	r3, r6
 80059a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059aa:	eba8 0803 	sub.w	r8, r8, r3
 80059ae:	1af6      	subs	r6, r6, r3
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80059b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059b6:	b1f3      	cbz	r3, 80059f6 <_dtoa_r+0x79e>
 80059b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 80b7 	beq.w	8005b2e <_dtoa_r+0x8d6>
 80059c0:	b18c      	cbz	r4, 80059e6 <_dtoa_r+0x78e>
 80059c2:	4629      	mov	r1, r5
 80059c4:	4622      	mov	r2, r4
 80059c6:	4658      	mov	r0, fp
 80059c8:	f000 fd08 	bl	80063dc <__pow5mult>
 80059cc:	464a      	mov	r2, r9
 80059ce:	4601      	mov	r1, r0
 80059d0:	4605      	mov	r5, r0
 80059d2:	4658      	mov	r0, fp
 80059d4:	f000 fc5a 	bl	800628c <__multiply>
 80059d8:	4649      	mov	r1, r9
 80059da:	9004      	str	r0, [sp, #16]
 80059dc:	4658      	mov	r0, fp
 80059de:	f000 fb41 	bl	8006064 <_Bfree>
 80059e2:	9b04      	ldr	r3, [sp, #16]
 80059e4:	4699      	mov	r9, r3
 80059e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059e8:	1b1a      	subs	r2, r3, r4
 80059ea:	d004      	beq.n	80059f6 <_dtoa_r+0x79e>
 80059ec:	4649      	mov	r1, r9
 80059ee:	4658      	mov	r0, fp
 80059f0:	f000 fcf4 	bl	80063dc <__pow5mult>
 80059f4:	4681      	mov	r9, r0
 80059f6:	2101      	movs	r1, #1
 80059f8:	4658      	mov	r0, fp
 80059fa:	f000 fc31 	bl	8006260 <__i2b>
 80059fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a00:	4604      	mov	r4, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 81c9 	beq.w	8005d9a <_dtoa_r+0xb42>
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4601      	mov	r1, r0
 8005a0c:	4658      	mov	r0, fp
 8005a0e:	f000 fce5 	bl	80063dc <__pow5mult>
 8005a12:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a14:	4604      	mov	r4, r0
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	f300 808f 	bgt.w	8005b3a <_dtoa_r+0x8e2>
 8005a1c:	9b02      	ldr	r3, [sp, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f040 8087 	bne.w	8005b32 <_dtoa_r+0x8da>
 8005a24:	9b03      	ldr	r3, [sp, #12]
 8005a26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f040 8083 	bne.w	8005b36 <_dtoa_r+0x8de>
 8005a30:	9b03      	ldr	r3, [sp, #12]
 8005a32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a36:	0d1b      	lsrs	r3, r3, #20
 8005a38:	051b      	lsls	r3, r3, #20
 8005a3a:	b12b      	cbz	r3, 8005a48 <_dtoa_r+0x7f0>
 8005a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a3e:	f108 0801 	add.w	r8, r8, #1
 8005a42:	3301      	adds	r3, #1
 8005a44:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a46:	2301      	movs	r3, #1
 8005a48:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 81aa 	beq.w	8005da6 <_dtoa_r+0xb4e>
 8005a52:	6923      	ldr	r3, [r4, #16]
 8005a54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a58:	6918      	ldr	r0, [r3, #16]
 8005a5a:	f000 fbb5 	bl	80061c8 <__hi0bits>
 8005a5e:	f1c0 0020 	rsb	r0, r0, #32
 8005a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a64:	4418      	add	r0, r3
 8005a66:	f010 001f 	ands.w	r0, r0, #31
 8005a6a:	d071      	beq.n	8005b50 <_dtoa_r+0x8f8>
 8005a6c:	f1c0 0320 	rsb	r3, r0, #32
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	dd65      	ble.n	8005b40 <_dtoa_r+0x8e8>
 8005a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a76:	f1c0 001c 	rsb	r0, r0, #28
 8005a7a:	4403      	add	r3, r0
 8005a7c:	4480      	add	r8, r0
 8005a7e:	4406      	add	r6, r0
 8005a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a82:	f1b8 0f00 	cmp.w	r8, #0
 8005a86:	dd05      	ble.n	8005a94 <_dtoa_r+0x83c>
 8005a88:	4649      	mov	r1, r9
 8005a8a:	4642      	mov	r2, r8
 8005a8c:	4658      	mov	r0, fp
 8005a8e:	f000 fcff 	bl	8006490 <__lshift>
 8005a92:	4681      	mov	r9, r0
 8005a94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	dd05      	ble.n	8005aa6 <_dtoa_r+0x84e>
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	4658      	mov	r0, fp
 8005aa0:	f000 fcf6 	bl	8006490 <__lshift>
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d053      	beq.n	8005b54 <_dtoa_r+0x8fc>
 8005aac:	4621      	mov	r1, r4
 8005aae:	4648      	mov	r0, r9
 8005ab0:	f000 fd5a 	bl	8006568 <__mcmp>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	da4d      	bge.n	8005b54 <_dtoa_r+0x8fc>
 8005ab8:	1e7b      	subs	r3, r7, #1
 8005aba:	4649      	mov	r1, r9
 8005abc:	9304      	str	r3, [sp, #16]
 8005abe:	220a      	movs	r2, #10
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	4658      	mov	r0, fp
 8005ac4:	f000 faf0 	bl	80060a8 <__multadd>
 8005ac8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005aca:	4681      	mov	r9, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 816c 	beq.w	8005daa <_dtoa_r+0xb52>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	220a      	movs	r2, #10
 8005ad8:	4658      	mov	r0, fp
 8005ada:	f000 fae5 	bl	80060a8 <__multadd>
 8005ade:	9b08      	ldr	r3, [sp, #32]
 8005ae0:	4605      	mov	r5, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	dc61      	bgt.n	8005baa <_dtoa_r+0x952>
 8005ae6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	dc3b      	bgt.n	8005b64 <_dtoa_r+0x90c>
 8005aec:	e05d      	b.n	8005baa <_dtoa_r+0x952>
 8005aee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005af0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005af4:	e746      	b.n	8005984 <_dtoa_r+0x72c>
 8005af6:	9b07      	ldr	r3, [sp, #28]
 8005af8:	1e5c      	subs	r4, r3, #1
 8005afa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005afc:	42a3      	cmp	r3, r4
 8005afe:	bfbf      	itttt	lt
 8005b00:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005b02:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005b04:	1ae3      	sublt	r3, r4, r3
 8005b06:	18d2      	addlt	r2, r2, r3
 8005b08:	bfa8      	it	ge
 8005b0a:	1b1c      	subge	r4, r3, r4
 8005b0c:	9b07      	ldr	r3, [sp, #28]
 8005b0e:	bfbe      	ittt	lt
 8005b10:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005b12:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005b14:	2400      	movlt	r4, #0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	bfb5      	itete	lt
 8005b1a:	eba8 0603 	sublt.w	r6, r8, r3
 8005b1e:	4646      	movge	r6, r8
 8005b20:	2300      	movlt	r3, #0
 8005b22:	9b07      	ldrge	r3, [sp, #28]
 8005b24:	e730      	b.n	8005988 <_dtoa_r+0x730>
 8005b26:	4646      	mov	r6, r8
 8005b28:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005b2a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005b2c:	e735      	b.n	800599a <_dtoa_r+0x742>
 8005b2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b30:	e75c      	b.n	80059ec <_dtoa_r+0x794>
 8005b32:	2300      	movs	r3, #0
 8005b34:	e788      	b.n	8005a48 <_dtoa_r+0x7f0>
 8005b36:	9b02      	ldr	r3, [sp, #8]
 8005b38:	e786      	b.n	8005a48 <_dtoa_r+0x7f0>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b3e:	e788      	b.n	8005a52 <_dtoa_r+0x7fa>
 8005b40:	d09f      	beq.n	8005a82 <_dtoa_r+0x82a>
 8005b42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b44:	331c      	adds	r3, #28
 8005b46:	441a      	add	r2, r3
 8005b48:	4498      	add	r8, r3
 8005b4a:	441e      	add	r6, r3
 8005b4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b4e:	e798      	b.n	8005a82 <_dtoa_r+0x82a>
 8005b50:	4603      	mov	r3, r0
 8005b52:	e7f6      	b.n	8005b42 <_dtoa_r+0x8ea>
 8005b54:	9b07      	ldr	r3, [sp, #28]
 8005b56:	9704      	str	r7, [sp, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	dc20      	bgt.n	8005b9e <_dtoa_r+0x946>
 8005b5c:	9308      	str	r3, [sp, #32]
 8005b5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	dd1e      	ble.n	8005ba2 <_dtoa_r+0x94a>
 8005b64:	9b08      	ldr	r3, [sp, #32]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f47f aebc 	bne.w	80058e4 <_dtoa_r+0x68c>
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	2205      	movs	r2, #5
 8005b70:	4658      	mov	r0, fp
 8005b72:	f000 fa99 	bl	80060a8 <__multadd>
 8005b76:	4601      	mov	r1, r0
 8005b78:	4604      	mov	r4, r0
 8005b7a:	4648      	mov	r0, r9
 8005b7c:	f000 fcf4 	bl	8006568 <__mcmp>
 8005b80:	2800      	cmp	r0, #0
 8005b82:	f77f aeaf 	ble.w	80058e4 <_dtoa_r+0x68c>
 8005b86:	2331      	movs	r3, #49	@ 0x31
 8005b88:	4656      	mov	r6, sl
 8005b8a:	f806 3b01 	strb.w	r3, [r6], #1
 8005b8e:	9b04      	ldr	r3, [sp, #16]
 8005b90:	3301      	adds	r3, #1
 8005b92:	9304      	str	r3, [sp, #16]
 8005b94:	e6aa      	b.n	80058ec <_dtoa_r+0x694>
 8005b96:	9c07      	ldr	r4, [sp, #28]
 8005b98:	9704      	str	r7, [sp, #16]
 8005b9a:	4625      	mov	r5, r4
 8005b9c:	e7f3      	b.n	8005b86 <_dtoa_r+0x92e>
 8005b9e:	9b07      	ldr	r3, [sp, #28]
 8005ba0:	9308      	str	r3, [sp, #32]
 8005ba2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8104 	beq.w	8005db2 <_dtoa_r+0xb5a>
 8005baa:	2e00      	cmp	r6, #0
 8005bac:	dd05      	ble.n	8005bba <_dtoa_r+0x962>
 8005bae:	4629      	mov	r1, r5
 8005bb0:	4632      	mov	r2, r6
 8005bb2:	4658      	mov	r0, fp
 8005bb4:	f000 fc6c 	bl	8006490 <__lshift>
 8005bb8:	4605      	mov	r5, r0
 8005bba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d05a      	beq.n	8005c76 <_dtoa_r+0xa1e>
 8005bc0:	4658      	mov	r0, fp
 8005bc2:	6869      	ldr	r1, [r5, #4]
 8005bc4:	f000 fa0e 	bl	8005fe4 <_Balloc>
 8005bc8:	4606      	mov	r6, r0
 8005bca:	b928      	cbnz	r0, 8005bd8 <_dtoa_r+0x980>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005bd2:	4b83      	ldr	r3, [pc, #524]	@ (8005de0 <_dtoa_r+0xb88>)
 8005bd4:	f7ff bb54 	b.w	8005280 <_dtoa_r+0x28>
 8005bd8:	692a      	ldr	r2, [r5, #16]
 8005bda:	f105 010c 	add.w	r1, r5, #12
 8005bde:	3202      	adds	r2, #2
 8005be0:	0092      	lsls	r2, r2, #2
 8005be2:	300c      	adds	r0, #12
 8005be4:	f7ff fa9d 	bl	8005122 <memcpy>
 8005be8:	2201      	movs	r2, #1
 8005bea:	4631      	mov	r1, r6
 8005bec:	4658      	mov	r0, fp
 8005bee:	f000 fc4f 	bl	8006490 <__lshift>
 8005bf2:	462f      	mov	r7, r5
 8005bf4:	4605      	mov	r5, r0
 8005bf6:	f10a 0301 	add.w	r3, sl, #1
 8005bfa:	9307      	str	r3, [sp, #28]
 8005bfc:	9b08      	ldr	r3, [sp, #32]
 8005bfe:	4453      	add	r3, sl
 8005c00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c02:	9b02      	ldr	r3, [sp, #8]
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c0a:	9b07      	ldr	r3, [sp, #28]
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	4648      	mov	r0, r9
 8005c12:	9302      	str	r3, [sp, #8]
 8005c14:	f7ff fa98 	bl	8005148 <quorem>
 8005c18:	4639      	mov	r1, r7
 8005c1a:	9008      	str	r0, [sp, #32]
 8005c1c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005c20:	4648      	mov	r0, r9
 8005c22:	f000 fca1 	bl	8006568 <__mcmp>
 8005c26:	462a      	mov	r2, r5
 8005c28:	9009      	str	r0, [sp, #36]	@ 0x24
 8005c2a:	4621      	mov	r1, r4
 8005c2c:	4658      	mov	r0, fp
 8005c2e:	f000 fcb7 	bl	80065a0 <__mdiff>
 8005c32:	68c2      	ldr	r2, [r0, #12]
 8005c34:	4606      	mov	r6, r0
 8005c36:	bb02      	cbnz	r2, 8005c7a <_dtoa_r+0xa22>
 8005c38:	4601      	mov	r1, r0
 8005c3a:	4648      	mov	r0, r9
 8005c3c:	f000 fc94 	bl	8006568 <__mcmp>
 8005c40:	4602      	mov	r2, r0
 8005c42:	4631      	mov	r1, r6
 8005c44:	4658      	mov	r0, fp
 8005c46:	920c      	str	r2, [sp, #48]	@ 0x30
 8005c48:	f000 fa0c 	bl	8006064 <_Bfree>
 8005c4c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005c4e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005c50:	9e07      	ldr	r6, [sp, #28]
 8005c52:	ea43 0102 	orr.w	r1, r3, r2
 8005c56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c58:	4319      	orrs	r1, r3
 8005c5a:	d110      	bne.n	8005c7e <_dtoa_r+0xa26>
 8005c5c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005c60:	d029      	beq.n	8005cb6 <_dtoa_r+0xa5e>
 8005c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	dd02      	ble.n	8005c6e <_dtoa_r+0xa16>
 8005c68:	9b08      	ldr	r3, [sp, #32]
 8005c6a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005c6e:	9b02      	ldr	r3, [sp, #8]
 8005c70:	f883 8000 	strb.w	r8, [r3]
 8005c74:	e63b      	b.n	80058ee <_dtoa_r+0x696>
 8005c76:	4628      	mov	r0, r5
 8005c78:	e7bb      	b.n	8005bf2 <_dtoa_r+0x99a>
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	e7e1      	b.n	8005c42 <_dtoa_r+0x9ea>
 8005c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	db04      	blt.n	8005c8e <_dtoa_r+0xa36>
 8005c84:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005c86:	430b      	orrs	r3, r1
 8005c88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005c8a:	430b      	orrs	r3, r1
 8005c8c:	d120      	bne.n	8005cd0 <_dtoa_r+0xa78>
 8005c8e:	2a00      	cmp	r2, #0
 8005c90:	dded      	ble.n	8005c6e <_dtoa_r+0xa16>
 8005c92:	4649      	mov	r1, r9
 8005c94:	2201      	movs	r2, #1
 8005c96:	4658      	mov	r0, fp
 8005c98:	f000 fbfa 	bl	8006490 <__lshift>
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	4681      	mov	r9, r0
 8005ca0:	f000 fc62 	bl	8006568 <__mcmp>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	dc03      	bgt.n	8005cb0 <_dtoa_r+0xa58>
 8005ca8:	d1e1      	bne.n	8005c6e <_dtoa_r+0xa16>
 8005caa:	f018 0f01 	tst.w	r8, #1
 8005cae:	d0de      	beq.n	8005c6e <_dtoa_r+0xa16>
 8005cb0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005cb4:	d1d8      	bne.n	8005c68 <_dtoa_r+0xa10>
 8005cb6:	2339      	movs	r3, #57	@ 0x39
 8005cb8:	9a02      	ldr	r2, [sp, #8]
 8005cba:	7013      	strb	r3, [r2, #0]
 8005cbc:	4633      	mov	r3, r6
 8005cbe:	461e      	mov	r6, r3
 8005cc0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	2a39      	cmp	r2, #57	@ 0x39
 8005cc8:	d052      	beq.n	8005d70 <_dtoa_r+0xb18>
 8005cca:	3201      	adds	r2, #1
 8005ccc:	701a      	strb	r2, [r3, #0]
 8005cce:	e60e      	b.n	80058ee <_dtoa_r+0x696>
 8005cd0:	2a00      	cmp	r2, #0
 8005cd2:	dd07      	ble.n	8005ce4 <_dtoa_r+0xa8c>
 8005cd4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005cd8:	d0ed      	beq.n	8005cb6 <_dtoa_r+0xa5e>
 8005cda:	9a02      	ldr	r2, [sp, #8]
 8005cdc:	f108 0301 	add.w	r3, r8, #1
 8005ce0:	7013      	strb	r3, [r2, #0]
 8005ce2:	e604      	b.n	80058ee <_dtoa_r+0x696>
 8005ce4:	9b07      	ldr	r3, [sp, #28]
 8005ce6:	9a07      	ldr	r2, [sp, #28]
 8005ce8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005cec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d028      	beq.n	8005d44 <_dtoa_r+0xaec>
 8005cf2:	4649      	mov	r1, r9
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	220a      	movs	r2, #10
 8005cf8:	4658      	mov	r0, fp
 8005cfa:	f000 f9d5 	bl	80060a8 <__multadd>
 8005cfe:	42af      	cmp	r7, r5
 8005d00:	4681      	mov	r9, r0
 8005d02:	f04f 0300 	mov.w	r3, #0
 8005d06:	f04f 020a 	mov.w	r2, #10
 8005d0a:	4639      	mov	r1, r7
 8005d0c:	4658      	mov	r0, fp
 8005d0e:	d107      	bne.n	8005d20 <_dtoa_r+0xac8>
 8005d10:	f000 f9ca 	bl	80060a8 <__multadd>
 8005d14:	4607      	mov	r7, r0
 8005d16:	4605      	mov	r5, r0
 8005d18:	9b07      	ldr	r3, [sp, #28]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	9307      	str	r3, [sp, #28]
 8005d1e:	e774      	b.n	8005c0a <_dtoa_r+0x9b2>
 8005d20:	f000 f9c2 	bl	80060a8 <__multadd>
 8005d24:	4629      	mov	r1, r5
 8005d26:	4607      	mov	r7, r0
 8005d28:	2300      	movs	r3, #0
 8005d2a:	220a      	movs	r2, #10
 8005d2c:	4658      	mov	r0, fp
 8005d2e:	f000 f9bb 	bl	80060a8 <__multadd>
 8005d32:	4605      	mov	r5, r0
 8005d34:	e7f0      	b.n	8005d18 <_dtoa_r+0xac0>
 8005d36:	9b08      	ldr	r3, [sp, #32]
 8005d38:	2700      	movs	r7, #0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	bfcc      	ite	gt
 8005d3e:	461e      	movgt	r6, r3
 8005d40:	2601      	movle	r6, #1
 8005d42:	4456      	add	r6, sl
 8005d44:	4649      	mov	r1, r9
 8005d46:	2201      	movs	r2, #1
 8005d48:	4658      	mov	r0, fp
 8005d4a:	f000 fba1 	bl	8006490 <__lshift>
 8005d4e:	4621      	mov	r1, r4
 8005d50:	4681      	mov	r9, r0
 8005d52:	f000 fc09 	bl	8006568 <__mcmp>
 8005d56:	2800      	cmp	r0, #0
 8005d58:	dcb0      	bgt.n	8005cbc <_dtoa_r+0xa64>
 8005d5a:	d102      	bne.n	8005d62 <_dtoa_r+0xb0a>
 8005d5c:	f018 0f01 	tst.w	r8, #1
 8005d60:	d1ac      	bne.n	8005cbc <_dtoa_r+0xa64>
 8005d62:	4633      	mov	r3, r6
 8005d64:	461e      	mov	r6, r3
 8005d66:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d6a:	2a30      	cmp	r2, #48	@ 0x30
 8005d6c:	d0fa      	beq.n	8005d64 <_dtoa_r+0xb0c>
 8005d6e:	e5be      	b.n	80058ee <_dtoa_r+0x696>
 8005d70:	459a      	cmp	sl, r3
 8005d72:	d1a4      	bne.n	8005cbe <_dtoa_r+0xa66>
 8005d74:	9b04      	ldr	r3, [sp, #16]
 8005d76:	3301      	adds	r3, #1
 8005d78:	9304      	str	r3, [sp, #16]
 8005d7a:	2331      	movs	r3, #49	@ 0x31
 8005d7c:	f88a 3000 	strb.w	r3, [sl]
 8005d80:	e5b5      	b.n	80058ee <_dtoa_r+0x696>
 8005d82:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005d84:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005de4 <_dtoa_r+0xb8c>
 8005d88:	b11b      	cbz	r3, 8005d92 <_dtoa_r+0xb3a>
 8005d8a:	f10a 0308 	add.w	r3, sl, #8
 8005d8e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	4650      	mov	r0, sl
 8005d94:	b017      	add	sp, #92	@ 0x5c
 8005d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	f77f ae3d 	ble.w	8005a1c <_dtoa_r+0x7c4>
 8005da2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005da4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005da6:	2001      	movs	r0, #1
 8005da8:	e65b      	b.n	8005a62 <_dtoa_r+0x80a>
 8005daa:	9b08      	ldr	r3, [sp, #32]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f77f aed6 	ble.w	8005b5e <_dtoa_r+0x906>
 8005db2:	4656      	mov	r6, sl
 8005db4:	4621      	mov	r1, r4
 8005db6:	4648      	mov	r0, r9
 8005db8:	f7ff f9c6 	bl	8005148 <quorem>
 8005dbc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005dc0:	9b08      	ldr	r3, [sp, #32]
 8005dc2:	f806 8b01 	strb.w	r8, [r6], #1
 8005dc6:	eba6 020a 	sub.w	r2, r6, sl
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	ddb3      	ble.n	8005d36 <_dtoa_r+0xade>
 8005dce:	4649      	mov	r1, r9
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	220a      	movs	r2, #10
 8005dd4:	4658      	mov	r0, fp
 8005dd6:	f000 f967 	bl	80060a8 <__multadd>
 8005dda:	4681      	mov	r9, r0
 8005ddc:	e7ea      	b.n	8005db4 <_dtoa_r+0xb5c>
 8005dde:	bf00      	nop
 8005de0:	080088cb 	.word	0x080088cb
 8005de4:	0800884f 	.word	0x0800884f

08005de8 <_free_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4605      	mov	r5, r0
 8005dec:	2900      	cmp	r1, #0
 8005dee:	d040      	beq.n	8005e72 <_free_r+0x8a>
 8005df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005df4:	1f0c      	subs	r4, r1, #4
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	bfb8      	it	lt
 8005dfa:	18e4      	addlt	r4, r4, r3
 8005dfc:	f000 f8e6 	bl	8005fcc <__malloc_lock>
 8005e00:	4a1c      	ldr	r2, [pc, #112]	@ (8005e74 <_free_r+0x8c>)
 8005e02:	6813      	ldr	r3, [r2, #0]
 8005e04:	b933      	cbnz	r3, 8005e14 <_free_r+0x2c>
 8005e06:	6063      	str	r3, [r4, #4]
 8005e08:	6014      	str	r4, [r2, #0]
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e10:	f000 b8e2 	b.w	8005fd8 <__malloc_unlock>
 8005e14:	42a3      	cmp	r3, r4
 8005e16:	d908      	bls.n	8005e2a <_free_r+0x42>
 8005e18:	6820      	ldr	r0, [r4, #0]
 8005e1a:	1821      	adds	r1, r4, r0
 8005e1c:	428b      	cmp	r3, r1
 8005e1e:	bf01      	itttt	eq
 8005e20:	6819      	ldreq	r1, [r3, #0]
 8005e22:	685b      	ldreq	r3, [r3, #4]
 8005e24:	1809      	addeq	r1, r1, r0
 8005e26:	6021      	streq	r1, [r4, #0]
 8005e28:	e7ed      	b.n	8005e06 <_free_r+0x1e>
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	b10b      	cbz	r3, 8005e34 <_free_r+0x4c>
 8005e30:	42a3      	cmp	r3, r4
 8005e32:	d9fa      	bls.n	8005e2a <_free_r+0x42>
 8005e34:	6811      	ldr	r1, [r2, #0]
 8005e36:	1850      	adds	r0, r2, r1
 8005e38:	42a0      	cmp	r0, r4
 8005e3a:	d10b      	bne.n	8005e54 <_free_r+0x6c>
 8005e3c:	6820      	ldr	r0, [r4, #0]
 8005e3e:	4401      	add	r1, r0
 8005e40:	1850      	adds	r0, r2, r1
 8005e42:	4283      	cmp	r3, r0
 8005e44:	6011      	str	r1, [r2, #0]
 8005e46:	d1e0      	bne.n	8005e0a <_free_r+0x22>
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	4408      	add	r0, r1
 8005e4e:	6010      	str	r0, [r2, #0]
 8005e50:	6053      	str	r3, [r2, #4]
 8005e52:	e7da      	b.n	8005e0a <_free_r+0x22>
 8005e54:	d902      	bls.n	8005e5c <_free_r+0x74>
 8005e56:	230c      	movs	r3, #12
 8005e58:	602b      	str	r3, [r5, #0]
 8005e5a:	e7d6      	b.n	8005e0a <_free_r+0x22>
 8005e5c:	6820      	ldr	r0, [r4, #0]
 8005e5e:	1821      	adds	r1, r4, r0
 8005e60:	428b      	cmp	r3, r1
 8005e62:	bf01      	itttt	eq
 8005e64:	6819      	ldreq	r1, [r3, #0]
 8005e66:	685b      	ldreq	r3, [r3, #4]
 8005e68:	1809      	addeq	r1, r1, r0
 8005e6a:	6021      	streq	r1, [r4, #0]
 8005e6c:	6063      	str	r3, [r4, #4]
 8005e6e:	6054      	str	r4, [r2, #4]
 8005e70:	e7cb      	b.n	8005e0a <_free_r+0x22>
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
 8005e74:	20000498 	.word	0x20000498

08005e78 <malloc>:
 8005e78:	4b02      	ldr	r3, [pc, #8]	@ (8005e84 <malloc+0xc>)
 8005e7a:	4601      	mov	r1, r0
 8005e7c:	6818      	ldr	r0, [r3, #0]
 8005e7e:	f000 b825 	b.w	8005ecc <_malloc_r>
 8005e82:	bf00      	nop
 8005e84:	20000024 	.word	0x20000024

08005e88 <sbrk_aligned>:
 8005e88:	b570      	push	{r4, r5, r6, lr}
 8005e8a:	4e0f      	ldr	r6, [pc, #60]	@ (8005ec8 <sbrk_aligned+0x40>)
 8005e8c:	460c      	mov	r4, r1
 8005e8e:	6831      	ldr	r1, [r6, #0]
 8005e90:	4605      	mov	r5, r0
 8005e92:	b911      	cbnz	r1, 8005e9a <sbrk_aligned+0x12>
 8005e94:	f001 ffb0 	bl	8007df8 <_sbrk_r>
 8005e98:	6030      	str	r0, [r6, #0]
 8005e9a:	4621      	mov	r1, r4
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	f001 ffab 	bl	8007df8 <_sbrk_r>
 8005ea2:	1c43      	adds	r3, r0, #1
 8005ea4:	d103      	bne.n	8005eae <sbrk_aligned+0x26>
 8005ea6:	f04f 34ff 	mov.w	r4, #4294967295
 8005eaa:	4620      	mov	r0, r4
 8005eac:	bd70      	pop	{r4, r5, r6, pc}
 8005eae:	1cc4      	adds	r4, r0, #3
 8005eb0:	f024 0403 	bic.w	r4, r4, #3
 8005eb4:	42a0      	cmp	r0, r4
 8005eb6:	d0f8      	beq.n	8005eaa <sbrk_aligned+0x22>
 8005eb8:	1a21      	subs	r1, r4, r0
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f001 ff9c 	bl	8007df8 <_sbrk_r>
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d1f2      	bne.n	8005eaa <sbrk_aligned+0x22>
 8005ec4:	e7ef      	b.n	8005ea6 <sbrk_aligned+0x1e>
 8005ec6:	bf00      	nop
 8005ec8:	20000494 	.word	0x20000494

08005ecc <_malloc_r>:
 8005ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ed0:	1ccd      	adds	r5, r1, #3
 8005ed2:	f025 0503 	bic.w	r5, r5, #3
 8005ed6:	3508      	adds	r5, #8
 8005ed8:	2d0c      	cmp	r5, #12
 8005eda:	bf38      	it	cc
 8005edc:	250c      	movcc	r5, #12
 8005ede:	2d00      	cmp	r5, #0
 8005ee0:	4606      	mov	r6, r0
 8005ee2:	db01      	blt.n	8005ee8 <_malloc_r+0x1c>
 8005ee4:	42a9      	cmp	r1, r5
 8005ee6:	d904      	bls.n	8005ef2 <_malloc_r+0x26>
 8005ee8:	230c      	movs	r3, #12
 8005eea:	6033      	str	r3, [r6, #0]
 8005eec:	2000      	movs	r0, #0
 8005eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ef2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005fc8 <_malloc_r+0xfc>
 8005ef6:	f000 f869 	bl	8005fcc <__malloc_lock>
 8005efa:	f8d8 3000 	ldr.w	r3, [r8]
 8005efe:	461c      	mov	r4, r3
 8005f00:	bb44      	cbnz	r4, 8005f54 <_malloc_r+0x88>
 8005f02:	4629      	mov	r1, r5
 8005f04:	4630      	mov	r0, r6
 8005f06:	f7ff ffbf 	bl	8005e88 <sbrk_aligned>
 8005f0a:	1c43      	adds	r3, r0, #1
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	d158      	bne.n	8005fc2 <_malloc_r+0xf6>
 8005f10:	f8d8 4000 	ldr.w	r4, [r8]
 8005f14:	4627      	mov	r7, r4
 8005f16:	2f00      	cmp	r7, #0
 8005f18:	d143      	bne.n	8005fa2 <_malloc_r+0xd6>
 8005f1a:	2c00      	cmp	r4, #0
 8005f1c:	d04b      	beq.n	8005fb6 <_malloc_r+0xea>
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	4639      	mov	r1, r7
 8005f22:	4630      	mov	r0, r6
 8005f24:	eb04 0903 	add.w	r9, r4, r3
 8005f28:	f001 ff66 	bl	8007df8 <_sbrk_r>
 8005f2c:	4581      	cmp	r9, r0
 8005f2e:	d142      	bne.n	8005fb6 <_malloc_r+0xea>
 8005f30:	6821      	ldr	r1, [r4, #0]
 8005f32:	4630      	mov	r0, r6
 8005f34:	1a6d      	subs	r5, r5, r1
 8005f36:	4629      	mov	r1, r5
 8005f38:	f7ff ffa6 	bl	8005e88 <sbrk_aligned>
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	d03a      	beq.n	8005fb6 <_malloc_r+0xea>
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	442b      	add	r3, r5
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	f8d8 3000 	ldr.w	r3, [r8]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	bb62      	cbnz	r2, 8005fa8 <_malloc_r+0xdc>
 8005f4e:	f8c8 7000 	str.w	r7, [r8]
 8005f52:	e00f      	b.n	8005f74 <_malloc_r+0xa8>
 8005f54:	6822      	ldr	r2, [r4, #0]
 8005f56:	1b52      	subs	r2, r2, r5
 8005f58:	d420      	bmi.n	8005f9c <_malloc_r+0xd0>
 8005f5a:	2a0b      	cmp	r2, #11
 8005f5c:	d917      	bls.n	8005f8e <_malloc_r+0xc2>
 8005f5e:	1961      	adds	r1, r4, r5
 8005f60:	42a3      	cmp	r3, r4
 8005f62:	6025      	str	r5, [r4, #0]
 8005f64:	bf18      	it	ne
 8005f66:	6059      	strne	r1, [r3, #4]
 8005f68:	6863      	ldr	r3, [r4, #4]
 8005f6a:	bf08      	it	eq
 8005f6c:	f8c8 1000 	streq.w	r1, [r8]
 8005f70:	5162      	str	r2, [r4, r5]
 8005f72:	604b      	str	r3, [r1, #4]
 8005f74:	4630      	mov	r0, r6
 8005f76:	f000 f82f 	bl	8005fd8 <__malloc_unlock>
 8005f7a:	f104 000b 	add.w	r0, r4, #11
 8005f7e:	1d23      	adds	r3, r4, #4
 8005f80:	f020 0007 	bic.w	r0, r0, #7
 8005f84:	1ac2      	subs	r2, r0, r3
 8005f86:	bf1c      	itt	ne
 8005f88:	1a1b      	subne	r3, r3, r0
 8005f8a:	50a3      	strne	r3, [r4, r2]
 8005f8c:	e7af      	b.n	8005eee <_malloc_r+0x22>
 8005f8e:	6862      	ldr	r2, [r4, #4]
 8005f90:	42a3      	cmp	r3, r4
 8005f92:	bf0c      	ite	eq
 8005f94:	f8c8 2000 	streq.w	r2, [r8]
 8005f98:	605a      	strne	r2, [r3, #4]
 8005f9a:	e7eb      	b.n	8005f74 <_malloc_r+0xa8>
 8005f9c:	4623      	mov	r3, r4
 8005f9e:	6864      	ldr	r4, [r4, #4]
 8005fa0:	e7ae      	b.n	8005f00 <_malloc_r+0x34>
 8005fa2:	463c      	mov	r4, r7
 8005fa4:	687f      	ldr	r7, [r7, #4]
 8005fa6:	e7b6      	b.n	8005f16 <_malloc_r+0x4a>
 8005fa8:	461a      	mov	r2, r3
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	42a3      	cmp	r3, r4
 8005fae:	d1fb      	bne.n	8005fa8 <_malloc_r+0xdc>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	6053      	str	r3, [r2, #4]
 8005fb4:	e7de      	b.n	8005f74 <_malloc_r+0xa8>
 8005fb6:	230c      	movs	r3, #12
 8005fb8:	4630      	mov	r0, r6
 8005fba:	6033      	str	r3, [r6, #0]
 8005fbc:	f000 f80c 	bl	8005fd8 <__malloc_unlock>
 8005fc0:	e794      	b.n	8005eec <_malloc_r+0x20>
 8005fc2:	6005      	str	r5, [r0, #0]
 8005fc4:	e7d6      	b.n	8005f74 <_malloc_r+0xa8>
 8005fc6:	bf00      	nop
 8005fc8:	20000498 	.word	0x20000498

08005fcc <__malloc_lock>:
 8005fcc:	4801      	ldr	r0, [pc, #4]	@ (8005fd4 <__malloc_lock+0x8>)
 8005fce:	f7ff b898 	b.w	8005102 <__retarget_lock_acquire_recursive>
 8005fd2:	bf00      	nop
 8005fd4:	20000490 	.word	0x20000490

08005fd8 <__malloc_unlock>:
 8005fd8:	4801      	ldr	r0, [pc, #4]	@ (8005fe0 <__malloc_unlock+0x8>)
 8005fda:	f7ff b893 	b.w	8005104 <__retarget_lock_release_recursive>
 8005fde:	bf00      	nop
 8005fe0:	20000490 	.word	0x20000490

08005fe4 <_Balloc>:
 8005fe4:	b570      	push	{r4, r5, r6, lr}
 8005fe6:	69c6      	ldr	r6, [r0, #28]
 8005fe8:	4604      	mov	r4, r0
 8005fea:	460d      	mov	r5, r1
 8005fec:	b976      	cbnz	r6, 800600c <_Balloc+0x28>
 8005fee:	2010      	movs	r0, #16
 8005ff0:	f7ff ff42 	bl	8005e78 <malloc>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	61e0      	str	r0, [r4, #28]
 8005ff8:	b920      	cbnz	r0, 8006004 <_Balloc+0x20>
 8005ffa:	216b      	movs	r1, #107	@ 0x6b
 8005ffc:	4b17      	ldr	r3, [pc, #92]	@ (800605c <_Balloc+0x78>)
 8005ffe:	4818      	ldr	r0, [pc, #96]	@ (8006060 <_Balloc+0x7c>)
 8006000:	f001 ff10 	bl	8007e24 <__assert_func>
 8006004:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006008:	6006      	str	r6, [r0, #0]
 800600a:	60c6      	str	r6, [r0, #12]
 800600c:	69e6      	ldr	r6, [r4, #28]
 800600e:	68f3      	ldr	r3, [r6, #12]
 8006010:	b183      	cbz	r3, 8006034 <_Balloc+0x50>
 8006012:	69e3      	ldr	r3, [r4, #28]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800601a:	b9b8      	cbnz	r0, 800604c <_Balloc+0x68>
 800601c:	2101      	movs	r1, #1
 800601e:	fa01 f605 	lsl.w	r6, r1, r5
 8006022:	1d72      	adds	r2, r6, #5
 8006024:	4620      	mov	r0, r4
 8006026:	0092      	lsls	r2, r2, #2
 8006028:	f001 ff1a 	bl	8007e60 <_calloc_r>
 800602c:	b160      	cbz	r0, 8006048 <_Balloc+0x64>
 800602e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006032:	e00e      	b.n	8006052 <_Balloc+0x6e>
 8006034:	2221      	movs	r2, #33	@ 0x21
 8006036:	2104      	movs	r1, #4
 8006038:	4620      	mov	r0, r4
 800603a:	f001 ff11 	bl	8007e60 <_calloc_r>
 800603e:	69e3      	ldr	r3, [r4, #28]
 8006040:	60f0      	str	r0, [r6, #12]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e4      	bne.n	8006012 <_Balloc+0x2e>
 8006048:	2000      	movs	r0, #0
 800604a:	bd70      	pop	{r4, r5, r6, pc}
 800604c:	6802      	ldr	r2, [r0, #0]
 800604e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006052:	2300      	movs	r3, #0
 8006054:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006058:	e7f7      	b.n	800604a <_Balloc+0x66>
 800605a:	bf00      	nop
 800605c:	0800885c 	.word	0x0800885c
 8006060:	080088dc 	.word	0x080088dc

08006064 <_Bfree>:
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	69c6      	ldr	r6, [r0, #28]
 8006068:	4605      	mov	r5, r0
 800606a:	460c      	mov	r4, r1
 800606c:	b976      	cbnz	r6, 800608c <_Bfree+0x28>
 800606e:	2010      	movs	r0, #16
 8006070:	f7ff ff02 	bl	8005e78 <malloc>
 8006074:	4602      	mov	r2, r0
 8006076:	61e8      	str	r0, [r5, #28]
 8006078:	b920      	cbnz	r0, 8006084 <_Bfree+0x20>
 800607a:	218f      	movs	r1, #143	@ 0x8f
 800607c:	4b08      	ldr	r3, [pc, #32]	@ (80060a0 <_Bfree+0x3c>)
 800607e:	4809      	ldr	r0, [pc, #36]	@ (80060a4 <_Bfree+0x40>)
 8006080:	f001 fed0 	bl	8007e24 <__assert_func>
 8006084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006088:	6006      	str	r6, [r0, #0]
 800608a:	60c6      	str	r6, [r0, #12]
 800608c:	b13c      	cbz	r4, 800609e <_Bfree+0x3a>
 800608e:	69eb      	ldr	r3, [r5, #28]
 8006090:	6862      	ldr	r2, [r4, #4]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006098:	6021      	str	r1, [r4, #0]
 800609a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	0800885c 	.word	0x0800885c
 80060a4:	080088dc 	.word	0x080088dc

080060a8 <__multadd>:
 80060a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ac:	4607      	mov	r7, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	461e      	mov	r6, r3
 80060b2:	2000      	movs	r0, #0
 80060b4:	690d      	ldr	r5, [r1, #16]
 80060b6:	f101 0c14 	add.w	ip, r1, #20
 80060ba:	f8dc 3000 	ldr.w	r3, [ip]
 80060be:	3001      	adds	r0, #1
 80060c0:	b299      	uxth	r1, r3
 80060c2:	fb02 6101 	mla	r1, r2, r1, r6
 80060c6:	0c1e      	lsrs	r6, r3, #16
 80060c8:	0c0b      	lsrs	r3, r1, #16
 80060ca:	fb02 3306 	mla	r3, r2, r6, r3
 80060ce:	b289      	uxth	r1, r1
 80060d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80060d4:	4285      	cmp	r5, r0
 80060d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80060da:	f84c 1b04 	str.w	r1, [ip], #4
 80060de:	dcec      	bgt.n	80060ba <__multadd+0x12>
 80060e0:	b30e      	cbz	r6, 8006126 <__multadd+0x7e>
 80060e2:	68a3      	ldr	r3, [r4, #8]
 80060e4:	42ab      	cmp	r3, r5
 80060e6:	dc19      	bgt.n	800611c <__multadd+0x74>
 80060e8:	6861      	ldr	r1, [r4, #4]
 80060ea:	4638      	mov	r0, r7
 80060ec:	3101      	adds	r1, #1
 80060ee:	f7ff ff79 	bl	8005fe4 <_Balloc>
 80060f2:	4680      	mov	r8, r0
 80060f4:	b928      	cbnz	r0, 8006102 <__multadd+0x5a>
 80060f6:	4602      	mov	r2, r0
 80060f8:	21ba      	movs	r1, #186	@ 0xba
 80060fa:	4b0c      	ldr	r3, [pc, #48]	@ (800612c <__multadd+0x84>)
 80060fc:	480c      	ldr	r0, [pc, #48]	@ (8006130 <__multadd+0x88>)
 80060fe:	f001 fe91 	bl	8007e24 <__assert_func>
 8006102:	6922      	ldr	r2, [r4, #16]
 8006104:	f104 010c 	add.w	r1, r4, #12
 8006108:	3202      	adds	r2, #2
 800610a:	0092      	lsls	r2, r2, #2
 800610c:	300c      	adds	r0, #12
 800610e:	f7ff f808 	bl	8005122 <memcpy>
 8006112:	4621      	mov	r1, r4
 8006114:	4638      	mov	r0, r7
 8006116:	f7ff ffa5 	bl	8006064 <_Bfree>
 800611a:	4644      	mov	r4, r8
 800611c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006120:	3501      	adds	r5, #1
 8006122:	615e      	str	r6, [r3, #20]
 8006124:	6125      	str	r5, [r4, #16]
 8006126:	4620      	mov	r0, r4
 8006128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800612c:	080088cb 	.word	0x080088cb
 8006130:	080088dc 	.word	0x080088dc

08006134 <__s2b>:
 8006134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006138:	4615      	mov	r5, r2
 800613a:	2209      	movs	r2, #9
 800613c:	461f      	mov	r7, r3
 800613e:	3308      	adds	r3, #8
 8006140:	460c      	mov	r4, r1
 8006142:	fb93 f3f2 	sdiv	r3, r3, r2
 8006146:	4606      	mov	r6, r0
 8006148:	2201      	movs	r2, #1
 800614a:	2100      	movs	r1, #0
 800614c:	429a      	cmp	r2, r3
 800614e:	db09      	blt.n	8006164 <__s2b+0x30>
 8006150:	4630      	mov	r0, r6
 8006152:	f7ff ff47 	bl	8005fe4 <_Balloc>
 8006156:	b940      	cbnz	r0, 800616a <__s2b+0x36>
 8006158:	4602      	mov	r2, r0
 800615a:	21d3      	movs	r1, #211	@ 0xd3
 800615c:	4b18      	ldr	r3, [pc, #96]	@ (80061c0 <__s2b+0x8c>)
 800615e:	4819      	ldr	r0, [pc, #100]	@ (80061c4 <__s2b+0x90>)
 8006160:	f001 fe60 	bl	8007e24 <__assert_func>
 8006164:	0052      	lsls	r2, r2, #1
 8006166:	3101      	adds	r1, #1
 8006168:	e7f0      	b.n	800614c <__s2b+0x18>
 800616a:	9b08      	ldr	r3, [sp, #32]
 800616c:	2d09      	cmp	r5, #9
 800616e:	6143      	str	r3, [r0, #20]
 8006170:	f04f 0301 	mov.w	r3, #1
 8006174:	6103      	str	r3, [r0, #16]
 8006176:	dd16      	ble.n	80061a6 <__s2b+0x72>
 8006178:	f104 0909 	add.w	r9, r4, #9
 800617c:	46c8      	mov	r8, r9
 800617e:	442c      	add	r4, r5
 8006180:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006184:	4601      	mov	r1, r0
 8006186:	220a      	movs	r2, #10
 8006188:	4630      	mov	r0, r6
 800618a:	3b30      	subs	r3, #48	@ 0x30
 800618c:	f7ff ff8c 	bl	80060a8 <__multadd>
 8006190:	45a0      	cmp	r8, r4
 8006192:	d1f5      	bne.n	8006180 <__s2b+0x4c>
 8006194:	f1a5 0408 	sub.w	r4, r5, #8
 8006198:	444c      	add	r4, r9
 800619a:	1b2d      	subs	r5, r5, r4
 800619c:	1963      	adds	r3, r4, r5
 800619e:	42bb      	cmp	r3, r7
 80061a0:	db04      	blt.n	80061ac <__s2b+0x78>
 80061a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061a6:	2509      	movs	r5, #9
 80061a8:	340a      	adds	r4, #10
 80061aa:	e7f6      	b.n	800619a <__s2b+0x66>
 80061ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80061b0:	4601      	mov	r1, r0
 80061b2:	220a      	movs	r2, #10
 80061b4:	4630      	mov	r0, r6
 80061b6:	3b30      	subs	r3, #48	@ 0x30
 80061b8:	f7ff ff76 	bl	80060a8 <__multadd>
 80061bc:	e7ee      	b.n	800619c <__s2b+0x68>
 80061be:	bf00      	nop
 80061c0:	080088cb 	.word	0x080088cb
 80061c4:	080088dc 	.word	0x080088dc

080061c8 <__hi0bits>:
 80061c8:	4603      	mov	r3, r0
 80061ca:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80061ce:	bf3a      	itte	cc
 80061d0:	0403      	lslcc	r3, r0, #16
 80061d2:	2010      	movcc	r0, #16
 80061d4:	2000      	movcs	r0, #0
 80061d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061da:	bf3c      	itt	cc
 80061dc:	021b      	lslcc	r3, r3, #8
 80061de:	3008      	addcc	r0, #8
 80061e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061e4:	bf3c      	itt	cc
 80061e6:	011b      	lslcc	r3, r3, #4
 80061e8:	3004      	addcc	r0, #4
 80061ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ee:	bf3c      	itt	cc
 80061f0:	009b      	lslcc	r3, r3, #2
 80061f2:	3002      	addcc	r0, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	db05      	blt.n	8006204 <__hi0bits+0x3c>
 80061f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80061fc:	f100 0001 	add.w	r0, r0, #1
 8006200:	bf08      	it	eq
 8006202:	2020      	moveq	r0, #32
 8006204:	4770      	bx	lr

08006206 <__lo0bits>:
 8006206:	6803      	ldr	r3, [r0, #0]
 8006208:	4602      	mov	r2, r0
 800620a:	f013 0007 	ands.w	r0, r3, #7
 800620e:	d00b      	beq.n	8006228 <__lo0bits+0x22>
 8006210:	07d9      	lsls	r1, r3, #31
 8006212:	d421      	bmi.n	8006258 <__lo0bits+0x52>
 8006214:	0798      	lsls	r0, r3, #30
 8006216:	bf49      	itett	mi
 8006218:	085b      	lsrmi	r3, r3, #1
 800621a:	089b      	lsrpl	r3, r3, #2
 800621c:	2001      	movmi	r0, #1
 800621e:	6013      	strmi	r3, [r2, #0]
 8006220:	bf5c      	itt	pl
 8006222:	2002      	movpl	r0, #2
 8006224:	6013      	strpl	r3, [r2, #0]
 8006226:	4770      	bx	lr
 8006228:	b299      	uxth	r1, r3
 800622a:	b909      	cbnz	r1, 8006230 <__lo0bits+0x2a>
 800622c:	2010      	movs	r0, #16
 800622e:	0c1b      	lsrs	r3, r3, #16
 8006230:	b2d9      	uxtb	r1, r3
 8006232:	b909      	cbnz	r1, 8006238 <__lo0bits+0x32>
 8006234:	3008      	adds	r0, #8
 8006236:	0a1b      	lsrs	r3, r3, #8
 8006238:	0719      	lsls	r1, r3, #28
 800623a:	bf04      	itt	eq
 800623c:	091b      	lsreq	r3, r3, #4
 800623e:	3004      	addeq	r0, #4
 8006240:	0799      	lsls	r1, r3, #30
 8006242:	bf04      	itt	eq
 8006244:	089b      	lsreq	r3, r3, #2
 8006246:	3002      	addeq	r0, #2
 8006248:	07d9      	lsls	r1, r3, #31
 800624a:	d403      	bmi.n	8006254 <__lo0bits+0x4e>
 800624c:	085b      	lsrs	r3, r3, #1
 800624e:	f100 0001 	add.w	r0, r0, #1
 8006252:	d003      	beq.n	800625c <__lo0bits+0x56>
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	4770      	bx	lr
 8006258:	2000      	movs	r0, #0
 800625a:	4770      	bx	lr
 800625c:	2020      	movs	r0, #32
 800625e:	4770      	bx	lr

08006260 <__i2b>:
 8006260:	b510      	push	{r4, lr}
 8006262:	460c      	mov	r4, r1
 8006264:	2101      	movs	r1, #1
 8006266:	f7ff febd 	bl	8005fe4 <_Balloc>
 800626a:	4602      	mov	r2, r0
 800626c:	b928      	cbnz	r0, 800627a <__i2b+0x1a>
 800626e:	f240 1145 	movw	r1, #325	@ 0x145
 8006272:	4b04      	ldr	r3, [pc, #16]	@ (8006284 <__i2b+0x24>)
 8006274:	4804      	ldr	r0, [pc, #16]	@ (8006288 <__i2b+0x28>)
 8006276:	f001 fdd5 	bl	8007e24 <__assert_func>
 800627a:	2301      	movs	r3, #1
 800627c:	6144      	str	r4, [r0, #20]
 800627e:	6103      	str	r3, [r0, #16]
 8006280:	bd10      	pop	{r4, pc}
 8006282:	bf00      	nop
 8006284:	080088cb 	.word	0x080088cb
 8006288:	080088dc 	.word	0x080088dc

0800628c <__multiply>:
 800628c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006290:	4614      	mov	r4, r2
 8006292:	690a      	ldr	r2, [r1, #16]
 8006294:	6923      	ldr	r3, [r4, #16]
 8006296:	460f      	mov	r7, r1
 8006298:	429a      	cmp	r2, r3
 800629a:	bfa2      	ittt	ge
 800629c:	4623      	movge	r3, r4
 800629e:	460c      	movge	r4, r1
 80062a0:	461f      	movge	r7, r3
 80062a2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80062a6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80062aa:	68a3      	ldr	r3, [r4, #8]
 80062ac:	6861      	ldr	r1, [r4, #4]
 80062ae:	eb0a 0609 	add.w	r6, sl, r9
 80062b2:	42b3      	cmp	r3, r6
 80062b4:	b085      	sub	sp, #20
 80062b6:	bfb8      	it	lt
 80062b8:	3101      	addlt	r1, #1
 80062ba:	f7ff fe93 	bl	8005fe4 <_Balloc>
 80062be:	b930      	cbnz	r0, 80062ce <__multiply+0x42>
 80062c0:	4602      	mov	r2, r0
 80062c2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80062c6:	4b43      	ldr	r3, [pc, #268]	@ (80063d4 <__multiply+0x148>)
 80062c8:	4843      	ldr	r0, [pc, #268]	@ (80063d8 <__multiply+0x14c>)
 80062ca:	f001 fdab 	bl	8007e24 <__assert_func>
 80062ce:	f100 0514 	add.w	r5, r0, #20
 80062d2:	462b      	mov	r3, r5
 80062d4:	2200      	movs	r2, #0
 80062d6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80062da:	4543      	cmp	r3, r8
 80062dc:	d321      	bcc.n	8006322 <__multiply+0x96>
 80062de:	f107 0114 	add.w	r1, r7, #20
 80062e2:	f104 0214 	add.w	r2, r4, #20
 80062e6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80062ea:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80062ee:	9302      	str	r3, [sp, #8]
 80062f0:	1b13      	subs	r3, r2, r4
 80062f2:	3b15      	subs	r3, #21
 80062f4:	f023 0303 	bic.w	r3, r3, #3
 80062f8:	3304      	adds	r3, #4
 80062fa:	f104 0715 	add.w	r7, r4, #21
 80062fe:	42ba      	cmp	r2, r7
 8006300:	bf38      	it	cc
 8006302:	2304      	movcc	r3, #4
 8006304:	9301      	str	r3, [sp, #4]
 8006306:	9b02      	ldr	r3, [sp, #8]
 8006308:	9103      	str	r1, [sp, #12]
 800630a:	428b      	cmp	r3, r1
 800630c:	d80c      	bhi.n	8006328 <__multiply+0x9c>
 800630e:	2e00      	cmp	r6, #0
 8006310:	dd03      	ble.n	800631a <__multiply+0x8e>
 8006312:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006316:	2b00      	cmp	r3, #0
 8006318:	d05a      	beq.n	80063d0 <__multiply+0x144>
 800631a:	6106      	str	r6, [r0, #16]
 800631c:	b005      	add	sp, #20
 800631e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006322:	f843 2b04 	str.w	r2, [r3], #4
 8006326:	e7d8      	b.n	80062da <__multiply+0x4e>
 8006328:	f8b1 a000 	ldrh.w	sl, [r1]
 800632c:	f1ba 0f00 	cmp.w	sl, #0
 8006330:	d023      	beq.n	800637a <__multiply+0xee>
 8006332:	46a9      	mov	r9, r5
 8006334:	f04f 0c00 	mov.w	ip, #0
 8006338:	f104 0e14 	add.w	lr, r4, #20
 800633c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006340:	f8d9 3000 	ldr.w	r3, [r9]
 8006344:	fa1f fb87 	uxth.w	fp, r7
 8006348:	b29b      	uxth	r3, r3
 800634a:	fb0a 330b 	mla	r3, sl, fp, r3
 800634e:	4463      	add	r3, ip
 8006350:	f8d9 c000 	ldr.w	ip, [r9]
 8006354:	0c3f      	lsrs	r7, r7, #16
 8006356:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800635a:	fb0a c707 	mla	r7, sl, r7, ip
 800635e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006362:	b29b      	uxth	r3, r3
 8006364:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006368:	4572      	cmp	r2, lr
 800636a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800636e:	f849 3b04 	str.w	r3, [r9], #4
 8006372:	d8e3      	bhi.n	800633c <__multiply+0xb0>
 8006374:	9b01      	ldr	r3, [sp, #4]
 8006376:	f845 c003 	str.w	ip, [r5, r3]
 800637a:	9b03      	ldr	r3, [sp, #12]
 800637c:	3104      	adds	r1, #4
 800637e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006382:	f1b9 0f00 	cmp.w	r9, #0
 8006386:	d021      	beq.n	80063cc <__multiply+0x140>
 8006388:	46ae      	mov	lr, r5
 800638a:	f04f 0a00 	mov.w	sl, #0
 800638e:	682b      	ldr	r3, [r5, #0]
 8006390:	f104 0c14 	add.w	ip, r4, #20
 8006394:	f8bc b000 	ldrh.w	fp, [ip]
 8006398:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800639c:	b29b      	uxth	r3, r3
 800639e:	fb09 770b 	mla	r7, r9, fp, r7
 80063a2:	4457      	add	r7, sl
 80063a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80063a8:	f84e 3b04 	str.w	r3, [lr], #4
 80063ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80063b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063b4:	f8be 3000 	ldrh.w	r3, [lr]
 80063b8:	4562      	cmp	r2, ip
 80063ba:	fb09 330a 	mla	r3, r9, sl, r3
 80063be:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80063c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063c6:	d8e5      	bhi.n	8006394 <__multiply+0x108>
 80063c8:	9f01      	ldr	r7, [sp, #4]
 80063ca:	51eb      	str	r3, [r5, r7]
 80063cc:	3504      	adds	r5, #4
 80063ce:	e79a      	b.n	8006306 <__multiply+0x7a>
 80063d0:	3e01      	subs	r6, #1
 80063d2:	e79c      	b.n	800630e <__multiply+0x82>
 80063d4:	080088cb 	.word	0x080088cb
 80063d8:	080088dc 	.word	0x080088dc

080063dc <__pow5mult>:
 80063dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063e0:	4615      	mov	r5, r2
 80063e2:	f012 0203 	ands.w	r2, r2, #3
 80063e6:	4607      	mov	r7, r0
 80063e8:	460e      	mov	r6, r1
 80063ea:	d007      	beq.n	80063fc <__pow5mult+0x20>
 80063ec:	4c25      	ldr	r4, [pc, #148]	@ (8006484 <__pow5mult+0xa8>)
 80063ee:	3a01      	subs	r2, #1
 80063f0:	2300      	movs	r3, #0
 80063f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063f6:	f7ff fe57 	bl	80060a8 <__multadd>
 80063fa:	4606      	mov	r6, r0
 80063fc:	10ad      	asrs	r5, r5, #2
 80063fe:	d03d      	beq.n	800647c <__pow5mult+0xa0>
 8006400:	69fc      	ldr	r4, [r7, #28]
 8006402:	b97c      	cbnz	r4, 8006424 <__pow5mult+0x48>
 8006404:	2010      	movs	r0, #16
 8006406:	f7ff fd37 	bl	8005e78 <malloc>
 800640a:	4602      	mov	r2, r0
 800640c:	61f8      	str	r0, [r7, #28]
 800640e:	b928      	cbnz	r0, 800641c <__pow5mult+0x40>
 8006410:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006414:	4b1c      	ldr	r3, [pc, #112]	@ (8006488 <__pow5mult+0xac>)
 8006416:	481d      	ldr	r0, [pc, #116]	@ (800648c <__pow5mult+0xb0>)
 8006418:	f001 fd04 	bl	8007e24 <__assert_func>
 800641c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006420:	6004      	str	r4, [r0, #0]
 8006422:	60c4      	str	r4, [r0, #12]
 8006424:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006428:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800642c:	b94c      	cbnz	r4, 8006442 <__pow5mult+0x66>
 800642e:	f240 2171 	movw	r1, #625	@ 0x271
 8006432:	4638      	mov	r0, r7
 8006434:	f7ff ff14 	bl	8006260 <__i2b>
 8006438:	2300      	movs	r3, #0
 800643a:	4604      	mov	r4, r0
 800643c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006440:	6003      	str	r3, [r0, #0]
 8006442:	f04f 0900 	mov.w	r9, #0
 8006446:	07eb      	lsls	r3, r5, #31
 8006448:	d50a      	bpl.n	8006460 <__pow5mult+0x84>
 800644a:	4631      	mov	r1, r6
 800644c:	4622      	mov	r2, r4
 800644e:	4638      	mov	r0, r7
 8006450:	f7ff ff1c 	bl	800628c <__multiply>
 8006454:	4680      	mov	r8, r0
 8006456:	4631      	mov	r1, r6
 8006458:	4638      	mov	r0, r7
 800645a:	f7ff fe03 	bl	8006064 <_Bfree>
 800645e:	4646      	mov	r6, r8
 8006460:	106d      	asrs	r5, r5, #1
 8006462:	d00b      	beq.n	800647c <__pow5mult+0xa0>
 8006464:	6820      	ldr	r0, [r4, #0]
 8006466:	b938      	cbnz	r0, 8006478 <__pow5mult+0x9c>
 8006468:	4622      	mov	r2, r4
 800646a:	4621      	mov	r1, r4
 800646c:	4638      	mov	r0, r7
 800646e:	f7ff ff0d 	bl	800628c <__multiply>
 8006472:	6020      	str	r0, [r4, #0]
 8006474:	f8c0 9000 	str.w	r9, [r0]
 8006478:	4604      	mov	r4, r0
 800647a:	e7e4      	b.n	8006446 <__pow5mult+0x6a>
 800647c:	4630      	mov	r0, r6
 800647e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006482:	bf00      	nop
 8006484:	08008938 	.word	0x08008938
 8006488:	0800885c 	.word	0x0800885c
 800648c:	080088dc 	.word	0x080088dc

08006490 <__lshift>:
 8006490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006494:	460c      	mov	r4, r1
 8006496:	4607      	mov	r7, r0
 8006498:	4691      	mov	r9, r2
 800649a:	6923      	ldr	r3, [r4, #16]
 800649c:	6849      	ldr	r1, [r1, #4]
 800649e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064a2:	68a3      	ldr	r3, [r4, #8]
 80064a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064a8:	f108 0601 	add.w	r6, r8, #1
 80064ac:	42b3      	cmp	r3, r6
 80064ae:	db0b      	blt.n	80064c8 <__lshift+0x38>
 80064b0:	4638      	mov	r0, r7
 80064b2:	f7ff fd97 	bl	8005fe4 <_Balloc>
 80064b6:	4605      	mov	r5, r0
 80064b8:	b948      	cbnz	r0, 80064ce <__lshift+0x3e>
 80064ba:	4602      	mov	r2, r0
 80064bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80064c0:	4b27      	ldr	r3, [pc, #156]	@ (8006560 <__lshift+0xd0>)
 80064c2:	4828      	ldr	r0, [pc, #160]	@ (8006564 <__lshift+0xd4>)
 80064c4:	f001 fcae 	bl	8007e24 <__assert_func>
 80064c8:	3101      	adds	r1, #1
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	e7ee      	b.n	80064ac <__lshift+0x1c>
 80064ce:	2300      	movs	r3, #0
 80064d0:	f100 0114 	add.w	r1, r0, #20
 80064d4:	f100 0210 	add.w	r2, r0, #16
 80064d8:	4618      	mov	r0, r3
 80064da:	4553      	cmp	r3, sl
 80064dc:	db33      	blt.n	8006546 <__lshift+0xb6>
 80064de:	6920      	ldr	r0, [r4, #16]
 80064e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064e4:	f104 0314 	add.w	r3, r4, #20
 80064e8:	f019 091f 	ands.w	r9, r9, #31
 80064ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80064f4:	d02b      	beq.n	800654e <__lshift+0xbe>
 80064f6:	468a      	mov	sl, r1
 80064f8:	2200      	movs	r2, #0
 80064fa:	f1c9 0e20 	rsb	lr, r9, #32
 80064fe:	6818      	ldr	r0, [r3, #0]
 8006500:	fa00 f009 	lsl.w	r0, r0, r9
 8006504:	4310      	orrs	r0, r2
 8006506:	f84a 0b04 	str.w	r0, [sl], #4
 800650a:	f853 2b04 	ldr.w	r2, [r3], #4
 800650e:	459c      	cmp	ip, r3
 8006510:	fa22 f20e 	lsr.w	r2, r2, lr
 8006514:	d8f3      	bhi.n	80064fe <__lshift+0x6e>
 8006516:	ebac 0304 	sub.w	r3, ip, r4
 800651a:	3b15      	subs	r3, #21
 800651c:	f023 0303 	bic.w	r3, r3, #3
 8006520:	3304      	adds	r3, #4
 8006522:	f104 0015 	add.w	r0, r4, #21
 8006526:	4584      	cmp	ip, r0
 8006528:	bf38      	it	cc
 800652a:	2304      	movcc	r3, #4
 800652c:	50ca      	str	r2, [r1, r3]
 800652e:	b10a      	cbz	r2, 8006534 <__lshift+0xa4>
 8006530:	f108 0602 	add.w	r6, r8, #2
 8006534:	3e01      	subs	r6, #1
 8006536:	4638      	mov	r0, r7
 8006538:	4621      	mov	r1, r4
 800653a:	612e      	str	r6, [r5, #16]
 800653c:	f7ff fd92 	bl	8006064 <_Bfree>
 8006540:	4628      	mov	r0, r5
 8006542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006546:	f842 0f04 	str.w	r0, [r2, #4]!
 800654a:	3301      	adds	r3, #1
 800654c:	e7c5      	b.n	80064da <__lshift+0x4a>
 800654e:	3904      	subs	r1, #4
 8006550:	f853 2b04 	ldr.w	r2, [r3], #4
 8006554:	459c      	cmp	ip, r3
 8006556:	f841 2f04 	str.w	r2, [r1, #4]!
 800655a:	d8f9      	bhi.n	8006550 <__lshift+0xc0>
 800655c:	e7ea      	b.n	8006534 <__lshift+0xa4>
 800655e:	bf00      	nop
 8006560:	080088cb 	.word	0x080088cb
 8006564:	080088dc 	.word	0x080088dc

08006568 <__mcmp>:
 8006568:	4603      	mov	r3, r0
 800656a:	690a      	ldr	r2, [r1, #16]
 800656c:	6900      	ldr	r0, [r0, #16]
 800656e:	b530      	push	{r4, r5, lr}
 8006570:	1a80      	subs	r0, r0, r2
 8006572:	d10e      	bne.n	8006592 <__mcmp+0x2a>
 8006574:	3314      	adds	r3, #20
 8006576:	3114      	adds	r1, #20
 8006578:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800657c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006580:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006584:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006588:	4295      	cmp	r5, r2
 800658a:	d003      	beq.n	8006594 <__mcmp+0x2c>
 800658c:	d205      	bcs.n	800659a <__mcmp+0x32>
 800658e:	f04f 30ff 	mov.w	r0, #4294967295
 8006592:	bd30      	pop	{r4, r5, pc}
 8006594:	42a3      	cmp	r3, r4
 8006596:	d3f3      	bcc.n	8006580 <__mcmp+0x18>
 8006598:	e7fb      	b.n	8006592 <__mcmp+0x2a>
 800659a:	2001      	movs	r0, #1
 800659c:	e7f9      	b.n	8006592 <__mcmp+0x2a>
	...

080065a0 <__mdiff>:
 80065a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a4:	4689      	mov	r9, r1
 80065a6:	4606      	mov	r6, r0
 80065a8:	4611      	mov	r1, r2
 80065aa:	4648      	mov	r0, r9
 80065ac:	4614      	mov	r4, r2
 80065ae:	f7ff ffdb 	bl	8006568 <__mcmp>
 80065b2:	1e05      	subs	r5, r0, #0
 80065b4:	d112      	bne.n	80065dc <__mdiff+0x3c>
 80065b6:	4629      	mov	r1, r5
 80065b8:	4630      	mov	r0, r6
 80065ba:	f7ff fd13 	bl	8005fe4 <_Balloc>
 80065be:	4602      	mov	r2, r0
 80065c0:	b928      	cbnz	r0, 80065ce <__mdiff+0x2e>
 80065c2:	f240 2137 	movw	r1, #567	@ 0x237
 80065c6:	4b3e      	ldr	r3, [pc, #248]	@ (80066c0 <__mdiff+0x120>)
 80065c8:	483e      	ldr	r0, [pc, #248]	@ (80066c4 <__mdiff+0x124>)
 80065ca:	f001 fc2b 	bl	8007e24 <__assert_func>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80065d4:	4610      	mov	r0, r2
 80065d6:	b003      	add	sp, #12
 80065d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065dc:	bfbc      	itt	lt
 80065de:	464b      	movlt	r3, r9
 80065e0:	46a1      	movlt	r9, r4
 80065e2:	4630      	mov	r0, r6
 80065e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80065e8:	bfba      	itte	lt
 80065ea:	461c      	movlt	r4, r3
 80065ec:	2501      	movlt	r5, #1
 80065ee:	2500      	movge	r5, #0
 80065f0:	f7ff fcf8 	bl	8005fe4 <_Balloc>
 80065f4:	4602      	mov	r2, r0
 80065f6:	b918      	cbnz	r0, 8006600 <__mdiff+0x60>
 80065f8:	f240 2145 	movw	r1, #581	@ 0x245
 80065fc:	4b30      	ldr	r3, [pc, #192]	@ (80066c0 <__mdiff+0x120>)
 80065fe:	e7e3      	b.n	80065c8 <__mdiff+0x28>
 8006600:	f100 0b14 	add.w	fp, r0, #20
 8006604:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006608:	f109 0310 	add.w	r3, r9, #16
 800660c:	60c5      	str	r5, [r0, #12]
 800660e:	f04f 0c00 	mov.w	ip, #0
 8006612:	f109 0514 	add.w	r5, r9, #20
 8006616:	46d9      	mov	r9, fp
 8006618:	6926      	ldr	r6, [r4, #16]
 800661a:	f104 0e14 	add.w	lr, r4, #20
 800661e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006622:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006626:	9301      	str	r3, [sp, #4]
 8006628:	9b01      	ldr	r3, [sp, #4]
 800662a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800662e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006632:	b281      	uxth	r1, r0
 8006634:	9301      	str	r3, [sp, #4]
 8006636:	fa1f f38a 	uxth.w	r3, sl
 800663a:	1a5b      	subs	r3, r3, r1
 800663c:	0c00      	lsrs	r0, r0, #16
 800663e:	4463      	add	r3, ip
 8006640:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006644:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006648:	b29b      	uxth	r3, r3
 800664a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800664e:	4576      	cmp	r6, lr
 8006650:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006654:	f849 3b04 	str.w	r3, [r9], #4
 8006658:	d8e6      	bhi.n	8006628 <__mdiff+0x88>
 800665a:	1b33      	subs	r3, r6, r4
 800665c:	3b15      	subs	r3, #21
 800665e:	f023 0303 	bic.w	r3, r3, #3
 8006662:	3415      	adds	r4, #21
 8006664:	3304      	adds	r3, #4
 8006666:	42a6      	cmp	r6, r4
 8006668:	bf38      	it	cc
 800666a:	2304      	movcc	r3, #4
 800666c:	441d      	add	r5, r3
 800666e:	445b      	add	r3, fp
 8006670:	461e      	mov	r6, r3
 8006672:	462c      	mov	r4, r5
 8006674:	4544      	cmp	r4, r8
 8006676:	d30e      	bcc.n	8006696 <__mdiff+0xf6>
 8006678:	f108 0103 	add.w	r1, r8, #3
 800667c:	1b49      	subs	r1, r1, r5
 800667e:	f021 0103 	bic.w	r1, r1, #3
 8006682:	3d03      	subs	r5, #3
 8006684:	45a8      	cmp	r8, r5
 8006686:	bf38      	it	cc
 8006688:	2100      	movcc	r1, #0
 800668a:	440b      	add	r3, r1
 800668c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006690:	b199      	cbz	r1, 80066ba <__mdiff+0x11a>
 8006692:	6117      	str	r7, [r2, #16]
 8006694:	e79e      	b.n	80065d4 <__mdiff+0x34>
 8006696:	46e6      	mov	lr, ip
 8006698:	f854 1b04 	ldr.w	r1, [r4], #4
 800669c:	fa1f fc81 	uxth.w	ip, r1
 80066a0:	44f4      	add	ip, lr
 80066a2:	0c08      	lsrs	r0, r1, #16
 80066a4:	4471      	add	r1, lr
 80066a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80066aa:	b289      	uxth	r1, r1
 80066ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80066b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80066b4:	f846 1b04 	str.w	r1, [r6], #4
 80066b8:	e7dc      	b.n	8006674 <__mdiff+0xd4>
 80066ba:	3f01      	subs	r7, #1
 80066bc:	e7e6      	b.n	800668c <__mdiff+0xec>
 80066be:	bf00      	nop
 80066c0:	080088cb 	.word	0x080088cb
 80066c4:	080088dc 	.word	0x080088dc

080066c8 <__ulp>:
 80066c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006704 <__ulp+0x3c>)
 80066ca:	400b      	ands	r3, r1
 80066cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	dc08      	bgt.n	80066e6 <__ulp+0x1e>
 80066d4:	425b      	negs	r3, r3
 80066d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80066da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80066de:	da04      	bge.n	80066ea <__ulp+0x22>
 80066e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80066e4:	4113      	asrs	r3, r2
 80066e6:	2200      	movs	r2, #0
 80066e8:	e008      	b.n	80066fc <__ulp+0x34>
 80066ea:	f1a2 0314 	sub.w	r3, r2, #20
 80066ee:	2b1e      	cmp	r3, #30
 80066f0:	bfd6      	itet	le
 80066f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80066f6:	2201      	movgt	r2, #1
 80066f8:	40da      	lsrle	r2, r3
 80066fa:	2300      	movs	r3, #0
 80066fc:	4619      	mov	r1, r3
 80066fe:	4610      	mov	r0, r2
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	7ff00000 	.word	0x7ff00000

08006708 <__b2d>:
 8006708:	6902      	ldr	r2, [r0, #16]
 800670a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670c:	f100 0614 	add.w	r6, r0, #20
 8006710:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006714:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006718:	4f1e      	ldr	r7, [pc, #120]	@ (8006794 <__b2d+0x8c>)
 800671a:	4620      	mov	r0, r4
 800671c:	f7ff fd54 	bl	80061c8 <__hi0bits>
 8006720:	4603      	mov	r3, r0
 8006722:	f1c0 0020 	rsb	r0, r0, #32
 8006726:	2b0a      	cmp	r3, #10
 8006728:	f1a2 0504 	sub.w	r5, r2, #4
 800672c:	6008      	str	r0, [r1, #0]
 800672e:	dc12      	bgt.n	8006756 <__b2d+0x4e>
 8006730:	42ae      	cmp	r6, r5
 8006732:	bf2c      	ite	cs
 8006734:	2200      	movcs	r2, #0
 8006736:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800673a:	f1c3 0c0b 	rsb	ip, r3, #11
 800673e:	3315      	adds	r3, #21
 8006740:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006744:	fa04 f303 	lsl.w	r3, r4, r3
 8006748:	fa22 f20c 	lsr.w	r2, r2, ip
 800674c:	ea4e 0107 	orr.w	r1, lr, r7
 8006750:	431a      	orrs	r2, r3
 8006752:	4610      	mov	r0, r2
 8006754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006756:	42ae      	cmp	r6, r5
 8006758:	bf36      	itet	cc
 800675a:	f1a2 0508 	subcc.w	r5, r2, #8
 800675e:	2200      	movcs	r2, #0
 8006760:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006764:	3b0b      	subs	r3, #11
 8006766:	d012      	beq.n	800678e <__b2d+0x86>
 8006768:	f1c3 0720 	rsb	r7, r3, #32
 800676c:	fa22 f107 	lsr.w	r1, r2, r7
 8006770:	409c      	lsls	r4, r3
 8006772:	430c      	orrs	r4, r1
 8006774:	42b5      	cmp	r5, r6
 8006776:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800677a:	bf94      	ite	ls
 800677c:	2400      	movls	r4, #0
 800677e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006782:	409a      	lsls	r2, r3
 8006784:	40fc      	lsrs	r4, r7
 8006786:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800678a:	4322      	orrs	r2, r4
 800678c:	e7e1      	b.n	8006752 <__b2d+0x4a>
 800678e:	ea44 0107 	orr.w	r1, r4, r7
 8006792:	e7de      	b.n	8006752 <__b2d+0x4a>
 8006794:	3ff00000 	.word	0x3ff00000

08006798 <__d2b>:
 8006798:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800679c:	2101      	movs	r1, #1
 800679e:	4690      	mov	r8, r2
 80067a0:	4699      	mov	r9, r3
 80067a2:	9e08      	ldr	r6, [sp, #32]
 80067a4:	f7ff fc1e 	bl	8005fe4 <_Balloc>
 80067a8:	4604      	mov	r4, r0
 80067aa:	b930      	cbnz	r0, 80067ba <__d2b+0x22>
 80067ac:	4602      	mov	r2, r0
 80067ae:	f240 310f 	movw	r1, #783	@ 0x30f
 80067b2:	4b23      	ldr	r3, [pc, #140]	@ (8006840 <__d2b+0xa8>)
 80067b4:	4823      	ldr	r0, [pc, #140]	@ (8006844 <__d2b+0xac>)
 80067b6:	f001 fb35 	bl	8007e24 <__assert_func>
 80067ba:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80067be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067c2:	b10d      	cbz	r5, 80067c8 <__d2b+0x30>
 80067c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067c8:	9301      	str	r3, [sp, #4]
 80067ca:	f1b8 0300 	subs.w	r3, r8, #0
 80067ce:	d024      	beq.n	800681a <__d2b+0x82>
 80067d0:	4668      	mov	r0, sp
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	f7ff fd17 	bl	8006206 <__lo0bits>
 80067d8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80067dc:	b1d8      	cbz	r0, 8006816 <__d2b+0x7e>
 80067de:	f1c0 0320 	rsb	r3, r0, #32
 80067e2:	fa02 f303 	lsl.w	r3, r2, r3
 80067e6:	430b      	orrs	r3, r1
 80067e8:	40c2      	lsrs	r2, r0
 80067ea:	6163      	str	r3, [r4, #20]
 80067ec:	9201      	str	r2, [sp, #4]
 80067ee:	9b01      	ldr	r3, [sp, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	bf0c      	ite	eq
 80067f4:	2201      	moveq	r2, #1
 80067f6:	2202      	movne	r2, #2
 80067f8:	61a3      	str	r3, [r4, #24]
 80067fa:	6122      	str	r2, [r4, #16]
 80067fc:	b1ad      	cbz	r5, 800682a <__d2b+0x92>
 80067fe:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006802:	4405      	add	r5, r0
 8006804:	6035      	str	r5, [r6, #0]
 8006806:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800680a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800680c:	6018      	str	r0, [r3, #0]
 800680e:	4620      	mov	r0, r4
 8006810:	b002      	add	sp, #8
 8006812:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006816:	6161      	str	r1, [r4, #20]
 8006818:	e7e9      	b.n	80067ee <__d2b+0x56>
 800681a:	a801      	add	r0, sp, #4
 800681c:	f7ff fcf3 	bl	8006206 <__lo0bits>
 8006820:	9b01      	ldr	r3, [sp, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	6163      	str	r3, [r4, #20]
 8006826:	3020      	adds	r0, #32
 8006828:	e7e7      	b.n	80067fa <__d2b+0x62>
 800682a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800682e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006832:	6030      	str	r0, [r6, #0]
 8006834:	6918      	ldr	r0, [r3, #16]
 8006836:	f7ff fcc7 	bl	80061c8 <__hi0bits>
 800683a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800683e:	e7e4      	b.n	800680a <__d2b+0x72>
 8006840:	080088cb 	.word	0x080088cb
 8006844:	080088dc 	.word	0x080088dc

08006848 <__ratio>:
 8006848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	b085      	sub	sp, #20
 800684e:	e9cd 1000 	strd	r1, r0, [sp]
 8006852:	a902      	add	r1, sp, #8
 8006854:	f7ff ff58 	bl	8006708 <__b2d>
 8006858:	468b      	mov	fp, r1
 800685a:	4606      	mov	r6, r0
 800685c:	460f      	mov	r7, r1
 800685e:	9800      	ldr	r0, [sp, #0]
 8006860:	a903      	add	r1, sp, #12
 8006862:	f7ff ff51 	bl	8006708 <__b2d>
 8006866:	460d      	mov	r5, r1
 8006868:	9b01      	ldr	r3, [sp, #4]
 800686a:	4689      	mov	r9, r1
 800686c:	6919      	ldr	r1, [r3, #16]
 800686e:	9b00      	ldr	r3, [sp, #0]
 8006870:	4604      	mov	r4, r0
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	4630      	mov	r0, r6
 8006876:	1ac9      	subs	r1, r1, r3
 8006878:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006882:	2b00      	cmp	r3, #0
 8006884:	bfcd      	iteet	gt
 8006886:	463a      	movgt	r2, r7
 8006888:	462a      	movle	r2, r5
 800688a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800688e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006892:	bfd8      	it	le
 8006894:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006898:	464b      	mov	r3, r9
 800689a:	4622      	mov	r2, r4
 800689c:	4659      	mov	r1, fp
 800689e:	f7f9 ff45 	bl	800072c <__aeabi_ddiv>
 80068a2:	b005      	add	sp, #20
 80068a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080068a8 <__copybits>:
 80068a8:	3901      	subs	r1, #1
 80068aa:	b570      	push	{r4, r5, r6, lr}
 80068ac:	1149      	asrs	r1, r1, #5
 80068ae:	6914      	ldr	r4, [r2, #16]
 80068b0:	3101      	adds	r1, #1
 80068b2:	f102 0314 	add.w	r3, r2, #20
 80068b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80068ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80068be:	1f05      	subs	r5, r0, #4
 80068c0:	42a3      	cmp	r3, r4
 80068c2:	d30c      	bcc.n	80068de <__copybits+0x36>
 80068c4:	1aa3      	subs	r3, r4, r2
 80068c6:	3b11      	subs	r3, #17
 80068c8:	f023 0303 	bic.w	r3, r3, #3
 80068cc:	3211      	adds	r2, #17
 80068ce:	42a2      	cmp	r2, r4
 80068d0:	bf88      	it	hi
 80068d2:	2300      	movhi	r3, #0
 80068d4:	4418      	add	r0, r3
 80068d6:	2300      	movs	r3, #0
 80068d8:	4288      	cmp	r0, r1
 80068da:	d305      	bcc.n	80068e8 <__copybits+0x40>
 80068dc:	bd70      	pop	{r4, r5, r6, pc}
 80068de:	f853 6b04 	ldr.w	r6, [r3], #4
 80068e2:	f845 6f04 	str.w	r6, [r5, #4]!
 80068e6:	e7eb      	b.n	80068c0 <__copybits+0x18>
 80068e8:	f840 3b04 	str.w	r3, [r0], #4
 80068ec:	e7f4      	b.n	80068d8 <__copybits+0x30>

080068ee <__any_on>:
 80068ee:	f100 0214 	add.w	r2, r0, #20
 80068f2:	6900      	ldr	r0, [r0, #16]
 80068f4:	114b      	asrs	r3, r1, #5
 80068f6:	4298      	cmp	r0, r3
 80068f8:	b510      	push	{r4, lr}
 80068fa:	db11      	blt.n	8006920 <__any_on+0x32>
 80068fc:	dd0a      	ble.n	8006914 <__any_on+0x26>
 80068fe:	f011 011f 	ands.w	r1, r1, #31
 8006902:	d007      	beq.n	8006914 <__any_on+0x26>
 8006904:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006908:	fa24 f001 	lsr.w	r0, r4, r1
 800690c:	fa00 f101 	lsl.w	r1, r0, r1
 8006910:	428c      	cmp	r4, r1
 8006912:	d10b      	bne.n	800692c <__any_on+0x3e>
 8006914:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006918:	4293      	cmp	r3, r2
 800691a:	d803      	bhi.n	8006924 <__any_on+0x36>
 800691c:	2000      	movs	r0, #0
 800691e:	bd10      	pop	{r4, pc}
 8006920:	4603      	mov	r3, r0
 8006922:	e7f7      	b.n	8006914 <__any_on+0x26>
 8006924:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006928:	2900      	cmp	r1, #0
 800692a:	d0f5      	beq.n	8006918 <__any_on+0x2a>
 800692c:	2001      	movs	r0, #1
 800692e:	e7f6      	b.n	800691e <__any_on+0x30>

08006930 <sulp>:
 8006930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006934:	460f      	mov	r7, r1
 8006936:	4690      	mov	r8, r2
 8006938:	f7ff fec6 	bl	80066c8 <__ulp>
 800693c:	4604      	mov	r4, r0
 800693e:	460d      	mov	r5, r1
 8006940:	f1b8 0f00 	cmp.w	r8, #0
 8006944:	d011      	beq.n	800696a <sulp+0x3a>
 8006946:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800694a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800694e:	2b00      	cmp	r3, #0
 8006950:	dd0b      	ble.n	800696a <sulp+0x3a>
 8006952:	2400      	movs	r4, #0
 8006954:	051b      	lsls	r3, r3, #20
 8006956:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800695a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800695e:	4622      	mov	r2, r4
 8006960:	462b      	mov	r3, r5
 8006962:	f7f9 fdb9 	bl	80004d8 <__aeabi_dmul>
 8006966:	4604      	mov	r4, r0
 8006968:	460d      	mov	r5, r1
 800696a:	4620      	mov	r0, r4
 800696c:	4629      	mov	r1, r5
 800696e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006972:	0000      	movs	r0, r0
 8006974:	0000      	movs	r0, r0
	...

08006978 <_strtod_l>:
 8006978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697c:	b09f      	sub	sp, #124	@ 0x7c
 800697e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006980:	2200      	movs	r2, #0
 8006982:	460c      	mov	r4, r1
 8006984:	921a      	str	r2, [sp, #104]	@ 0x68
 8006986:	f04f 0a00 	mov.w	sl, #0
 800698a:	f04f 0b00 	mov.w	fp, #0
 800698e:	460a      	mov	r2, r1
 8006990:	9005      	str	r0, [sp, #20]
 8006992:	9219      	str	r2, [sp, #100]	@ 0x64
 8006994:	7811      	ldrb	r1, [r2, #0]
 8006996:	292b      	cmp	r1, #43	@ 0x2b
 8006998:	d048      	beq.n	8006a2c <_strtod_l+0xb4>
 800699a:	d836      	bhi.n	8006a0a <_strtod_l+0x92>
 800699c:	290d      	cmp	r1, #13
 800699e:	d830      	bhi.n	8006a02 <_strtod_l+0x8a>
 80069a0:	2908      	cmp	r1, #8
 80069a2:	d830      	bhi.n	8006a06 <_strtod_l+0x8e>
 80069a4:	2900      	cmp	r1, #0
 80069a6:	d039      	beq.n	8006a1c <_strtod_l+0xa4>
 80069a8:	2200      	movs	r2, #0
 80069aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80069ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80069ae:	782a      	ldrb	r2, [r5, #0]
 80069b0:	2a30      	cmp	r2, #48	@ 0x30
 80069b2:	f040 80b1 	bne.w	8006b18 <_strtod_l+0x1a0>
 80069b6:	786a      	ldrb	r2, [r5, #1]
 80069b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80069bc:	2a58      	cmp	r2, #88	@ 0x58
 80069be:	d16c      	bne.n	8006a9a <_strtod_l+0x122>
 80069c0:	9302      	str	r3, [sp, #8]
 80069c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069c4:	4a8e      	ldr	r2, [pc, #568]	@ (8006c00 <_strtod_l+0x288>)
 80069c6:	9301      	str	r3, [sp, #4]
 80069c8:	ab1a      	add	r3, sp, #104	@ 0x68
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	9805      	ldr	r0, [sp, #20]
 80069ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80069d0:	a919      	add	r1, sp, #100	@ 0x64
 80069d2:	f001 fac1 	bl	8007f58 <__gethex>
 80069d6:	f010 060f 	ands.w	r6, r0, #15
 80069da:	4604      	mov	r4, r0
 80069dc:	d005      	beq.n	80069ea <_strtod_l+0x72>
 80069de:	2e06      	cmp	r6, #6
 80069e0:	d126      	bne.n	8006a30 <_strtod_l+0xb8>
 80069e2:	2300      	movs	r3, #0
 80069e4:	3501      	adds	r5, #1
 80069e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80069e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f040 8584 	bne.w	80074fa <_strtod_l+0xb82>
 80069f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069f4:	b1bb      	cbz	r3, 8006a26 <_strtod_l+0xae>
 80069f6:	4650      	mov	r0, sl
 80069f8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80069fc:	b01f      	add	sp, #124	@ 0x7c
 80069fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a02:	2920      	cmp	r1, #32
 8006a04:	d1d0      	bne.n	80069a8 <_strtod_l+0x30>
 8006a06:	3201      	adds	r2, #1
 8006a08:	e7c3      	b.n	8006992 <_strtod_l+0x1a>
 8006a0a:	292d      	cmp	r1, #45	@ 0x2d
 8006a0c:	d1cc      	bne.n	80069a8 <_strtod_l+0x30>
 8006a0e:	2101      	movs	r1, #1
 8006a10:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006a12:	1c51      	adds	r1, r2, #1
 8006a14:	9119      	str	r1, [sp, #100]	@ 0x64
 8006a16:	7852      	ldrb	r2, [r2, #1]
 8006a18:	2a00      	cmp	r2, #0
 8006a1a:	d1c7      	bne.n	80069ac <_strtod_l+0x34>
 8006a1c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006a1e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f040 8568 	bne.w	80074f6 <_strtod_l+0xb7e>
 8006a26:	4650      	mov	r0, sl
 8006a28:	4659      	mov	r1, fp
 8006a2a:	e7e7      	b.n	80069fc <_strtod_l+0x84>
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	e7ef      	b.n	8006a10 <_strtod_l+0x98>
 8006a30:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006a32:	b13a      	cbz	r2, 8006a44 <_strtod_l+0xcc>
 8006a34:	2135      	movs	r1, #53	@ 0x35
 8006a36:	a81c      	add	r0, sp, #112	@ 0x70
 8006a38:	f7ff ff36 	bl	80068a8 <__copybits>
 8006a3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a3e:	9805      	ldr	r0, [sp, #20]
 8006a40:	f7ff fb10 	bl	8006064 <_Bfree>
 8006a44:	3e01      	subs	r6, #1
 8006a46:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006a48:	2e04      	cmp	r6, #4
 8006a4a:	d806      	bhi.n	8006a5a <_strtod_l+0xe2>
 8006a4c:	e8df f006 	tbb	[pc, r6]
 8006a50:	201d0314 	.word	0x201d0314
 8006a54:	14          	.byte	0x14
 8006a55:	00          	.byte	0x00
 8006a56:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006a5a:	05e1      	lsls	r1, r4, #23
 8006a5c:	bf48      	it	mi
 8006a5e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006a62:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006a66:	0d1b      	lsrs	r3, r3, #20
 8006a68:	051b      	lsls	r3, r3, #20
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1bd      	bne.n	80069ea <_strtod_l+0x72>
 8006a6e:	f7fe fb1d 	bl	80050ac <__errno>
 8006a72:	2322      	movs	r3, #34	@ 0x22
 8006a74:	6003      	str	r3, [r0, #0]
 8006a76:	e7b8      	b.n	80069ea <_strtod_l+0x72>
 8006a78:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006a7c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006a80:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006a84:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006a88:	e7e7      	b.n	8006a5a <_strtod_l+0xe2>
 8006a8a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8006c04 <_strtod_l+0x28c>
 8006a8e:	e7e4      	b.n	8006a5a <_strtod_l+0xe2>
 8006a90:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006a94:	f04f 3aff 	mov.w	sl, #4294967295
 8006a98:	e7df      	b.n	8006a5a <_strtod_l+0xe2>
 8006a9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a9c:	1c5a      	adds	r2, r3, #1
 8006a9e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006aa0:	785b      	ldrb	r3, [r3, #1]
 8006aa2:	2b30      	cmp	r3, #48	@ 0x30
 8006aa4:	d0f9      	beq.n	8006a9a <_strtod_l+0x122>
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d09f      	beq.n	80069ea <_strtod_l+0x72>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006aae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ab0:	220a      	movs	r2, #10
 8006ab2:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	461f      	mov	r7, r3
 8006ab8:	9308      	str	r3, [sp, #32]
 8006aba:	930a      	str	r3, [sp, #40]	@ 0x28
 8006abc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006abe:	7805      	ldrb	r5, [r0, #0]
 8006ac0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006ac4:	b2d9      	uxtb	r1, r3
 8006ac6:	2909      	cmp	r1, #9
 8006ac8:	d928      	bls.n	8006b1c <_strtod_l+0x1a4>
 8006aca:	2201      	movs	r2, #1
 8006acc:	494e      	ldr	r1, [pc, #312]	@ (8006c08 <_strtod_l+0x290>)
 8006ace:	f001 f981 	bl	8007dd4 <strncmp>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	d032      	beq.n	8006b3c <_strtod_l+0x1c4>
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	462a      	mov	r2, r5
 8006ada:	4681      	mov	r9, r0
 8006adc:	463d      	mov	r5, r7
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2a65      	cmp	r2, #101	@ 0x65
 8006ae2:	d001      	beq.n	8006ae8 <_strtod_l+0x170>
 8006ae4:	2a45      	cmp	r2, #69	@ 0x45
 8006ae6:	d114      	bne.n	8006b12 <_strtod_l+0x19a>
 8006ae8:	b91d      	cbnz	r5, 8006af2 <_strtod_l+0x17a>
 8006aea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006aec:	4302      	orrs	r2, r0
 8006aee:	d095      	beq.n	8006a1c <_strtod_l+0xa4>
 8006af0:	2500      	movs	r5, #0
 8006af2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006af4:	1c62      	adds	r2, r4, #1
 8006af6:	9219      	str	r2, [sp, #100]	@ 0x64
 8006af8:	7862      	ldrb	r2, [r4, #1]
 8006afa:	2a2b      	cmp	r2, #43	@ 0x2b
 8006afc:	d077      	beq.n	8006bee <_strtod_l+0x276>
 8006afe:	2a2d      	cmp	r2, #45	@ 0x2d
 8006b00:	d07b      	beq.n	8006bfa <_strtod_l+0x282>
 8006b02:	f04f 0c00 	mov.w	ip, #0
 8006b06:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006b0a:	2909      	cmp	r1, #9
 8006b0c:	f240 8082 	bls.w	8006c14 <_strtod_l+0x29c>
 8006b10:	9419      	str	r4, [sp, #100]	@ 0x64
 8006b12:	f04f 0800 	mov.w	r8, #0
 8006b16:	e0a2      	b.n	8006c5e <_strtod_l+0x2e6>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	e7c7      	b.n	8006aac <_strtod_l+0x134>
 8006b1c:	2f08      	cmp	r7, #8
 8006b1e:	bfd5      	itete	le
 8006b20:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006b22:	9908      	ldrgt	r1, [sp, #32]
 8006b24:	fb02 3301 	mlale	r3, r2, r1, r3
 8006b28:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006b2c:	f100 0001 	add.w	r0, r0, #1
 8006b30:	bfd4      	ite	le
 8006b32:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006b34:	9308      	strgt	r3, [sp, #32]
 8006b36:	3701      	adds	r7, #1
 8006b38:	9019      	str	r0, [sp, #100]	@ 0x64
 8006b3a:	e7bf      	b.n	8006abc <_strtod_l+0x144>
 8006b3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b42:	785a      	ldrb	r2, [r3, #1]
 8006b44:	b37f      	cbz	r7, 8006ba6 <_strtod_l+0x22e>
 8006b46:	4681      	mov	r9, r0
 8006b48:	463d      	mov	r5, r7
 8006b4a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006b4e:	2b09      	cmp	r3, #9
 8006b50:	d912      	bls.n	8006b78 <_strtod_l+0x200>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e7c4      	b.n	8006ae0 <_strtod_l+0x168>
 8006b56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b58:	3001      	adds	r0, #1
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b5e:	785a      	ldrb	r2, [r3, #1]
 8006b60:	2a30      	cmp	r2, #48	@ 0x30
 8006b62:	d0f8      	beq.n	8006b56 <_strtod_l+0x1de>
 8006b64:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	f200 84cb 	bhi.w	8007504 <_strtod_l+0xb8c>
 8006b6e:	4681      	mov	r9, r0
 8006b70:	2000      	movs	r0, #0
 8006b72:	4605      	mov	r5, r0
 8006b74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b76:	930c      	str	r3, [sp, #48]	@ 0x30
 8006b78:	3a30      	subs	r2, #48	@ 0x30
 8006b7a:	f100 0301 	add.w	r3, r0, #1
 8006b7e:	d02a      	beq.n	8006bd6 <_strtod_l+0x25e>
 8006b80:	4499      	add	r9, r3
 8006b82:	210a      	movs	r1, #10
 8006b84:	462b      	mov	r3, r5
 8006b86:	eb00 0c05 	add.w	ip, r0, r5
 8006b8a:	4563      	cmp	r3, ip
 8006b8c:	d10d      	bne.n	8006baa <_strtod_l+0x232>
 8006b8e:	1c69      	adds	r1, r5, #1
 8006b90:	4401      	add	r1, r0
 8006b92:	4428      	add	r0, r5
 8006b94:	2808      	cmp	r0, #8
 8006b96:	dc16      	bgt.n	8006bc6 <_strtod_l+0x24e>
 8006b98:	230a      	movs	r3, #10
 8006b9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006b9c:	fb03 2300 	mla	r3, r3, r0, r2
 8006ba0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e018      	b.n	8006bd8 <_strtod_l+0x260>
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	e7da      	b.n	8006b60 <_strtod_l+0x1e8>
 8006baa:	2b08      	cmp	r3, #8
 8006bac:	f103 0301 	add.w	r3, r3, #1
 8006bb0:	dc03      	bgt.n	8006bba <_strtod_l+0x242>
 8006bb2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006bb4:	434e      	muls	r6, r1
 8006bb6:	960a      	str	r6, [sp, #40]	@ 0x28
 8006bb8:	e7e7      	b.n	8006b8a <_strtod_l+0x212>
 8006bba:	2b10      	cmp	r3, #16
 8006bbc:	bfde      	ittt	le
 8006bbe:	9e08      	ldrle	r6, [sp, #32]
 8006bc0:	434e      	mulle	r6, r1
 8006bc2:	9608      	strle	r6, [sp, #32]
 8006bc4:	e7e1      	b.n	8006b8a <_strtod_l+0x212>
 8006bc6:	280f      	cmp	r0, #15
 8006bc8:	dceb      	bgt.n	8006ba2 <_strtod_l+0x22a>
 8006bca:	230a      	movs	r3, #10
 8006bcc:	9808      	ldr	r0, [sp, #32]
 8006bce:	fb03 2300 	mla	r3, r3, r0, r2
 8006bd2:	9308      	str	r3, [sp, #32]
 8006bd4:	e7e5      	b.n	8006ba2 <_strtod_l+0x22a>
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006bda:	460d      	mov	r5, r1
 8006bdc:	1c50      	adds	r0, r2, #1
 8006bde:	9019      	str	r0, [sp, #100]	@ 0x64
 8006be0:	7852      	ldrb	r2, [r2, #1]
 8006be2:	4618      	mov	r0, r3
 8006be4:	e7b1      	b.n	8006b4a <_strtod_l+0x1d2>
 8006be6:	f04f 0900 	mov.w	r9, #0
 8006bea:	2301      	movs	r3, #1
 8006bec:	e77d      	b.n	8006aea <_strtod_l+0x172>
 8006bee:	f04f 0c00 	mov.w	ip, #0
 8006bf2:	1ca2      	adds	r2, r4, #2
 8006bf4:	9219      	str	r2, [sp, #100]	@ 0x64
 8006bf6:	78a2      	ldrb	r2, [r4, #2]
 8006bf8:	e785      	b.n	8006b06 <_strtod_l+0x18e>
 8006bfa:	f04f 0c01 	mov.w	ip, #1
 8006bfe:	e7f8      	b.n	8006bf2 <_strtod_l+0x27a>
 8006c00:	08008a50 	.word	0x08008a50
 8006c04:	7ff00000 	.word	0x7ff00000
 8006c08:	08008a38 	.word	0x08008a38
 8006c0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006c0e:	1c51      	adds	r1, r2, #1
 8006c10:	9119      	str	r1, [sp, #100]	@ 0x64
 8006c12:	7852      	ldrb	r2, [r2, #1]
 8006c14:	2a30      	cmp	r2, #48	@ 0x30
 8006c16:	d0f9      	beq.n	8006c0c <_strtod_l+0x294>
 8006c18:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006c1c:	2908      	cmp	r1, #8
 8006c1e:	f63f af78 	bhi.w	8006b12 <_strtod_l+0x19a>
 8006c22:	f04f 080a 	mov.w	r8, #10
 8006c26:	3a30      	subs	r2, #48	@ 0x30
 8006c28:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006c2c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006c2e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006c30:	1c56      	adds	r6, r2, #1
 8006c32:	9619      	str	r6, [sp, #100]	@ 0x64
 8006c34:	7852      	ldrb	r2, [r2, #1]
 8006c36:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006c3a:	f1be 0f09 	cmp.w	lr, #9
 8006c3e:	d939      	bls.n	8006cb4 <_strtod_l+0x33c>
 8006c40:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006c42:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006c46:	1a76      	subs	r6, r6, r1
 8006c48:	2e08      	cmp	r6, #8
 8006c4a:	dc03      	bgt.n	8006c54 <_strtod_l+0x2dc>
 8006c4c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006c4e:	4588      	cmp	r8, r1
 8006c50:	bfa8      	it	ge
 8006c52:	4688      	movge	r8, r1
 8006c54:	f1bc 0f00 	cmp.w	ip, #0
 8006c58:	d001      	beq.n	8006c5e <_strtod_l+0x2e6>
 8006c5a:	f1c8 0800 	rsb	r8, r8, #0
 8006c5e:	2d00      	cmp	r5, #0
 8006c60:	d14e      	bne.n	8006d00 <_strtod_l+0x388>
 8006c62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c64:	4308      	orrs	r0, r1
 8006c66:	f47f aec0 	bne.w	80069ea <_strtod_l+0x72>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f47f aed6 	bne.w	8006a1c <_strtod_l+0xa4>
 8006c70:	2a69      	cmp	r2, #105	@ 0x69
 8006c72:	d028      	beq.n	8006cc6 <_strtod_l+0x34e>
 8006c74:	dc25      	bgt.n	8006cc2 <_strtod_l+0x34a>
 8006c76:	2a49      	cmp	r2, #73	@ 0x49
 8006c78:	d025      	beq.n	8006cc6 <_strtod_l+0x34e>
 8006c7a:	2a4e      	cmp	r2, #78	@ 0x4e
 8006c7c:	f47f aece 	bne.w	8006a1c <_strtod_l+0xa4>
 8006c80:	499a      	ldr	r1, [pc, #616]	@ (8006eec <_strtod_l+0x574>)
 8006c82:	a819      	add	r0, sp, #100	@ 0x64
 8006c84:	f001 fb8a 	bl	800839c <__match>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	f43f aec7 	beq.w	8006a1c <_strtod_l+0xa4>
 8006c8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	2b28      	cmp	r3, #40	@ 0x28
 8006c94:	d12e      	bne.n	8006cf4 <_strtod_l+0x37c>
 8006c96:	4996      	ldr	r1, [pc, #600]	@ (8006ef0 <_strtod_l+0x578>)
 8006c98:	aa1c      	add	r2, sp, #112	@ 0x70
 8006c9a:	a819      	add	r0, sp, #100	@ 0x64
 8006c9c:	f001 fb92 	bl	80083c4 <__hexnan>
 8006ca0:	2805      	cmp	r0, #5
 8006ca2:	d127      	bne.n	8006cf4 <_strtod_l+0x37c>
 8006ca4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006ca6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006caa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006cae:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006cb2:	e69a      	b.n	80069ea <_strtod_l+0x72>
 8006cb4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006cb6:	fb08 2101 	mla	r1, r8, r1, r2
 8006cba:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006cbe:	920e      	str	r2, [sp, #56]	@ 0x38
 8006cc0:	e7b5      	b.n	8006c2e <_strtod_l+0x2b6>
 8006cc2:	2a6e      	cmp	r2, #110	@ 0x6e
 8006cc4:	e7da      	b.n	8006c7c <_strtod_l+0x304>
 8006cc6:	498b      	ldr	r1, [pc, #556]	@ (8006ef4 <_strtod_l+0x57c>)
 8006cc8:	a819      	add	r0, sp, #100	@ 0x64
 8006cca:	f001 fb67 	bl	800839c <__match>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f43f aea4 	beq.w	8006a1c <_strtod_l+0xa4>
 8006cd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cd6:	4988      	ldr	r1, [pc, #544]	@ (8006ef8 <_strtod_l+0x580>)
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	a819      	add	r0, sp, #100	@ 0x64
 8006cdc:	9319      	str	r3, [sp, #100]	@ 0x64
 8006cde:	f001 fb5d 	bl	800839c <__match>
 8006ce2:	b910      	cbnz	r0, 8006cea <_strtod_l+0x372>
 8006ce4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	9319      	str	r3, [sp, #100]	@ 0x64
 8006cea:	f04f 0a00 	mov.w	sl, #0
 8006cee:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006efc <_strtod_l+0x584>
 8006cf2:	e67a      	b.n	80069ea <_strtod_l+0x72>
 8006cf4:	4882      	ldr	r0, [pc, #520]	@ (8006f00 <_strtod_l+0x588>)
 8006cf6:	f001 f88f 	bl	8007e18 <nan>
 8006cfa:	4682      	mov	sl, r0
 8006cfc:	468b      	mov	fp, r1
 8006cfe:	e674      	b.n	80069ea <_strtod_l+0x72>
 8006d00:	eba8 0309 	sub.w	r3, r8, r9
 8006d04:	2f00      	cmp	r7, #0
 8006d06:	bf08      	it	eq
 8006d08:	462f      	moveq	r7, r5
 8006d0a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006d0c:	2d10      	cmp	r5, #16
 8006d0e:	462c      	mov	r4, r5
 8006d10:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d12:	bfa8      	it	ge
 8006d14:	2410      	movge	r4, #16
 8006d16:	f7f9 fb65 	bl	80003e4 <__aeabi_ui2d>
 8006d1a:	2d09      	cmp	r5, #9
 8006d1c:	4682      	mov	sl, r0
 8006d1e:	468b      	mov	fp, r1
 8006d20:	dc11      	bgt.n	8006d46 <_strtod_l+0x3ce>
 8006d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f43f ae60 	beq.w	80069ea <_strtod_l+0x72>
 8006d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d2c:	dd76      	ble.n	8006e1c <_strtod_l+0x4a4>
 8006d2e:	2b16      	cmp	r3, #22
 8006d30:	dc5d      	bgt.n	8006dee <_strtod_l+0x476>
 8006d32:	4974      	ldr	r1, [pc, #464]	@ (8006f04 <_strtod_l+0x58c>)
 8006d34:	4652      	mov	r2, sl
 8006d36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006d3a:	465b      	mov	r3, fp
 8006d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d40:	f7f9 fbca 	bl	80004d8 <__aeabi_dmul>
 8006d44:	e7d9      	b.n	8006cfa <_strtod_l+0x382>
 8006d46:	4b6f      	ldr	r3, [pc, #444]	@ (8006f04 <_strtod_l+0x58c>)
 8006d48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d4c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006d50:	f7f9 fbc2 	bl	80004d8 <__aeabi_dmul>
 8006d54:	4682      	mov	sl, r0
 8006d56:	9808      	ldr	r0, [sp, #32]
 8006d58:	468b      	mov	fp, r1
 8006d5a:	f7f9 fb43 	bl	80003e4 <__aeabi_ui2d>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4650      	mov	r0, sl
 8006d64:	4659      	mov	r1, fp
 8006d66:	f7f9 fa01 	bl	800016c <__adddf3>
 8006d6a:	2d0f      	cmp	r5, #15
 8006d6c:	4682      	mov	sl, r0
 8006d6e:	468b      	mov	fp, r1
 8006d70:	ddd7      	ble.n	8006d22 <_strtod_l+0x3aa>
 8006d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d74:	1b2c      	subs	r4, r5, r4
 8006d76:	441c      	add	r4, r3
 8006d78:	2c00      	cmp	r4, #0
 8006d7a:	f340 8096 	ble.w	8006eaa <_strtod_l+0x532>
 8006d7e:	f014 030f 	ands.w	r3, r4, #15
 8006d82:	d00a      	beq.n	8006d9a <_strtod_l+0x422>
 8006d84:	495f      	ldr	r1, [pc, #380]	@ (8006f04 <_strtod_l+0x58c>)
 8006d86:	4652      	mov	r2, sl
 8006d88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d90:	465b      	mov	r3, fp
 8006d92:	f7f9 fba1 	bl	80004d8 <__aeabi_dmul>
 8006d96:	4682      	mov	sl, r0
 8006d98:	468b      	mov	fp, r1
 8006d9a:	f034 040f 	bics.w	r4, r4, #15
 8006d9e:	d073      	beq.n	8006e88 <_strtod_l+0x510>
 8006da0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006da4:	dd48      	ble.n	8006e38 <_strtod_l+0x4c0>
 8006da6:	2400      	movs	r4, #0
 8006da8:	46a0      	mov	r8, r4
 8006daa:	46a1      	mov	r9, r4
 8006dac:	940a      	str	r4, [sp, #40]	@ 0x28
 8006dae:	2322      	movs	r3, #34	@ 0x22
 8006db0:	f04f 0a00 	mov.w	sl, #0
 8006db4:	9a05      	ldr	r2, [sp, #20]
 8006db6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006efc <_strtod_l+0x584>
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f43f ae13 	beq.w	80069ea <_strtod_l+0x72>
 8006dc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006dc6:	9805      	ldr	r0, [sp, #20]
 8006dc8:	f7ff f94c 	bl	8006064 <_Bfree>
 8006dcc:	4649      	mov	r1, r9
 8006dce:	9805      	ldr	r0, [sp, #20]
 8006dd0:	f7ff f948 	bl	8006064 <_Bfree>
 8006dd4:	4641      	mov	r1, r8
 8006dd6:	9805      	ldr	r0, [sp, #20]
 8006dd8:	f7ff f944 	bl	8006064 <_Bfree>
 8006ddc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006dde:	9805      	ldr	r0, [sp, #20]
 8006de0:	f7ff f940 	bl	8006064 <_Bfree>
 8006de4:	4621      	mov	r1, r4
 8006de6:	9805      	ldr	r0, [sp, #20]
 8006de8:	f7ff f93c 	bl	8006064 <_Bfree>
 8006dec:	e5fd      	b.n	80069ea <_strtod_l+0x72>
 8006dee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006df0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006df4:	4293      	cmp	r3, r2
 8006df6:	dbbc      	blt.n	8006d72 <_strtod_l+0x3fa>
 8006df8:	4c42      	ldr	r4, [pc, #264]	@ (8006f04 <_strtod_l+0x58c>)
 8006dfa:	f1c5 050f 	rsb	r5, r5, #15
 8006dfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006e02:	4652      	mov	r2, sl
 8006e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e08:	465b      	mov	r3, fp
 8006e0a:	f7f9 fb65 	bl	80004d8 <__aeabi_dmul>
 8006e0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e10:	1b5d      	subs	r5, r3, r5
 8006e12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006e16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006e1a:	e791      	b.n	8006d40 <_strtod_l+0x3c8>
 8006e1c:	3316      	adds	r3, #22
 8006e1e:	dba8      	blt.n	8006d72 <_strtod_l+0x3fa>
 8006e20:	4b38      	ldr	r3, [pc, #224]	@ (8006f04 <_strtod_l+0x58c>)
 8006e22:	eba9 0808 	sub.w	r8, r9, r8
 8006e26:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006e2a:	4650      	mov	r0, sl
 8006e2c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006e30:	4659      	mov	r1, fp
 8006e32:	f7f9 fc7b 	bl	800072c <__aeabi_ddiv>
 8006e36:	e760      	b.n	8006cfa <_strtod_l+0x382>
 8006e38:	4b33      	ldr	r3, [pc, #204]	@ (8006f08 <_strtod_l+0x590>)
 8006e3a:	4650      	mov	r0, sl
 8006e3c:	9308      	str	r3, [sp, #32]
 8006e3e:	2300      	movs	r3, #0
 8006e40:	4659      	mov	r1, fp
 8006e42:	461e      	mov	r6, r3
 8006e44:	1124      	asrs	r4, r4, #4
 8006e46:	2c01      	cmp	r4, #1
 8006e48:	dc21      	bgt.n	8006e8e <_strtod_l+0x516>
 8006e4a:	b10b      	cbz	r3, 8006e50 <_strtod_l+0x4d8>
 8006e4c:	4682      	mov	sl, r0
 8006e4e:	468b      	mov	fp, r1
 8006e50:	492d      	ldr	r1, [pc, #180]	@ (8006f08 <_strtod_l+0x590>)
 8006e52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006e56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006e5a:	4652      	mov	r2, sl
 8006e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e60:	465b      	mov	r3, fp
 8006e62:	f7f9 fb39 	bl	80004d8 <__aeabi_dmul>
 8006e66:	4b25      	ldr	r3, [pc, #148]	@ (8006efc <_strtod_l+0x584>)
 8006e68:	460a      	mov	r2, r1
 8006e6a:	400b      	ands	r3, r1
 8006e6c:	4927      	ldr	r1, [pc, #156]	@ (8006f0c <_strtod_l+0x594>)
 8006e6e:	4682      	mov	sl, r0
 8006e70:	428b      	cmp	r3, r1
 8006e72:	d898      	bhi.n	8006da6 <_strtod_l+0x42e>
 8006e74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006e78:	428b      	cmp	r3, r1
 8006e7a:	bf86      	itte	hi
 8006e7c:	f04f 3aff 	movhi.w	sl, #4294967295
 8006e80:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006f10 <_strtod_l+0x598>
 8006e84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006e88:	2300      	movs	r3, #0
 8006e8a:	9308      	str	r3, [sp, #32]
 8006e8c:	e07a      	b.n	8006f84 <_strtod_l+0x60c>
 8006e8e:	07e2      	lsls	r2, r4, #31
 8006e90:	d505      	bpl.n	8006e9e <_strtod_l+0x526>
 8006e92:	9b08      	ldr	r3, [sp, #32]
 8006e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e98:	f7f9 fb1e 	bl	80004d8 <__aeabi_dmul>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	9a08      	ldr	r2, [sp, #32]
 8006ea0:	3601      	adds	r6, #1
 8006ea2:	3208      	adds	r2, #8
 8006ea4:	1064      	asrs	r4, r4, #1
 8006ea6:	9208      	str	r2, [sp, #32]
 8006ea8:	e7cd      	b.n	8006e46 <_strtod_l+0x4ce>
 8006eaa:	d0ed      	beq.n	8006e88 <_strtod_l+0x510>
 8006eac:	4264      	negs	r4, r4
 8006eae:	f014 020f 	ands.w	r2, r4, #15
 8006eb2:	d00a      	beq.n	8006eca <_strtod_l+0x552>
 8006eb4:	4b13      	ldr	r3, [pc, #76]	@ (8006f04 <_strtod_l+0x58c>)
 8006eb6:	4650      	mov	r0, sl
 8006eb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ebc:	4659      	mov	r1, fp
 8006ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec2:	f7f9 fc33 	bl	800072c <__aeabi_ddiv>
 8006ec6:	4682      	mov	sl, r0
 8006ec8:	468b      	mov	fp, r1
 8006eca:	1124      	asrs	r4, r4, #4
 8006ecc:	d0dc      	beq.n	8006e88 <_strtod_l+0x510>
 8006ece:	2c1f      	cmp	r4, #31
 8006ed0:	dd20      	ble.n	8006f14 <_strtod_l+0x59c>
 8006ed2:	2400      	movs	r4, #0
 8006ed4:	46a0      	mov	r8, r4
 8006ed6:	46a1      	mov	r9, r4
 8006ed8:	940a      	str	r4, [sp, #40]	@ 0x28
 8006eda:	2322      	movs	r3, #34	@ 0x22
 8006edc:	9a05      	ldr	r2, [sp, #20]
 8006ede:	f04f 0a00 	mov.w	sl, #0
 8006ee2:	f04f 0b00 	mov.w	fp, #0
 8006ee6:	6013      	str	r3, [r2, #0]
 8006ee8:	e768      	b.n	8006dbc <_strtod_l+0x444>
 8006eea:	bf00      	nop
 8006eec:	08008823 	.word	0x08008823
 8006ef0:	08008a3c 	.word	0x08008a3c
 8006ef4:	0800881b 	.word	0x0800881b
 8006ef8:	08008852 	.word	0x08008852
 8006efc:	7ff00000 	.word	0x7ff00000
 8006f00:	08008be5 	.word	0x08008be5
 8006f04:	08008970 	.word	0x08008970
 8006f08:	08008948 	.word	0x08008948
 8006f0c:	7ca00000 	.word	0x7ca00000
 8006f10:	7fefffff 	.word	0x7fefffff
 8006f14:	f014 0310 	ands.w	r3, r4, #16
 8006f18:	bf18      	it	ne
 8006f1a:	236a      	movne	r3, #106	@ 0x6a
 8006f1c:	4650      	mov	r0, sl
 8006f1e:	9308      	str	r3, [sp, #32]
 8006f20:	4659      	mov	r1, fp
 8006f22:	2300      	movs	r3, #0
 8006f24:	4ea9      	ldr	r6, [pc, #676]	@ (80071cc <_strtod_l+0x854>)
 8006f26:	07e2      	lsls	r2, r4, #31
 8006f28:	d504      	bpl.n	8006f34 <_strtod_l+0x5bc>
 8006f2a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f2e:	f7f9 fad3 	bl	80004d8 <__aeabi_dmul>
 8006f32:	2301      	movs	r3, #1
 8006f34:	1064      	asrs	r4, r4, #1
 8006f36:	f106 0608 	add.w	r6, r6, #8
 8006f3a:	d1f4      	bne.n	8006f26 <_strtod_l+0x5ae>
 8006f3c:	b10b      	cbz	r3, 8006f42 <_strtod_l+0x5ca>
 8006f3e:	4682      	mov	sl, r0
 8006f40:	468b      	mov	fp, r1
 8006f42:	9b08      	ldr	r3, [sp, #32]
 8006f44:	b1b3      	cbz	r3, 8006f74 <_strtod_l+0x5fc>
 8006f46:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006f4a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	4659      	mov	r1, fp
 8006f52:	dd0f      	ble.n	8006f74 <_strtod_l+0x5fc>
 8006f54:	2b1f      	cmp	r3, #31
 8006f56:	dd57      	ble.n	8007008 <_strtod_l+0x690>
 8006f58:	2b34      	cmp	r3, #52	@ 0x34
 8006f5a:	bfd8      	it	le
 8006f5c:	f04f 33ff 	movle.w	r3, #4294967295
 8006f60:	f04f 0a00 	mov.w	sl, #0
 8006f64:	bfcf      	iteee	gt
 8006f66:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006f6a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006f6e:	4093      	lslle	r3, r2
 8006f70:	ea03 0b01 	andle.w	fp, r3, r1
 8006f74:	2200      	movs	r2, #0
 8006f76:	2300      	movs	r3, #0
 8006f78:	4650      	mov	r0, sl
 8006f7a:	4659      	mov	r1, fp
 8006f7c:	f7f9 fd14 	bl	80009a8 <__aeabi_dcmpeq>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d1a6      	bne.n	8006ed2 <_strtod_l+0x55a>
 8006f84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f86:	463a      	mov	r2, r7
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006f8c:	462b      	mov	r3, r5
 8006f8e:	9805      	ldr	r0, [sp, #20]
 8006f90:	f7ff f8d0 	bl	8006134 <__s2b>
 8006f94:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f96:	2800      	cmp	r0, #0
 8006f98:	f43f af05 	beq.w	8006da6 <_strtod_l+0x42e>
 8006f9c:	2400      	movs	r4, #0
 8006f9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fa0:	eba9 0308 	sub.w	r3, r9, r8
 8006fa4:	2a00      	cmp	r2, #0
 8006fa6:	bfa8      	it	ge
 8006fa8:	2300      	movge	r3, #0
 8006faa:	46a0      	mov	r8, r4
 8006fac:	9312      	str	r3, [sp, #72]	@ 0x48
 8006fae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006fb2:	9316      	str	r3, [sp, #88]	@ 0x58
 8006fb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fb6:	9805      	ldr	r0, [sp, #20]
 8006fb8:	6859      	ldr	r1, [r3, #4]
 8006fba:	f7ff f813 	bl	8005fe4 <_Balloc>
 8006fbe:	4681      	mov	r9, r0
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	f43f aef4 	beq.w	8006dae <_strtod_l+0x436>
 8006fc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fc8:	300c      	adds	r0, #12
 8006fca:	691a      	ldr	r2, [r3, #16]
 8006fcc:	f103 010c 	add.w	r1, r3, #12
 8006fd0:	3202      	adds	r2, #2
 8006fd2:	0092      	lsls	r2, r2, #2
 8006fd4:	f7fe f8a5 	bl	8005122 <memcpy>
 8006fd8:	ab1c      	add	r3, sp, #112	@ 0x70
 8006fda:	9301      	str	r3, [sp, #4]
 8006fdc:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	4652      	mov	r2, sl
 8006fe2:	465b      	mov	r3, fp
 8006fe4:	9805      	ldr	r0, [sp, #20]
 8006fe6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006fea:	f7ff fbd5 	bl	8006798 <__d2b>
 8006fee:	901a      	str	r0, [sp, #104]	@ 0x68
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	f43f aedc 	beq.w	8006dae <_strtod_l+0x436>
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	9805      	ldr	r0, [sp, #20]
 8006ffa:	f7ff f931 	bl	8006260 <__i2b>
 8006ffe:	4680      	mov	r8, r0
 8007000:	b948      	cbnz	r0, 8007016 <_strtod_l+0x69e>
 8007002:	f04f 0800 	mov.w	r8, #0
 8007006:	e6d2      	b.n	8006dae <_strtod_l+0x436>
 8007008:	f04f 32ff 	mov.w	r2, #4294967295
 800700c:	fa02 f303 	lsl.w	r3, r2, r3
 8007010:	ea03 0a0a 	and.w	sl, r3, sl
 8007014:	e7ae      	b.n	8006f74 <_strtod_l+0x5fc>
 8007016:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007018:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800701a:	2d00      	cmp	r5, #0
 800701c:	bfab      	itete	ge
 800701e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007020:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007022:	18ef      	addge	r7, r5, r3
 8007024:	1b5e      	sublt	r6, r3, r5
 8007026:	9b08      	ldr	r3, [sp, #32]
 8007028:	bfa8      	it	ge
 800702a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800702c:	eba5 0503 	sub.w	r5, r5, r3
 8007030:	4415      	add	r5, r2
 8007032:	4b67      	ldr	r3, [pc, #412]	@ (80071d0 <_strtod_l+0x858>)
 8007034:	f105 35ff 	add.w	r5, r5, #4294967295
 8007038:	bfb8      	it	lt
 800703a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800703c:	429d      	cmp	r5, r3
 800703e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007042:	da50      	bge.n	80070e6 <_strtod_l+0x76e>
 8007044:	1b5b      	subs	r3, r3, r5
 8007046:	2b1f      	cmp	r3, #31
 8007048:	f04f 0101 	mov.w	r1, #1
 800704c:	eba2 0203 	sub.w	r2, r2, r3
 8007050:	dc3d      	bgt.n	80070ce <_strtod_l+0x756>
 8007052:	fa01 f303 	lsl.w	r3, r1, r3
 8007056:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007058:	2300      	movs	r3, #0
 800705a:	9310      	str	r3, [sp, #64]	@ 0x40
 800705c:	18bd      	adds	r5, r7, r2
 800705e:	9b08      	ldr	r3, [sp, #32]
 8007060:	42af      	cmp	r7, r5
 8007062:	4416      	add	r6, r2
 8007064:	441e      	add	r6, r3
 8007066:	463b      	mov	r3, r7
 8007068:	bfa8      	it	ge
 800706a:	462b      	movge	r3, r5
 800706c:	42b3      	cmp	r3, r6
 800706e:	bfa8      	it	ge
 8007070:	4633      	movge	r3, r6
 8007072:	2b00      	cmp	r3, #0
 8007074:	bfc2      	ittt	gt
 8007076:	1aed      	subgt	r5, r5, r3
 8007078:	1af6      	subgt	r6, r6, r3
 800707a:	1aff      	subgt	r7, r7, r3
 800707c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800707e:	2b00      	cmp	r3, #0
 8007080:	dd16      	ble.n	80070b0 <_strtod_l+0x738>
 8007082:	4641      	mov	r1, r8
 8007084:	461a      	mov	r2, r3
 8007086:	9805      	ldr	r0, [sp, #20]
 8007088:	f7ff f9a8 	bl	80063dc <__pow5mult>
 800708c:	4680      	mov	r8, r0
 800708e:	2800      	cmp	r0, #0
 8007090:	d0b7      	beq.n	8007002 <_strtod_l+0x68a>
 8007092:	4601      	mov	r1, r0
 8007094:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007096:	9805      	ldr	r0, [sp, #20]
 8007098:	f7ff f8f8 	bl	800628c <__multiply>
 800709c:	900e      	str	r0, [sp, #56]	@ 0x38
 800709e:	2800      	cmp	r0, #0
 80070a0:	f43f ae85 	beq.w	8006dae <_strtod_l+0x436>
 80070a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80070a6:	9805      	ldr	r0, [sp, #20]
 80070a8:	f7fe ffdc 	bl	8006064 <_Bfree>
 80070ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80070b0:	2d00      	cmp	r5, #0
 80070b2:	dc1d      	bgt.n	80070f0 <_strtod_l+0x778>
 80070b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	dd23      	ble.n	8007102 <_strtod_l+0x78a>
 80070ba:	4649      	mov	r1, r9
 80070bc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80070be:	9805      	ldr	r0, [sp, #20]
 80070c0:	f7ff f98c 	bl	80063dc <__pow5mult>
 80070c4:	4681      	mov	r9, r0
 80070c6:	b9e0      	cbnz	r0, 8007102 <_strtod_l+0x78a>
 80070c8:	f04f 0900 	mov.w	r9, #0
 80070cc:	e66f      	b.n	8006dae <_strtod_l+0x436>
 80070ce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80070d2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80070d6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80070da:	35e2      	adds	r5, #226	@ 0xe2
 80070dc:	fa01 f305 	lsl.w	r3, r1, r5
 80070e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80070e2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80070e4:	e7ba      	b.n	800705c <_strtod_l+0x6e4>
 80070e6:	2300      	movs	r3, #0
 80070e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80070ea:	2301      	movs	r3, #1
 80070ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 80070ee:	e7b5      	b.n	800705c <_strtod_l+0x6e4>
 80070f0:	462a      	mov	r2, r5
 80070f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80070f4:	9805      	ldr	r0, [sp, #20]
 80070f6:	f7ff f9cb 	bl	8006490 <__lshift>
 80070fa:	901a      	str	r0, [sp, #104]	@ 0x68
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d1d9      	bne.n	80070b4 <_strtod_l+0x73c>
 8007100:	e655      	b.n	8006dae <_strtod_l+0x436>
 8007102:	2e00      	cmp	r6, #0
 8007104:	dd07      	ble.n	8007116 <_strtod_l+0x79e>
 8007106:	4649      	mov	r1, r9
 8007108:	4632      	mov	r2, r6
 800710a:	9805      	ldr	r0, [sp, #20]
 800710c:	f7ff f9c0 	bl	8006490 <__lshift>
 8007110:	4681      	mov	r9, r0
 8007112:	2800      	cmp	r0, #0
 8007114:	d0d8      	beq.n	80070c8 <_strtod_l+0x750>
 8007116:	2f00      	cmp	r7, #0
 8007118:	dd08      	ble.n	800712c <_strtod_l+0x7b4>
 800711a:	4641      	mov	r1, r8
 800711c:	463a      	mov	r2, r7
 800711e:	9805      	ldr	r0, [sp, #20]
 8007120:	f7ff f9b6 	bl	8006490 <__lshift>
 8007124:	4680      	mov	r8, r0
 8007126:	2800      	cmp	r0, #0
 8007128:	f43f ae41 	beq.w	8006dae <_strtod_l+0x436>
 800712c:	464a      	mov	r2, r9
 800712e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007130:	9805      	ldr	r0, [sp, #20]
 8007132:	f7ff fa35 	bl	80065a0 <__mdiff>
 8007136:	4604      	mov	r4, r0
 8007138:	2800      	cmp	r0, #0
 800713a:	f43f ae38 	beq.w	8006dae <_strtod_l+0x436>
 800713e:	68c3      	ldr	r3, [r0, #12]
 8007140:	4641      	mov	r1, r8
 8007142:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007144:	2300      	movs	r3, #0
 8007146:	60c3      	str	r3, [r0, #12]
 8007148:	f7ff fa0e 	bl	8006568 <__mcmp>
 800714c:	2800      	cmp	r0, #0
 800714e:	da45      	bge.n	80071dc <_strtod_l+0x864>
 8007150:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007152:	ea53 030a 	orrs.w	r3, r3, sl
 8007156:	d16b      	bne.n	8007230 <_strtod_l+0x8b8>
 8007158:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800715c:	2b00      	cmp	r3, #0
 800715e:	d167      	bne.n	8007230 <_strtod_l+0x8b8>
 8007160:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007164:	0d1b      	lsrs	r3, r3, #20
 8007166:	051b      	lsls	r3, r3, #20
 8007168:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800716c:	d960      	bls.n	8007230 <_strtod_l+0x8b8>
 800716e:	6963      	ldr	r3, [r4, #20]
 8007170:	b913      	cbnz	r3, 8007178 <_strtod_l+0x800>
 8007172:	6923      	ldr	r3, [r4, #16]
 8007174:	2b01      	cmp	r3, #1
 8007176:	dd5b      	ble.n	8007230 <_strtod_l+0x8b8>
 8007178:	4621      	mov	r1, r4
 800717a:	2201      	movs	r2, #1
 800717c:	9805      	ldr	r0, [sp, #20]
 800717e:	f7ff f987 	bl	8006490 <__lshift>
 8007182:	4641      	mov	r1, r8
 8007184:	4604      	mov	r4, r0
 8007186:	f7ff f9ef 	bl	8006568 <__mcmp>
 800718a:	2800      	cmp	r0, #0
 800718c:	dd50      	ble.n	8007230 <_strtod_l+0x8b8>
 800718e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007192:	9a08      	ldr	r2, [sp, #32]
 8007194:	0d1b      	lsrs	r3, r3, #20
 8007196:	051b      	lsls	r3, r3, #20
 8007198:	2a00      	cmp	r2, #0
 800719a:	d06a      	beq.n	8007272 <_strtod_l+0x8fa>
 800719c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80071a0:	d867      	bhi.n	8007272 <_strtod_l+0x8fa>
 80071a2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80071a6:	f67f ae98 	bls.w	8006eda <_strtod_l+0x562>
 80071aa:	4650      	mov	r0, sl
 80071ac:	4659      	mov	r1, fp
 80071ae:	4b09      	ldr	r3, [pc, #36]	@ (80071d4 <_strtod_l+0x85c>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	f7f9 f991 	bl	80004d8 <__aeabi_dmul>
 80071b6:	4b08      	ldr	r3, [pc, #32]	@ (80071d8 <_strtod_l+0x860>)
 80071b8:	4682      	mov	sl, r0
 80071ba:	400b      	ands	r3, r1
 80071bc:	468b      	mov	fp, r1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f47f ae00 	bne.w	8006dc4 <_strtod_l+0x44c>
 80071c4:	2322      	movs	r3, #34	@ 0x22
 80071c6:	9a05      	ldr	r2, [sp, #20]
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	e5fb      	b.n	8006dc4 <_strtod_l+0x44c>
 80071cc:	08008a68 	.word	0x08008a68
 80071d0:	fffffc02 	.word	0xfffffc02
 80071d4:	39500000 	.word	0x39500000
 80071d8:	7ff00000 	.word	0x7ff00000
 80071dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80071e0:	d165      	bne.n	80072ae <_strtod_l+0x936>
 80071e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80071e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071e8:	b35a      	cbz	r2, 8007242 <_strtod_l+0x8ca>
 80071ea:	4a99      	ldr	r2, [pc, #612]	@ (8007450 <_strtod_l+0xad8>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d12b      	bne.n	8007248 <_strtod_l+0x8d0>
 80071f0:	9b08      	ldr	r3, [sp, #32]
 80071f2:	4651      	mov	r1, sl
 80071f4:	b303      	cbz	r3, 8007238 <_strtod_l+0x8c0>
 80071f6:	465a      	mov	r2, fp
 80071f8:	4b96      	ldr	r3, [pc, #600]	@ (8007454 <_strtod_l+0xadc>)
 80071fa:	4013      	ands	r3, r2
 80071fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007200:	f04f 32ff 	mov.w	r2, #4294967295
 8007204:	d81b      	bhi.n	800723e <_strtod_l+0x8c6>
 8007206:	0d1b      	lsrs	r3, r3, #20
 8007208:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800720c:	fa02 f303 	lsl.w	r3, r2, r3
 8007210:	4299      	cmp	r1, r3
 8007212:	d119      	bne.n	8007248 <_strtod_l+0x8d0>
 8007214:	4b90      	ldr	r3, [pc, #576]	@ (8007458 <_strtod_l+0xae0>)
 8007216:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007218:	429a      	cmp	r2, r3
 800721a:	d102      	bne.n	8007222 <_strtod_l+0x8aa>
 800721c:	3101      	adds	r1, #1
 800721e:	f43f adc6 	beq.w	8006dae <_strtod_l+0x436>
 8007222:	f04f 0a00 	mov.w	sl, #0
 8007226:	4b8b      	ldr	r3, [pc, #556]	@ (8007454 <_strtod_l+0xadc>)
 8007228:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800722a:	401a      	ands	r2, r3
 800722c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007230:	9b08      	ldr	r3, [sp, #32]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1b9      	bne.n	80071aa <_strtod_l+0x832>
 8007236:	e5c5      	b.n	8006dc4 <_strtod_l+0x44c>
 8007238:	f04f 33ff 	mov.w	r3, #4294967295
 800723c:	e7e8      	b.n	8007210 <_strtod_l+0x898>
 800723e:	4613      	mov	r3, r2
 8007240:	e7e6      	b.n	8007210 <_strtod_l+0x898>
 8007242:	ea53 030a 	orrs.w	r3, r3, sl
 8007246:	d0a2      	beq.n	800718e <_strtod_l+0x816>
 8007248:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800724a:	b1db      	cbz	r3, 8007284 <_strtod_l+0x90c>
 800724c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800724e:	4213      	tst	r3, r2
 8007250:	d0ee      	beq.n	8007230 <_strtod_l+0x8b8>
 8007252:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007254:	4650      	mov	r0, sl
 8007256:	4659      	mov	r1, fp
 8007258:	9a08      	ldr	r2, [sp, #32]
 800725a:	b1bb      	cbz	r3, 800728c <_strtod_l+0x914>
 800725c:	f7ff fb68 	bl	8006930 <sulp>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007268:	f7f8 ff80 	bl	800016c <__adddf3>
 800726c:	4682      	mov	sl, r0
 800726e:	468b      	mov	fp, r1
 8007270:	e7de      	b.n	8007230 <_strtod_l+0x8b8>
 8007272:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007276:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800727a:	f04f 3aff 	mov.w	sl, #4294967295
 800727e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007282:	e7d5      	b.n	8007230 <_strtod_l+0x8b8>
 8007284:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007286:	ea13 0f0a 	tst.w	r3, sl
 800728a:	e7e1      	b.n	8007250 <_strtod_l+0x8d8>
 800728c:	f7ff fb50 	bl	8006930 <sulp>
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007298:	f7f8 ff66 	bl	8000168 <__aeabi_dsub>
 800729c:	2200      	movs	r2, #0
 800729e:	2300      	movs	r3, #0
 80072a0:	4682      	mov	sl, r0
 80072a2:	468b      	mov	fp, r1
 80072a4:	f7f9 fb80 	bl	80009a8 <__aeabi_dcmpeq>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d0c1      	beq.n	8007230 <_strtod_l+0x8b8>
 80072ac:	e615      	b.n	8006eda <_strtod_l+0x562>
 80072ae:	4641      	mov	r1, r8
 80072b0:	4620      	mov	r0, r4
 80072b2:	f7ff fac9 	bl	8006848 <__ratio>
 80072b6:	2200      	movs	r2, #0
 80072b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80072bc:	4606      	mov	r6, r0
 80072be:	460f      	mov	r7, r1
 80072c0:	f7f9 fb86 	bl	80009d0 <__aeabi_dcmple>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	d06d      	beq.n	80073a4 <_strtod_l+0xa2c>
 80072c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d178      	bne.n	80073c0 <_strtod_l+0xa48>
 80072ce:	f1ba 0f00 	cmp.w	sl, #0
 80072d2:	d156      	bne.n	8007382 <_strtod_l+0xa0a>
 80072d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d158      	bne.n	8007390 <_strtod_l+0xa18>
 80072de:	2200      	movs	r2, #0
 80072e0:	4630      	mov	r0, r6
 80072e2:	4639      	mov	r1, r7
 80072e4:	4b5d      	ldr	r3, [pc, #372]	@ (800745c <_strtod_l+0xae4>)
 80072e6:	f7f9 fb69 	bl	80009bc <__aeabi_dcmplt>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	d157      	bne.n	800739e <_strtod_l+0xa26>
 80072ee:	4630      	mov	r0, r6
 80072f0:	4639      	mov	r1, r7
 80072f2:	2200      	movs	r2, #0
 80072f4:	4b5a      	ldr	r3, [pc, #360]	@ (8007460 <_strtod_l+0xae8>)
 80072f6:	f7f9 f8ef 	bl	80004d8 <__aeabi_dmul>
 80072fa:	4606      	mov	r6, r0
 80072fc:	460f      	mov	r7, r1
 80072fe:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007302:	9606      	str	r6, [sp, #24]
 8007304:	9307      	str	r3, [sp, #28]
 8007306:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800730a:	4d52      	ldr	r5, [pc, #328]	@ (8007454 <_strtod_l+0xadc>)
 800730c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007310:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007312:	401d      	ands	r5, r3
 8007314:	4b53      	ldr	r3, [pc, #332]	@ (8007464 <_strtod_l+0xaec>)
 8007316:	429d      	cmp	r5, r3
 8007318:	f040 80aa 	bne.w	8007470 <_strtod_l+0xaf8>
 800731c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800731e:	4650      	mov	r0, sl
 8007320:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007324:	4659      	mov	r1, fp
 8007326:	f7ff f9cf 	bl	80066c8 <__ulp>
 800732a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800732e:	f7f9 f8d3 	bl	80004d8 <__aeabi_dmul>
 8007332:	4652      	mov	r2, sl
 8007334:	465b      	mov	r3, fp
 8007336:	f7f8 ff19 	bl	800016c <__adddf3>
 800733a:	460b      	mov	r3, r1
 800733c:	4945      	ldr	r1, [pc, #276]	@ (8007454 <_strtod_l+0xadc>)
 800733e:	4a4a      	ldr	r2, [pc, #296]	@ (8007468 <_strtod_l+0xaf0>)
 8007340:	4019      	ands	r1, r3
 8007342:	4291      	cmp	r1, r2
 8007344:	4682      	mov	sl, r0
 8007346:	d942      	bls.n	80073ce <_strtod_l+0xa56>
 8007348:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800734a:	4b43      	ldr	r3, [pc, #268]	@ (8007458 <_strtod_l+0xae0>)
 800734c:	429a      	cmp	r2, r3
 800734e:	d103      	bne.n	8007358 <_strtod_l+0x9e0>
 8007350:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007352:	3301      	adds	r3, #1
 8007354:	f43f ad2b 	beq.w	8006dae <_strtod_l+0x436>
 8007358:	f04f 3aff 	mov.w	sl, #4294967295
 800735c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007458 <_strtod_l+0xae0>
 8007360:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007362:	9805      	ldr	r0, [sp, #20]
 8007364:	f7fe fe7e 	bl	8006064 <_Bfree>
 8007368:	4649      	mov	r1, r9
 800736a:	9805      	ldr	r0, [sp, #20]
 800736c:	f7fe fe7a 	bl	8006064 <_Bfree>
 8007370:	4641      	mov	r1, r8
 8007372:	9805      	ldr	r0, [sp, #20]
 8007374:	f7fe fe76 	bl	8006064 <_Bfree>
 8007378:	4621      	mov	r1, r4
 800737a:	9805      	ldr	r0, [sp, #20]
 800737c:	f7fe fe72 	bl	8006064 <_Bfree>
 8007380:	e618      	b.n	8006fb4 <_strtod_l+0x63c>
 8007382:	f1ba 0f01 	cmp.w	sl, #1
 8007386:	d103      	bne.n	8007390 <_strtod_l+0xa18>
 8007388:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800738a:	2b00      	cmp	r3, #0
 800738c:	f43f ada5 	beq.w	8006eda <_strtod_l+0x562>
 8007390:	2200      	movs	r2, #0
 8007392:	4b36      	ldr	r3, [pc, #216]	@ (800746c <_strtod_l+0xaf4>)
 8007394:	2600      	movs	r6, #0
 8007396:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800739a:	4f30      	ldr	r7, [pc, #192]	@ (800745c <_strtod_l+0xae4>)
 800739c:	e7b3      	b.n	8007306 <_strtod_l+0x98e>
 800739e:	2600      	movs	r6, #0
 80073a0:	4f2f      	ldr	r7, [pc, #188]	@ (8007460 <_strtod_l+0xae8>)
 80073a2:	e7ac      	b.n	80072fe <_strtod_l+0x986>
 80073a4:	4630      	mov	r0, r6
 80073a6:	4639      	mov	r1, r7
 80073a8:	4b2d      	ldr	r3, [pc, #180]	@ (8007460 <_strtod_l+0xae8>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	f7f9 f894 	bl	80004d8 <__aeabi_dmul>
 80073b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073b2:	4606      	mov	r6, r0
 80073b4:	460f      	mov	r7, r1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d0a1      	beq.n	80072fe <_strtod_l+0x986>
 80073ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80073be:	e7a2      	b.n	8007306 <_strtod_l+0x98e>
 80073c0:	2200      	movs	r2, #0
 80073c2:	4b26      	ldr	r3, [pc, #152]	@ (800745c <_strtod_l+0xae4>)
 80073c4:	4616      	mov	r6, r2
 80073c6:	461f      	mov	r7, r3
 80073c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80073cc:	e79b      	b.n	8007306 <_strtod_l+0x98e>
 80073ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80073d2:	9b08      	ldr	r3, [sp, #32]
 80073d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1c1      	bne.n	8007360 <_strtod_l+0x9e8>
 80073dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80073e0:	0d1b      	lsrs	r3, r3, #20
 80073e2:	051b      	lsls	r3, r3, #20
 80073e4:	429d      	cmp	r5, r3
 80073e6:	d1bb      	bne.n	8007360 <_strtod_l+0x9e8>
 80073e8:	4630      	mov	r0, r6
 80073ea:	4639      	mov	r1, r7
 80073ec:	f7f9 fbbc 	bl	8000b68 <__aeabi_d2lz>
 80073f0:	f7f9 f844 	bl	800047c <__aeabi_l2d>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4630      	mov	r0, r6
 80073fa:	4639      	mov	r1, r7
 80073fc:	f7f8 feb4 	bl	8000168 <__aeabi_dsub>
 8007400:	460b      	mov	r3, r1
 8007402:	4602      	mov	r2, r0
 8007404:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007408:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800740c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800740e:	ea46 060a 	orr.w	r6, r6, sl
 8007412:	431e      	orrs	r6, r3
 8007414:	d069      	beq.n	80074ea <_strtod_l+0xb72>
 8007416:	a30a      	add	r3, pc, #40	@ (adr r3, 8007440 <_strtod_l+0xac8>)
 8007418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741c:	f7f9 face 	bl	80009bc <__aeabi_dcmplt>
 8007420:	2800      	cmp	r0, #0
 8007422:	f47f accf 	bne.w	8006dc4 <_strtod_l+0x44c>
 8007426:	a308      	add	r3, pc, #32	@ (adr r3, 8007448 <_strtod_l+0xad0>)
 8007428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007430:	f7f9 fae2 	bl	80009f8 <__aeabi_dcmpgt>
 8007434:	2800      	cmp	r0, #0
 8007436:	d093      	beq.n	8007360 <_strtod_l+0x9e8>
 8007438:	e4c4      	b.n	8006dc4 <_strtod_l+0x44c>
 800743a:	bf00      	nop
 800743c:	f3af 8000 	nop.w
 8007440:	94a03595 	.word	0x94a03595
 8007444:	3fdfffff 	.word	0x3fdfffff
 8007448:	35afe535 	.word	0x35afe535
 800744c:	3fe00000 	.word	0x3fe00000
 8007450:	000fffff 	.word	0x000fffff
 8007454:	7ff00000 	.word	0x7ff00000
 8007458:	7fefffff 	.word	0x7fefffff
 800745c:	3ff00000 	.word	0x3ff00000
 8007460:	3fe00000 	.word	0x3fe00000
 8007464:	7fe00000 	.word	0x7fe00000
 8007468:	7c9fffff 	.word	0x7c9fffff
 800746c:	bff00000 	.word	0xbff00000
 8007470:	9b08      	ldr	r3, [sp, #32]
 8007472:	b323      	cbz	r3, 80074be <_strtod_l+0xb46>
 8007474:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007478:	d821      	bhi.n	80074be <_strtod_l+0xb46>
 800747a:	a327      	add	r3, pc, #156	@ (adr r3, 8007518 <_strtod_l+0xba0>)
 800747c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007480:	4630      	mov	r0, r6
 8007482:	4639      	mov	r1, r7
 8007484:	f7f9 faa4 	bl	80009d0 <__aeabi_dcmple>
 8007488:	b1a0      	cbz	r0, 80074b4 <_strtod_l+0xb3c>
 800748a:	4639      	mov	r1, r7
 800748c:	4630      	mov	r0, r6
 800748e:	f7f9 fafb 	bl	8000a88 <__aeabi_d2uiz>
 8007492:	2801      	cmp	r0, #1
 8007494:	bf38      	it	cc
 8007496:	2001      	movcc	r0, #1
 8007498:	f7f8 ffa4 	bl	80003e4 <__aeabi_ui2d>
 800749c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800749e:	4606      	mov	r6, r0
 80074a0:	460f      	mov	r7, r1
 80074a2:	b9fb      	cbnz	r3, 80074e4 <_strtod_l+0xb6c>
 80074a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80074a8:	9014      	str	r0, [sp, #80]	@ 0x50
 80074aa:	9315      	str	r3, [sp, #84]	@ 0x54
 80074ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80074b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80074b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80074b6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80074ba:	1b5b      	subs	r3, r3, r5
 80074bc:	9311      	str	r3, [sp, #68]	@ 0x44
 80074be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074c2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80074c6:	f7ff f8ff 	bl	80066c8 <__ulp>
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	4650      	mov	r0, sl
 80074d0:	4659      	mov	r1, fp
 80074d2:	f7f9 f801 	bl	80004d8 <__aeabi_dmul>
 80074d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80074da:	f7f8 fe47 	bl	800016c <__adddf3>
 80074de:	4682      	mov	sl, r0
 80074e0:	468b      	mov	fp, r1
 80074e2:	e776      	b.n	80073d2 <_strtod_l+0xa5a>
 80074e4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80074e8:	e7e0      	b.n	80074ac <_strtod_l+0xb34>
 80074ea:	a30d      	add	r3, pc, #52	@ (adr r3, 8007520 <_strtod_l+0xba8>)
 80074ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f0:	f7f9 fa64 	bl	80009bc <__aeabi_dcmplt>
 80074f4:	e79e      	b.n	8007434 <_strtod_l+0xabc>
 80074f6:	2300      	movs	r3, #0
 80074f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074fc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	f7ff ba77 	b.w	80069f2 <_strtod_l+0x7a>
 8007504:	2a65      	cmp	r2, #101	@ 0x65
 8007506:	f43f ab6e 	beq.w	8006be6 <_strtod_l+0x26e>
 800750a:	2a45      	cmp	r2, #69	@ 0x45
 800750c:	f43f ab6b 	beq.w	8006be6 <_strtod_l+0x26e>
 8007510:	2301      	movs	r3, #1
 8007512:	f7ff bba6 	b.w	8006c62 <_strtod_l+0x2ea>
 8007516:	bf00      	nop
 8007518:	ffc00000 	.word	0xffc00000
 800751c:	41dfffff 	.word	0x41dfffff
 8007520:	94a03595 	.word	0x94a03595
 8007524:	3fcfffff 	.word	0x3fcfffff

08007528 <_strtod_r>:
 8007528:	4b01      	ldr	r3, [pc, #4]	@ (8007530 <_strtod_r+0x8>)
 800752a:	f7ff ba25 	b.w	8006978 <_strtod_l>
 800752e:	bf00      	nop
 8007530:	20000074 	.word	0x20000074

08007534 <_strtol_l.constprop.0>:
 8007534:	2b24      	cmp	r3, #36	@ 0x24
 8007536:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800753a:	4686      	mov	lr, r0
 800753c:	4690      	mov	r8, r2
 800753e:	d801      	bhi.n	8007544 <_strtol_l.constprop.0+0x10>
 8007540:	2b01      	cmp	r3, #1
 8007542:	d106      	bne.n	8007552 <_strtol_l.constprop.0+0x1e>
 8007544:	f7fd fdb2 	bl	80050ac <__errno>
 8007548:	2316      	movs	r3, #22
 800754a:	6003      	str	r3, [r0, #0]
 800754c:	2000      	movs	r0, #0
 800754e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007552:	460d      	mov	r5, r1
 8007554:	4833      	ldr	r0, [pc, #204]	@ (8007624 <_strtol_l.constprop.0+0xf0>)
 8007556:	462a      	mov	r2, r5
 8007558:	f815 4b01 	ldrb.w	r4, [r5], #1
 800755c:	5d06      	ldrb	r6, [r0, r4]
 800755e:	f016 0608 	ands.w	r6, r6, #8
 8007562:	d1f8      	bne.n	8007556 <_strtol_l.constprop.0+0x22>
 8007564:	2c2d      	cmp	r4, #45	@ 0x2d
 8007566:	d12d      	bne.n	80075c4 <_strtol_l.constprop.0+0x90>
 8007568:	2601      	movs	r6, #1
 800756a:	782c      	ldrb	r4, [r5, #0]
 800756c:	1c95      	adds	r5, r2, #2
 800756e:	f033 0210 	bics.w	r2, r3, #16
 8007572:	d109      	bne.n	8007588 <_strtol_l.constprop.0+0x54>
 8007574:	2c30      	cmp	r4, #48	@ 0x30
 8007576:	d12a      	bne.n	80075ce <_strtol_l.constprop.0+0x9a>
 8007578:	782a      	ldrb	r2, [r5, #0]
 800757a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800757e:	2a58      	cmp	r2, #88	@ 0x58
 8007580:	d125      	bne.n	80075ce <_strtol_l.constprop.0+0x9a>
 8007582:	2310      	movs	r3, #16
 8007584:	786c      	ldrb	r4, [r5, #1]
 8007586:	3502      	adds	r5, #2
 8007588:	2200      	movs	r2, #0
 800758a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800758e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007592:	fbbc f9f3 	udiv	r9, ip, r3
 8007596:	4610      	mov	r0, r2
 8007598:	fb03 ca19 	mls	sl, r3, r9, ip
 800759c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80075a0:	2f09      	cmp	r7, #9
 80075a2:	d81b      	bhi.n	80075dc <_strtol_l.constprop.0+0xa8>
 80075a4:	463c      	mov	r4, r7
 80075a6:	42a3      	cmp	r3, r4
 80075a8:	dd27      	ble.n	80075fa <_strtol_l.constprop.0+0xc6>
 80075aa:	1c57      	adds	r7, r2, #1
 80075ac:	d007      	beq.n	80075be <_strtol_l.constprop.0+0x8a>
 80075ae:	4581      	cmp	r9, r0
 80075b0:	d320      	bcc.n	80075f4 <_strtol_l.constprop.0+0xc0>
 80075b2:	d101      	bne.n	80075b8 <_strtol_l.constprop.0+0x84>
 80075b4:	45a2      	cmp	sl, r4
 80075b6:	db1d      	blt.n	80075f4 <_strtol_l.constprop.0+0xc0>
 80075b8:	2201      	movs	r2, #1
 80075ba:	fb00 4003 	mla	r0, r0, r3, r4
 80075be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075c2:	e7eb      	b.n	800759c <_strtol_l.constprop.0+0x68>
 80075c4:	2c2b      	cmp	r4, #43	@ 0x2b
 80075c6:	bf04      	itt	eq
 80075c8:	782c      	ldrbeq	r4, [r5, #0]
 80075ca:	1c95      	addeq	r5, r2, #2
 80075cc:	e7cf      	b.n	800756e <_strtol_l.constprop.0+0x3a>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1da      	bne.n	8007588 <_strtol_l.constprop.0+0x54>
 80075d2:	2c30      	cmp	r4, #48	@ 0x30
 80075d4:	bf0c      	ite	eq
 80075d6:	2308      	moveq	r3, #8
 80075d8:	230a      	movne	r3, #10
 80075da:	e7d5      	b.n	8007588 <_strtol_l.constprop.0+0x54>
 80075dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80075e0:	2f19      	cmp	r7, #25
 80075e2:	d801      	bhi.n	80075e8 <_strtol_l.constprop.0+0xb4>
 80075e4:	3c37      	subs	r4, #55	@ 0x37
 80075e6:	e7de      	b.n	80075a6 <_strtol_l.constprop.0+0x72>
 80075e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80075ec:	2f19      	cmp	r7, #25
 80075ee:	d804      	bhi.n	80075fa <_strtol_l.constprop.0+0xc6>
 80075f0:	3c57      	subs	r4, #87	@ 0x57
 80075f2:	e7d8      	b.n	80075a6 <_strtol_l.constprop.0+0x72>
 80075f4:	f04f 32ff 	mov.w	r2, #4294967295
 80075f8:	e7e1      	b.n	80075be <_strtol_l.constprop.0+0x8a>
 80075fa:	1c53      	adds	r3, r2, #1
 80075fc:	d108      	bne.n	8007610 <_strtol_l.constprop.0+0xdc>
 80075fe:	2322      	movs	r3, #34	@ 0x22
 8007600:	4660      	mov	r0, ip
 8007602:	f8ce 3000 	str.w	r3, [lr]
 8007606:	f1b8 0f00 	cmp.w	r8, #0
 800760a:	d0a0      	beq.n	800754e <_strtol_l.constprop.0+0x1a>
 800760c:	1e69      	subs	r1, r5, #1
 800760e:	e006      	b.n	800761e <_strtol_l.constprop.0+0xea>
 8007610:	b106      	cbz	r6, 8007614 <_strtol_l.constprop.0+0xe0>
 8007612:	4240      	negs	r0, r0
 8007614:	f1b8 0f00 	cmp.w	r8, #0
 8007618:	d099      	beq.n	800754e <_strtol_l.constprop.0+0x1a>
 800761a:	2a00      	cmp	r2, #0
 800761c:	d1f6      	bne.n	800760c <_strtol_l.constprop.0+0xd8>
 800761e:	f8c8 1000 	str.w	r1, [r8]
 8007622:	e794      	b.n	800754e <_strtol_l.constprop.0+0x1a>
 8007624:	08008a91 	.word	0x08008a91

08007628 <_strtol_r>:
 8007628:	f7ff bf84 	b.w	8007534 <_strtol_l.constprop.0>

0800762c <__ssputs_r>:
 800762c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007630:	461f      	mov	r7, r3
 8007632:	688e      	ldr	r6, [r1, #8]
 8007634:	4682      	mov	sl, r0
 8007636:	42be      	cmp	r6, r7
 8007638:	460c      	mov	r4, r1
 800763a:	4690      	mov	r8, r2
 800763c:	680b      	ldr	r3, [r1, #0]
 800763e:	d82d      	bhi.n	800769c <__ssputs_r+0x70>
 8007640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007644:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007648:	d026      	beq.n	8007698 <__ssputs_r+0x6c>
 800764a:	6965      	ldr	r5, [r4, #20]
 800764c:	6909      	ldr	r1, [r1, #16]
 800764e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007652:	eba3 0901 	sub.w	r9, r3, r1
 8007656:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800765a:	1c7b      	adds	r3, r7, #1
 800765c:	444b      	add	r3, r9
 800765e:	106d      	asrs	r5, r5, #1
 8007660:	429d      	cmp	r5, r3
 8007662:	bf38      	it	cc
 8007664:	461d      	movcc	r5, r3
 8007666:	0553      	lsls	r3, r2, #21
 8007668:	d527      	bpl.n	80076ba <__ssputs_r+0x8e>
 800766a:	4629      	mov	r1, r5
 800766c:	f7fe fc2e 	bl	8005ecc <_malloc_r>
 8007670:	4606      	mov	r6, r0
 8007672:	b360      	cbz	r0, 80076ce <__ssputs_r+0xa2>
 8007674:	464a      	mov	r2, r9
 8007676:	6921      	ldr	r1, [r4, #16]
 8007678:	f7fd fd53 	bl	8005122 <memcpy>
 800767c:	89a3      	ldrh	r3, [r4, #12]
 800767e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007686:	81a3      	strh	r3, [r4, #12]
 8007688:	6126      	str	r6, [r4, #16]
 800768a:	444e      	add	r6, r9
 800768c:	6026      	str	r6, [r4, #0]
 800768e:	463e      	mov	r6, r7
 8007690:	6165      	str	r5, [r4, #20]
 8007692:	eba5 0509 	sub.w	r5, r5, r9
 8007696:	60a5      	str	r5, [r4, #8]
 8007698:	42be      	cmp	r6, r7
 800769a:	d900      	bls.n	800769e <__ssputs_r+0x72>
 800769c:	463e      	mov	r6, r7
 800769e:	4632      	mov	r2, r6
 80076a0:	4641      	mov	r1, r8
 80076a2:	6820      	ldr	r0, [r4, #0]
 80076a4:	f7fd fc95 	bl	8004fd2 <memmove>
 80076a8:	2000      	movs	r0, #0
 80076aa:	68a3      	ldr	r3, [r4, #8]
 80076ac:	1b9b      	subs	r3, r3, r6
 80076ae:	60a3      	str	r3, [r4, #8]
 80076b0:	6823      	ldr	r3, [r4, #0]
 80076b2:	4433      	add	r3, r6
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ba:	462a      	mov	r2, r5
 80076bc:	f000 ff2f 	bl	800851e <_realloc_r>
 80076c0:	4606      	mov	r6, r0
 80076c2:	2800      	cmp	r0, #0
 80076c4:	d1e0      	bne.n	8007688 <__ssputs_r+0x5c>
 80076c6:	4650      	mov	r0, sl
 80076c8:	6921      	ldr	r1, [r4, #16]
 80076ca:	f7fe fb8d 	bl	8005de8 <_free_r>
 80076ce:	230c      	movs	r3, #12
 80076d0:	f8ca 3000 	str.w	r3, [sl]
 80076d4:	89a3      	ldrh	r3, [r4, #12]
 80076d6:	f04f 30ff 	mov.w	r0, #4294967295
 80076da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076de:	81a3      	strh	r3, [r4, #12]
 80076e0:	e7e9      	b.n	80076b6 <__ssputs_r+0x8a>
	...

080076e4 <_svfiprintf_r>:
 80076e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e8:	4698      	mov	r8, r3
 80076ea:	898b      	ldrh	r3, [r1, #12]
 80076ec:	4607      	mov	r7, r0
 80076ee:	061b      	lsls	r3, r3, #24
 80076f0:	460d      	mov	r5, r1
 80076f2:	4614      	mov	r4, r2
 80076f4:	b09d      	sub	sp, #116	@ 0x74
 80076f6:	d510      	bpl.n	800771a <_svfiprintf_r+0x36>
 80076f8:	690b      	ldr	r3, [r1, #16]
 80076fa:	b973      	cbnz	r3, 800771a <_svfiprintf_r+0x36>
 80076fc:	2140      	movs	r1, #64	@ 0x40
 80076fe:	f7fe fbe5 	bl	8005ecc <_malloc_r>
 8007702:	6028      	str	r0, [r5, #0]
 8007704:	6128      	str	r0, [r5, #16]
 8007706:	b930      	cbnz	r0, 8007716 <_svfiprintf_r+0x32>
 8007708:	230c      	movs	r3, #12
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	f04f 30ff 	mov.w	r0, #4294967295
 8007710:	b01d      	add	sp, #116	@ 0x74
 8007712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007716:	2340      	movs	r3, #64	@ 0x40
 8007718:	616b      	str	r3, [r5, #20]
 800771a:	2300      	movs	r3, #0
 800771c:	9309      	str	r3, [sp, #36]	@ 0x24
 800771e:	2320      	movs	r3, #32
 8007720:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007724:	2330      	movs	r3, #48	@ 0x30
 8007726:	f04f 0901 	mov.w	r9, #1
 800772a:	f8cd 800c 	str.w	r8, [sp, #12]
 800772e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80078c8 <_svfiprintf_r+0x1e4>
 8007732:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007736:	4623      	mov	r3, r4
 8007738:	469a      	mov	sl, r3
 800773a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800773e:	b10a      	cbz	r2, 8007744 <_svfiprintf_r+0x60>
 8007740:	2a25      	cmp	r2, #37	@ 0x25
 8007742:	d1f9      	bne.n	8007738 <_svfiprintf_r+0x54>
 8007744:	ebba 0b04 	subs.w	fp, sl, r4
 8007748:	d00b      	beq.n	8007762 <_svfiprintf_r+0x7e>
 800774a:	465b      	mov	r3, fp
 800774c:	4622      	mov	r2, r4
 800774e:	4629      	mov	r1, r5
 8007750:	4638      	mov	r0, r7
 8007752:	f7ff ff6b 	bl	800762c <__ssputs_r>
 8007756:	3001      	adds	r0, #1
 8007758:	f000 80a7 	beq.w	80078aa <_svfiprintf_r+0x1c6>
 800775c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800775e:	445a      	add	r2, fp
 8007760:	9209      	str	r2, [sp, #36]	@ 0x24
 8007762:	f89a 3000 	ldrb.w	r3, [sl]
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 809f 	beq.w	80078aa <_svfiprintf_r+0x1c6>
 800776c:	2300      	movs	r3, #0
 800776e:	f04f 32ff 	mov.w	r2, #4294967295
 8007772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007776:	f10a 0a01 	add.w	sl, sl, #1
 800777a:	9304      	str	r3, [sp, #16]
 800777c:	9307      	str	r3, [sp, #28]
 800777e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007782:	931a      	str	r3, [sp, #104]	@ 0x68
 8007784:	4654      	mov	r4, sl
 8007786:	2205      	movs	r2, #5
 8007788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800778c:	484e      	ldr	r0, [pc, #312]	@ (80078c8 <_svfiprintf_r+0x1e4>)
 800778e:	f7fd fcba 	bl	8005106 <memchr>
 8007792:	9a04      	ldr	r2, [sp, #16]
 8007794:	b9d8      	cbnz	r0, 80077ce <_svfiprintf_r+0xea>
 8007796:	06d0      	lsls	r0, r2, #27
 8007798:	bf44      	itt	mi
 800779a:	2320      	movmi	r3, #32
 800779c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077a0:	0711      	lsls	r1, r2, #28
 80077a2:	bf44      	itt	mi
 80077a4:	232b      	movmi	r3, #43	@ 0x2b
 80077a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077aa:	f89a 3000 	ldrb.w	r3, [sl]
 80077ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80077b0:	d015      	beq.n	80077de <_svfiprintf_r+0xfa>
 80077b2:	4654      	mov	r4, sl
 80077b4:	2000      	movs	r0, #0
 80077b6:	f04f 0c0a 	mov.w	ip, #10
 80077ba:	9a07      	ldr	r2, [sp, #28]
 80077bc:	4621      	mov	r1, r4
 80077be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077c2:	3b30      	subs	r3, #48	@ 0x30
 80077c4:	2b09      	cmp	r3, #9
 80077c6:	d94b      	bls.n	8007860 <_svfiprintf_r+0x17c>
 80077c8:	b1b0      	cbz	r0, 80077f8 <_svfiprintf_r+0x114>
 80077ca:	9207      	str	r2, [sp, #28]
 80077cc:	e014      	b.n	80077f8 <_svfiprintf_r+0x114>
 80077ce:	eba0 0308 	sub.w	r3, r0, r8
 80077d2:	fa09 f303 	lsl.w	r3, r9, r3
 80077d6:	4313      	orrs	r3, r2
 80077d8:	46a2      	mov	sl, r4
 80077da:	9304      	str	r3, [sp, #16]
 80077dc:	e7d2      	b.n	8007784 <_svfiprintf_r+0xa0>
 80077de:	9b03      	ldr	r3, [sp, #12]
 80077e0:	1d19      	adds	r1, r3, #4
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	9103      	str	r1, [sp, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	bfbb      	ittet	lt
 80077ea:	425b      	neglt	r3, r3
 80077ec:	f042 0202 	orrlt.w	r2, r2, #2
 80077f0:	9307      	strge	r3, [sp, #28]
 80077f2:	9307      	strlt	r3, [sp, #28]
 80077f4:	bfb8      	it	lt
 80077f6:	9204      	strlt	r2, [sp, #16]
 80077f8:	7823      	ldrb	r3, [r4, #0]
 80077fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80077fc:	d10a      	bne.n	8007814 <_svfiprintf_r+0x130>
 80077fe:	7863      	ldrb	r3, [r4, #1]
 8007800:	2b2a      	cmp	r3, #42	@ 0x2a
 8007802:	d132      	bne.n	800786a <_svfiprintf_r+0x186>
 8007804:	9b03      	ldr	r3, [sp, #12]
 8007806:	3402      	adds	r4, #2
 8007808:	1d1a      	adds	r2, r3, #4
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	9203      	str	r2, [sp, #12]
 800780e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007812:	9305      	str	r3, [sp, #20]
 8007814:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80078cc <_svfiprintf_r+0x1e8>
 8007818:	2203      	movs	r2, #3
 800781a:	4650      	mov	r0, sl
 800781c:	7821      	ldrb	r1, [r4, #0]
 800781e:	f7fd fc72 	bl	8005106 <memchr>
 8007822:	b138      	cbz	r0, 8007834 <_svfiprintf_r+0x150>
 8007824:	2240      	movs	r2, #64	@ 0x40
 8007826:	9b04      	ldr	r3, [sp, #16]
 8007828:	eba0 000a 	sub.w	r0, r0, sl
 800782c:	4082      	lsls	r2, r0
 800782e:	4313      	orrs	r3, r2
 8007830:	3401      	adds	r4, #1
 8007832:	9304      	str	r3, [sp, #16]
 8007834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007838:	2206      	movs	r2, #6
 800783a:	4825      	ldr	r0, [pc, #148]	@ (80078d0 <_svfiprintf_r+0x1ec>)
 800783c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007840:	f7fd fc61 	bl	8005106 <memchr>
 8007844:	2800      	cmp	r0, #0
 8007846:	d036      	beq.n	80078b6 <_svfiprintf_r+0x1d2>
 8007848:	4b22      	ldr	r3, [pc, #136]	@ (80078d4 <_svfiprintf_r+0x1f0>)
 800784a:	bb1b      	cbnz	r3, 8007894 <_svfiprintf_r+0x1b0>
 800784c:	9b03      	ldr	r3, [sp, #12]
 800784e:	3307      	adds	r3, #7
 8007850:	f023 0307 	bic.w	r3, r3, #7
 8007854:	3308      	adds	r3, #8
 8007856:	9303      	str	r3, [sp, #12]
 8007858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800785a:	4433      	add	r3, r6
 800785c:	9309      	str	r3, [sp, #36]	@ 0x24
 800785e:	e76a      	b.n	8007736 <_svfiprintf_r+0x52>
 8007860:	460c      	mov	r4, r1
 8007862:	2001      	movs	r0, #1
 8007864:	fb0c 3202 	mla	r2, ip, r2, r3
 8007868:	e7a8      	b.n	80077bc <_svfiprintf_r+0xd8>
 800786a:	2300      	movs	r3, #0
 800786c:	f04f 0c0a 	mov.w	ip, #10
 8007870:	4619      	mov	r1, r3
 8007872:	3401      	adds	r4, #1
 8007874:	9305      	str	r3, [sp, #20]
 8007876:	4620      	mov	r0, r4
 8007878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800787c:	3a30      	subs	r2, #48	@ 0x30
 800787e:	2a09      	cmp	r2, #9
 8007880:	d903      	bls.n	800788a <_svfiprintf_r+0x1a6>
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0c6      	beq.n	8007814 <_svfiprintf_r+0x130>
 8007886:	9105      	str	r1, [sp, #20]
 8007888:	e7c4      	b.n	8007814 <_svfiprintf_r+0x130>
 800788a:	4604      	mov	r4, r0
 800788c:	2301      	movs	r3, #1
 800788e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007892:	e7f0      	b.n	8007876 <_svfiprintf_r+0x192>
 8007894:	ab03      	add	r3, sp, #12
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	462a      	mov	r2, r5
 800789a:	4638      	mov	r0, r7
 800789c:	4b0e      	ldr	r3, [pc, #56]	@ (80078d8 <_svfiprintf_r+0x1f4>)
 800789e:	a904      	add	r1, sp, #16
 80078a0:	f7fc fc92 	bl	80041c8 <_printf_float>
 80078a4:	1c42      	adds	r2, r0, #1
 80078a6:	4606      	mov	r6, r0
 80078a8:	d1d6      	bne.n	8007858 <_svfiprintf_r+0x174>
 80078aa:	89ab      	ldrh	r3, [r5, #12]
 80078ac:	065b      	lsls	r3, r3, #25
 80078ae:	f53f af2d 	bmi.w	800770c <_svfiprintf_r+0x28>
 80078b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078b4:	e72c      	b.n	8007710 <_svfiprintf_r+0x2c>
 80078b6:	ab03      	add	r3, sp, #12
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	462a      	mov	r2, r5
 80078bc:	4638      	mov	r0, r7
 80078be:	4b06      	ldr	r3, [pc, #24]	@ (80078d8 <_svfiprintf_r+0x1f4>)
 80078c0:	a904      	add	r1, sp, #16
 80078c2:	f7fc ff1f 	bl	8004704 <_printf_i>
 80078c6:	e7ed      	b.n	80078a4 <_svfiprintf_r+0x1c0>
 80078c8:	08008b91 	.word	0x08008b91
 80078cc:	08008b97 	.word	0x08008b97
 80078d0:	08008b9b 	.word	0x08008b9b
 80078d4:	080041c9 	.word	0x080041c9
 80078d8:	0800762d 	.word	0x0800762d

080078dc <__sfputc_r>:
 80078dc:	6893      	ldr	r3, [r2, #8]
 80078de:	b410      	push	{r4}
 80078e0:	3b01      	subs	r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	6093      	str	r3, [r2, #8]
 80078e6:	da07      	bge.n	80078f8 <__sfputc_r+0x1c>
 80078e8:	6994      	ldr	r4, [r2, #24]
 80078ea:	42a3      	cmp	r3, r4
 80078ec:	db01      	blt.n	80078f2 <__sfputc_r+0x16>
 80078ee:	290a      	cmp	r1, #10
 80078f0:	d102      	bne.n	80078f8 <__sfputc_r+0x1c>
 80078f2:	bc10      	pop	{r4}
 80078f4:	f000 b9da 	b.w	8007cac <__swbuf_r>
 80078f8:	6813      	ldr	r3, [r2, #0]
 80078fa:	1c58      	adds	r0, r3, #1
 80078fc:	6010      	str	r0, [r2, #0]
 80078fe:	7019      	strb	r1, [r3, #0]
 8007900:	4608      	mov	r0, r1
 8007902:	bc10      	pop	{r4}
 8007904:	4770      	bx	lr

08007906 <__sfputs_r>:
 8007906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007908:	4606      	mov	r6, r0
 800790a:	460f      	mov	r7, r1
 800790c:	4614      	mov	r4, r2
 800790e:	18d5      	adds	r5, r2, r3
 8007910:	42ac      	cmp	r4, r5
 8007912:	d101      	bne.n	8007918 <__sfputs_r+0x12>
 8007914:	2000      	movs	r0, #0
 8007916:	e007      	b.n	8007928 <__sfputs_r+0x22>
 8007918:	463a      	mov	r2, r7
 800791a:	4630      	mov	r0, r6
 800791c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007920:	f7ff ffdc 	bl	80078dc <__sfputc_r>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d1f3      	bne.n	8007910 <__sfputs_r+0xa>
 8007928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800792c <_vfiprintf_r>:
 800792c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007930:	460d      	mov	r5, r1
 8007932:	4614      	mov	r4, r2
 8007934:	4698      	mov	r8, r3
 8007936:	4606      	mov	r6, r0
 8007938:	b09d      	sub	sp, #116	@ 0x74
 800793a:	b118      	cbz	r0, 8007944 <_vfiprintf_r+0x18>
 800793c:	6a03      	ldr	r3, [r0, #32]
 800793e:	b90b      	cbnz	r3, 8007944 <_vfiprintf_r+0x18>
 8007940:	f7fd fa9c 	bl	8004e7c <__sinit>
 8007944:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007946:	07d9      	lsls	r1, r3, #31
 8007948:	d405      	bmi.n	8007956 <_vfiprintf_r+0x2a>
 800794a:	89ab      	ldrh	r3, [r5, #12]
 800794c:	059a      	lsls	r2, r3, #22
 800794e:	d402      	bmi.n	8007956 <_vfiprintf_r+0x2a>
 8007950:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007952:	f7fd fbd6 	bl	8005102 <__retarget_lock_acquire_recursive>
 8007956:	89ab      	ldrh	r3, [r5, #12]
 8007958:	071b      	lsls	r3, r3, #28
 800795a:	d501      	bpl.n	8007960 <_vfiprintf_r+0x34>
 800795c:	692b      	ldr	r3, [r5, #16]
 800795e:	b99b      	cbnz	r3, 8007988 <_vfiprintf_r+0x5c>
 8007960:	4629      	mov	r1, r5
 8007962:	4630      	mov	r0, r6
 8007964:	f000 f9e0 	bl	8007d28 <__swsetup_r>
 8007968:	b170      	cbz	r0, 8007988 <_vfiprintf_r+0x5c>
 800796a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800796c:	07dc      	lsls	r4, r3, #31
 800796e:	d504      	bpl.n	800797a <_vfiprintf_r+0x4e>
 8007970:	f04f 30ff 	mov.w	r0, #4294967295
 8007974:	b01d      	add	sp, #116	@ 0x74
 8007976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800797a:	89ab      	ldrh	r3, [r5, #12]
 800797c:	0598      	lsls	r0, r3, #22
 800797e:	d4f7      	bmi.n	8007970 <_vfiprintf_r+0x44>
 8007980:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007982:	f7fd fbbf 	bl	8005104 <__retarget_lock_release_recursive>
 8007986:	e7f3      	b.n	8007970 <_vfiprintf_r+0x44>
 8007988:	2300      	movs	r3, #0
 800798a:	9309      	str	r3, [sp, #36]	@ 0x24
 800798c:	2320      	movs	r3, #32
 800798e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007992:	2330      	movs	r3, #48	@ 0x30
 8007994:	f04f 0901 	mov.w	r9, #1
 8007998:	f8cd 800c 	str.w	r8, [sp, #12]
 800799c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007b48 <_vfiprintf_r+0x21c>
 80079a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079a4:	4623      	mov	r3, r4
 80079a6:	469a      	mov	sl, r3
 80079a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079ac:	b10a      	cbz	r2, 80079b2 <_vfiprintf_r+0x86>
 80079ae:	2a25      	cmp	r2, #37	@ 0x25
 80079b0:	d1f9      	bne.n	80079a6 <_vfiprintf_r+0x7a>
 80079b2:	ebba 0b04 	subs.w	fp, sl, r4
 80079b6:	d00b      	beq.n	80079d0 <_vfiprintf_r+0xa4>
 80079b8:	465b      	mov	r3, fp
 80079ba:	4622      	mov	r2, r4
 80079bc:	4629      	mov	r1, r5
 80079be:	4630      	mov	r0, r6
 80079c0:	f7ff ffa1 	bl	8007906 <__sfputs_r>
 80079c4:	3001      	adds	r0, #1
 80079c6:	f000 80a7 	beq.w	8007b18 <_vfiprintf_r+0x1ec>
 80079ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079cc:	445a      	add	r2, fp
 80079ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80079d0:	f89a 3000 	ldrb.w	r3, [sl]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 809f 	beq.w	8007b18 <_vfiprintf_r+0x1ec>
 80079da:	2300      	movs	r3, #0
 80079dc:	f04f 32ff 	mov.w	r2, #4294967295
 80079e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e4:	f10a 0a01 	add.w	sl, sl, #1
 80079e8:	9304      	str	r3, [sp, #16]
 80079ea:	9307      	str	r3, [sp, #28]
 80079ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80079f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80079f2:	4654      	mov	r4, sl
 80079f4:	2205      	movs	r2, #5
 80079f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079fa:	4853      	ldr	r0, [pc, #332]	@ (8007b48 <_vfiprintf_r+0x21c>)
 80079fc:	f7fd fb83 	bl	8005106 <memchr>
 8007a00:	9a04      	ldr	r2, [sp, #16]
 8007a02:	b9d8      	cbnz	r0, 8007a3c <_vfiprintf_r+0x110>
 8007a04:	06d1      	lsls	r1, r2, #27
 8007a06:	bf44      	itt	mi
 8007a08:	2320      	movmi	r3, #32
 8007a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a0e:	0713      	lsls	r3, r2, #28
 8007a10:	bf44      	itt	mi
 8007a12:	232b      	movmi	r3, #43	@ 0x2b
 8007a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a18:	f89a 3000 	ldrb.w	r3, [sl]
 8007a1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a1e:	d015      	beq.n	8007a4c <_vfiprintf_r+0x120>
 8007a20:	4654      	mov	r4, sl
 8007a22:	2000      	movs	r0, #0
 8007a24:	f04f 0c0a 	mov.w	ip, #10
 8007a28:	9a07      	ldr	r2, [sp, #28]
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a30:	3b30      	subs	r3, #48	@ 0x30
 8007a32:	2b09      	cmp	r3, #9
 8007a34:	d94b      	bls.n	8007ace <_vfiprintf_r+0x1a2>
 8007a36:	b1b0      	cbz	r0, 8007a66 <_vfiprintf_r+0x13a>
 8007a38:	9207      	str	r2, [sp, #28]
 8007a3a:	e014      	b.n	8007a66 <_vfiprintf_r+0x13a>
 8007a3c:	eba0 0308 	sub.w	r3, r0, r8
 8007a40:	fa09 f303 	lsl.w	r3, r9, r3
 8007a44:	4313      	orrs	r3, r2
 8007a46:	46a2      	mov	sl, r4
 8007a48:	9304      	str	r3, [sp, #16]
 8007a4a:	e7d2      	b.n	80079f2 <_vfiprintf_r+0xc6>
 8007a4c:	9b03      	ldr	r3, [sp, #12]
 8007a4e:	1d19      	adds	r1, r3, #4
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	9103      	str	r1, [sp, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	bfbb      	ittet	lt
 8007a58:	425b      	neglt	r3, r3
 8007a5a:	f042 0202 	orrlt.w	r2, r2, #2
 8007a5e:	9307      	strge	r3, [sp, #28]
 8007a60:	9307      	strlt	r3, [sp, #28]
 8007a62:	bfb8      	it	lt
 8007a64:	9204      	strlt	r2, [sp, #16]
 8007a66:	7823      	ldrb	r3, [r4, #0]
 8007a68:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a6a:	d10a      	bne.n	8007a82 <_vfiprintf_r+0x156>
 8007a6c:	7863      	ldrb	r3, [r4, #1]
 8007a6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a70:	d132      	bne.n	8007ad8 <_vfiprintf_r+0x1ac>
 8007a72:	9b03      	ldr	r3, [sp, #12]
 8007a74:	3402      	adds	r4, #2
 8007a76:	1d1a      	adds	r2, r3, #4
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	9203      	str	r2, [sp, #12]
 8007a7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a80:	9305      	str	r3, [sp, #20]
 8007a82:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007b4c <_vfiprintf_r+0x220>
 8007a86:	2203      	movs	r2, #3
 8007a88:	4650      	mov	r0, sl
 8007a8a:	7821      	ldrb	r1, [r4, #0]
 8007a8c:	f7fd fb3b 	bl	8005106 <memchr>
 8007a90:	b138      	cbz	r0, 8007aa2 <_vfiprintf_r+0x176>
 8007a92:	2240      	movs	r2, #64	@ 0x40
 8007a94:	9b04      	ldr	r3, [sp, #16]
 8007a96:	eba0 000a 	sub.w	r0, r0, sl
 8007a9a:	4082      	lsls	r2, r0
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	3401      	adds	r4, #1
 8007aa0:	9304      	str	r3, [sp, #16]
 8007aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa6:	2206      	movs	r2, #6
 8007aa8:	4829      	ldr	r0, [pc, #164]	@ (8007b50 <_vfiprintf_r+0x224>)
 8007aaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007aae:	f7fd fb2a 	bl	8005106 <memchr>
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	d03f      	beq.n	8007b36 <_vfiprintf_r+0x20a>
 8007ab6:	4b27      	ldr	r3, [pc, #156]	@ (8007b54 <_vfiprintf_r+0x228>)
 8007ab8:	bb1b      	cbnz	r3, 8007b02 <_vfiprintf_r+0x1d6>
 8007aba:	9b03      	ldr	r3, [sp, #12]
 8007abc:	3307      	adds	r3, #7
 8007abe:	f023 0307 	bic.w	r3, r3, #7
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	9303      	str	r3, [sp, #12]
 8007ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ac8:	443b      	add	r3, r7
 8007aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8007acc:	e76a      	b.n	80079a4 <_vfiprintf_r+0x78>
 8007ace:	460c      	mov	r4, r1
 8007ad0:	2001      	movs	r0, #1
 8007ad2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ad6:	e7a8      	b.n	8007a2a <_vfiprintf_r+0xfe>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	f04f 0c0a 	mov.w	ip, #10
 8007ade:	4619      	mov	r1, r3
 8007ae0:	3401      	adds	r4, #1
 8007ae2:	9305      	str	r3, [sp, #20]
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aea:	3a30      	subs	r2, #48	@ 0x30
 8007aec:	2a09      	cmp	r2, #9
 8007aee:	d903      	bls.n	8007af8 <_vfiprintf_r+0x1cc>
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d0c6      	beq.n	8007a82 <_vfiprintf_r+0x156>
 8007af4:	9105      	str	r1, [sp, #20]
 8007af6:	e7c4      	b.n	8007a82 <_vfiprintf_r+0x156>
 8007af8:	4604      	mov	r4, r0
 8007afa:	2301      	movs	r3, #1
 8007afc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b00:	e7f0      	b.n	8007ae4 <_vfiprintf_r+0x1b8>
 8007b02:	ab03      	add	r3, sp, #12
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	462a      	mov	r2, r5
 8007b08:	4630      	mov	r0, r6
 8007b0a:	4b13      	ldr	r3, [pc, #76]	@ (8007b58 <_vfiprintf_r+0x22c>)
 8007b0c:	a904      	add	r1, sp, #16
 8007b0e:	f7fc fb5b 	bl	80041c8 <_printf_float>
 8007b12:	4607      	mov	r7, r0
 8007b14:	1c78      	adds	r0, r7, #1
 8007b16:	d1d6      	bne.n	8007ac6 <_vfiprintf_r+0x19a>
 8007b18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b1a:	07d9      	lsls	r1, r3, #31
 8007b1c:	d405      	bmi.n	8007b2a <_vfiprintf_r+0x1fe>
 8007b1e:	89ab      	ldrh	r3, [r5, #12]
 8007b20:	059a      	lsls	r2, r3, #22
 8007b22:	d402      	bmi.n	8007b2a <_vfiprintf_r+0x1fe>
 8007b24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b26:	f7fd faed 	bl	8005104 <__retarget_lock_release_recursive>
 8007b2a:	89ab      	ldrh	r3, [r5, #12]
 8007b2c:	065b      	lsls	r3, r3, #25
 8007b2e:	f53f af1f 	bmi.w	8007970 <_vfiprintf_r+0x44>
 8007b32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b34:	e71e      	b.n	8007974 <_vfiprintf_r+0x48>
 8007b36:	ab03      	add	r3, sp, #12
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	462a      	mov	r2, r5
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	4b06      	ldr	r3, [pc, #24]	@ (8007b58 <_vfiprintf_r+0x22c>)
 8007b40:	a904      	add	r1, sp, #16
 8007b42:	f7fc fddf 	bl	8004704 <_printf_i>
 8007b46:	e7e4      	b.n	8007b12 <_vfiprintf_r+0x1e6>
 8007b48:	08008b91 	.word	0x08008b91
 8007b4c:	08008b97 	.word	0x08008b97
 8007b50:	08008b9b 	.word	0x08008b9b
 8007b54:	080041c9 	.word	0x080041c9
 8007b58:	08007907 	.word	0x08007907

08007b5c <__sflush_r>:
 8007b5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b62:	0716      	lsls	r6, r2, #28
 8007b64:	4605      	mov	r5, r0
 8007b66:	460c      	mov	r4, r1
 8007b68:	d454      	bmi.n	8007c14 <__sflush_r+0xb8>
 8007b6a:	684b      	ldr	r3, [r1, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	dc02      	bgt.n	8007b76 <__sflush_r+0x1a>
 8007b70:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	dd48      	ble.n	8007c08 <__sflush_r+0xac>
 8007b76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b78:	2e00      	cmp	r6, #0
 8007b7a:	d045      	beq.n	8007c08 <__sflush_r+0xac>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b82:	682f      	ldr	r7, [r5, #0]
 8007b84:	6a21      	ldr	r1, [r4, #32]
 8007b86:	602b      	str	r3, [r5, #0]
 8007b88:	d030      	beq.n	8007bec <__sflush_r+0x90>
 8007b8a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b8c:	89a3      	ldrh	r3, [r4, #12]
 8007b8e:	0759      	lsls	r1, r3, #29
 8007b90:	d505      	bpl.n	8007b9e <__sflush_r+0x42>
 8007b92:	6863      	ldr	r3, [r4, #4]
 8007b94:	1ad2      	subs	r2, r2, r3
 8007b96:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b98:	b10b      	cbz	r3, 8007b9e <__sflush_r+0x42>
 8007b9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b9c:	1ad2      	subs	r2, r2, r3
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ba4:	6a21      	ldr	r1, [r4, #32]
 8007ba6:	47b0      	blx	r6
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	89a3      	ldrh	r3, [r4, #12]
 8007bac:	d106      	bne.n	8007bbc <__sflush_r+0x60>
 8007bae:	6829      	ldr	r1, [r5, #0]
 8007bb0:	291d      	cmp	r1, #29
 8007bb2:	d82b      	bhi.n	8007c0c <__sflush_r+0xb0>
 8007bb4:	4a28      	ldr	r2, [pc, #160]	@ (8007c58 <__sflush_r+0xfc>)
 8007bb6:	410a      	asrs	r2, r1
 8007bb8:	07d6      	lsls	r6, r2, #31
 8007bba:	d427      	bmi.n	8007c0c <__sflush_r+0xb0>
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	6062      	str	r2, [r4, #4]
 8007bc0:	6922      	ldr	r2, [r4, #16]
 8007bc2:	04d9      	lsls	r1, r3, #19
 8007bc4:	6022      	str	r2, [r4, #0]
 8007bc6:	d504      	bpl.n	8007bd2 <__sflush_r+0x76>
 8007bc8:	1c42      	adds	r2, r0, #1
 8007bca:	d101      	bne.n	8007bd0 <__sflush_r+0x74>
 8007bcc:	682b      	ldr	r3, [r5, #0]
 8007bce:	b903      	cbnz	r3, 8007bd2 <__sflush_r+0x76>
 8007bd0:	6560      	str	r0, [r4, #84]	@ 0x54
 8007bd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bd4:	602f      	str	r7, [r5, #0]
 8007bd6:	b1b9      	cbz	r1, 8007c08 <__sflush_r+0xac>
 8007bd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bdc:	4299      	cmp	r1, r3
 8007bde:	d002      	beq.n	8007be6 <__sflush_r+0x8a>
 8007be0:	4628      	mov	r0, r5
 8007be2:	f7fe f901 	bl	8005de8 <_free_r>
 8007be6:	2300      	movs	r3, #0
 8007be8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bea:	e00d      	b.n	8007c08 <__sflush_r+0xac>
 8007bec:	2301      	movs	r3, #1
 8007bee:	4628      	mov	r0, r5
 8007bf0:	47b0      	blx	r6
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	1c50      	adds	r0, r2, #1
 8007bf6:	d1c9      	bne.n	8007b8c <__sflush_r+0x30>
 8007bf8:	682b      	ldr	r3, [r5, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d0c6      	beq.n	8007b8c <__sflush_r+0x30>
 8007bfe:	2b1d      	cmp	r3, #29
 8007c00:	d001      	beq.n	8007c06 <__sflush_r+0xaa>
 8007c02:	2b16      	cmp	r3, #22
 8007c04:	d11d      	bne.n	8007c42 <__sflush_r+0xe6>
 8007c06:	602f      	str	r7, [r5, #0]
 8007c08:	2000      	movs	r0, #0
 8007c0a:	e021      	b.n	8007c50 <__sflush_r+0xf4>
 8007c0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c10:	b21b      	sxth	r3, r3
 8007c12:	e01a      	b.n	8007c4a <__sflush_r+0xee>
 8007c14:	690f      	ldr	r7, [r1, #16]
 8007c16:	2f00      	cmp	r7, #0
 8007c18:	d0f6      	beq.n	8007c08 <__sflush_r+0xac>
 8007c1a:	0793      	lsls	r3, r2, #30
 8007c1c:	bf18      	it	ne
 8007c1e:	2300      	movne	r3, #0
 8007c20:	680e      	ldr	r6, [r1, #0]
 8007c22:	bf08      	it	eq
 8007c24:	694b      	ldreq	r3, [r1, #20]
 8007c26:	1bf6      	subs	r6, r6, r7
 8007c28:	600f      	str	r7, [r1, #0]
 8007c2a:	608b      	str	r3, [r1, #8]
 8007c2c:	2e00      	cmp	r6, #0
 8007c2e:	ddeb      	ble.n	8007c08 <__sflush_r+0xac>
 8007c30:	4633      	mov	r3, r6
 8007c32:	463a      	mov	r2, r7
 8007c34:	4628      	mov	r0, r5
 8007c36:	6a21      	ldr	r1, [r4, #32]
 8007c38:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007c3c:	47e0      	blx	ip
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	dc07      	bgt.n	8007c52 <__sflush_r+0xf6>
 8007c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4e:	81a3      	strh	r3, [r4, #12]
 8007c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c52:	4407      	add	r7, r0
 8007c54:	1a36      	subs	r6, r6, r0
 8007c56:	e7e9      	b.n	8007c2c <__sflush_r+0xd0>
 8007c58:	dfbffffe 	.word	0xdfbffffe

08007c5c <_fflush_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	690b      	ldr	r3, [r1, #16]
 8007c60:	4605      	mov	r5, r0
 8007c62:	460c      	mov	r4, r1
 8007c64:	b913      	cbnz	r3, 8007c6c <_fflush_r+0x10>
 8007c66:	2500      	movs	r5, #0
 8007c68:	4628      	mov	r0, r5
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
 8007c6c:	b118      	cbz	r0, 8007c76 <_fflush_r+0x1a>
 8007c6e:	6a03      	ldr	r3, [r0, #32]
 8007c70:	b90b      	cbnz	r3, 8007c76 <_fflush_r+0x1a>
 8007c72:	f7fd f903 	bl	8004e7c <__sinit>
 8007c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0f3      	beq.n	8007c66 <_fflush_r+0xa>
 8007c7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c80:	07d0      	lsls	r0, r2, #31
 8007c82:	d404      	bmi.n	8007c8e <_fflush_r+0x32>
 8007c84:	0599      	lsls	r1, r3, #22
 8007c86:	d402      	bmi.n	8007c8e <_fflush_r+0x32>
 8007c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c8a:	f7fd fa3a 	bl	8005102 <__retarget_lock_acquire_recursive>
 8007c8e:	4628      	mov	r0, r5
 8007c90:	4621      	mov	r1, r4
 8007c92:	f7ff ff63 	bl	8007b5c <__sflush_r>
 8007c96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c98:	4605      	mov	r5, r0
 8007c9a:	07da      	lsls	r2, r3, #31
 8007c9c:	d4e4      	bmi.n	8007c68 <_fflush_r+0xc>
 8007c9e:	89a3      	ldrh	r3, [r4, #12]
 8007ca0:	059b      	lsls	r3, r3, #22
 8007ca2:	d4e1      	bmi.n	8007c68 <_fflush_r+0xc>
 8007ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ca6:	f7fd fa2d 	bl	8005104 <__retarget_lock_release_recursive>
 8007caa:	e7dd      	b.n	8007c68 <_fflush_r+0xc>

08007cac <__swbuf_r>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	460e      	mov	r6, r1
 8007cb0:	4614      	mov	r4, r2
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	b118      	cbz	r0, 8007cbe <__swbuf_r+0x12>
 8007cb6:	6a03      	ldr	r3, [r0, #32]
 8007cb8:	b90b      	cbnz	r3, 8007cbe <__swbuf_r+0x12>
 8007cba:	f7fd f8df 	bl	8004e7c <__sinit>
 8007cbe:	69a3      	ldr	r3, [r4, #24]
 8007cc0:	60a3      	str	r3, [r4, #8]
 8007cc2:	89a3      	ldrh	r3, [r4, #12]
 8007cc4:	071a      	lsls	r2, r3, #28
 8007cc6:	d501      	bpl.n	8007ccc <__swbuf_r+0x20>
 8007cc8:	6923      	ldr	r3, [r4, #16]
 8007cca:	b943      	cbnz	r3, 8007cde <__swbuf_r+0x32>
 8007ccc:	4621      	mov	r1, r4
 8007cce:	4628      	mov	r0, r5
 8007cd0:	f000 f82a 	bl	8007d28 <__swsetup_r>
 8007cd4:	b118      	cbz	r0, 8007cde <__swbuf_r+0x32>
 8007cd6:	f04f 37ff 	mov.w	r7, #4294967295
 8007cda:	4638      	mov	r0, r7
 8007cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	6922      	ldr	r2, [r4, #16]
 8007ce2:	b2f6      	uxtb	r6, r6
 8007ce4:	1a98      	subs	r0, r3, r2
 8007ce6:	6963      	ldr	r3, [r4, #20]
 8007ce8:	4637      	mov	r7, r6
 8007cea:	4283      	cmp	r3, r0
 8007cec:	dc05      	bgt.n	8007cfa <__swbuf_r+0x4e>
 8007cee:	4621      	mov	r1, r4
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	f7ff ffb3 	bl	8007c5c <_fflush_r>
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	d1ed      	bne.n	8007cd6 <__swbuf_r+0x2a>
 8007cfa:	68a3      	ldr	r3, [r4, #8]
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	60a3      	str	r3, [r4, #8]
 8007d00:	6823      	ldr	r3, [r4, #0]
 8007d02:	1c5a      	adds	r2, r3, #1
 8007d04:	6022      	str	r2, [r4, #0]
 8007d06:	701e      	strb	r6, [r3, #0]
 8007d08:	6962      	ldr	r2, [r4, #20]
 8007d0a:	1c43      	adds	r3, r0, #1
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d004      	beq.n	8007d1a <__swbuf_r+0x6e>
 8007d10:	89a3      	ldrh	r3, [r4, #12]
 8007d12:	07db      	lsls	r3, r3, #31
 8007d14:	d5e1      	bpl.n	8007cda <__swbuf_r+0x2e>
 8007d16:	2e0a      	cmp	r6, #10
 8007d18:	d1df      	bne.n	8007cda <__swbuf_r+0x2e>
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	f7ff ff9d 	bl	8007c5c <_fflush_r>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d0d9      	beq.n	8007cda <__swbuf_r+0x2e>
 8007d26:	e7d6      	b.n	8007cd6 <__swbuf_r+0x2a>

08007d28 <__swsetup_r>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	4b29      	ldr	r3, [pc, #164]	@ (8007dd0 <__swsetup_r+0xa8>)
 8007d2c:	4605      	mov	r5, r0
 8007d2e:	6818      	ldr	r0, [r3, #0]
 8007d30:	460c      	mov	r4, r1
 8007d32:	b118      	cbz	r0, 8007d3c <__swsetup_r+0x14>
 8007d34:	6a03      	ldr	r3, [r0, #32]
 8007d36:	b90b      	cbnz	r3, 8007d3c <__swsetup_r+0x14>
 8007d38:	f7fd f8a0 	bl	8004e7c <__sinit>
 8007d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d40:	0719      	lsls	r1, r3, #28
 8007d42:	d422      	bmi.n	8007d8a <__swsetup_r+0x62>
 8007d44:	06da      	lsls	r2, r3, #27
 8007d46:	d407      	bmi.n	8007d58 <__swsetup_r+0x30>
 8007d48:	2209      	movs	r2, #9
 8007d4a:	602a      	str	r2, [r5, #0]
 8007d4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d50:	f04f 30ff 	mov.w	r0, #4294967295
 8007d54:	81a3      	strh	r3, [r4, #12]
 8007d56:	e033      	b.n	8007dc0 <__swsetup_r+0x98>
 8007d58:	0758      	lsls	r0, r3, #29
 8007d5a:	d512      	bpl.n	8007d82 <__swsetup_r+0x5a>
 8007d5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d5e:	b141      	cbz	r1, 8007d72 <__swsetup_r+0x4a>
 8007d60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d64:	4299      	cmp	r1, r3
 8007d66:	d002      	beq.n	8007d6e <__swsetup_r+0x46>
 8007d68:	4628      	mov	r0, r5
 8007d6a:	f7fe f83d 	bl	8005de8 <_free_r>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d78:	81a3      	strh	r3, [r4, #12]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	6063      	str	r3, [r4, #4]
 8007d7e:	6923      	ldr	r3, [r4, #16]
 8007d80:	6023      	str	r3, [r4, #0]
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	f043 0308 	orr.w	r3, r3, #8
 8007d88:	81a3      	strh	r3, [r4, #12]
 8007d8a:	6923      	ldr	r3, [r4, #16]
 8007d8c:	b94b      	cbnz	r3, 8007da2 <__swsetup_r+0x7a>
 8007d8e:	89a3      	ldrh	r3, [r4, #12]
 8007d90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d98:	d003      	beq.n	8007da2 <__swsetup_r+0x7a>
 8007d9a:	4621      	mov	r1, r4
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	f000 fc30 	bl	8008602 <__smakebuf_r>
 8007da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007da6:	f013 0201 	ands.w	r2, r3, #1
 8007daa:	d00a      	beq.n	8007dc2 <__swsetup_r+0x9a>
 8007dac:	2200      	movs	r2, #0
 8007dae:	60a2      	str	r2, [r4, #8]
 8007db0:	6962      	ldr	r2, [r4, #20]
 8007db2:	4252      	negs	r2, r2
 8007db4:	61a2      	str	r2, [r4, #24]
 8007db6:	6922      	ldr	r2, [r4, #16]
 8007db8:	b942      	cbnz	r2, 8007dcc <__swsetup_r+0xa4>
 8007dba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007dbe:	d1c5      	bne.n	8007d4c <__swsetup_r+0x24>
 8007dc0:	bd38      	pop	{r3, r4, r5, pc}
 8007dc2:	0799      	lsls	r1, r3, #30
 8007dc4:	bf58      	it	pl
 8007dc6:	6962      	ldrpl	r2, [r4, #20]
 8007dc8:	60a2      	str	r2, [r4, #8]
 8007dca:	e7f4      	b.n	8007db6 <__swsetup_r+0x8e>
 8007dcc:	2000      	movs	r0, #0
 8007dce:	e7f7      	b.n	8007dc0 <__swsetup_r+0x98>
 8007dd0:	20000024 	.word	0x20000024

08007dd4 <strncmp>:
 8007dd4:	b510      	push	{r4, lr}
 8007dd6:	b16a      	cbz	r2, 8007df4 <strncmp+0x20>
 8007dd8:	3901      	subs	r1, #1
 8007dda:	1884      	adds	r4, r0, r2
 8007ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007de0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d103      	bne.n	8007df0 <strncmp+0x1c>
 8007de8:	42a0      	cmp	r0, r4
 8007dea:	d001      	beq.n	8007df0 <strncmp+0x1c>
 8007dec:	2a00      	cmp	r2, #0
 8007dee:	d1f5      	bne.n	8007ddc <strncmp+0x8>
 8007df0:	1ad0      	subs	r0, r2, r3
 8007df2:	bd10      	pop	{r4, pc}
 8007df4:	4610      	mov	r0, r2
 8007df6:	e7fc      	b.n	8007df2 <strncmp+0x1e>

08007df8 <_sbrk_r>:
 8007df8:	b538      	push	{r3, r4, r5, lr}
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	4d05      	ldr	r5, [pc, #20]	@ (8007e14 <_sbrk_r+0x1c>)
 8007dfe:	4604      	mov	r4, r0
 8007e00:	4608      	mov	r0, r1
 8007e02:	602b      	str	r3, [r5, #0]
 8007e04:	f7f9 fa36 	bl	8001274 <_sbrk>
 8007e08:	1c43      	adds	r3, r0, #1
 8007e0a:	d102      	bne.n	8007e12 <_sbrk_r+0x1a>
 8007e0c:	682b      	ldr	r3, [r5, #0]
 8007e0e:	b103      	cbz	r3, 8007e12 <_sbrk_r+0x1a>
 8007e10:	6023      	str	r3, [r4, #0]
 8007e12:	bd38      	pop	{r3, r4, r5, pc}
 8007e14:	2000048c 	.word	0x2000048c

08007e18 <nan>:
 8007e18:	2000      	movs	r0, #0
 8007e1a:	4901      	ldr	r1, [pc, #4]	@ (8007e20 <nan+0x8>)
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	7ff80000 	.word	0x7ff80000

08007e24 <__assert_func>:
 8007e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e26:	4614      	mov	r4, r2
 8007e28:	461a      	mov	r2, r3
 8007e2a:	4b09      	ldr	r3, [pc, #36]	@ (8007e50 <__assert_func+0x2c>)
 8007e2c:	4605      	mov	r5, r0
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68d8      	ldr	r0, [r3, #12]
 8007e32:	b954      	cbnz	r4, 8007e4a <__assert_func+0x26>
 8007e34:	4b07      	ldr	r3, [pc, #28]	@ (8007e54 <__assert_func+0x30>)
 8007e36:	461c      	mov	r4, r3
 8007e38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e3c:	9100      	str	r1, [sp, #0]
 8007e3e:	462b      	mov	r3, r5
 8007e40:	4905      	ldr	r1, [pc, #20]	@ (8007e58 <__assert_func+0x34>)
 8007e42:	f000 fba7 	bl	8008594 <fiprintf>
 8007e46:	f000 fc3b 	bl	80086c0 <abort>
 8007e4a:	4b04      	ldr	r3, [pc, #16]	@ (8007e5c <__assert_func+0x38>)
 8007e4c:	e7f4      	b.n	8007e38 <__assert_func+0x14>
 8007e4e:	bf00      	nop
 8007e50:	20000024 	.word	0x20000024
 8007e54:	08008be5 	.word	0x08008be5
 8007e58:	08008bb7 	.word	0x08008bb7
 8007e5c:	08008baa 	.word	0x08008baa

08007e60 <_calloc_r>:
 8007e60:	b570      	push	{r4, r5, r6, lr}
 8007e62:	fba1 5402 	umull	r5, r4, r1, r2
 8007e66:	b93c      	cbnz	r4, 8007e78 <_calloc_r+0x18>
 8007e68:	4629      	mov	r1, r5
 8007e6a:	f7fe f82f 	bl	8005ecc <_malloc_r>
 8007e6e:	4606      	mov	r6, r0
 8007e70:	b928      	cbnz	r0, 8007e7e <_calloc_r+0x1e>
 8007e72:	2600      	movs	r6, #0
 8007e74:	4630      	mov	r0, r6
 8007e76:	bd70      	pop	{r4, r5, r6, pc}
 8007e78:	220c      	movs	r2, #12
 8007e7a:	6002      	str	r2, [r0, #0]
 8007e7c:	e7f9      	b.n	8007e72 <_calloc_r+0x12>
 8007e7e:	462a      	mov	r2, r5
 8007e80:	4621      	mov	r1, r4
 8007e82:	f7fd f8c0 	bl	8005006 <memset>
 8007e86:	e7f5      	b.n	8007e74 <_calloc_r+0x14>

08007e88 <rshift>:
 8007e88:	6903      	ldr	r3, [r0, #16]
 8007e8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007e92:	f100 0414 	add.w	r4, r0, #20
 8007e96:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007e9a:	dd46      	ble.n	8007f2a <rshift+0xa2>
 8007e9c:	f011 011f 	ands.w	r1, r1, #31
 8007ea0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007ea4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ea8:	d10c      	bne.n	8007ec4 <rshift+0x3c>
 8007eaa:	4629      	mov	r1, r5
 8007eac:	f100 0710 	add.w	r7, r0, #16
 8007eb0:	42b1      	cmp	r1, r6
 8007eb2:	d335      	bcc.n	8007f20 <rshift+0x98>
 8007eb4:	1a9b      	subs	r3, r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	1eea      	subs	r2, r5, #3
 8007eba:	4296      	cmp	r6, r2
 8007ebc:	bf38      	it	cc
 8007ebe:	2300      	movcc	r3, #0
 8007ec0:	4423      	add	r3, r4
 8007ec2:	e015      	b.n	8007ef0 <rshift+0x68>
 8007ec4:	46a1      	mov	r9, r4
 8007ec6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007eca:	f1c1 0820 	rsb	r8, r1, #32
 8007ece:	40cf      	lsrs	r7, r1
 8007ed0:	f105 0e04 	add.w	lr, r5, #4
 8007ed4:	4576      	cmp	r6, lr
 8007ed6:	46f4      	mov	ip, lr
 8007ed8:	d816      	bhi.n	8007f08 <rshift+0x80>
 8007eda:	1a9a      	subs	r2, r3, r2
 8007edc:	0092      	lsls	r2, r2, #2
 8007ede:	3a04      	subs	r2, #4
 8007ee0:	3501      	adds	r5, #1
 8007ee2:	42ae      	cmp	r6, r5
 8007ee4:	bf38      	it	cc
 8007ee6:	2200      	movcc	r2, #0
 8007ee8:	18a3      	adds	r3, r4, r2
 8007eea:	50a7      	str	r7, [r4, r2]
 8007eec:	b107      	cbz	r7, 8007ef0 <rshift+0x68>
 8007eee:	3304      	adds	r3, #4
 8007ef0:	42a3      	cmp	r3, r4
 8007ef2:	eba3 0204 	sub.w	r2, r3, r4
 8007ef6:	bf08      	it	eq
 8007ef8:	2300      	moveq	r3, #0
 8007efa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007efe:	6102      	str	r2, [r0, #16]
 8007f00:	bf08      	it	eq
 8007f02:	6143      	streq	r3, [r0, #20]
 8007f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f08:	f8dc c000 	ldr.w	ip, [ip]
 8007f0c:	fa0c fc08 	lsl.w	ip, ip, r8
 8007f10:	ea4c 0707 	orr.w	r7, ip, r7
 8007f14:	f849 7b04 	str.w	r7, [r9], #4
 8007f18:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f1c:	40cf      	lsrs	r7, r1
 8007f1e:	e7d9      	b.n	8007ed4 <rshift+0x4c>
 8007f20:	f851 cb04 	ldr.w	ip, [r1], #4
 8007f24:	f847 cf04 	str.w	ip, [r7, #4]!
 8007f28:	e7c2      	b.n	8007eb0 <rshift+0x28>
 8007f2a:	4623      	mov	r3, r4
 8007f2c:	e7e0      	b.n	8007ef0 <rshift+0x68>

08007f2e <__hexdig_fun>:
 8007f2e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007f32:	2b09      	cmp	r3, #9
 8007f34:	d802      	bhi.n	8007f3c <__hexdig_fun+0xe>
 8007f36:	3820      	subs	r0, #32
 8007f38:	b2c0      	uxtb	r0, r0
 8007f3a:	4770      	bx	lr
 8007f3c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007f40:	2b05      	cmp	r3, #5
 8007f42:	d801      	bhi.n	8007f48 <__hexdig_fun+0x1a>
 8007f44:	3847      	subs	r0, #71	@ 0x47
 8007f46:	e7f7      	b.n	8007f38 <__hexdig_fun+0xa>
 8007f48:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007f4c:	2b05      	cmp	r3, #5
 8007f4e:	d801      	bhi.n	8007f54 <__hexdig_fun+0x26>
 8007f50:	3827      	subs	r0, #39	@ 0x27
 8007f52:	e7f1      	b.n	8007f38 <__hexdig_fun+0xa>
 8007f54:	2000      	movs	r0, #0
 8007f56:	4770      	bx	lr

08007f58 <__gethex>:
 8007f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5c:	468a      	mov	sl, r1
 8007f5e:	4690      	mov	r8, r2
 8007f60:	b085      	sub	sp, #20
 8007f62:	9302      	str	r3, [sp, #8]
 8007f64:	680b      	ldr	r3, [r1, #0]
 8007f66:	9001      	str	r0, [sp, #4]
 8007f68:	1c9c      	adds	r4, r3, #2
 8007f6a:	46a1      	mov	r9, r4
 8007f6c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007f70:	2830      	cmp	r0, #48	@ 0x30
 8007f72:	d0fa      	beq.n	8007f6a <__gethex+0x12>
 8007f74:	eba9 0303 	sub.w	r3, r9, r3
 8007f78:	f1a3 0b02 	sub.w	fp, r3, #2
 8007f7c:	f7ff ffd7 	bl	8007f2e <__hexdig_fun>
 8007f80:	4605      	mov	r5, r0
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d168      	bne.n	8008058 <__gethex+0x100>
 8007f86:	2201      	movs	r2, #1
 8007f88:	4648      	mov	r0, r9
 8007f8a:	499f      	ldr	r1, [pc, #636]	@ (8008208 <__gethex+0x2b0>)
 8007f8c:	f7ff ff22 	bl	8007dd4 <strncmp>
 8007f90:	4607      	mov	r7, r0
 8007f92:	2800      	cmp	r0, #0
 8007f94:	d167      	bne.n	8008066 <__gethex+0x10e>
 8007f96:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007f9a:	4626      	mov	r6, r4
 8007f9c:	f7ff ffc7 	bl	8007f2e <__hexdig_fun>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d062      	beq.n	800806a <__gethex+0x112>
 8007fa4:	4623      	mov	r3, r4
 8007fa6:	7818      	ldrb	r0, [r3, #0]
 8007fa8:	4699      	mov	r9, r3
 8007faa:	2830      	cmp	r0, #48	@ 0x30
 8007fac:	f103 0301 	add.w	r3, r3, #1
 8007fb0:	d0f9      	beq.n	8007fa6 <__gethex+0x4e>
 8007fb2:	f7ff ffbc 	bl	8007f2e <__hexdig_fun>
 8007fb6:	fab0 f580 	clz	r5, r0
 8007fba:	f04f 0b01 	mov.w	fp, #1
 8007fbe:	096d      	lsrs	r5, r5, #5
 8007fc0:	464a      	mov	r2, r9
 8007fc2:	4616      	mov	r6, r2
 8007fc4:	7830      	ldrb	r0, [r6, #0]
 8007fc6:	3201      	adds	r2, #1
 8007fc8:	f7ff ffb1 	bl	8007f2e <__hexdig_fun>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d1f8      	bne.n	8007fc2 <__gethex+0x6a>
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	498c      	ldr	r1, [pc, #560]	@ (8008208 <__gethex+0x2b0>)
 8007fd6:	f7ff fefd 	bl	8007dd4 <strncmp>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	d13f      	bne.n	800805e <__gethex+0x106>
 8007fde:	b944      	cbnz	r4, 8007ff2 <__gethex+0x9a>
 8007fe0:	1c74      	adds	r4, r6, #1
 8007fe2:	4622      	mov	r2, r4
 8007fe4:	4616      	mov	r6, r2
 8007fe6:	7830      	ldrb	r0, [r6, #0]
 8007fe8:	3201      	adds	r2, #1
 8007fea:	f7ff ffa0 	bl	8007f2e <__hexdig_fun>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	d1f8      	bne.n	8007fe4 <__gethex+0x8c>
 8007ff2:	1ba4      	subs	r4, r4, r6
 8007ff4:	00a7      	lsls	r7, r4, #2
 8007ff6:	7833      	ldrb	r3, [r6, #0]
 8007ff8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007ffc:	2b50      	cmp	r3, #80	@ 0x50
 8007ffe:	d13e      	bne.n	800807e <__gethex+0x126>
 8008000:	7873      	ldrb	r3, [r6, #1]
 8008002:	2b2b      	cmp	r3, #43	@ 0x2b
 8008004:	d033      	beq.n	800806e <__gethex+0x116>
 8008006:	2b2d      	cmp	r3, #45	@ 0x2d
 8008008:	d034      	beq.n	8008074 <__gethex+0x11c>
 800800a:	2400      	movs	r4, #0
 800800c:	1c71      	adds	r1, r6, #1
 800800e:	7808      	ldrb	r0, [r1, #0]
 8008010:	f7ff ff8d 	bl	8007f2e <__hexdig_fun>
 8008014:	1e43      	subs	r3, r0, #1
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b18      	cmp	r3, #24
 800801a:	d830      	bhi.n	800807e <__gethex+0x126>
 800801c:	f1a0 0210 	sub.w	r2, r0, #16
 8008020:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008024:	f7ff ff83 	bl	8007f2e <__hexdig_fun>
 8008028:	f100 3cff 	add.w	ip, r0, #4294967295
 800802c:	fa5f fc8c 	uxtb.w	ip, ip
 8008030:	f1bc 0f18 	cmp.w	ip, #24
 8008034:	f04f 030a 	mov.w	r3, #10
 8008038:	d91e      	bls.n	8008078 <__gethex+0x120>
 800803a:	b104      	cbz	r4, 800803e <__gethex+0xe6>
 800803c:	4252      	negs	r2, r2
 800803e:	4417      	add	r7, r2
 8008040:	f8ca 1000 	str.w	r1, [sl]
 8008044:	b1ed      	cbz	r5, 8008082 <__gethex+0x12a>
 8008046:	f1bb 0f00 	cmp.w	fp, #0
 800804a:	bf0c      	ite	eq
 800804c:	2506      	moveq	r5, #6
 800804e:	2500      	movne	r5, #0
 8008050:	4628      	mov	r0, r5
 8008052:	b005      	add	sp, #20
 8008054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008058:	2500      	movs	r5, #0
 800805a:	462c      	mov	r4, r5
 800805c:	e7b0      	b.n	8007fc0 <__gethex+0x68>
 800805e:	2c00      	cmp	r4, #0
 8008060:	d1c7      	bne.n	8007ff2 <__gethex+0x9a>
 8008062:	4627      	mov	r7, r4
 8008064:	e7c7      	b.n	8007ff6 <__gethex+0x9e>
 8008066:	464e      	mov	r6, r9
 8008068:	462f      	mov	r7, r5
 800806a:	2501      	movs	r5, #1
 800806c:	e7c3      	b.n	8007ff6 <__gethex+0x9e>
 800806e:	2400      	movs	r4, #0
 8008070:	1cb1      	adds	r1, r6, #2
 8008072:	e7cc      	b.n	800800e <__gethex+0xb6>
 8008074:	2401      	movs	r4, #1
 8008076:	e7fb      	b.n	8008070 <__gethex+0x118>
 8008078:	fb03 0002 	mla	r0, r3, r2, r0
 800807c:	e7ce      	b.n	800801c <__gethex+0xc4>
 800807e:	4631      	mov	r1, r6
 8008080:	e7de      	b.n	8008040 <__gethex+0xe8>
 8008082:	4629      	mov	r1, r5
 8008084:	eba6 0309 	sub.w	r3, r6, r9
 8008088:	3b01      	subs	r3, #1
 800808a:	2b07      	cmp	r3, #7
 800808c:	dc0a      	bgt.n	80080a4 <__gethex+0x14c>
 800808e:	9801      	ldr	r0, [sp, #4]
 8008090:	f7fd ffa8 	bl	8005fe4 <_Balloc>
 8008094:	4604      	mov	r4, r0
 8008096:	b940      	cbnz	r0, 80080aa <__gethex+0x152>
 8008098:	4602      	mov	r2, r0
 800809a:	21e4      	movs	r1, #228	@ 0xe4
 800809c:	4b5b      	ldr	r3, [pc, #364]	@ (800820c <__gethex+0x2b4>)
 800809e:	485c      	ldr	r0, [pc, #368]	@ (8008210 <__gethex+0x2b8>)
 80080a0:	f7ff fec0 	bl	8007e24 <__assert_func>
 80080a4:	3101      	adds	r1, #1
 80080a6:	105b      	asrs	r3, r3, #1
 80080a8:	e7ef      	b.n	800808a <__gethex+0x132>
 80080aa:	2300      	movs	r3, #0
 80080ac:	f100 0a14 	add.w	sl, r0, #20
 80080b0:	4655      	mov	r5, sl
 80080b2:	469b      	mov	fp, r3
 80080b4:	45b1      	cmp	r9, r6
 80080b6:	d337      	bcc.n	8008128 <__gethex+0x1d0>
 80080b8:	f845 bb04 	str.w	fp, [r5], #4
 80080bc:	eba5 050a 	sub.w	r5, r5, sl
 80080c0:	10ad      	asrs	r5, r5, #2
 80080c2:	6125      	str	r5, [r4, #16]
 80080c4:	4658      	mov	r0, fp
 80080c6:	f7fe f87f 	bl	80061c8 <__hi0bits>
 80080ca:	016d      	lsls	r5, r5, #5
 80080cc:	f8d8 6000 	ldr.w	r6, [r8]
 80080d0:	1a2d      	subs	r5, r5, r0
 80080d2:	42b5      	cmp	r5, r6
 80080d4:	dd54      	ble.n	8008180 <__gethex+0x228>
 80080d6:	1bad      	subs	r5, r5, r6
 80080d8:	4629      	mov	r1, r5
 80080da:	4620      	mov	r0, r4
 80080dc:	f7fe fc07 	bl	80068ee <__any_on>
 80080e0:	4681      	mov	r9, r0
 80080e2:	b178      	cbz	r0, 8008104 <__gethex+0x1ac>
 80080e4:	f04f 0901 	mov.w	r9, #1
 80080e8:	1e6b      	subs	r3, r5, #1
 80080ea:	1159      	asrs	r1, r3, #5
 80080ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80080f0:	f003 021f 	and.w	r2, r3, #31
 80080f4:	fa09 f202 	lsl.w	r2, r9, r2
 80080f8:	420a      	tst	r2, r1
 80080fa:	d003      	beq.n	8008104 <__gethex+0x1ac>
 80080fc:	454b      	cmp	r3, r9
 80080fe:	dc36      	bgt.n	800816e <__gethex+0x216>
 8008100:	f04f 0902 	mov.w	r9, #2
 8008104:	4629      	mov	r1, r5
 8008106:	4620      	mov	r0, r4
 8008108:	f7ff febe 	bl	8007e88 <rshift>
 800810c:	442f      	add	r7, r5
 800810e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008112:	42bb      	cmp	r3, r7
 8008114:	da42      	bge.n	800819c <__gethex+0x244>
 8008116:	4621      	mov	r1, r4
 8008118:	9801      	ldr	r0, [sp, #4]
 800811a:	f7fd ffa3 	bl	8006064 <_Bfree>
 800811e:	2300      	movs	r3, #0
 8008120:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008122:	25a3      	movs	r5, #163	@ 0xa3
 8008124:	6013      	str	r3, [r2, #0]
 8008126:	e793      	b.n	8008050 <__gethex+0xf8>
 8008128:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800812c:	2a2e      	cmp	r2, #46	@ 0x2e
 800812e:	d012      	beq.n	8008156 <__gethex+0x1fe>
 8008130:	2b20      	cmp	r3, #32
 8008132:	d104      	bne.n	800813e <__gethex+0x1e6>
 8008134:	f845 bb04 	str.w	fp, [r5], #4
 8008138:	f04f 0b00 	mov.w	fp, #0
 800813c:	465b      	mov	r3, fp
 800813e:	7830      	ldrb	r0, [r6, #0]
 8008140:	9303      	str	r3, [sp, #12]
 8008142:	f7ff fef4 	bl	8007f2e <__hexdig_fun>
 8008146:	9b03      	ldr	r3, [sp, #12]
 8008148:	f000 000f 	and.w	r0, r0, #15
 800814c:	4098      	lsls	r0, r3
 800814e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008152:	3304      	adds	r3, #4
 8008154:	e7ae      	b.n	80080b4 <__gethex+0x15c>
 8008156:	45b1      	cmp	r9, r6
 8008158:	d8ea      	bhi.n	8008130 <__gethex+0x1d8>
 800815a:	2201      	movs	r2, #1
 800815c:	4630      	mov	r0, r6
 800815e:	492a      	ldr	r1, [pc, #168]	@ (8008208 <__gethex+0x2b0>)
 8008160:	9303      	str	r3, [sp, #12]
 8008162:	f7ff fe37 	bl	8007dd4 <strncmp>
 8008166:	9b03      	ldr	r3, [sp, #12]
 8008168:	2800      	cmp	r0, #0
 800816a:	d1e1      	bne.n	8008130 <__gethex+0x1d8>
 800816c:	e7a2      	b.n	80080b4 <__gethex+0x15c>
 800816e:	4620      	mov	r0, r4
 8008170:	1ea9      	subs	r1, r5, #2
 8008172:	f7fe fbbc 	bl	80068ee <__any_on>
 8008176:	2800      	cmp	r0, #0
 8008178:	d0c2      	beq.n	8008100 <__gethex+0x1a8>
 800817a:	f04f 0903 	mov.w	r9, #3
 800817e:	e7c1      	b.n	8008104 <__gethex+0x1ac>
 8008180:	da09      	bge.n	8008196 <__gethex+0x23e>
 8008182:	1b75      	subs	r5, r6, r5
 8008184:	4621      	mov	r1, r4
 8008186:	462a      	mov	r2, r5
 8008188:	9801      	ldr	r0, [sp, #4]
 800818a:	f7fe f981 	bl	8006490 <__lshift>
 800818e:	4604      	mov	r4, r0
 8008190:	1b7f      	subs	r7, r7, r5
 8008192:	f100 0a14 	add.w	sl, r0, #20
 8008196:	f04f 0900 	mov.w	r9, #0
 800819a:	e7b8      	b.n	800810e <__gethex+0x1b6>
 800819c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80081a0:	42bd      	cmp	r5, r7
 80081a2:	dd6f      	ble.n	8008284 <__gethex+0x32c>
 80081a4:	1bed      	subs	r5, r5, r7
 80081a6:	42ae      	cmp	r6, r5
 80081a8:	dc34      	bgt.n	8008214 <__gethex+0x2bc>
 80081aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d022      	beq.n	80081f8 <__gethex+0x2a0>
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d024      	beq.n	8008200 <__gethex+0x2a8>
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d115      	bne.n	80081e6 <__gethex+0x28e>
 80081ba:	42ae      	cmp	r6, r5
 80081bc:	d113      	bne.n	80081e6 <__gethex+0x28e>
 80081be:	2e01      	cmp	r6, #1
 80081c0:	d10b      	bne.n	80081da <__gethex+0x282>
 80081c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80081c6:	9a02      	ldr	r2, [sp, #8]
 80081c8:	2562      	movs	r5, #98	@ 0x62
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	2301      	movs	r3, #1
 80081ce:	6123      	str	r3, [r4, #16]
 80081d0:	f8ca 3000 	str.w	r3, [sl]
 80081d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081d6:	601c      	str	r4, [r3, #0]
 80081d8:	e73a      	b.n	8008050 <__gethex+0xf8>
 80081da:	4620      	mov	r0, r4
 80081dc:	1e71      	subs	r1, r6, #1
 80081de:	f7fe fb86 	bl	80068ee <__any_on>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d1ed      	bne.n	80081c2 <__gethex+0x26a>
 80081e6:	4621      	mov	r1, r4
 80081e8:	9801      	ldr	r0, [sp, #4]
 80081ea:	f7fd ff3b 	bl	8006064 <_Bfree>
 80081ee:	2300      	movs	r3, #0
 80081f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081f2:	2550      	movs	r5, #80	@ 0x50
 80081f4:	6013      	str	r3, [r2, #0]
 80081f6:	e72b      	b.n	8008050 <__gethex+0xf8>
 80081f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1f3      	bne.n	80081e6 <__gethex+0x28e>
 80081fe:	e7e0      	b.n	80081c2 <__gethex+0x26a>
 8008200:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1dd      	bne.n	80081c2 <__gethex+0x26a>
 8008206:	e7ee      	b.n	80081e6 <__gethex+0x28e>
 8008208:	08008a38 	.word	0x08008a38
 800820c:	080088cb 	.word	0x080088cb
 8008210:	08008be6 	.word	0x08008be6
 8008214:	1e6f      	subs	r7, r5, #1
 8008216:	f1b9 0f00 	cmp.w	r9, #0
 800821a:	d130      	bne.n	800827e <__gethex+0x326>
 800821c:	b127      	cbz	r7, 8008228 <__gethex+0x2d0>
 800821e:	4639      	mov	r1, r7
 8008220:	4620      	mov	r0, r4
 8008222:	f7fe fb64 	bl	80068ee <__any_on>
 8008226:	4681      	mov	r9, r0
 8008228:	2301      	movs	r3, #1
 800822a:	4629      	mov	r1, r5
 800822c:	1b76      	subs	r6, r6, r5
 800822e:	2502      	movs	r5, #2
 8008230:	117a      	asrs	r2, r7, #5
 8008232:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008236:	f007 071f 	and.w	r7, r7, #31
 800823a:	40bb      	lsls	r3, r7
 800823c:	4213      	tst	r3, r2
 800823e:	4620      	mov	r0, r4
 8008240:	bf18      	it	ne
 8008242:	f049 0902 	orrne.w	r9, r9, #2
 8008246:	f7ff fe1f 	bl	8007e88 <rshift>
 800824a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800824e:	f1b9 0f00 	cmp.w	r9, #0
 8008252:	d047      	beq.n	80082e4 <__gethex+0x38c>
 8008254:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008258:	2b02      	cmp	r3, #2
 800825a:	d015      	beq.n	8008288 <__gethex+0x330>
 800825c:	2b03      	cmp	r3, #3
 800825e:	d017      	beq.n	8008290 <__gethex+0x338>
 8008260:	2b01      	cmp	r3, #1
 8008262:	d109      	bne.n	8008278 <__gethex+0x320>
 8008264:	f019 0f02 	tst.w	r9, #2
 8008268:	d006      	beq.n	8008278 <__gethex+0x320>
 800826a:	f8da 3000 	ldr.w	r3, [sl]
 800826e:	ea49 0903 	orr.w	r9, r9, r3
 8008272:	f019 0f01 	tst.w	r9, #1
 8008276:	d10e      	bne.n	8008296 <__gethex+0x33e>
 8008278:	f045 0510 	orr.w	r5, r5, #16
 800827c:	e032      	b.n	80082e4 <__gethex+0x38c>
 800827e:	f04f 0901 	mov.w	r9, #1
 8008282:	e7d1      	b.n	8008228 <__gethex+0x2d0>
 8008284:	2501      	movs	r5, #1
 8008286:	e7e2      	b.n	800824e <__gethex+0x2f6>
 8008288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800828a:	f1c3 0301 	rsb	r3, r3, #1
 800828e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008292:	2b00      	cmp	r3, #0
 8008294:	d0f0      	beq.n	8008278 <__gethex+0x320>
 8008296:	f04f 0c00 	mov.w	ip, #0
 800829a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800829e:	f104 0314 	add.w	r3, r4, #20
 80082a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80082a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80082aa:	4618      	mov	r0, r3
 80082ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80082b0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80082b4:	d01b      	beq.n	80082ee <__gethex+0x396>
 80082b6:	3201      	adds	r2, #1
 80082b8:	6002      	str	r2, [r0, #0]
 80082ba:	2d02      	cmp	r5, #2
 80082bc:	f104 0314 	add.w	r3, r4, #20
 80082c0:	d13c      	bne.n	800833c <__gethex+0x3e4>
 80082c2:	f8d8 2000 	ldr.w	r2, [r8]
 80082c6:	3a01      	subs	r2, #1
 80082c8:	42b2      	cmp	r2, r6
 80082ca:	d109      	bne.n	80082e0 <__gethex+0x388>
 80082cc:	2201      	movs	r2, #1
 80082ce:	1171      	asrs	r1, r6, #5
 80082d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80082d4:	f006 061f 	and.w	r6, r6, #31
 80082d8:	fa02 f606 	lsl.w	r6, r2, r6
 80082dc:	421e      	tst	r6, r3
 80082de:	d13a      	bne.n	8008356 <__gethex+0x3fe>
 80082e0:	f045 0520 	orr.w	r5, r5, #32
 80082e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082e6:	601c      	str	r4, [r3, #0]
 80082e8:	9b02      	ldr	r3, [sp, #8]
 80082ea:	601f      	str	r7, [r3, #0]
 80082ec:	e6b0      	b.n	8008050 <__gethex+0xf8>
 80082ee:	4299      	cmp	r1, r3
 80082f0:	f843 cc04 	str.w	ip, [r3, #-4]
 80082f4:	d8d9      	bhi.n	80082aa <__gethex+0x352>
 80082f6:	68a3      	ldr	r3, [r4, #8]
 80082f8:	459b      	cmp	fp, r3
 80082fa:	db17      	blt.n	800832c <__gethex+0x3d4>
 80082fc:	6861      	ldr	r1, [r4, #4]
 80082fe:	9801      	ldr	r0, [sp, #4]
 8008300:	3101      	adds	r1, #1
 8008302:	f7fd fe6f 	bl	8005fe4 <_Balloc>
 8008306:	4681      	mov	r9, r0
 8008308:	b918      	cbnz	r0, 8008312 <__gethex+0x3ba>
 800830a:	4602      	mov	r2, r0
 800830c:	2184      	movs	r1, #132	@ 0x84
 800830e:	4b19      	ldr	r3, [pc, #100]	@ (8008374 <__gethex+0x41c>)
 8008310:	e6c5      	b.n	800809e <__gethex+0x146>
 8008312:	6922      	ldr	r2, [r4, #16]
 8008314:	f104 010c 	add.w	r1, r4, #12
 8008318:	3202      	adds	r2, #2
 800831a:	0092      	lsls	r2, r2, #2
 800831c:	300c      	adds	r0, #12
 800831e:	f7fc ff00 	bl	8005122 <memcpy>
 8008322:	4621      	mov	r1, r4
 8008324:	9801      	ldr	r0, [sp, #4]
 8008326:	f7fd fe9d 	bl	8006064 <_Bfree>
 800832a:	464c      	mov	r4, r9
 800832c:	6923      	ldr	r3, [r4, #16]
 800832e:	1c5a      	adds	r2, r3, #1
 8008330:	6122      	str	r2, [r4, #16]
 8008332:	2201      	movs	r2, #1
 8008334:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008338:	615a      	str	r2, [r3, #20]
 800833a:	e7be      	b.n	80082ba <__gethex+0x362>
 800833c:	6922      	ldr	r2, [r4, #16]
 800833e:	455a      	cmp	r2, fp
 8008340:	dd0b      	ble.n	800835a <__gethex+0x402>
 8008342:	2101      	movs	r1, #1
 8008344:	4620      	mov	r0, r4
 8008346:	f7ff fd9f 	bl	8007e88 <rshift>
 800834a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800834e:	3701      	adds	r7, #1
 8008350:	42bb      	cmp	r3, r7
 8008352:	f6ff aee0 	blt.w	8008116 <__gethex+0x1be>
 8008356:	2501      	movs	r5, #1
 8008358:	e7c2      	b.n	80082e0 <__gethex+0x388>
 800835a:	f016 061f 	ands.w	r6, r6, #31
 800835e:	d0fa      	beq.n	8008356 <__gethex+0x3fe>
 8008360:	4453      	add	r3, sl
 8008362:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008366:	f7fd ff2f 	bl	80061c8 <__hi0bits>
 800836a:	f1c6 0620 	rsb	r6, r6, #32
 800836e:	42b0      	cmp	r0, r6
 8008370:	dbe7      	blt.n	8008342 <__gethex+0x3ea>
 8008372:	e7f0      	b.n	8008356 <__gethex+0x3fe>
 8008374:	080088cb 	.word	0x080088cb

08008378 <L_shift>:
 8008378:	f1c2 0208 	rsb	r2, r2, #8
 800837c:	0092      	lsls	r2, r2, #2
 800837e:	b570      	push	{r4, r5, r6, lr}
 8008380:	f1c2 0620 	rsb	r6, r2, #32
 8008384:	6843      	ldr	r3, [r0, #4]
 8008386:	6804      	ldr	r4, [r0, #0]
 8008388:	fa03 f506 	lsl.w	r5, r3, r6
 800838c:	432c      	orrs	r4, r5
 800838e:	40d3      	lsrs	r3, r2
 8008390:	6004      	str	r4, [r0, #0]
 8008392:	f840 3f04 	str.w	r3, [r0, #4]!
 8008396:	4288      	cmp	r0, r1
 8008398:	d3f4      	bcc.n	8008384 <L_shift+0xc>
 800839a:	bd70      	pop	{r4, r5, r6, pc}

0800839c <__match>:
 800839c:	b530      	push	{r4, r5, lr}
 800839e:	6803      	ldr	r3, [r0, #0]
 80083a0:	3301      	adds	r3, #1
 80083a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083a6:	b914      	cbnz	r4, 80083ae <__match+0x12>
 80083a8:	6003      	str	r3, [r0, #0]
 80083aa:	2001      	movs	r0, #1
 80083ac:	bd30      	pop	{r4, r5, pc}
 80083ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083b2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80083b6:	2d19      	cmp	r5, #25
 80083b8:	bf98      	it	ls
 80083ba:	3220      	addls	r2, #32
 80083bc:	42a2      	cmp	r2, r4
 80083be:	d0f0      	beq.n	80083a2 <__match+0x6>
 80083c0:	2000      	movs	r0, #0
 80083c2:	e7f3      	b.n	80083ac <__match+0x10>

080083c4 <__hexnan>:
 80083c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c8:	2500      	movs	r5, #0
 80083ca:	680b      	ldr	r3, [r1, #0]
 80083cc:	4682      	mov	sl, r0
 80083ce:	115e      	asrs	r6, r3, #5
 80083d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80083d4:	f013 031f 	ands.w	r3, r3, #31
 80083d8:	bf18      	it	ne
 80083da:	3604      	addne	r6, #4
 80083dc:	1f37      	subs	r7, r6, #4
 80083de:	4690      	mov	r8, r2
 80083e0:	46b9      	mov	r9, r7
 80083e2:	463c      	mov	r4, r7
 80083e4:	46ab      	mov	fp, r5
 80083e6:	b087      	sub	sp, #28
 80083e8:	6801      	ldr	r1, [r0, #0]
 80083ea:	9301      	str	r3, [sp, #4]
 80083ec:	f846 5c04 	str.w	r5, [r6, #-4]
 80083f0:	9502      	str	r5, [sp, #8]
 80083f2:	784a      	ldrb	r2, [r1, #1]
 80083f4:	1c4b      	adds	r3, r1, #1
 80083f6:	9303      	str	r3, [sp, #12]
 80083f8:	b342      	cbz	r2, 800844c <__hexnan+0x88>
 80083fa:	4610      	mov	r0, r2
 80083fc:	9105      	str	r1, [sp, #20]
 80083fe:	9204      	str	r2, [sp, #16]
 8008400:	f7ff fd95 	bl	8007f2e <__hexdig_fun>
 8008404:	2800      	cmp	r0, #0
 8008406:	d151      	bne.n	80084ac <__hexnan+0xe8>
 8008408:	9a04      	ldr	r2, [sp, #16]
 800840a:	9905      	ldr	r1, [sp, #20]
 800840c:	2a20      	cmp	r2, #32
 800840e:	d818      	bhi.n	8008442 <__hexnan+0x7e>
 8008410:	9b02      	ldr	r3, [sp, #8]
 8008412:	459b      	cmp	fp, r3
 8008414:	dd13      	ble.n	800843e <__hexnan+0x7a>
 8008416:	454c      	cmp	r4, r9
 8008418:	d206      	bcs.n	8008428 <__hexnan+0x64>
 800841a:	2d07      	cmp	r5, #7
 800841c:	dc04      	bgt.n	8008428 <__hexnan+0x64>
 800841e:	462a      	mov	r2, r5
 8008420:	4649      	mov	r1, r9
 8008422:	4620      	mov	r0, r4
 8008424:	f7ff ffa8 	bl	8008378 <L_shift>
 8008428:	4544      	cmp	r4, r8
 800842a:	d952      	bls.n	80084d2 <__hexnan+0x10e>
 800842c:	2300      	movs	r3, #0
 800842e:	f1a4 0904 	sub.w	r9, r4, #4
 8008432:	f844 3c04 	str.w	r3, [r4, #-4]
 8008436:	461d      	mov	r5, r3
 8008438:	464c      	mov	r4, r9
 800843a:	f8cd b008 	str.w	fp, [sp, #8]
 800843e:	9903      	ldr	r1, [sp, #12]
 8008440:	e7d7      	b.n	80083f2 <__hexnan+0x2e>
 8008442:	2a29      	cmp	r2, #41	@ 0x29
 8008444:	d157      	bne.n	80084f6 <__hexnan+0x132>
 8008446:	3102      	adds	r1, #2
 8008448:	f8ca 1000 	str.w	r1, [sl]
 800844c:	f1bb 0f00 	cmp.w	fp, #0
 8008450:	d051      	beq.n	80084f6 <__hexnan+0x132>
 8008452:	454c      	cmp	r4, r9
 8008454:	d206      	bcs.n	8008464 <__hexnan+0xa0>
 8008456:	2d07      	cmp	r5, #7
 8008458:	dc04      	bgt.n	8008464 <__hexnan+0xa0>
 800845a:	462a      	mov	r2, r5
 800845c:	4649      	mov	r1, r9
 800845e:	4620      	mov	r0, r4
 8008460:	f7ff ff8a 	bl	8008378 <L_shift>
 8008464:	4544      	cmp	r4, r8
 8008466:	d936      	bls.n	80084d6 <__hexnan+0x112>
 8008468:	4623      	mov	r3, r4
 800846a:	f1a8 0204 	sub.w	r2, r8, #4
 800846e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008472:	429f      	cmp	r7, r3
 8008474:	f842 1f04 	str.w	r1, [r2, #4]!
 8008478:	d2f9      	bcs.n	800846e <__hexnan+0xaa>
 800847a:	1b3b      	subs	r3, r7, r4
 800847c:	f023 0303 	bic.w	r3, r3, #3
 8008480:	3304      	adds	r3, #4
 8008482:	3401      	adds	r4, #1
 8008484:	3e03      	subs	r6, #3
 8008486:	42b4      	cmp	r4, r6
 8008488:	bf88      	it	hi
 800848a:	2304      	movhi	r3, #4
 800848c:	2200      	movs	r2, #0
 800848e:	4443      	add	r3, r8
 8008490:	f843 2b04 	str.w	r2, [r3], #4
 8008494:	429f      	cmp	r7, r3
 8008496:	d2fb      	bcs.n	8008490 <__hexnan+0xcc>
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	b91b      	cbnz	r3, 80084a4 <__hexnan+0xe0>
 800849c:	4547      	cmp	r7, r8
 800849e:	d128      	bne.n	80084f2 <__hexnan+0x12e>
 80084a0:	2301      	movs	r3, #1
 80084a2:	603b      	str	r3, [r7, #0]
 80084a4:	2005      	movs	r0, #5
 80084a6:	b007      	add	sp, #28
 80084a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ac:	3501      	adds	r5, #1
 80084ae:	2d08      	cmp	r5, #8
 80084b0:	f10b 0b01 	add.w	fp, fp, #1
 80084b4:	dd06      	ble.n	80084c4 <__hexnan+0x100>
 80084b6:	4544      	cmp	r4, r8
 80084b8:	d9c1      	bls.n	800843e <__hexnan+0x7a>
 80084ba:	2300      	movs	r3, #0
 80084bc:	2501      	movs	r5, #1
 80084be:	f844 3c04 	str.w	r3, [r4, #-4]
 80084c2:	3c04      	subs	r4, #4
 80084c4:	6822      	ldr	r2, [r4, #0]
 80084c6:	f000 000f 	and.w	r0, r0, #15
 80084ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80084ce:	6020      	str	r0, [r4, #0]
 80084d0:	e7b5      	b.n	800843e <__hexnan+0x7a>
 80084d2:	2508      	movs	r5, #8
 80084d4:	e7b3      	b.n	800843e <__hexnan+0x7a>
 80084d6:	9b01      	ldr	r3, [sp, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d0dd      	beq.n	8008498 <__hexnan+0xd4>
 80084dc:	f04f 32ff 	mov.w	r2, #4294967295
 80084e0:	f1c3 0320 	rsb	r3, r3, #32
 80084e4:	40da      	lsrs	r2, r3
 80084e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80084ea:	4013      	ands	r3, r2
 80084ec:	f846 3c04 	str.w	r3, [r6, #-4]
 80084f0:	e7d2      	b.n	8008498 <__hexnan+0xd4>
 80084f2:	3f04      	subs	r7, #4
 80084f4:	e7d0      	b.n	8008498 <__hexnan+0xd4>
 80084f6:	2004      	movs	r0, #4
 80084f8:	e7d5      	b.n	80084a6 <__hexnan+0xe2>

080084fa <__ascii_mbtowc>:
 80084fa:	b082      	sub	sp, #8
 80084fc:	b901      	cbnz	r1, 8008500 <__ascii_mbtowc+0x6>
 80084fe:	a901      	add	r1, sp, #4
 8008500:	b142      	cbz	r2, 8008514 <__ascii_mbtowc+0x1a>
 8008502:	b14b      	cbz	r3, 8008518 <__ascii_mbtowc+0x1e>
 8008504:	7813      	ldrb	r3, [r2, #0]
 8008506:	600b      	str	r3, [r1, #0]
 8008508:	7812      	ldrb	r2, [r2, #0]
 800850a:	1e10      	subs	r0, r2, #0
 800850c:	bf18      	it	ne
 800850e:	2001      	movne	r0, #1
 8008510:	b002      	add	sp, #8
 8008512:	4770      	bx	lr
 8008514:	4610      	mov	r0, r2
 8008516:	e7fb      	b.n	8008510 <__ascii_mbtowc+0x16>
 8008518:	f06f 0001 	mvn.w	r0, #1
 800851c:	e7f8      	b.n	8008510 <__ascii_mbtowc+0x16>

0800851e <_realloc_r>:
 800851e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008522:	4680      	mov	r8, r0
 8008524:	4615      	mov	r5, r2
 8008526:	460c      	mov	r4, r1
 8008528:	b921      	cbnz	r1, 8008534 <_realloc_r+0x16>
 800852a:	4611      	mov	r1, r2
 800852c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008530:	f7fd bccc 	b.w	8005ecc <_malloc_r>
 8008534:	b92a      	cbnz	r2, 8008542 <_realloc_r+0x24>
 8008536:	f7fd fc57 	bl	8005de8 <_free_r>
 800853a:	2400      	movs	r4, #0
 800853c:	4620      	mov	r0, r4
 800853e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008542:	f000 f8c4 	bl	80086ce <_malloc_usable_size_r>
 8008546:	4285      	cmp	r5, r0
 8008548:	4606      	mov	r6, r0
 800854a:	d802      	bhi.n	8008552 <_realloc_r+0x34>
 800854c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008550:	d8f4      	bhi.n	800853c <_realloc_r+0x1e>
 8008552:	4629      	mov	r1, r5
 8008554:	4640      	mov	r0, r8
 8008556:	f7fd fcb9 	bl	8005ecc <_malloc_r>
 800855a:	4607      	mov	r7, r0
 800855c:	2800      	cmp	r0, #0
 800855e:	d0ec      	beq.n	800853a <_realloc_r+0x1c>
 8008560:	42b5      	cmp	r5, r6
 8008562:	462a      	mov	r2, r5
 8008564:	4621      	mov	r1, r4
 8008566:	bf28      	it	cs
 8008568:	4632      	movcs	r2, r6
 800856a:	f7fc fdda 	bl	8005122 <memcpy>
 800856e:	4621      	mov	r1, r4
 8008570:	4640      	mov	r0, r8
 8008572:	f7fd fc39 	bl	8005de8 <_free_r>
 8008576:	463c      	mov	r4, r7
 8008578:	e7e0      	b.n	800853c <_realloc_r+0x1e>

0800857a <__ascii_wctomb>:
 800857a:	4603      	mov	r3, r0
 800857c:	4608      	mov	r0, r1
 800857e:	b141      	cbz	r1, 8008592 <__ascii_wctomb+0x18>
 8008580:	2aff      	cmp	r2, #255	@ 0xff
 8008582:	d904      	bls.n	800858e <__ascii_wctomb+0x14>
 8008584:	228a      	movs	r2, #138	@ 0x8a
 8008586:	f04f 30ff 	mov.w	r0, #4294967295
 800858a:	601a      	str	r2, [r3, #0]
 800858c:	4770      	bx	lr
 800858e:	2001      	movs	r0, #1
 8008590:	700a      	strb	r2, [r1, #0]
 8008592:	4770      	bx	lr

08008594 <fiprintf>:
 8008594:	b40e      	push	{r1, r2, r3}
 8008596:	b503      	push	{r0, r1, lr}
 8008598:	4601      	mov	r1, r0
 800859a:	ab03      	add	r3, sp, #12
 800859c:	4805      	ldr	r0, [pc, #20]	@ (80085b4 <fiprintf+0x20>)
 800859e:	f853 2b04 	ldr.w	r2, [r3], #4
 80085a2:	6800      	ldr	r0, [r0, #0]
 80085a4:	9301      	str	r3, [sp, #4]
 80085a6:	f7ff f9c1 	bl	800792c <_vfiprintf_r>
 80085aa:	b002      	add	sp, #8
 80085ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80085b0:	b003      	add	sp, #12
 80085b2:	4770      	bx	lr
 80085b4:	20000024 	.word	0x20000024

080085b8 <__swhatbuf_r>:
 80085b8:	b570      	push	{r4, r5, r6, lr}
 80085ba:	460c      	mov	r4, r1
 80085bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c0:	4615      	mov	r5, r2
 80085c2:	2900      	cmp	r1, #0
 80085c4:	461e      	mov	r6, r3
 80085c6:	b096      	sub	sp, #88	@ 0x58
 80085c8:	da0c      	bge.n	80085e4 <__swhatbuf_r+0x2c>
 80085ca:	89a3      	ldrh	r3, [r4, #12]
 80085cc:	2100      	movs	r1, #0
 80085ce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80085d2:	bf14      	ite	ne
 80085d4:	2340      	movne	r3, #64	@ 0x40
 80085d6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80085da:	2000      	movs	r0, #0
 80085dc:	6031      	str	r1, [r6, #0]
 80085de:	602b      	str	r3, [r5, #0]
 80085e0:	b016      	add	sp, #88	@ 0x58
 80085e2:	bd70      	pop	{r4, r5, r6, pc}
 80085e4:	466a      	mov	r2, sp
 80085e6:	f000 f849 	bl	800867c <_fstat_r>
 80085ea:	2800      	cmp	r0, #0
 80085ec:	dbed      	blt.n	80085ca <__swhatbuf_r+0x12>
 80085ee:	9901      	ldr	r1, [sp, #4]
 80085f0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80085f4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085f8:	4259      	negs	r1, r3
 80085fa:	4159      	adcs	r1, r3
 80085fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008600:	e7eb      	b.n	80085da <__swhatbuf_r+0x22>

08008602 <__smakebuf_r>:
 8008602:	898b      	ldrh	r3, [r1, #12]
 8008604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008606:	079d      	lsls	r5, r3, #30
 8008608:	4606      	mov	r6, r0
 800860a:	460c      	mov	r4, r1
 800860c:	d507      	bpl.n	800861e <__smakebuf_r+0x1c>
 800860e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008612:	6023      	str	r3, [r4, #0]
 8008614:	6123      	str	r3, [r4, #16]
 8008616:	2301      	movs	r3, #1
 8008618:	6163      	str	r3, [r4, #20]
 800861a:	b003      	add	sp, #12
 800861c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800861e:	466a      	mov	r2, sp
 8008620:	ab01      	add	r3, sp, #4
 8008622:	f7ff ffc9 	bl	80085b8 <__swhatbuf_r>
 8008626:	9f00      	ldr	r7, [sp, #0]
 8008628:	4605      	mov	r5, r0
 800862a:	4639      	mov	r1, r7
 800862c:	4630      	mov	r0, r6
 800862e:	f7fd fc4d 	bl	8005ecc <_malloc_r>
 8008632:	b948      	cbnz	r0, 8008648 <__smakebuf_r+0x46>
 8008634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008638:	059a      	lsls	r2, r3, #22
 800863a:	d4ee      	bmi.n	800861a <__smakebuf_r+0x18>
 800863c:	f023 0303 	bic.w	r3, r3, #3
 8008640:	f043 0302 	orr.w	r3, r3, #2
 8008644:	81a3      	strh	r3, [r4, #12]
 8008646:	e7e2      	b.n	800860e <__smakebuf_r+0xc>
 8008648:	89a3      	ldrh	r3, [r4, #12]
 800864a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800864e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008652:	81a3      	strh	r3, [r4, #12]
 8008654:	9b01      	ldr	r3, [sp, #4]
 8008656:	6020      	str	r0, [r4, #0]
 8008658:	b15b      	cbz	r3, 8008672 <__smakebuf_r+0x70>
 800865a:	4630      	mov	r0, r6
 800865c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008660:	f000 f81e 	bl	80086a0 <_isatty_r>
 8008664:	b128      	cbz	r0, 8008672 <__smakebuf_r+0x70>
 8008666:	89a3      	ldrh	r3, [r4, #12]
 8008668:	f023 0303 	bic.w	r3, r3, #3
 800866c:	f043 0301 	orr.w	r3, r3, #1
 8008670:	81a3      	strh	r3, [r4, #12]
 8008672:	89a3      	ldrh	r3, [r4, #12]
 8008674:	431d      	orrs	r5, r3
 8008676:	81a5      	strh	r5, [r4, #12]
 8008678:	e7cf      	b.n	800861a <__smakebuf_r+0x18>
	...

0800867c <_fstat_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	2300      	movs	r3, #0
 8008680:	4d06      	ldr	r5, [pc, #24]	@ (800869c <_fstat_r+0x20>)
 8008682:	4604      	mov	r4, r0
 8008684:	4608      	mov	r0, r1
 8008686:	4611      	mov	r1, r2
 8008688:	602b      	str	r3, [r5, #0]
 800868a:	f7f8 fdcd 	bl	8001228 <_fstat>
 800868e:	1c43      	adds	r3, r0, #1
 8008690:	d102      	bne.n	8008698 <_fstat_r+0x1c>
 8008692:	682b      	ldr	r3, [r5, #0]
 8008694:	b103      	cbz	r3, 8008698 <_fstat_r+0x1c>
 8008696:	6023      	str	r3, [r4, #0]
 8008698:	bd38      	pop	{r3, r4, r5, pc}
 800869a:	bf00      	nop
 800869c:	2000048c 	.word	0x2000048c

080086a0 <_isatty_r>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	2300      	movs	r3, #0
 80086a4:	4d05      	ldr	r5, [pc, #20]	@ (80086bc <_isatty_r+0x1c>)
 80086a6:	4604      	mov	r4, r0
 80086a8:	4608      	mov	r0, r1
 80086aa:	602b      	str	r3, [r5, #0]
 80086ac:	f7f8 fdcb 	bl	8001246 <_isatty>
 80086b0:	1c43      	adds	r3, r0, #1
 80086b2:	d102      	bne.n	80086ba <_isatty_r+0x1a>
 80086b4:	682b      	ldr	r3, [r5, #0]
 80086b6:	b103      	cbz	r3, 80086ba <_isatty_r+0x1a>
 80086b8:	6023      	str	r3, [r4, #0]
 80086ba:	bd38      	pop	{r3, r4, r5, pc}
 80086bc:	2000048c 	.word	0x2000048c

080086c0 <abort>:
 80086c0:	2006      	movs	r0, #6
 80086c2:	b508      	push	{r3, lr}
 80086c4:	f000 f834 	bl	8008730 <raise>
 80086c8:	2001      	movs	r0, #1
 80086ca:	f7f8 fd5e 	bl	800118a <_exit>

080086ce <_malloc_usable_size_r>:
 80086ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086d2:	1f18      	subs	r0, r3, #4
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	bfbc      	itt	lt
 80086d8:	580b      	ldrlt	r3, [r1, r0]
 80086da:	18c0      	addlt	r0, r0, r3
 80086dc:	4770      	bx	lr

080086de <_raise_r>:
 80086de:	291f      	cmp	r1, #31
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	4605      	mov	r5, r0
 80086e4:	460c      	mov	r4, r1
 80086e6:	d904      	bls.n	80086f2 <_raise_r+0x14>
 80086e8:	2316      	movs	r3, #22
 80086ea:	6003      	str	r3, [r0, #0]
 80086ec:	f04f 30ff 	mov.w	r0, #4294967295
 80086f0:	bd38      	pop	{r3, r4, r5, pc}
 80086f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80086f4:	b112      	cbz	r2, 80086fc <_raise_r+0x1e>
 80086f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086fa:	b94b      	cbnz	r3, 8008710 <_raise_r+0x32>
 80086fc:	4628      	mov	r0, r5
 80086fe:	f000 f831 	bl	8008764 <_getpid_r>
 8008702:	4622      	mov	r2, r4
 8008704:	4601      	mov	r1, r0
 8008706:	4628      	mov	r0, r5
 8008708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800870c:	f000 b818 	b.w	8008740 <_kill_r>
 8008710:	2b01      	cmp	r3, #1
 8008712:	d00a      	beq.n	800872a <_raise_r+0x4c>
 8008714:	1c59      	adds	r1, r3, #1
 8008716:	d103      	bne.n	8008720 <_raise_r+0x42>
 8008718:	2316      	movs	r3, #22
 800871a:	6003      	str	r3, [r0, #0]
 800871c:	2001      	movs	r0, #1
 800871e:	e7e7      	b.n	80086f0 <_raise_r+0x12>
 8008720:	2100      	movs	r1, #0
 8008722:	4620      	mov	r0, r4
 8008724:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008728:	4798      	blx	r3
 800872a:	2000      	movs	r0, #0
 800872c:	e7e0      	b.n	80086f0 <_raise_r+0x12>
	...

08008730 <raise>:
 8008730:	4b02      	ldr	r3, [pc, #8]	@ (800873c <raise+0xc>)
 8008732:	4601      	mov	r1, r0
 8008734:	6818      	ldr	r0, [r3, #0]
 8008736:	f7ff bfd2 	b.w	80086de <_raise_r>
 800873a:	bf00      	nop
 800873c:	20000024 	.word	0x20000024

08008740 <_kill_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	2300      	movs	r3, #0
 8008744:	4d06      	ldr	r5, [pc, #24]	@ (8008760 <_kill_r+0x20>)
 8008746:	4604      	mov	r4, r0
 8008748:	4608      	mov	r0, r1
 800874a:	4611      	mov	r1, r2
 800874c:	602b      	str	r3, [r5, #0]
 800874e:	f7f8 fd0c 	bl	800116a <_kill>
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	d102      	bne.n	800875c <_kill_r+0x1c>
 8008756:	682b      	ldr	r3, [r5, #0]
 8008758:	b103      	cbz	r3, 800875c <_kill_r+0x1c>
 800875a:	6023      	str	r3, [r4, #0]
 800875c:	bd38      	pop	{r3, r4, r5, pc}
 800875e:	bf00      	nop
 8008760:	2000048c 	.word	0x2000048c

08008764 <_getpid_r>:
 8008764:	f7f8 bcfa 	b.w	800115c <_getpid>

08008768 <_init>:
 8008768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876a:	bf00      	nop
 800876c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800876e:	bc08      	pop	{r3}
 8008770:	469e      	mov	lr, r3
 8008772:	4770      	bx	lr

08008774 <_fini>:
 8008774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008776:	bf00      	nop
 8008778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800877a:	bc08      	pop	{r3}
 800877c:	469e      	mov	lr, r3
 800877e:	4770      	bx	lr
